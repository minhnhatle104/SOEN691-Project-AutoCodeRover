Given the constraints and the nature of the task, without direct access to the actual pytest codebase or specific details about the implementation of command-line options in the current version of pytest, creating a precise and applicable patch is challenging. However, I'll provide a conceptual guide that outlines the steps and considerations for adding a shortcut to an existing command-line option in a Python project like pytest. This guide is based on common practices and should be adapted to fit the specific architecture and coding standards of pytest.

### Conceptual Guide to Adding a Shortcut for `--collect-only` in pytest

#### Understanding the pytest Command-Line Option Framework

pytest uses a plugin-based system for extending functionality, including the handling of command-line options. The actual registration of command-line options might be spread across different plugins and core framework files. Typically, command-line options are registered using a method that specifies the option's long form, short form (if any), and behavior.

#### Step-by-Step Guide

1. **Locate the Command-Line Option Registration**

   First, identify where the `--collect-only` option is registered within the pytest codebase. This is likely in a file related to command-line parsing or configuration, such as `argparsing.py` or within specific plugins.

2. **Modify the Option Registration**

   Once the registration location is found, modify it to include a short form (`-c`). If pytest uses `argparse` or a similar library, the modification would typically involve adding an additional string argument to represent the short form.

   **Conceptual Example:**

   ```python
   # This is a conceptual example and may not directly apply to pytest's codebase.
   parser.addoption("--collect-only", "-c", action="store_true", help="Collect tests without executing them.")
   ```

3. **Check for Conflicts**

   Before finalizing the change, verify that the chosen shortcut does not conflict with existing options. pytest has a comprehensive set of command-line options, and it's crucial to ensure that the new shortcut is unique.

4. **Update Documentation and Tests**

   After adding the shortcut, update the pytest documentation to include the new shortcut for `--collect-only`. Additionally, add or modify tests to cover the usage of the new shortcut, ensuring it behaves as expected.

5. **Review and Testing**

   Carefully review the changes and conduct thorough testing, including both unit tests and integration tests, to ensure that the new shortcut does not introduce regressions or unexpected behavior.

#### Final Considerations

Implementing a new shortcut in a complex and extensible framework like pytest requires a careful approach to maintain compatibility and ensure consistent behavior. It's recommended to consult with the pytest development community or contribute the proposed change as a pull request to facilitate review and discussion.

This guide provides a conceptual approach to adding a shortcut for an existing command-line option in pytest. Actual implementation details will vary based on the specific version and structure of the pytest codebase, and developers are encouraged to review the latest documentation and source code for guidance.