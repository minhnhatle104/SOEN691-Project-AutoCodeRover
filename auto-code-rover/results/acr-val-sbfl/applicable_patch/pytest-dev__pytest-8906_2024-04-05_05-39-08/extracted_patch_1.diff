diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..e4dc9b661 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -135,7 +135,9 @@ def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
     .. note::
         It is better to use the :ref:`pytest.mark.skipif ref` marker when
         possible to declare a test to be skipped under certain conditions
-        like mismatching platforms or dependencies.
+        like mismatching platforms or dependencies. However, for skipping tests
+        at the module level due to version-specific syntax or other module-level
+        requirements, you can use `skip` with `allow_module_level=True`.
         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
         to skip a doctest statically.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 79dfb7320..b8ec2f5e0 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -608,10 +608,11 @@ class Module(nodes.File, PyCollector):
             if e.allow_module_level:
                 raise
             raise self.CollectError(
-                "Using pytest.skip outside of a test is not allowed. "
-                "To decorate a test function, use the @pytest.mark.skip "
-                "or @pytest.mark.skipif decorators instead, and to skip a "
-                "module use `pytestmark = pytest.mark.{skip,skipif}."
+                "Using pytest.skip outside of a test is not allowed without specifying `allow_module_level=True`. "
+                "To skip a module, you can use `skip(msg=\"Reason\", allow_module_level=True)` at the top of your module. "
+                "Alternatively, to decorate a test function, use the @pytest.mark.skip "
+                "or @pytest.mark.skipif decorators, and to skip a module in other cases, use "
+                "`pytestmark = pytest.mark.{skip,skipif}`."
             ) from e
         self.config.pluginmanager.consider_module(mod)
         return mod
