diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py
index 6e504a3057..bca12ae7de 100644
--- a/sympy/polys/polyoptions.py
+++ b/sympy/polys/polyoptions.py
@@ -451,16 +451,22 @@ def preprocess(cls, domain):
                 return sympy.polys.domains.FF(int(r.groups()[1]))
 
             r = cls._re_polynomial.match(domain)
-
+            
             if r is not None:
                 ground, gens = r.groups()
-
+            
                 gens = list(map(sympify, gens.split(',')))
-
+            
                 if ground in ['Z', 'ZZ']:
                     return sympy.polys.domains.ZZ.poly_ring(*gens)
-                else:
+                elif ground in ['Q', 'QQ']:
                     return sympy.polys.domains.QQ.poly_ring(*gens)
+                elif ground == 'RR':
+                    return sympy.polys.domains.RR.poly_ring(*gens)
+                elif ground == 'CC':
+                    return sympy.polys.domains.CC.poly_ring(*gens)
+                else:
+                    raise OptionError('Unsupported ground domain for polynomial ring: {}'.format(ground))
 
             r = cls._re_fraction.match(domain)
 
@@ -480,7 +486,8 @@ def preprocess(cls, domain):
                 gens = list(map(sympify, r.groups()[1].split(',')))
                 return sympy.polys.domains.QQ.algebraic_field(*gens)
 
-        raise OptionError('expected a valid domain specification, got %s' % domain)
+        raise OptionError('expected a valid domain specification, got \'{}\''.format(domain) + 
+            '. Note: For polynomial rings, use syntax like \'ZZ[x]\' or \'QQ[x,y]\'. For real and complex fields with variables, ensure correct domain specification.')
 
     @classmethod
     def postprocess(cls, options):
