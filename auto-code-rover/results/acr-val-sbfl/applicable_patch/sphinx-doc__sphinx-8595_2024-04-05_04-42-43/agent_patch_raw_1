# modification 1
```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>if want_all:
            if not self.__all__:
                # for implicit module members, check __module__ to avoid
                # documenting imported objects
                return True, list(members.values())
            else:
                for member in members.values():
                    if member.__name__ not in self.__all__:
                        member.skipped = True

                return False, list(members.values())</original>
<patched>if want_all:
            if self.__all__ is not None:
                # Explicitly defined __all__ should always be respected, even if empty
                for member in members.values():
                    if member.__name__ not in self.__all__:
                        member.skipped = True
                return False, list(members.values())
            else:
                # for implicit module members, check __module__ to avoid
                # documenting imported objects
                return True, list(members.values())</patched>
```

This modification ensures that an explicitly defined `__all__` attribute, even if it's an empty list, is respected according to the user's expectation. The original logic only checked for the presence of `__all__` and treated its absence and an empty list similarly. The patched version distinguishes between `None` (not defined) and an empty list (defined but empty), applying the filtering accordingly.