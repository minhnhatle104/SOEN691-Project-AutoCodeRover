[
    [
        "conftest.py",
        "",
        "pytest_runtest_setup",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "__init__",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_get_neg",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_get_tokenizer",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_from_mathematica_to_tokens",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_is_op",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_from_tokens_to_fullformlist",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_util_remove_newlines",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_util_add_missing_asterisks",
        1.0
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_parse_after_braces",
        1.0
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "",
        "free_group",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "",
        "xfree_group",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "",
        "vfree_group",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "",
        "_parse_symbols",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "_generators",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "clone",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__contains__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__len__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "index",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "order",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "elements",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "is_abelian",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "identity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "contains",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroup",
        "center",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "new",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "copy",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "is_identity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "array_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "letter_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "index",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "letter_form_elm",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "ext_rep",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__contains__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__pow__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__truediv__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__rtruediv__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "inverse",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "order",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "commutator",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "eliminate_words",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "eliminate_word",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__len__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__le__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__gt__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "__ge__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "exponent_sum",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "generator_count",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "subword",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "subword_index",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "is_dependent",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "is_independent",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "contains_generators",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "cyclic_subword",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "cyclic_conjugates",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "is_cyclic_conjugate",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "number_syllables",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "exponent_syllable",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "generator_syllable",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "sub_syllables",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "substituted_word",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "is_cyclically_reduced",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "identity_cyclic_reduction",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "cyclic_reduction",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "FreeGroupElement",
        "power_of",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "",
        "letter_form_to_array_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/free_groups.py",
        "",
        "zero_mul_simp",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/generators.py",
        "",
        "symmetric",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/generators.py",
        "",
        "cyclic",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/generators.py",
        "",
        "alternating",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/generators.py",
        "",
        "dihedral",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/generators.py",
        "",
        "rubik_cube_generators",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/generators.py",
        "",
        "rubik",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "next",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "selections",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "n",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "generate_gray",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "skip",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "current",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "GrayCode",
        "unrank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "",
        "random_bitstring",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "",
        "gray_to_bin",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "",
        "bin_to_gray",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "",
        "get_subset_from_bitstring",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/graycode.py",
        "",
        "graycode_subsets",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/group_constructs.py",
        "",
        "DirectProduct",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/named_groups.py",
        "",
        "AbelianGroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/named_groups.py",
        "",
        "AlternatingGroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/named_groups.py",
        "",
        "CyclicGroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/named_groups.py",
        "",
        "DihedralGroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/named_groups.py",
        "",
        "SymmetricGroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/named_groups.py",
        "",
        "RubikGroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "sort_key",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "partition",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "__le__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "RGS",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "Partition",
        "from_rgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "prev_lex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "next_lex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "as_dict",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "conjugate",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "__le__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "as_ferrers",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "IntegerPartition",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "",
        "random_integer_partition",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "",
        "RGS_generalized",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "",
        "RGS_enum",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "",
        "RGS_unrank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/partitions.py",
        "",
        "RGS_rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "PolycyclicGroup",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "PolycyclicGroup",
        "is_prime_order",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "PolycyclicGroup",
        "length",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "minimal_uncollected_subword",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "relations",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "subword_index",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "map_relation",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "collected_word",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "pc_relators",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "exponent_vector",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "depth",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "leading_exponent",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "_sift",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "induced_pcgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/pc_groups.py",
        "Collector",
        "constructive_membership_test",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "__contains__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "__len__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "equals",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_random_pr_init",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_union_find_merge",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_union_find_rep",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "base",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "baseswap",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "basic_orbits",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "basic_stabilizers",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "basic_transversals",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "composition_series",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "coset_transversal",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_coset_representative",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "coset_table",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "center",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "centralizer",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "commutator",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "coset_factor",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "generator_product",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "coset_rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "coset_unrank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "degree",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "identity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "elements",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_elements",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "derived_series",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "derived_subgroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "generate",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "generate_dimino",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "generate_schreier_sims",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "generators",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "contains",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_perfect",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_abelian",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "abelian_invariants",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_elementary",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_eval_is_alt_sym_naive",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_eval_is_alt_sym_monte_carlo",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_alt_sym",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_nilpotent",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_normal",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_primitive",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "minimal_blocks",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_solvable",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_subgroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_polycyclic",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_transitive",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_trivial",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "lower_central_series",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "max_div",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "minimal_block",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "conjugacy_class",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "conjugacy_classes",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "normal_closure",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "orbit",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "orbit_rep",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "orbit_transversal",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "orbits",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "order",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "index",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_symmetric",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_alternating",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_distinct_primes_lemma",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "is_cyclic",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "pointwise_stabilizer",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "make_perm",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "random",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "random_pr",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "random_stab",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "schreier_sims",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_schreier_sims",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "schreier_sims_incremental",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "schreier_sims_random",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "schreier_vector",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "stabilizer",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "strong_gens",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "subgroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "subgroup_search",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "transitivity_degree",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_p_elements_group",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_sylow_alt_sym",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "sylow_subgroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_block_verify",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "_verify",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "strong_presentation",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "presentation",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "PermutationGroup",
        "polycyclic_group",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "",
        "_orbit",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "",
        "_orbits",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "",
        "_orbit_transversal",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "",
        "_stabilizer",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "SymmetricPermutationGroup",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "SymmetricPermutationGroup",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "SymmetricPermutationGroup",
        "__contains__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "SymmetricPermutationGroup",
        "order",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "SymmetricPermutationGroup",
        "degree",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "SymmetricPermutationGroup",
        "identity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "Coset",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "Coset",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "Coset",
        "is_left_coset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "Coset",
        "is_right_coset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/perm_groups.py",
        "Coset",
        "as_list",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_af_rmul",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_af_rmuln",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_af_parity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_af_invert",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_af_pow",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_af_commutes_with",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "__missing__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "list",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "__repr__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "size",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Cycle",
        "copy",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "_af_new",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "_hashable_content",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "array_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "list",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "cyclic_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "full_cyclic_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "size",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "support",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "rmul",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "rmul_with_af",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "mul_inv",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__rmul__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "commutes_with",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__pow__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__rxor__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__xor__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "transpositions",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "from_sequence",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__invert__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__repr__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "atoms",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "apply",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "next_lex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "unrank_nonlex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "rank_nonlex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "next_nonlex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "cardinality",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "parity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "is_even",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "is_odd",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "is_Singleton",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "is_Empty",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "is_identity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "is_Identity",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "ascents",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "descents",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "max",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "min",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "inversions",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "commutator",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "signature",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "order",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "length",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "cycle_structure",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "cycles",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "index",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "runs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "inversion_vector",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "rank_trotterjohnson",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "unrank_trotterjohnson",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "next_trotterjohnson",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "get_precedence_matrix",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "get_precedence_distance",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "get_adjacency_matrix",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "get_adjacency_distance",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "get_positional_distance",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "josephus",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "from_inversion_vector",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "random",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "unrank_lex",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "Permutation",
        "resize",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_merge",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "AppliedPermutation",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/permutations.py",
        "",
        "_eval_is_eq",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "corners",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "array_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "cyclic_form",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "size",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "faces",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "pgroup",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "edges",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "rotate",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "Polyhedron",
        "reset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/polyhedron.py",
        "",
        "_pgroup_calcs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "prufer_repr",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "tree_repr",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "nodes",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "size",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "to_prufer",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "to_tree",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "edges",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "prufer_rank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "unrank",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "next",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/prufer.py",
        "Prufer",
        "prev",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "iterate_binary",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "next_binary",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "prev_binary",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "next_lexicographic",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "prev_lexicographic",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "iterate_graycode",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "next_gray",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "prev_gray",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "rank_binary",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "rank_lexicographic",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "rank_gray",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "subset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "size",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "superset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "superset_size",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "cardinality",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "subset_from_bitlist",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "bitlist_from_subset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "unrank_binary",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "unrank_gray",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "Subset",
        "subset_indices",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/subsets.py",
        "",
        "ksubsets",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "dummy_sgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_min_dummies",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_trace_S",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_trace_D",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_dumx_remove",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "transversal2coset",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "double_coset_can_rep",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "canonical_free",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_get_map_slots",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_lift_sgens",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "canonicalize",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "perm_af_direct_product",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "bsgs_direct_product",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "get_symmetric_group_sgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "get_transversals",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "_is_minimal_bsgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "get_minimal_bsgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "tensor_gens",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/tensor_can.py",
        "",
        "gens_products",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_base_ordering",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_check_cycles_alt_sym",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_distribute_gens_by_base",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_handle_precomputed_bsgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_orbits_transversals_from_bsgs",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_remove_gens",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_strip",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_strip_af",
        0.7071067811865475
    ],
    [
        "sympy/combinatorics/util.py",
        "",
        "_strong_gens_from_distr",
        0.7071067811865475
    ],
    [
        "sympy/conftest.py",
        "",
        "file_clear_cache",
        0.7071067811865475
    ],
    [
        "sympy/conftest.py",
        "",
        "check_disabled",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "",
        "_could_extract_minus_sign",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "",
        "_addsort",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "flatten",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "could_extract_minus_sign",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "as_coeff_Add",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_power",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_infinite",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_imaginary",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_zero",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_odd",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_irrational",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_extended_positive",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_extended_nonnegative",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_extended_nonpositive",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "_eval_is_extended_negative",
        0.7071067811865475
    ],
    [
        "sympy/core/add.py",
        "Add",
        "primitive",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "StdFactKB",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "StdFactKB",
        "copy",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "StdFactKB",
        "generator",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "",
        "as_property",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "",
        "make_property",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "",
        "_ask",
        0.7071067811865475
    ],
    [
        "sympy/core/assumptions.py",
        "ManagedProperties",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "_hashable_content",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "compare",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "class_key",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "sort_key",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "__ne__",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "as_dummy",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "func",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "args",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "_sorted_args",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "has",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "_has",
        0.7071067811865475
    ],
    [
        "sympy/core/basic.py",
        "Basic",
        "_exec_constructor_postprocessors",
        0.7071067811865475
    ],
    [
        "sympy/core/cache.py",
        "_cache",
        "clear_cache",
        0.7071067811865475
    ],
    [
        "sympy/core/cache.py",
        "",
        "__cacheit",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__len__",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/containers.py",
        "Tuple",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/core.py",
        "BasicMeta",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/core/core.py",
        "BasicMeta",
        "__cmp__",
        0.7071067811865475
    ],
    [
        "sympy/core/core.py",
        "BasicMeta",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/core/core.py",
        "BasicMeta",
        "__gt__",
        0.7071067811865475
    ],
    [
        "sympy/core/decorators.py",
        "",
        "_sympifyit",
        0.7071067811865475
    ],
    [
        "sympy/core/decorators.py",
        "",
        "__sympifyit",
        0.7071067811865475
    ],
    [
        "sympy/core/decorators.py",
        "",
        "call_highest_priority",
        0.7071067811865475
    ],
    [
        "sympy/core/decorators.py",
        "_SympifyWrapper",
        "make_wrapped",
        0.7071067811865475
    ],
    [
        "sympy/core/evalf.py",
        "",
        "pure_complex",
        0.7071067811865475
    ],
    [
        "sympy/core/evalf.py",
        "",
        "evalf_integer",
        0.7071067811865475
    ],
    [
        "sympy/core/evalf.py",
        "",
        "evalf",
        0.7071067811865475
    ],
    [
        "sympy/core/evalf.py",
        "EvalfMixin",
        "evalf",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "_hashable_content",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "_pow",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "__pow__",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "__truediv__",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "is_number",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "_eval_is_extended_positive_negative",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "_eval_is_extended_positive",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "_eval_is_extended_negative",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "_eval_power",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "as_coefficient",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "as_base_exp",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "extract_multiplicatively",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "could_extract_minus_sign",
        0.7071067811865475
    ],
    [
        "sympy/core/expr.py",
        "Expr",
        "as_coeff_Mul",
        0.7071067811865475
    ],
    [
        "sympy/core/exprtools.py",
        "",
        "_monotonic_sign",
        0.7071067811865475
    ],
    [
        "sympy/core/facts.py",
        "FactKB",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/core/facts.py",
        "FactKB",
        "_tell",
        0.7071067811865475
    ],
    [
        "sympy/core/facts.py",
        "FactKB",
        "deduce_all_facts",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "",
        "arity",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "FunctionClass",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "FunctionClass",
        "nargs",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "FunctionClass",
        "_valid_nargs",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Application",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Application",
        "func",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Function",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Function",
        "_should_evalf",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Function",
        "class_key",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Function",
        "_eval_is_commutative",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "Function",
        "as_base_exp",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "UndefinedFunction",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/function.py",
        "UndefinedFunction",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/logic.py",
        "",
        "_fuzzy_group",
        0.7071067811865475
    ],
    [
        "sympy/core/logic.py",
        "",
        "fuzzy_bool",
        0.7071067811865475
    ],
    [
        "sympy/core/logic.py",
        "",
        "fuzzy_and",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "",
        "_mulsort",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "could_extract_minus_sign",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "flatten",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "as_coeff_mul",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "as_coeff_Mul",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_complex",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_finite",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_infinite",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_rational",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_algebraic",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_zero",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_integer",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_extended_real",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_real_imag",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_imaginary",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_hermitian",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_antihermitian",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_herm_antiherm",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_irrational",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_extended_positive",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_pos_neg",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_extended_negative",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_odd",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_even",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "Mul",
        "_eval_is_composite",
        0.7071067811865475
    ],
    [
        "sympy/core/mul.py",
        "",
        "_keep_coeff",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "",
        "mpf_norm",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "",
        "_decimal_to_Rational_prec",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "",
        "_literal_float",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "",
        "igcd",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "",
        "ilcm",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "could_extract_minus_sign",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "_eval_evalf",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "class_key",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "sort_key",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "__truediv__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Number",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Float",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Float",
        "_new",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Float",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Float",
        "_Frel",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Float",
        "__gt__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Float",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "_hashable_content",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "_eval_is_positive",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "_eval_is_zero",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "__truediv__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "_as_mpf_val",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "as_numer_denom",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Rational",
        "as_coeff_Mul",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "_as_mpf_val",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__abs__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__divmod__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__rmul__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__mod__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__ne__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__gt__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "_eval_is_odd",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Integer",
        "_eval_power",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Zero",
        "__bool__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "One",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "NegativeOne",
        "__abs__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "NegativeOne",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Infinity",
        "__hash__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "Infinity",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "NegativeInfinity",
        "__eq__",
        0.7071067811865475
    ],
    [
        "sympy/core/numbers.py",
        "ImaginaryUnit",
        "_eval_power",
        0.7071067811865475
    ],
    [
        "sympy/core/operations.py",
        "AssocOp",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/operations.py",
        "AssocOp",
        "_from_args",
        0.7071067811865475
    ],
    [
        "sympy/core/operations.py",
        "AssocOp",
        "_new_rawargs",
        0.7071067811865475
    ],
    [
        "sympy/core/operations.py",
        "AssocOp",
        "make_args",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "base",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "exp",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_even",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_negative",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_extended_positive",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_extended_negative",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_zero",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_integer",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_extended_real",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_complex",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_imaginary",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_odd",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_finite",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_prime",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_composite",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "as_base_exp",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_rational",
        0.7071067811865475
    ],
    [
        "sympy/core/power.py",
        "Pow",
        "_eval_is_algebraic",
        0.7071067811865475
    ],
    [
        "sympy/core/sorting.py",
        "",
        "default_sort_key",
        0.7071067811865475
    ],
    [
        "sympy/core/sorting.py",
        "",
        "_node_count",
        0.7071067811865475
    ],
    [
        "sympy/core/sorting.py",
        "",
        "_nodes",
        0.7071067811865475
    ],
    [
        "sympy/core/sorting.py",
        "",
        "ordered",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "",
        "_filter_assumptions",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "Symbol",
        "_sanitize",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "Symbol",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "Symbol",
        "__xnew__",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "Symbol",
        "__xnew_cached_",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "Symbol",
        "_hashable_content",
        0.7071067811865475
    ],
    [
        "sympy/core/symbol.py",
        "Symbol",
        "assumptions0",
        0.7071067811865475
    ],
    [
        "sympy/core/sympify.py",
        "",
        "_is_numpy_instance",
        0.7071067811865475
    ],
    [
        "sympy/core/sympify.py",
        "",
        "sympify",
        0.7071067811865475
    ],
    [
        "sympy/core/sympify.py",
        "",
        "_sympify",
        0.7071067811865475
    ],
    [
        "sympy/core/traversal.py",
        "",
        "iterargs",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/exponential.py",
        "ExpMeta",
        "__instancecheck__",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "",
        "_imaginary_unit_as_coefficient",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "",
        "_pi_coeff",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "sin",
        "eval",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "asin",
        "_eval_is_rational",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "asin",
        "_eval_is_positive",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "asin",
        "_eval_is_negative",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "asin",
        "eval",
        0.7071067811865475
    ],
    [
        "sympy/functions/elementary/trigonometric.py",
        "asin",
        "_eval_is_extended_real",
        0.7071067811865475
    ],
    [
        "sympy/logic/boolalg.py",
        "BooleanTrue",
        "__bool__",
        0.7071067811865475
    ],
    [
        "sympy/logic/boolalg.py",
        "BooleanFalse",
        "__bool__",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/conflict.py",
        "",
        "supercedes",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/conflict.py",
        "",
        "consistent",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/conflict.py",
        "",
        "ambiguous",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/conflict.py",
        "",
        "ambiguities",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/conflict.py",
        "",
        "edge",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/conflict.py",
        "",
        "ordering",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/core.py",
        "",
        "dispatch",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/core.py",
        "",
        "ismethod",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/dispatcher.py",
        "Dispatcher",
        "add",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/dispatcher.py",
        "Dispatcher",
        "reorder",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/utils.py",
        "",
        "_toposort",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/utils.py",
        "",
        "reverse_dict",
        0.7071067811865475
    ],
    [
        "sympy/multipledispatch/utils.py",
        "",
        "groupby",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "",
        "parse_mathematica",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "parse",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_get_inv",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_is_valid_star1",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_is_valid_star2",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_check_op_compatible",
        0.7071067811865475
    ],
    [
        "sympy/parsing/mathematica.py",
        "MathematicaParser",
        "_from_fullformlist_to_sympy",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "auto_symbol",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "lambda_notation",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "factorial_notation",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "convert_xor",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "repeated_decimals",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "auto_number",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "stringify_expr",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "eval_expr",
        0.7071067811865475
    ],
    [
        "sympy/parsing/sympy_parser.py",
        "",
        "parse_expr",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "_latex",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__radd__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__rmul__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__rsub__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__pow__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__rpow__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__truediv__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "__rtruediv__",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "SetExpr",
        "_eval_func",
        0.7071067811865475
    ],
    [
        "sympy/sets/setexpr.py",
        "",
        "_setexpr_apply_operation",
        0.7071067811865475
    ],
    [
        "sympy/sets/sets.py",
        "Set",
        "_infimum_key",
        0.7071067811865475
    ],
    [
        "sympy/sets/sets.py",
        "FiniteSet",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/sets/sets.py",
        "FiniteSet",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/simplify/radsimp.py",
        "",
        "fraction",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "deprecate_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "deprecate_fun_eval",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "deprecate_call",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "from_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "from_components_free_dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_free_dum_from_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "generate_indices_from_free_dum_index_types",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_get_generator_for_dummy_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_replace_dummy_names",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "__repr__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_get_sorted_free_indices_for_canon",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_get_sorted_dum_indices_for_canon",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_get_lexicographically_sorted_index_types",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "_get_lexicographically_sorted_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "perm2tensor",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_IndexStructure",
        "indices_canon_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "components_canon_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "_get",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "data_contract_dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "data_tensorhead_from_tensmul",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "data_from_tensor",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "_assign_data_to_tensor_expr",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "_check_permutations_on_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "__setitem__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "__delitem__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "__contains__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "add_metric_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "_flip_index_by_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "inverse_matrix",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "inverse_transpose_matrix",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "_correct_signature_from_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "_sort_data_axes",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "add_rearrange_tensmul_parts",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorDataLazyEvaluator",
        "parse_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "__init__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "_comm_init",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "comm",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "comm_symbols2i",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "comm_i2symbol",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "set_comm",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "set_comms",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "get_comm",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "_TensorManager",
        "clear",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "name",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "dummy_name",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "dim",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "eps_dim",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "delta",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "epsilon",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "set_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "get_kronecker_delta",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "get_epsilon",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndexType",
        "_components_data_full_destroy",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "name",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "tensor_index_type",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "is_up",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "_print",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorIndex",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "tensor_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "base",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "generators",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "fully_symmetric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "direct_product",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "riemann",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorSymmetry",
        "no_symmetry",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "tensorsymmetry",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorType",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorType",
        "index_types",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorType",
        "symmetry",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorType",
        "types",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorType",
        "__str__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorType",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "tensorhead",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "name",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "index_types",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "symmetry",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "__lt__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "commutes_with",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "_print",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "__pow__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorHead",
        "_components_data_full_destroy",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "tensor_heads",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__abs__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__add__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__radd__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__sub__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__rsub__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__mul__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__rmul__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__truediv__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__rtruediv__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__pow__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "__rpow__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "nocoeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "coeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_replace_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "fun_eval",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "get_matrix",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_get_indices_permutation",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "expand",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_expand",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_get_free_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_get_dummy_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_get_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_iterate_dummy_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_iterate_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_iterate_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_contract_and_permute_with_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_match_indices_with_other_tensor",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "replace_with_arrays",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_check_add_Sum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensExpr",
        "_expand_partial_derivative",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "coeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "nocoeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_replace_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "free_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "doit",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_tensAdd_flatten",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_tensAdd_check",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_tensAdd_collect_terms",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_expand",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "canon_bp",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "equals",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "contract_delta",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "contract_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "substitute_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_print",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_extract_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_eval_rewrite_as_Indexed",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensAdd",
        "_eval_partial_derivative",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "free",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "ext_rank",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "coeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "nocoeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "component",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "components",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "head",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "index_types",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "rank",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_build_index_map",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "doit",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_parse_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_set_new_index_structure",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_set_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_get_free_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_get_dummy_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_get_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "free_in_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "dum_in_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "free_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "commutes_with",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "perm2tensor",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "canon_bp",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "split",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_expand",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "sorted_components",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_replace_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "as_base_exp",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "substitute_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_extract_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_print",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "equals",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "contract_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "contract_delta",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_eval_rewrite_as_Indexed",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "Tensor",
        "_eval_partial_derivative",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_indices_to_free_dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_dummy_data_to_dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_tensMul_contract_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_components_from_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_rebuild_tensors_list",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "doit",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "from_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_tensors_from_components_free_dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_free_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_dummy_indices_set",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_position_offset_for_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "free_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "components",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "free_in_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "coeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "nocoeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "dum_in_args",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "equals",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_replace_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "split",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_expand",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "__neg__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "__getitem__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_args_for_traditional_printer",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_sort_args_for_sorted_components",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "sorted_components",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "perm2tensor",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "canon_bp",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "contract_delta",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_get_indices_to_args_pos",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "contract_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_set_new_index_structure",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_set_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_index_replacement_for_contract_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "substitute_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "__call__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_extract_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "__iter__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_eval_rewrite_as_Indexed",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensMul",
        "_eval_partial_derivative",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "__new__",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "free",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "dum",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "expr",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "index_map",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "coeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "nocoeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "_replace_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "TensorElement",
        "_extract_data",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "canon_bp",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "tensor_mul",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "riemann_cyclic_replace",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "riemann_cyclic",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "get_lines",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "get_free_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "get_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "get_index_structure",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "get_coeff",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "contract_metric",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "perm2tensor",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "substitute_indices",
        0.7071067811865475
    ],
    [
        "sympy/tensor/tensor.py",
        "",
        "_expand",
        0.7071067811865475
    ],
    [
        "sympy/utilities/decorator.py",
        "",
        "public",
        0.7071067811865475
    ],
    [
        "sympy/utilities/decorator.py",
        "",
        "memoize_property",
        0.7071067811865475
    ],
    [
        "sympy/utilities/decorator.py",
        "",
        "deprecated",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "sift",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "rotate_left",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "least_rotation",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "has_dups",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "has_variety",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "uniq",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "minlex",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "iterable",
        0.7071067811865475
    ],
    [
        "sympy/utilities/iterables.py",
        "",
        "is_sequence",
        0.7071067811865475
    ],
    [
        "sympy/utilities/misc.py",
        "",
        "as_int",
        0.7071067811865475
    ]
]