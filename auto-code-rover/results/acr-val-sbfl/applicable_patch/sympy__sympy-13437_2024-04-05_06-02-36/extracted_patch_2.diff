diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py
index 896729ac87..d8b777a2b4 100644
--- a/sympy/functions/combinatorial/numbers.py
+++ b/sympy/functions/combinatorial/numbers.py
@@ -434,7 +434,11 @@ def _bell_incomplete_poly(n, k, symbols):
 
     @classmethod
     def eval(cls, n, k_sym=None, symbols=None):
-        if n.is_Integer and n.is_nonnegative:
+        # Explicitly handle the case when n is infinity
+        if n is S.Infinity:
+            return S.Infinity
+        # Ensure n is a valid integer and nonnegative for further processing
+        elif n.is_Integer and n.is_nonnegative:
             if k_sym is None:
                 return Integer(cls._bell(int(n)))
             elif symbols is None:
@@ -442,6 +446,10 @@ def eval(cls, n, k_sym=None, symbols=None):
             else:
                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)
                 return r
+        # Additional else case to handle unexpected inputs gracefully
+        else:
+            # This is a speculative addition; actual implementation might require specific handling based on sympy's conventions
+            return None
 
     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):
         from sympy import Sum
