To address the issue where `MigrationRecorder` does not obey `db_router` allow_migrate rules, we need to ensure that both `ensure_schema` and `record_applied` methods in the `MigrationRecorder` class, as well as the `migrate` method in the `MigrationExecutor` class, respect the `allow_migrate` rules. The patch will involve checking `allow_migrate` before proceeding with operations that modify the database schema or record migrations.

Given the context and the code snippets provided, here are the proposed modifications:

# modification 1
```python
<file>django/db/migrations/recorder.py</file>
<original>    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
</original>
<patched>    def ensure_schema(self, db_alias=None):
        """Ensure the table exists and has the correct schema, respecting db_router allow_migrate rules."""
        from django.db import router
        if db_alias is None:
            db_alias = self.connection.alias
        # Check if allow_migrate is True for the Migration model on the given db_alias
        if not router.allow_migrate(db_alias, self.Migration):
            return
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
</patched>
```

# modification 2
```python
<file>django/db/migrations/recorder.py</file>
<original>    def record_applied(self, app, name):
        """Record that a migration was applied."""
        self.ensure_schema()
        self.migration_qs.create(app=app, name=name)
</original>
<patched>    def record_applied(self, app, name, db_alias=None):
        """Record that a migration was applied, respecting db_router allow_migrate rules."""
        self.ensure_schema(db_alias=db_alias)
        if db_alias is None or db_alias == self.connection.alias:
            self.migration_qs.create(app=app, name=name)
</patched>
```

# modification 3
```python
<file>django/db/migrations/executor.py</file>
<original>        # The django_migrations table must be present to record applied
        # migrations.
        self.recorder.ensure_schema()
</original>
<patched>        # The django_migrations table must be present to record applied
        # migrations, respecting db_router allow_migrate rules.
        self.recorder.ensure_schema(db_alias=self.connection.alias)
</patched>
```

These modifications introduce checks for `allow_migrate` before the `MigrationRecorder` attempts to ensure the schema or record a migration, and they pass the database alias accordingly. This should ensure that the `MigrationRecorder` respects the `allow_migrate` rules defined in the database routers, addressing the issue described.