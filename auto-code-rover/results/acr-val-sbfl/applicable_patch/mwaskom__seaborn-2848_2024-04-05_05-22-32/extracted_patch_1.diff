diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py
index c9218c1f..084b62a1 100644
--- a/seaborn/_oldcore.py
+++ b/seaborn/_oldcore.py
@@ -149,19 +149,24 @@ class HueMapping(SemanticMapping):
             # Use a value that's in the original data vector
             value = self.lookup_table[key]
         except KeyError:
-            # Use the colormap to interpolate between existing datapoints
-            # (e.g. in the context of making a continuous legend)
-            try:
-                normed = self.norm(key)
-            except TypeError as err:
-                if np.isnan(key):
-                    value = (0, 0, 0, 0)
-                else:
-                    raise err
+            # Handle non-numeric keys gracefully when colormap interpolation is needed
+            if isinstance(key, str):
+                # If key is a string (categorical), return a default color or handle differently
+                value = (0.5, 0.5, 0.5, 1)  # Example: return a shade of gray for undefined categories
             else:
-                if np.ma.is_masked(normed):
-                    normed = np.nan
-                value = self.cmap(normed)
+                # Use the colormap to interpolate between existing datapoints
+                # (e.g. in the context of making a continuous legend)
+                try:
+                    normed = self.norm(key)
+                except TypeError as err:
+                    if np.isnan(key):
+                        value = (0, 0, 0, 0)
+                    else:
+                        raise err
+                else:
+                    if np.ma.is_masked(normed):
+                        normed = np.nan
+                    value = self.cmap(normed)
         return value
 
     def infer_map_type(self, palette, norm, input_format, var_type):
diff --git a/seaborn/relational.py b/seaborn/relational.py
index b1762ca3..7eee0381 100644
--- a/seaborn/relational.py
+++ b/seaborn/relational.py
@@ -748,7 +748,13 @@ def scatterplot(
         alpha=alpha, x_jitter=x_jitter, y_jitter=y_jitter, legend=legend,
     )
 
-    p.map_hue(palette=palette, order=hue_order, norm=hue_norm)
+    # Ensure hue is processed correctly for scatterplot
+    if 'hue' in kwargs and isinstance(kwargs['hue'], pd.Series):
+        hue_data = kwargs.pop('hue')
+        p.map_hue(palette=palette, order=hue_order, norm=hue_norm, hue=hue_data)
+    else:
+        p.map_hue(palette=palette, order=hue_order, norm=hue_norm)
+    
     p.map_size(sizes=sizes, order=size_order, norm=size_norm)
     p.map_style(markers=markers, order=style_order)
 
