# modification 1
```python
<file>src/flask/cli.py</file>
<original>headers = ("Endpoint", "Methods", "Rule")</original>
<patched>headers = ("Domain", "Endpoint", "Methods", "Rule")</patched>
```

# modification 2
```python
<file>src/flask/cli.py</file>
<original>widths = (
    max(len(rule.endpoint) for rule in rules),
    max(len(methods) for methods in rule_methods),
    max(len(rule.rule) for rule in rules),
)
widths = [max(len(h), w) for h, w in zip(headers, widths)]
row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}".format(*widths)</original>
<patched>widths = (
    max(len(rule.subdomain) if rule.subdomain else '' for rule in rules),
    max(len(rule.endpoint) for rule in rules),
    max(len(methods) for methods in rule_methods),
    max(len(rule.rule) for rule in rules),
)
widths = [max(len(h), w) for h, w in zip(headers, widths)]
row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}".format(*widths)</patched>
```

# modification 3
```python
<file>src/flask/cli.py</file>
<original>for rule, methods in zip(rules, rule_methods):
    click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())</original>
<patched>for rule, methods in zip(rules, rule_methods):
    domain = rule.subdomain + '.' + current_app.config['SERVER_NAME'] if rule.subdomain else current_app.config['SERVER_NAME']
    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())</patched>
```

These modifications extend the `routes_command` function in Flask to include domain (or subdomain) information in the output of the `flask routes` command. The changes involve adjusting the headers to include a "Domain" column, modifying the row format to accommodate the new column, and including logic to display the domain or subdomain for each route based on the `subdomain` attribute of the `Rule` object and the `SERVER_NAME` configuration of the Flask application.