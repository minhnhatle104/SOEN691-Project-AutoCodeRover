# modification 1
```python
<file>pylint/config/config_initialization.py</file>
<original>if unrecognized_options:
        msg = ", ".join(unrecognized_options)
        linter.add_message("unrecognized-option", line=0, args=msg)
        raise _UnrecognizedOptionError(options=unrecognized_options)</original>
<patched># Instead of raising an exception, print a user-friendly message and exit.
if unrecognized_options:
    msg = ", ".join(unrecognized_options)
    linter.add_message("unrecognized-option", line=0, args=msg)
    print(f"Unrecognized option(s) found: {msg}. Use --help to see available options.")
    sys.exit(1)</patched>
```

# modification 2
```python
<file>pylint/config/exceptions.py</file>
<original>class _UnrecognizedOptionError(Exception):
    """Raised if an ArgumentManager instance tries to parse an option that is unknown."""

    def __init__(self, options: list[str], *args: object) -> None:
        self.options = options
        super().__init__(*args)</original>
<patched># This class modification is no longer necessary as we handle the error directly in config_initialization.py
# However, if the class is used elsewhere or for future use, we can keep it simple.
class _UnrecognizedOptionError(Exception):
    """Raised if an ArgumentManager instance tries to parse an option that is unknown."""

    def __init__(self, options: list[str]) -> None:
        self.options = options
        message = f"Unrecognized option(s): {', '.join(options)}"
        super().__init__(message)</patched>
```

These modifications aim to improve the user experience by providing a clear, concise message when an unrecognized option is encountered, similar to the behavior of other command-line tools. The first modification ensures that the program exits gracefully with a helpful message, avoiding the display of a Python traceback which can be intimidating or confusing to users. The second modification updates the `_UnrecognizedOptionError` class to include a default message, making it more informative if used elsewhere in the codebase.