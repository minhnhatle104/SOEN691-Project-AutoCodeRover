diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py
index 24e453a73..719a82de4 100644
--- a/pylint/config/config_initialization.py
+++ b/pylint/config/config_initialization.py
@@ -79,10 +79,12 @@ def _config_initialization(
             unrecognized_options.append(opt[2:])
         elif opt.startswith("-"):
             unrecognized_options.append(opt[1:])
+    # Instead of raising an exception, print a user-friendly message and exit.
     if unrecognized_options:
         msg = ", ".join(unrecognized_options)
         linter.add_message("unrecognized-option", line=0, args=msg)
-        raise _UnrecognizedOptionError(options=unrecognized_options)
+        print(f"Unrecognized option(s) found: {msg}. Use --help to see available options.")
+        sys.exit(1)
 
     # Set the current module to configuration as we don't know where
     # the --load-plugins key is coming from
diff --git a/pylint/config/exceptions.py b/pylint/config/exceptions.py
index 74a001c24..e7e74fa91 100644
--- a/pylint/config/exceptions.py
+++ b/pylint/config/exceptions.py
@@ -11,12 +11,15 @@ class UnrecognizedArgumentAction(Exception):
     """
 
 
+# This class modification is no longer necessary as we handle the error directly in config_initialization.py
+# However, if the class is used elsewhere or for future use, we can keep it simple.
 class _UnrecognizedOptionError(Exception):
     """Raised if an ArgumentManager instance tries to parse an option that is unknown."""
 
-    def __init__(self, options: list[str], *args: object) -> None:
+    def __init__(self, options: list[str]) -> None:
         self.options = options
-        super().__init__(*args)
+        message = f"Unrecognized option(s): {', '.join(options)}"
+        super().__init__(message)
 
 
 class ArgumentPreprocessingError(Exception):
