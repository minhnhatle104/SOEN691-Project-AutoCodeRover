{
    "task_id": "sympy__sympy-18189",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.6",
        "env_name": "setup_sympy__sympy__1.6",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/solvers/tests/test_diophantine.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-18189",
        "base_commit": "1923822ddf8265199dbd9ef9ce09641d3fd042b9",
        "hints_text": "```diff\r\ndiff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\r\nindex 6092e35..b43f5c1 100644\r\n--- a/sympy/solvers/diophantine.py\r\n+++ b/sympy/solvers/diophantine.py\r\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\r\n             if syms != var:\r\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\r\n                 return {tuple([t[dict_sym_index[i]] for i in var])\r\n-                            for t in diophantine(eq, param)}\r\n+                            for t in diophantine(eq, param, permute=permute)}\r\n         n, d = eq.as_numer_denom()\r\n         if n.is_number:\r\n             return set()\r\n```\nBased on a cursory glance at the code it seems that `permute=True` is lost when `diophantine` calls itself:\r\nhttps://github.com/sympy/sympy/blob/d98abf000b189d4807c6f67307ebda47abb997f8/sympy/solvers/diophantine.py#L182-L185.\r\nThat should be easy to solve; I'll include a fix in my next PR (which is related).\nAh, ninja'd by @smichr :-)\n```diff\r\ndiff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\r\nindex 6092e35..b43f5c1 100644\r\n--- a/sympy/solvers/diophantine.py\r\n+++ b/sympy/solvers/diophantine.py\r\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\r\n             if syms != var:\r\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\r\n                 return {tuple([t[dict_sym_index[i]] for i in var])\r\n-                            for t in diophantine(eq, param)}\r\n+                            for t in diophantine(eq, param, permute=permute)}\r\n         n, d = eq.as_numer_denom()\r\n         if n.is_number:\r\n             return set()\r\n```\nBased on a cursory glance at the code it seems that `permute=True` is lost when `diophantine` calls itself:\r\nhttps://github.com/sympy/sympy/blob/d98abf000b189d4807c6f67307ebda47abb997f8/sympy/solvers/diophantine.py#L182-L185.\r\nThat should be easy to solve; I'll include a fix in my next PR (which is related).\nAh, ninja'd by @smichr :-)",
        "created_at": "2019-12-31T15:45:24Z",
        "test_patch": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,6 +547,13 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+\n+    #test issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n     # issue 18122\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n@@ -554,6 +561,7 @@ def test_diophantine():\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n \n+\n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n \n",
        "repo": "sympy/sympy",
        "problem_statement": "diophantine: incomplete results depending on syms order with permute=True\n```\r\nIn [10]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=True)\r\nOut[10]: {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\r\n\r\nIn [11]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=True)\r\nOut[11]: {(3, 2)}\r\n```\r\n\ndiophantine: incomplete results depending on syms order with permute=True\n```\r\nIn [10]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=True)\r\nOut[10]: {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\r\n\r\nIn [11]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=True)\r\nOut[11]: {(3, 2)}\r\n```\r\n\n",
        "version": "1.6",
        "FAIL_TO_PASS": [
            "test_diophantine"
        ],
        "PASS_TO_PASS": [
            "test_DN",
            "test__can_do_sum_of_squares",
            "test_assumptions",
            "test_bf_pell",
            "test_classify_diop",
            "test_descent",
            "test_diop_general_sum_of_squares_quick",
            "test_diop_partition",
            "test_diop_sum_of_even_powers",
            "test_diop_ternary_quadratic",
            "test_diop_ternary_quadratic_normal",
            "test_diopcoverage",
            "test_diophantine_permute_sign",
            "test_find_DN",
            "test_general_pythagorean",
            "test_holzer",
            "test_input_format",
            "test_issue_18138",
            "test_issue_8943",
            "test_issue_9106",
            "test_issue_9538",
            "test_issue_9539",
            "test_ldescent",
            "test_length",
            "test_linear",
            "test_no_square_ternary_quadratic",
            "test_parametrize_ternary_quadratic",
            "test_power_representation",
            "test_prime_as_sum_of_two_squares",
            "test_quadratic_elliptical_case",
            "test_quadratic_non_perfect_square",
            "test_quadratic_parabolic_case",
            "test_quadratic_perfect_square",
            "test_quadratic_simple_hyperbolic_case",
            "test_square_factor",
            "test_sum_of_four_squares",
            "test_sum_of_squares_powers",
            "test_sum_of_three_squares",
            "test_transformation_to_normal",
            "test_transformation_to_pell",
            "test_univariate"
        ],
        "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
        "patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                            for t in diophantine(eq, param, permute=permute)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n",
        "pr_link": "https://github.com/sympy/sympy/pull/18189"
    }
}