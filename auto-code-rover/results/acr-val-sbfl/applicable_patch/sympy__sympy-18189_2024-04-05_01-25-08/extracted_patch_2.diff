diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..8727c23c16 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -333,19 +333,28 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     final_soln = set([])
     for sol in sols:
         if all(_is_int(s) for s in sol):
-            if do_permute_signs:
-                permuted_sign = set(permute_signs(sol))
-                final_soln.update(permuted_sign)
-            elif permute_few_signs:
-                lst = list(permute_signs(sol))
-                lst = list(filter(lambda x: x[0]*x[1] == sol[1]*sol[0], lst))
-                permuted_sign = set(lst)
-                final_soln.update(permuted_sign)
-            elif do_permute_signs_var:
-                permuted_sign_var = set(signed_permutations(sol))
-                final_soln.update(permuted_sign_var)
-            else:
-                final_soln.add(sol)
+            # Ensure consistent application of permutations for all symbol orders
+            # Introduce a new function to handle permutation logic more robustly
+            def apply_permutations(solution_set, permute_signs, permute_signs_var, permute_few_signs):
+                final_set = set()
+                for sol in solution_set:
+                    if permute_signs:
+                        permuted_sign = set(permute_signs(sol))
+                        final_set.update(permuted_sign)
+                    elif permute_few_signs:
+                        lst = list(permute_signs(sol))
+                        lst = list(filter(lambda x: x[0]*x[1] == sol[1]*sol[0], lst))
+                        permuted_sign = set(lst)
+                        final_set.update(permuted_sign)
+                    elif permute_signs_var:
+                        permuted_sign_var = set(signed_permutations(sol))
+                        final_set.update(permuted_sign_var)
+                    else:
+                        final_set.add(sol)
+                return final_set
+            
+            # Apply the new function to handle permutations
+            final_soln = apply_permutations(sols, do_permute_signs, do_permute_signs_var, permute_few_signs)
         else:
                 final_soln.add(sol)
     return final_soln
