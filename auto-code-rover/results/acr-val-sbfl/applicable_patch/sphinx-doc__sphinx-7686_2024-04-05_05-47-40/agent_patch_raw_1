Based on the analysis, the issue seems to stem from the handling of the `imported_members` parameter in the `generate_autosummary_content` function, specifically in the `get_members` function where it decides whether to include imported members. The condition `if imported or getattr(value, '__module__', None) == obj.__name__:` seems to be intended to filter out imported members, but it does not correctly check the module of the member against the module being documented. The correct check should compare `value.__module__` with the module name of `obj`, not `obj.__name__`.

Here's a proposed patch to address this issue:

# modification 1
```python
<file>sphinx/ext/autosummary/generate.py</file>
<original>if imported or getattr(value, '__module__', None) == obj.__name__:</original>
<patched>if imported or getattr(value, '__module__', None) == getattr(obj, '__module__', None):</patched>
```

This modification corrects the logic to properly compare the module of the member (`value`) with the module of the object being documented (`obj`). By comparing `value.__module__` with `obj.__module__`, it ensures that only members that are defined within the same module as `obj` are included when `imported_members` is set to `False`. This should resolve the issue where imported members are incorrectly included in the autosummary documentation despite the `autosummary_imported_members` setting being `False`.