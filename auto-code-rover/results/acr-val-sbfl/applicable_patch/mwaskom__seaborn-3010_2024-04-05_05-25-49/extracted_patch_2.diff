diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py
index 7b7ddc8d..0927fa32 100644
--- a/seaborn/_stats/regression.py
+++ b/seaborn/_stats/regression.py
@@ -20,17 +20,25 @@ class PolyFit(Stat):
     gridsize: int = 100
 
     def _fit_predict(self, data):
+        import pandas as pd
+        import numpy as np
 
-        x = data["x"]
-        y = data["y"]
-        if x.nunique() <= self.order:
-            # TODO warn?
-            xx = yy = []
-        else:
+        # Ensure data for 'x' and 'y' is not None and drop rows with missing values
+        valid_data = data.dropna(subset=["x", "y"])
+        x = valid_data["x"]
+        y = valid_data["y"]
+
+        # Initialize xx and yy as empty arrays in case of early return
+        xx = np.array([])
+        yy = np.array([])
+
+        # Proceed only if there are enough unique x values and data is not empty
+        if not x.empty and x.nunique() > self.order:
             p = np.polyfit(x, y, self.order)
             xx = np.linspace(x.min(), x.max(), self.gridsize)
             yy = np.polyval(p, xx)
 
+        # Return a DataFrame even if xx and yy are empty, to maintain consistent return type
         return pd.DataFrame(dict(x=xx, y=yy))
 
     # TODO we should have a way of identifying the method that will be applied
