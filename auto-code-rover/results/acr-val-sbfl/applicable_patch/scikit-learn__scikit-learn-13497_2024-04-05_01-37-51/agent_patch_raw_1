# modification 1
```python
<file>sklearn/feature_selection/mutual_info_.py</file>
<original>if discrete_features == 'auto':
    discrete_features = issparse(X)

if isinstance(discrete_features, bool):
    discrete_mask = np.empty(n_features, dtype=bool)
    discrete_mask.fill(discrete_features)
else:
    discrete_features = np.asarray(discrete_features)
    if discrete_features.dtype != 'bool':
        discrete_mask = np.zeros(n_features, dtype=bool)
        discrete_mask[discrete_features] = True
    else:
        discrete_mask = discrete_features</original>
<patched>if discrete_features == 'auto':
    discrete_features = issparse(X)

# Ensure discrete_features is an array to simplify further processing
discrete_features = np.asarray(discrete_features)

if discrete_features.dtype == 'bool' and discrete_features.size == 1:
    # If a single boolean value is provided, interpret it as applying to all features
    discrete_mask = np.full(n_features, fill_value=discrete_features[0], dtype=bool)
elif discrete_features.dtype == 'bool' and discrete_features.size != 1:
    # If a boolean mask is provided, use it directly
    if discrete_features.size != n_features:
        raise ValueError("Boolean mask for discrete_features must have the same length as the number of features")
    discrete_mask = discrete_features
else:
    # If indices are provided, create a mask with True at those indices
    discrete_mask = np.zeros(n_features, dtype=bool)
    discrete_mask[discrete_features] = True</patched>
```