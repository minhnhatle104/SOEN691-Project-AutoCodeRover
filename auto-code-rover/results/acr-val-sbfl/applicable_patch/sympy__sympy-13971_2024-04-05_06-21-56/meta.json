{
    "task_id": "sympy__sympy-13971",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1",
        "env_name": "setup_sympy__sympy__1.1",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/printing/tests/test_latex.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-13971",
        "base_commit": "84c125972ad535b2dfb245f8d311d347b45e5b8a",
        "hints_text": "",
        "created_at": "2018-01-20T10:03:44Z",
        "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -614,46 +614,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'\\left[0, 1, 4, 9, \\ldots\\right]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'\\left[1, 2, 1, 2, \\ldots\\right]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'\\left[0, 1, 4\\right]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'\\left[1, 2, 1\\right]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'\\left[\\ldots, 9, 4, 1, 0\\right]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'\\left[\\ldots, 2, 1, 2, 1\\right]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'\\left[1, 3, 5, 11, \\ldots\\right]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'\\left[1, 3, 5\\right]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'\\left[\\ldots, 11, 5, 3, 1\\right]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'\\left[0, 2, 4, 18, \\ldots\\right]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'\\left[0, 2, 4\\right]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'\\left[\\ldots, 18, 4, 2, 0\\right]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
        "repo": "sympy/sympy",
        "problem_statement": "Display of SeqFormula()\n```\r\nimport sympy as sp\r\nk, m, n = sp.symbols('k m n', integer=True)\r\nsp.init_printing()\r\n\r\nsp.SeqFormula(n**2, (n,0,sp.oo))\r\n```\r\n\r\nThe Jupyter rendering of this command backslash-escapes the brackets producing:\r\n\r\n`\\left\\[0, 1, 4, 9, \\ldots\\right\\]`\r\n\r\nCopying this output to a markdown cell this does not render properly.  Whereas:\r\n\r\n`[0, 1, 4, 9, \\ldots ]`\r\n\r\ndoes render just fine.  \r\n\r\nSo - sequence output should not backslash-escape square brackets, or, `\\]` should instead render?\n",
        "version": "1.1",
        "FAIL_TO_PASS": [
            "test_latex_sequences"
        ],
        "PASS_TO_PASS": [
            "test_Adjoint",
            "test_Hadamard",
            "test_MatrixElement_printing",
            "test_Modules",
            "test_Mul",
            "test_PolynomialRingBase",
            "test_Pow",
            "test_PrettyPoly",
            "test_Quaternion_latex_printing",
            "test_QuotientRing",
            "test_Tr",
            "test_ZeroMatrix",
            "test_boolean_args_order",
            "test_builtin_no_args",
            "test_builtins_without_args",
            "test_categories",
            "test_custom_symbol_names",
            "test_greek_symbols",
            "test_hyper_printing",
            "test_imaginary",
            "test_integral_transforms",
            "test_issue_10489",
            "test_issue_12886",
            "test_issue_13651",
            "test_issue_2934",
            "test_issue_3568",
            "test_issue_6853",
            "test_issue_7117",
            "test_issue_7180",
            "test_issue_8409",
            "test_lamda",
            "test_latex",
            "test_latex_AccumuBounds",
            "test_latex_Complement",
            "test_latex_ComplexRegion",
            "test_latex_ComplexRootOf",
            "test_latex_Complexes",
            "test_latex_ConditionSet",
            "test_latex_Contains",
            "test_latex_DiracDelta",
            "test_latex_Float",
            "test_latex_FracElement",
            "test_latex_Heaviside",
            "test_latex_ImageSet",
            "test_latex_Integers",
            "test_latex_KroneckerDelta",
            "test_latex_Lambda",
            "test_latex_LeviCivita",
            "test_latex_Matrix",
            "test_latex_MatrixSlice",
            "test_latex_Naturals",
            "test_latex_Naturals0",
            "test_latex_Piecewise",
            "test_latex_Poly",
            "test_latex_PolyElement",
            "test_latex_RandomDomain",
            "test_latex_Range",
            "test_latex_RootSum",
            "test_latex_SingularityFunction",
            "test_latex_UnevaluatedExpr",
            "test_latex_basic",
            "test_latex_bessel",
            "test_latex_brackets",
            "test_latex_builtins",
            "test_latex_commutator",
            "test_latex_cycle",
            "test_latex_dict",
            "test_latex_emptyset",
            "test_latex_euler",
            "test_latex_fresnel",
            "test_latex_functions",
            "test_latex_greek_functions",
            "test_latex_integrals",
            "test_latex_intervals",
            "test_latex_inverse",
            "test_latex_issue_4381",
            "test_latex_issue_4576",
            "test_latex_limits",
            "test_latex_list",
            "test_latex_mul_symbol",
            "test_latex_numbers",
            "test_latex_order",
            "test_latex_permutation",
            "test_latex_pow_fraction",
            "test_latex_product",
            "test_latex_productset",
            "test_latex_rational",
            "test_latex_sets",
            "test_latex_subs",
            "test_latex_sum",
            "test_latex_symbols",
            "test_latex_symmetric_difference",
            "test_latex_union",
            "test_latex_vector_expressions",
            "test_matAdd",
            "test_matMul",
            "test_mode",
            "test_modifiers",
            "test_noncommutative",
            "test_other_symbols",
            "test_printmethod",
            "test_settings",
            "test_translate"
        ],
        "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
        "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1657,9 +1657,9 @@ def _print_SeqFormula(self, s):\n         else:\n             printset = tuple(s)\n \n-        return (r\"\\left\\[\"\n+        return (r\"\\left[\"\n               + r\", \".join(self._print(el) for el in printset)\n-              + r\"\\right\\]\")\n+              + r\"\\right]\")\n \n     _print_SeqPer = _print_SeqFormula\n     _print_SeqAdd = _print_SeqFormula\n",
        "pr_link": "https://github.com/sympy/sympy/pull/13971"
    }
}