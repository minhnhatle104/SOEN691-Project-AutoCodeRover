# modification 1
```python
<file>sympy/printing/mathml.py</file>
<original>    def _print_Basic(self, e):
        x = self.dom.createElement(self.mathml_tag(e))
        for arg in e.args:
            x.appendChild(self._print(arg))
        return x
</original>
<patched>    def _print_Basic(self, e):
        x = self.dom.createElement(self.mathml_tag(e))
        if hasattr(e, 'args'):
            for arg in e.args:
                x.appendChild(self._print(arg))
        elif hasattr(e, 'base') and hasattr(e, 'indices'):
            # Handle Indexed objects specifically
            base_element = self._print(e.base)
            indices_element = self.dom.createElement('mrow')
            for idx in e.indices:
                indices_element.appendChild(self._print(idx))
            x.appendChild(base_element)
            x.appendChild(indices_element)
        return x
</patched>
```

# modification 2
```python
<file>sympy/printing/mathml.py</file>
<original>    def _print_Basic(self, e):
        mrow = self.dom.createElement('mrow')
        mi = self.dom.createElement('mi')
        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))
        mrow.appendChild(mi)
        brac = self.dom.createElement('mfenced')
        for arg in e.args:
            brac.appendChild(self._print(arg))
        mrow.appendChild(brac)
        return mrow
</original>
<patched>    def _print_Basic(self, e):
        mrow = self.dom.createElement('mrow')
        if hasattr(e, 'args'):
            mi = self.dom.createElement('mi')
            mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))
            mrow.appendChild(mi)
            brac = self.dom.createElement('mfenced')
            for arg in e.args:
                brac.appendChild(self._print(arg))
            mrow.appendChild(brac)
        elif hasattr(e, 'base') and hasattr(e, 'indices'):
            # Handle Indexed objects specifically
            base_element = self._print(e.base)
            indices_element = self.dom.createElement('mrow')
            for idx in e.indices:
                indices_element.appendChild(self._print(idx))
            mrow.appendChild(base_element)
            mrow.appendChild(indices_element)
        return mrow
</patched>
```

These modifications add checks to the `_print_Basic` methods in both `MathMLContentPrinter` and `MathMLPresentationPrinter` classes to handle `Indexed` objects appropriately. If the object has `args`, it is processed as before. If the object is an `Indexed` object (identified by having both `base` and `indices` attributes), it is handled specifically by printing the base and then each of the indices in a row. This approach avoids the `TypeError` by not attempting to iterate over the `Indexed` object directly.