diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..f8c52600d4 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -445,8 +445,17 @@ def _print_Function(self, e):
 
     def _print_Basic(self, e):
         x = self.dom.createElement(self.mathml_tag(e))
-        for arg in e.args:
-            x.appendChild(self._print(arg))
+        if hasattr(e, 'args'):
+            for arg in e.args:
+                x.appendChild(self._print(arg))
+        elif hasattr(e, 'base') and hasattr(e, 'indices'):
+            # Handle Indexed objects specifically
+            base_element = self._print(e.base)
+            indices_element = self.dom.createElement('mrow')
+            for idx in e.indices:
+                indices_element.appendChild(self._print(idx))
+            x.appendChild(base_element)
+            x.appendChild(indices_element)
         return x
 
     def _print_AssocOp(self, e):
@@ -1008,13 +1017,22 @@ def _print_polylog(self, expr, exp=None):
 
     def _print_Basic(self, e):
         mrow = self.dom.createElement('mrow')
-        mi = self.dom.createElement('mi')
-        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))
-        mrow.appendChild(mi)
-        brac = self.dom.createElement('mfenced')
-        for arg in e.args:
-            brac.appendChild(self._print(arg))
-        mrow.appendChild(brac)
+        if hasattr(e, 'args'):
+            mi = self.dom.createElement('mi')
+            mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))
+            mrow.appendChild(mi)
+            brac = self.dom.createElement('mfenced')
+            for arg in e.args:
+                brac.appendChild(self._print(arg))
+            mrow.appendChild(brac)
+        elif hasattr(e, 'base') and hasattr(e, 'indices'):
+            # Handle Indexed objects specifically
+            base_element = self._print(e.base)
+            indices_element = self.dom.createElement('mrow')
+            for idx in e.indices:
+                indices_element.appendChild(self._print(idx))
+            mrow.appendChild(base_element)
+            mrow.appendChild(indices_element)
         return mrow
 
     def _print_Tuple(self, e):
