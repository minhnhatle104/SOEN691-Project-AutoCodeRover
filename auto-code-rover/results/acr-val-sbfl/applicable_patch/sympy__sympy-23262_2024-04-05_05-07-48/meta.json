{
    "task_id": "sympy__sympy-23262",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.11",
        "env_name": "setup_sympy__sympy__1.11",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/utilities/tests/test_lambdify.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-23262",
        "base_commit": "fdc707f73a65a429935c01532cd3970d3355eab6",
        "hints_text": "Bisected to 6ccd2b07ded5074941bb80b5967d60fa1593007a from #21993.\r\n\r\nCC @bjodah \nAs a work around for now, you can use the `Tuple` object from sympy. Note that it is constructed slightly differently from a python `tuple`, rather than giving a `list`, you give it multiple input arguments (or you can put a `*` in front of your list):\r\n```python\r\n>>> inspect.getsource(lambdify([], Tuple(*[1])))\r\ndef _lambdifygenerated():\\n    return (1,)\\n\r\n>>> inspect.getsource(lambdify([], Tuple(1)))\r\ndef _lambdifygenerated():\\n    return (1,)\\n\r\n```\r\nOf course the problem should also be fixed. `lambdify` is in a bit of an awkward spot, it supports a lot of different input and output formats that make it practically impossible to keep any functionality that is not explicitly tested for whenever you make a change.\n\r\n\r\n\r\n> As a work around for now, you can use the `Tuple` object from sympy. Note that it is constructed slightly differently from a python `tuple`, rather than giving a `list`, you give it multiple input arguments (or you can put a `*` in front of your list):\r\n\r\nThank you! This is tested to be working in SymPy 1.6-1.10. Consider this issue addressed for now. \r\n\r\n`lambdify` (or generally, the code generation) is an extremely useful tool. Are you aware of any roadmap or discussions on the refactoring of `lambdify` (or codegen)? I would like to contribute to it. \r\n\nI want to put out a 1.10.1 bugfix release. Should this be fixed?",
        "created_at": "2022-03-21T07:17:35Z",
        "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1192,6 +1192,8 @@ def test_issue_14941():\n     # test tuple\n     f2 = lambdify([x, y], (y, x), 'sympy')\n     assert f2(2, 3) == (3, 2)\n+    f2b = lambdify([], (1,))  # gh-23224\n+    assert f2b() == (1,)\n \n     # test list\n     f3 = lambdify([x, y], [y, x], 'sympy')\n",
        "repo": "sympy/sympy",
        "problem_statement": "Python code printer not respecting tuple with one element\nHi,\r\n\r\nThanks for the recent updates in SymPy! I'm trying to update my code to use SymPy 1.10 but ran into an issue with the Python code printer. MWE:\r\n\r\n\r\n```python\r\nimport inspect\r\nfrom sympy import lambdify\r\n\r\ninspect.getsource(lambdify([], tuple([1])))\r\n```\r\nSymPy 1.9 and under outputs:\r\n```\r\n'def _lambdifygenerated():\\n    return (1,)\\n'\r\n```\r\n\r\nBut SymPy 1.10 gives\r\n\r\n```\r\n'def _lambdifygenerated():\\n    return (1)\\n'\r\n```\r\nNote the missing comma after `1` that causes an integer to be returned instead of a tuple. \r\n\r\nFor tuples with two or more elements, the generated code is correct:\r\n```python\r\ninspect.getsource(lambdify([], tuple([1, 2])))\r\n```\r\nIn SymPy  1.10 and under, outputs:\r\n\r\n```\r\n'def _lambdifygenerated():\\n    return (1, 2)\\n'\r\n```\r\nThis result is expected.\r\n\r\nNot sure if this is a regression. As this breaks my program which assumes the return type to always be a tuple, could you suggest a workaround from the code generation side? Thank you. \n",
        "version": "1.11",
        "FAIL_TO_PASS": [
            "test_issue_14941"
        ],
        "PASS_TO_PASS": [
            "test_ITE",
            "test_Min_Max",
            "test_atoms",
            "test_bad_args",
            "test_beta_math",
            "test_curly_matrix_symbol",
            "test_docs",
            "test_double_integral",
            "test_dummification",
            "test_empty_modules",
            "test_exponentiation",
            "test_imag_real",
            "test_imps",
            "test_imps_errors",
            "test_imps_wrong_args",
            "test_integral",
            "test_issue9474",
            "test_issue_12092",
            "test_issue_12173",
            "test_issue_14911",
            "test_issue_2790",
            "test_lambdify_Derivative_arg_issue_16468",
            "test_lambdify_cse",
            "test_lambdify_docstring",
            "test_lambdify_dummy_arg",
            "test_lambdify_imps",
            "test_lambdify_inspect",
            "test_lambdify_mixed_symbol_dummy_args",
            "test_list_args",
            "test_math",
            "test_math_lambda",
            "test_math_transl",
            "test_matrix",
            "test_mpmath_lambda",
            "test_mpmath_precision",
            "test_mpmath_transl",
            "test_namespace_order",
            "test_nested_args",
            "test_no_args",
            "test_number_precision",
            "test_own_module",
            "test_own_namespace_1",
            "test_own_namespace_2",
            "test_python_keywords",
            "test_sin",
            "test_sinc_mpmath",
            "test_single_arg",
            "test_single_e",
            "test_special_printers",
            "test_sqrt",
            "test_str_args",
            "test_sym_integral",
            "test_sym_list_args",
            "test_sym_single_arg",
            "test_sympy_lambda",
            "test_trig",
            "test_trig_float",
            "test_trig_symbolic",
            "test_true_false",
            "test_vector_discontinuous",
            "test_vector_simple"
        ],
        "environment_setup_commit": "9a6104eab0ea7ac191a09c24f3e2d79dcd66bda5",
        "patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -956,9 +956,9 @@ def _recursive_to_string(doprint, arg):\n         return doprint(arg)\n     elif iterable(arg):\n         if isinstance(arg, list):\n-            left, right = \"[]\"\n+            left, right = \"[\", \"]\"\n         elif isinstance(arg, tuple):\n-            left, right = \"()\"\n+            left, right = \"(\", \",)\"\n         else:\n             raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n         return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n",
        "pr_link": "https://github.com/sympy/sympy/pull/23262"
    }
}