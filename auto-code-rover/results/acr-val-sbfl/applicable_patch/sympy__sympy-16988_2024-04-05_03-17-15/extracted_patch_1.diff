diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 03cf57a30b..177e2849cc 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1257,21 +1257,24 @@ def zero(self):
         return S.EmptySet
 
     def __new__(cls, *args, **kwargs):
-        evaluate = kwargs.get('evaluate', global_evaluate[0])
-
-        # flatten inputs to merge intersections and iterables
-        args = _sympify(args)
-
-        # Reduce sets using known rules
-        if evaluate:
-            args = list(cls._new_args_filter(args))
-            return simplify_intersection(args)
-
-        args = list(ordered(args, Set._infimum_key))
-
-        obj = Basic.__new__(cls, *args)
-        obj._argset = frozenset(args)
-        return obj
+            evaluate = kwargs.get('evaluate', global_evaluate[0])
+    
+            # flatten inputs to merge intersections and iterables
+            args = _sympify(args)
+    
+            # Remove duplicates and ensure args are unique
+            unique_args = list(ordered(frozenset(args), Set._infimum_key))
+    
+            # Reduce sets using known rules
+            if evaluate:
+                reduced_args = list(cls._new_args_filter(unique_args))
+                simplified = simplify_intersection(reduced_args)
+                if simplified is not None:
+                    return simplified
+    
+            obj = Basic.__new__(cls, *unique_args)
+            obj._argset = frozenset(unique_args)
+            return obj
 
     @property
     @cacheit
