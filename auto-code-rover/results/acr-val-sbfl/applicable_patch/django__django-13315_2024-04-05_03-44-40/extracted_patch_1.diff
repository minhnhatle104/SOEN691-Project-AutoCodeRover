diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 397146a354..1af4c4b58e 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -399,24 +399,25 @@ class RelatedField(FieldCacheMixin, Field):
         return self.remote_field.limit_choices_to
 
     def formfield(self, **kwargs):
-        """
-        Pass ``limit_choices_to`` to the field being constructed.
-
-        Only passes it if there is a type that supports related fields.
-        This is a similar strategy used to pass the ``queryset`` to the field
-        being constructed.
-        """
-        defaults = {}
-        if hasattr(self.remote_field, 'get_related_field'):
-            # If this is a callable, do not invoke it here. Just pass
-            # it in the defaults for when the form class will later be
-            # instantiated.
-            limit_choices_to = self.remote_field.limit_choices_to
-            defaults.update({
-                'limit_choices_to': limit_choices_to,
-            })
-        defaults.update(kwargs)
-        return super().formfield(**defaults)
+            """
+            Pass ``limit_choices_to`` to the field being constructed, ensuring no duplicates in choices.
+    
+            Only passes it if there is a type that supports related fields.
+            This is a similar strategy used to pass the ``queryset`` to the field
+            being constructed.
+            """
+            defaults = {}
+            if hasattr(self.remote_field, 'get_related_field'):
+                # If this is a callable, do not invoke it here. Just pass
+                # it in the defaults for when the form class will later be
+                # instantiated.
+                limit_choices_to = self.remote_field.limit_choices_to
+                defaults.update({
+                    'limit_choices_to': limit_choices_to,
+                    'queryset': self.remote_field.model._default_manager.distinct(),
+                })
+            defaults.update(kwargs)
+            return super().formfield(**defaults)
 
     def related_query_name(self):
         """
diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..fdc90023e8 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -96,11 +96,11 @@ def model_to_dict(instance, fields=None, exclude=None):
 
 
 def apply_limit_choices_to_to_formfield(formfield):
-    """Apply limit_choices_to to the formfield's queryset if needed."""
+    """Apply limit_choices_to to the formfield's queryset if needed, ensuring no duplicates."""
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
