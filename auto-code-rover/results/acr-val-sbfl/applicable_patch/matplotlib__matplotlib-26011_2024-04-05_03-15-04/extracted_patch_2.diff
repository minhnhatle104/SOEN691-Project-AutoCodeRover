diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 9c2ba63901..027213b079 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -3643,7 +3643,33 @@ class _AxesBase(martist.Artist):
             if right is not None:
                 raise TypeError("Cannot pass both 'right' and 'xmax'")
             right = xmax
-        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)
+        # Introduce a context manager to handle xlim_changed emission for shared axes
+        class _SharedXLimChangedContext:
+            def __init__(self, axes):
+                self.axes = axes
+                self.shared_axes = axes._shared_x_axes
+        
+            def __enter__(self):
+                # Check if any of the shared axes have already started processing xlim_changed
+                self.already_processing = any(getattr(other, '_processing_xlim_changed', False)
+                                              for other in self.shared_axes.get_siblings(self.axes))
+                if not self.already_processing:
+                    # Mark all shared axes as processing xlim_changed
+                    for other in self.shared_axes.get_siblings(self.axes):
+                        setattr(other, '_processing_xlim_changed', True)
+        
+            def __exit__(self, exc_type, exc_val, exc_tb):
+                # Clear the processing flag on all shared axes
+                if not self.already_processing:
+                    for other in self.shared_axes.get_siblings(self.axes):
+                        delattr(other, '_processing_xlim_changed')
+        
+        left, right = self.xaxis._set_lim(left, right, emit=False, auto=auto)  # Avoid direct emit to prevent recursion
+        with _SharedXLimChangedContext(self) as ctx:
+            if emit and not ctx.already_processing:
+                # Now safe to emit xlim_changed without causing recursion
+                self.callbacks.process('xlim_changed', self)
+        return left, right
 
     get_xscale = _axis_method_wrapper("xaxis", "get_scale")
     set_xscale = _axis_method_wrapper("xaxis", "_set_axes_scale")
