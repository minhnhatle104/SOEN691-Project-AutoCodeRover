diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..13fa097cf6 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -19,6 +19,8 @@ def _update_method_wrapper(_wrapper, decorator):
     update_wrapper(_wrapper, dummy)
 
 
+from functools import partial, update_wrapper, WRAPPER_ASSIGNMENTS
+
 def _multi_decorate(decorators, method):
     """
     Decorate `method` with one or more function decorators. `decorators` can be
@@ -38,6 +40,11 @@ def _multi_decorate(decorators, method):
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
         bound_method = partial(method.__get__(self, type(self)))
+        # Check if the method is a functools.partial instance and copy necessary attributes.
+        if isinstance(method, partial):
+            for attr in WRAPPER_ASSIGNMENTS:
+                if hasattr(method.func, attr):
+                    setattr(bound_method, attr, getattr(method.func, attr))
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
