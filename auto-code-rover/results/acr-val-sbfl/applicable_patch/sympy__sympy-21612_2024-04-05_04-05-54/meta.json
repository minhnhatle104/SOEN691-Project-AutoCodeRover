{
    "task_id": "sympy__sympy-21612",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.9",
        "env_name": "setup_sympy__sympy__1.9",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/printing/tests/test_str.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-21612",
        "base_commit": "b4777fdcef467b7132c055f8ac2c9a5059e6a145",
        "hints_text": "This can be further simplified and fails with \r\n\r\n````python\r\n>>> parse_latex(\"\\\\frac{a}{\\\\frac{1}{b}}\")\r\na/1/b\r\n````\r\nbut works with a slighty different expression correctly (although the double brackets are not necessary):\r\n\r\n````python\r\n>>> parse_latex(\"\\\\frac{a}{\\\\frac{b}{c}}\")\r\na/((b/c))\r\n````\n> This can be further simplified and fails with\r\n\r\nThis is a printing, not a parsing error. If you look at the args of the result they are `(a, 1/(1/b))`\nThis can be fixed with \r\n```diff\r\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\r\nindex c3fdcdd435..3e4b7d1b19 100644\r\n--- a/sympy/printing/str.py\r\n+++ b/sympy/printing/str.py\r\n@@ -333,7 +333,7 @@ def apow(i):\r\n                     b.append(apow(item))\r\n                 else:\r\n                     if (len(item.args[0].args) != 1 and\r\n-                            isinstance(item.base, Mul)):\r\n+                            isinstance(item.base, (Mul, Pow))):\r\n                         # To avoid situations like #14160\r\n                         pow_paren.append(item)\r\n                     b.append(item.base)\r\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\r\nindex 690b1a8bbf..68c7d63769 100644\r\n--- a/sympy/printing/tests/test_str.py\r\n+++ b/sympy/printing/tests/test_str.py\r\n@@ -252,6 +252,8 @@ def test_Mul():\r\n     # For issue 14160\r\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\r\n                                                 evaluate=False)) == '-2*x/(y*y)'\r\n+    # issue 21537\r\n+    assert str(Mul(x, Pow(1/y, -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\r\n \r\n \r\n     class CustomClass1(Expr):\r\n```\n@smichr That's great, thank you for the quick fix! This works fine here now with all the test cases.\r\n\r\nI did not even consider that this is connected to printing and took the expression at face value. ",
        "created_at": "2021-06-14T04:31:24Z",
        "test_patch": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -252,6 +252,8 @@ def test_Mul():\n     # For issue 14160\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\n                                                 evaluate=False)) == '-2*x/(y*y)'\n+    # issue 21537\n+    assert str(Mul(x, Pow(1/y, -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\n \n \n     class CustomClass1(Expr):\n",
        "repo": "sympy/sympy",
        "problem_statement": "Latex parsing of fractions yields wrong expression due to missing brackets\nProblematic latex expression: `\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"`\r\n\r\nis parsed to: `((a**3 + b)/c)/1/(c**2)`.\r\n\r\nExpected is: `((a**3 + b)/c)/(1/(c**2))`. \r\n\r\nThe missing brackets in the denominator result in a wrong expression.\r\n\r\n## Tested on\r\n\r\n- 1.8\r\n- 1.6.2\r\n\r\n## Reproduce:\r\n\r\n```\r\nroot@d31ef1c26093:/# python3\r\nPython 3.6.9 (default, Jan 26 2021, 15:33:00)\r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy.parsing.latex import parse_latex\r\n>>> parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\r\n((a**3 + b)/c)/1/(c**2)\r\n\r\n\n",
        "version": "1.9",
        "FAIL_TO_PASS": [
            "test_Mul"
        ],
        "PASS_TO_PASS": [
            "test_Abs",
            "test_AccumBounds",
            "test_Add",
            "test_AppliedBinaryRelation",
            "test_AppliedPredicate",
            "test_CRootOf",
            "test_Catalan",
            "test_Complement",
            "test_ComplexInfinity",
            "test_Derivative",
            "test_Dict",
            "test_Dummy",
            "test_Equivalent",
            "test_EulerGamma",
            "test_Exp",
            "test_Feedback_str",
            "test_FiniteSet",
            "test_Float",
            "test_FracElement",
            "test_FracField",
            "test_Function",
            "test_GaussianInteger",
            "test_GaussianRational",
            "test_Geometry",
            "test_GoldenRatio",
            "test_GroebnerBasis",
            "test_ImaginaryUnit",
            "test_Infinity",
            "test_Integer",
            "test_Integral",
            "test_Interval",
            "test_Lambda",
            "test_Limit",
            "test_MatMul_MatAdd",
            "test_MatrixElement_printing",
            "test_MatrixExpressions",
            "test_MatrixSlice",
            "test_MatrixSymbol_printing",
            "test_Matrix_str",
            "test_NDimArray",
            "test_NaN",
            "test_NegativeInfinity",
            "test_Order",
            "test_Parallel_str",
            "test_Permutation_Cycle",
            "test_Pi",
            "test_Poly",
            "test_PolyElement",
            "test_PolyRing",
            "test_Pow",
            "test_Predicate",
            "test_PrettyPoly",
            "test_Quantity_str",
            "test_Quaternion_str_printer",
            "test_RandomDomain",
            "test_Rational",
            "test_Relational",
            "test_RootSum",
            "test_Series_str",
            "test_SparseMatrix",
            "test_Str",
            "test_Subs_printing",
            "test_Sum",
            "test_Symbol",
            "test_SymmetricDifference",
            "test_Tr",
            "test_TransferFunction_str",
            "test_TribonacciConstant",
            "test_UnevaluatedExpr",
            "test_UniversalSet",
            "test_Xor",
            "test_categories",
            "test_dict",
            "test_diffgeom",
            "test_empty_printer",
            "test_factorial",
            "test_full_prec",
            "test_infinity",
            "test_issue_14567",
            "test_issue_15716",
            "test_issue_21119_21460",
            "test_issue_3101",
            "test_issue_3103",
            "test_issue_4021",
            "test_issue_6387",
            "test_list",
            "test_noncommutative",
            "test_printmethod",
            "test_set",
            "test_settings",
            "test_sqrt",
            "test_sstrrepr",
            "test_str_special_matrices",
            "test_true_false",
            "test_tuple",
            "test_wild_matchpy",
            "test_wild_str",
            "test_zeta"
        ],
        "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
        "patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -333,7 +333,7 @@ def apow(i):\n                     b.append(apow(item))\n                 else:\n                     if (len(item.args[0].args) != 1 and\n-                            isinstance(item.base, Mul)):\n+                            isinstance(item.base, (Mul, Pow))):\n                         # To avoid situations like #14160\n                         pow_paren.append(item)\n                     b.append(item.base)\n",
        "pr_link": "https://github.com/sympy/sympy/pull/21612"
    }
}