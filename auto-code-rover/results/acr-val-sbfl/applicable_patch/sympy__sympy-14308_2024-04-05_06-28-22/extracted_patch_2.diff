diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 09e2b00735..4efc09878e 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -924,22 +924,30 @@ def _print_BasisDependent(self, expr):
                 vectstrs.append(k._pretty_form)
 
         #outstr = u("").join(o1)
-        if o1[0].startswith(u" + "):
+        # Ensure the first element is correctly aligned without unnecessary spaces
+        if o1 and o1[0].startswith(u" + "):
             o1[0] = o1[0][3:]
-        elif o1[0].startswith(" "):
+        elif o1 and o1[0].startswith(" "):
             o1[0] = o1[0][1:]
         #Fixing the newlines
         lengths = []
         strs = ['']
         for i, partstr in enumerate(o1):
             # XXX: What is this hack?
+            # Correctly handle newlines and ensure vector symbols are aligned properly
             if '\n' in partstr:
                 tempstr = partstr
-                tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                          u'\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                          + ' ' + vectstrs[i])
-                o1[i] = tempstr
+                # Split the string by newline and align each part
+                parts = tempstr.split('\n')
+                aligned_parts = []
+                for part in parts:
+                    if vectstrs[i] in part:
+                        # Calculate the padding for alignment
+                        symbol_index = part.find(vectstrs[i])
+                        padding = ' ' * (max(0, symbol_index - 1))
+                        part = padding + part.strip()
+                    aligned_parts.append(part)
+                o1[i] = '\n'.join(aligned_parts)
         o1 = [x.split('\n') for x in o1]
         n_newlines = max([len(x) for x in o1])
         for parts in o1:
