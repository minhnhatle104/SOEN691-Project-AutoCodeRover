# modification 1
```python
<file>django/core/files/storage.py</file>
<original>    def file_permissions_mode(self):
        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)
</original>
<patched>    def file_permissions_mode(self):
        # Set a default permission if FILE_UPLOAD_PERMISSIONS is not explicitly configured
        default_permissions = 0o644
        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS or default_permissions)
</patched>
```

# modification 2
```python
<file>django/core/files/storage.py</file>
<original>    def _value_or_setting(self, value, setting):
        return setting if value is None else value
</original>
<patched>    def _value_or_setting(self, value, setting):
        # Ensure that a default value is used if the setting is None
        if setting is None:
            setting = 0o644  # Default file upload permissions
        return setting if value is None else value
</patched>
```

These modifications ensure that a default permission of `0o644` is used for file uploads when `FILE_UPLOAD_PERMISSIONS` is not explicitly configured. The first modification directly applies a default in the `file_permissions_mode` method if `settings.FILE_UPLOAD_PERMISSIONS` is `None` or not set. The second modification provides a more general approach by modifying the `_value_or_setting` utility method to use a default value if the setting provided is `None`, ensuring that any future use of this method with `FILE_UPLOAD_PERMISSIONS` will have a sensible default.