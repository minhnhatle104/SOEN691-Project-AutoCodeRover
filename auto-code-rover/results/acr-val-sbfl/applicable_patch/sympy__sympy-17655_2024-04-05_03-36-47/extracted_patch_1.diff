diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..745a02f283 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -213,13 +213,30 @@ def __add__(self, other):
         sympy.geometry.point.Point.translate
 
         """
-        try:
-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
-        except TypeError:
-            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+        from sympy.core.mul import Mul
+        from sympy.geometry.entity import GeometryEntity
+
+        if isinstance(other, Mul) and any(isinstance(arg, GeometryEntity) for arg in other.args):
+            # Handle the case where 'other' is a product of a number and a Point
+            for arg in other.args:
+                if isinstance(arg, GeometryEntity):
+                    other_point = arg
+                    break
+            factor = other / other_point
+            try:
+                s, o = Point._normalize_dimension(self, other_point, evaluate=False)
+                coords = [simplify(a + factor * b) for a, b in zip(s, o)]
+                return Point(coords, evaluate=False)
+            except TypeError:
+                raise GeometryError("Don't know how to add {} and a Point object".format(other))
+        else:
+            try:
+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+            except TypeError:
+                raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
-        coords = [simplify(a + b) for a, b in zip(s, o)]
-        return Point(coords, evaluate=False)
+            coords = [simplify(a + b) for a, b in zip(s, o)]
+            return Point(coords, evaluate=False)
 
     def __contains__(self, item):
         return item in self.args
