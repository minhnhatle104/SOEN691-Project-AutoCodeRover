{
    "task_id": "django__django-14999",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/django__django/setup_django__django__4.1",
        "env_name": "setup_django__django__4.1",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "./tests/runtests.py --verbosity 2 migrations.test_operations"
    },
    "task_info": {
        "instance_id": "django__django-14999",
        "base_commit": "a754b82dac511475b6276039471ccd17cc64aeb8",
        "hints_text": "",
        "created_at": "2021-10-16T09:31:21Z",
        "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,28 @@ def test_rename_model_with_m2m(self):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
        "repo": "django/django",
        "problem_statement": "RenameModel with db_table should be a noop.\nDescription\n\t\nA RenameModel operation that already has db_table defined must be a noop.\nIn Postgres, it drops and recreates foreign key constraints. In sqlite it recreates the table (as expected for a table renaming).\n",
        "version": "4.1",
        "FAIL_TO_PASS": [
            "test_rename_model_with_db_table_noop (migrations.test_operations.OperationTests)"
        ],
        "PASS_TO_PASS": [
            "#23426 - RunSQL should accept parameters.",
            "#23426 - RunSQL should fail when a list of statements with an incorrect",
            "#24098 - Tests no-op RunPython operations.",
            "#24098 - Tests no-op RunSQL operations.",
            "#24282 - Model changes to a FK reverse side update the model",
            "A complex SeparateDatabaseAndState operation: Multiple operations both",
            "A field may be migrated from AutoField to BigAutoField.",
            "A field may be migrated from SmallAutoField to AutoField.",
            "A field may be migrated from SmallAutoField to BigAutoField.",
            "A model with BigAutoField can be created.",
            "Add/RemoveIndex operations ignore swapped models.",
            "AlterField operation is a noop when adding only a db_column and the",
            "AlterModelTable should rename auto-generated M2M tables.",
            "Altering an FK to a non-FK works (#23244)",
            "Column names that are SQL keywords shouldn't cause problems when used",
            "CreateModel ignores proxy models.",
            "CreateModel ignores unmanaged models.",
            "Creating and then altering an FK works correctly",
            "If AlterField doesn't reload state appropriately, the second AlterField",
            "If RenameField doesn't reload state appropriately, the AlterField",
            "RenameModel operations shouldn't trigger the caching of rendered apps",
            "RenameModel renames a many-to-many column after a RenameField.",
            "Test AlterField operation with an index to ensure indexes created via",
            "Test the AddIndex operation.",
            "Test the RemoveIndex operation.",
            "Test the creation of a model with a ManyToMany field and the",
            "Tests the AddField operation on TextField.",
            "Tests the AddField operation on TextField/BinaryField.",
            "Tests the AddField operation with a ManyToManyField.",
            "Tests the AddField operation's state alteration",
            "Tests the AddField operation.",
            "Tests the AlterField operation on primary keys (for things like PostgreSQL's SERIAL weirdness)",
            "Tests the AlterField operation on primary keys changes any FKs pointing to it.",
            "Tests the AlterField operation.",
            "Tests the AlterIndexTogether operation.",
            "Tests the AlterModelOptions operation.",
            "Tests the AlterModelTable operation if the table name is not changed.",
            "Tests the AlterModelTable operation if the table name is set to None.",
            "Tests the AlterModelTable operation.",
            "Tests the AlterOrderWithRespectTo operation.",
            "Tests the AlterUniqueTogether operation.",
            "Tests the CreateModel operation directly followed by an",
            "Tests the CreateModel operation on a multi-table inheritance setup.",
            "Tests the CreateModel operation.",
            "Tests the DeleteModel operation ignores proxy models.",
            "Tests the DeleteModel operation ignores swapped models.",
            "Tests the DeleteModel operation.",
            "Tests the RemoveField operation on a foreign key.",
            "Tests the RemoveField operation.",
            "Tests the RenameField operation.",
            "Tests the RenameModel operation on a model which has a superclass that",
            "Tests the RenameModel operation on model with self referential FK.",
            "Tests the RenameModel operation.",
            "Tests the RunPython operation",
            "Tests the RunPython operation correctly handles the \"atomic\" keyword",
            "Tests the RunSQL operation.",
            "Tests the SeparateDatabaseAndState operation.",
            "The AlterModelOptions operation removes keys from the dict (#23121)",
            "The CreateTable operation ignores swapped models.",
            "The managers on a model are set.",
            "test_add_constraint (migrations.test_operations.OperationTests)",
            "test_add_constraint_combinable (migrations.test_operations.OperationTests)",
            "test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)",
            "test_add_covering_unique_constraint (migrations.test_operations.OperationTests)",
            "test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)",
            "test_add_func_index (migrations.test_operations.OperationTests)",
            "test_add_func_unique_constraint (migrations.test_operations.OperationTests)",
            "test_add_index_state_forwards (migrations.test_operations.OperationTests)",
            "test_add_or_constraint (migrations.test_operations.OperationTests)",
            "test_add_partial_unique_constraint (migrations.test_operations.OperationTests)",
            "test_alter_field_m2m (migrations.test_operations.OperationTests)",
            "test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests)",
            "test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)",
            "test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)",
            "test_alter_field_with_func_index (migrations.test_operations.OperationTests)",
            "test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests)",
            "test_alter_index_together_remove (migrations.test_operations.OperationTests)",
            "test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)",
            "test_alter_unique_together_remove (migrations.test_operations.OperationTests)",
            "test_create_model_with_constraint (migrations.test_operations.OperationTests)",
            "test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)",
            "test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)",
            "test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)",
            "test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)",
            "test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)",
            "test_delete_mti_model (migrations.test_operations.OperationTests)",
            "test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)",
            "test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)",
            "test_references_field_by_name (migrations.test_operations.FieldOperationTests)",
            "test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)",
            "test_references_field_by_through (migrations.test_operations.FieldOperationTests)",
            "test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)",
            "test_references_model (migrations.test_operations.FieldOperationTests)",
            "test_references_model_mixin (migrations.test_operations.TestCreateModel)",
            "test_remove_constraint (migrations.test_operations.OperationTests)",
            "test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)",
            "test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)",
            "test_remove_field_m2m (migrations.test_operations.OperationTests)",
            "test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)",
            "test_remove_func_index (migrations.test_operations.OperationTests)",
            "test_remove_func_unique_constraint (migrations.test_operations.OperationTests)",
            "test_remove_index_state_forwards (migrations.test_operations.OperationTests)",
            "test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)",
            "test_rename_field_case (migrations.test_operations.OperationTests)",
            "test_rename_field_with_db_column (migrations.test_operations.OperationTests)",
            "test_rename_m2m_target_model (migrations.test_operations.OperationTests)",
            "test_rename_m2m_through_model (migrations.test_operations.OperationTests)",
            "test_rename_missing_field (migrations.test_operations.OperationTests)",
            "test_rename_model_with_m2m (migrations.test_operations.OperationTests)",
            "test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)",
            "test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)",
            "test_repoint_field_m2m (migrations.test_operations.OperationTests)",
            "test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests)"
        ],
        "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
        "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,12 +320,13 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            old_db_table = old_model._meta.db_table\n+            new_db_table = new_model._meta.db_table\n+            # Don't alter when a table name is not changed.\n+            if old_db_table == new_db_table:\n+                return\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+            schema_editor.alter_db_table(new_model, old_db_table, new_db_table)\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n",
        "pr_link": "https://github.com/django/django/pull/14999"
    }
}