diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 62631f7ff..f82b24822 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -109,10 +109,14 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
     return {x.strip() for x in arg.split(',') if x.strip()}
 
 
-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
-    """Used to convert the :members: option to auto directives."""
+from typing import Union, Set, List
+def inherited_members_option(arg: Any) -> Union[object, Set[str], List[str]]:
+    """Used to convert the :members: and :inherited-members: options to auto directives."""
     if arg in (None, True):
         return 'object'
+    elif isinstance(arg, str) and ',' in arg:
+        # Allow specifying multiple classes as a comma-separated list, trimming whitespace around class names
+        return set(map(str.strip, arg.split(',')))
     else:
         return arg
 
@@ -682,7 +686,7 @@ class Documenter:
         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
             if inspect.isclass(self.object):
                 for cls in self.object.__mro__:
-                    if cls.__name__ == self.options.inherited_members and cls != self.object:
+                    if isinstance(self.options.inherited_members, set) and cls.__name__ in self.options.inherited_members and cls != self.object:
                         # given member is a member of specified *super class*
                         return True
                     elif name in cls.__dict__:
@@ -1710,7 +1714,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
                                    (name, self.fullname), type='autodoc')
             return False, selected
         elif self.options.inherited_members:
-            return False, list(members.values())
+                    if isinstance(self.options.inherited_members, set):
+                        # Filter out members from the specified classes to be ignored
+                        filtered_members = [m for m in members.values() if m.class_.__name__ not in self.options.inherited_members]
+                        return False, filtered_members
+                    else:
+                        # If inherited_members is not a set, it means no specific classes were specified to be ignored
+                        return False, list(members.values())
         else:
             return False, [m for m in members.values() if m.class_ == self.object]
 
