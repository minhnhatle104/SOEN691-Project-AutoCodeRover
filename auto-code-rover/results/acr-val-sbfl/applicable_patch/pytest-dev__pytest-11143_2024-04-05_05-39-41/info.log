2024-04-05 05:39:41 ========== Running task pytest-dev__pytest-11143 (relative counter in this run: 168/300) ==========
2024-04-05 05:39:41 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_pytest-dev__pytest__8.0 ; python -m pip install -e . ; conda deactivate
2024-04-05 05:39:44 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_pytest-dev__pytest__8.0 ; python -m pip install xmlrunner coverage pytest pytest-cov ; conda deactivate
2024-04-05 05:39:55 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_pytest-dev__pytest__8.0 ; python -m pytest --cov --cov-context=test  -rA testing/test_assertrewrite.py ; conda deactivate
2024-04-05 05:40:10 SBFL result (lines): [('src/_pytest/_code/code.py', 94, 97, 1.0), ('src/_pytest/_code/code.py', 100, 100, 1.0), ('src/_pytest/_code/code.py', 249, 260, 1.0), ('src/_pytest/_code/code.py', 358, 368, 1.0), ('src/_pytest/_code/code.py', 370, 371, 1.0), ('src/_pytest/_code/code.py', 375, 376, 1.0), ('src/_pytest/_code/code.py', 784, 792, 1.0), ('src/_pytest/_code/code.py', 848, 852, 1.0), ('src/_pytest/_code/code.py', 888, 892, 1.0), ('src/_pytest/_code/source.py', 120, 126, 1.0), ('src/_pytest/_code/source.py', 210, 213, 1.0), ('src/_pytest/cacheprovider.py', 343, 343, 1.0), ('src/_pytest/capture.py', 882, 882, 1.0), ('src/_pytest/main.py', 261, 271, 1.0), ('src/_pytest/main.py', 274, 274, 1.0), ('src/_pytest/main.py', 276, 279, 1.0), ('src/_pytest/main.py', 284, 285, 1.0), ('src/_pytest/main.py', 338, 341, 1.0), ('src/_pytest/main.py', 499, 504, 1.0), ('src/_pytest/nodes.py', 547, 547, 1.0), ('src/_pytest/nodes.py', 555, 557, 1.0), ('src/_pytest/nodes.py', 559, 559, 1.0), ('src/_pytest/nodes.py', 562, 567, 1.0), ('src/_pytest/pytester.py', 276, 278, 1.0), ('src/_pytest/pytester.py', 552, 554, 1.0), ('src/_pytest/pytester.py', 725, 725, 1.0), ('src/_pytest/pytester.py', 1147, 1149, 1.0), ('src/_pytest/python.py', 615, 618, 1.0), ('src/_pytest/python.py', 622, 622, 1.0), ('src/_pytest/python.py', 632, 632, 1.0), ('src/_pytest/python.py', 648, 648, 1.0), ('src/_pytest/reports.py', 164, 164, 1.0), ('src/_pytest/reports.py', 428, 428, 1.0), ('src/_pytest/runner.py', 377, 379, 1.0), ('src/_pytest/runner.py', 381, 382, 1.0), ('src/_pytest/runner.py', 390, 392, 1.0), ('src/_pytest/runner.py', 395, 399, 1.0), ('src/_pytest/runner.py', 545, 551, 1.0), ('src/_pytest/terminal.py', 305, 308, 1.0), ('src/_pytest/terminal.py', 701, 703, 1.0), ('src/_pytest/terminal.py', 732, 734, 1.0), ('src/_pytest/terminal.py', 872, 874, 1.0), ('src/_pytest/terminal.py', 891, 891, 1.0), ('src/_pytest/terminal.py', 898, 903, 1.0), ('src/_pytest/terminal.py', 1072, 1076, 1.0), ('src/_pytest/terminal.py', 1079, 1080, 1.0), ('src/_pytest/terminal.py', 1331, 1331, 1.0), ('src/_pytest/terminal.py', 1435, 1435, 1.0), ('src/_pytest/terminal.py', 1437, 1437, 1.0), ('src/_pytest/_code/code.py', 293, 294, 0.5773502691896258), ('src/_pytest/_code/code.py', 319, 319, 0.5773502691896258), ('src/_pytest/_code/code.py', 780, 782, 0.5773502691896258), ('src/_pytest/_code/code.py', 854, 860, 0.5773502691896258), ('src/_pytest/_code/code.py', 885, 885, 0.5773502691896258), ('src/_pytest/_code/code.py', 1099, 1105, 0.5773502691896258), ('src/_pytest/_code/code.py', 1183, 1187, 0.5773502691896258), ('src/_pytest/_code/code.py', 1189, 1189, 0.5773502691896258), ('src/_pytest/_code/source.py', 161, 166, 0.5773502691896258), ('src/_pytest/_code/source.py', 197, 197, 0.5773502691896258), ('src/_pytest/_code/source.py', 199, 205, 0.5773502691896258), ('src/_pytest/_code/code.py', 181, 184, 0.5), ('src/_pytest/_code/code.py', 757, 761, 0.5), ('src/_pytest/_code/source.py', 153, 159, 0.5), ('src/_pytest/_code/source.py', 168, 169, 0.5), ('src/_pytest/assertion/rewrite.py', 672, 678, 0.5), ('src/_pytest/assertion/rewrite.py', 680, 681, 0.5), ('src/_pytest/assertion/rewrite.py', 746, 746, 0.5), ('src/_pytest/_io/saferepr.py', 31, 35, 0.4082482904638631), ('src/_pytest/_code/code.py', 502, 508, 0.30151134457776363), ('src/_pytest/assertion/util.py', 77, 82, 0.2886751345948129), ('src/_pytest/assertion/util.py', 85, 93, 0.2886751345948129), ('src/_pytest/assertion/util.py', 104, 104, 0.25), ('src/_pytest/assertion/util.py', 112, 112, 0.25), ('src/_pytest/assertion/util.py', 116, 116, 0.25), ('src/_pytest/assertion/util.py', 132, 133, 0.25), ('src/_pytest/assertion/util.py', 135, 136, 0.25), ('src/_pytest/assertion/util.py', 217, 217, 0.25), ('src/_pytest/assertion/util.py', 219, 219, 0.25), ('src/_pytest/assertion/util.py', 225, 225, 0.25), ('src/_pytest/assertion/util.py', 233, 233, 0.25), ('src/_pytest/assertion/util.py', 235, 235, 0.25), ('src/_pytest/assertion/util.py', 237, 237, 0.25), ('src/_pytest/assertion/util.py', 240, 240, 0.25), ('src/_pytest/_io/wcwidth.py', 12, 12, 0.22941573387056174), ('src/_pytest/_io/wcwidth.py', 15, 16, 0.22941573387056174), ('src/_pytest/assertion/util.py', 108, 108, 0.22360679774997896), ('src/_pytest/assertion/util.py', 189, 192, 0.22360679774997896), ('src/_pytest/assertion/util.py', 213, 214, 0.22360679774997896), ('src/_pytest/assertion/util.py', 244, 244, 0.22360679774997896), ('src/_pytest/nodes.py', 472, 472, 0.21320071635561041), ('src/_pytest/_code/code.py', 105, 106, 0.20851441405707477), ('src/_pytest/_code/code.py', 120, 125, 0.20851441405707477), ('src/_pytest/_code/code.py', 135, 135, 0.20851441405707477), ('src/_pytest/_code/code.py', 143, 143, 0.20851441405707477), ('src/_pytest/_code/code.py', 147, 147, 0.20851441405707477), ('src/_pytest/_code/code.py', 151, 151, 0.20851441405707477), ('src/_pytest/_code/code.py', 187, 187, 0.20851441405707477), ('src/_pytest/_code/code.py', 200, 201, 0.20851441405707477), ('src/_pytest/_code/code.py', 210, 210, 0.20851441405707477), ('src/_pytest/_code/code.py', 214, 214, 0.20851441405707477), ('src/_pytest/_code/code.py', 233, 233, 0.20851441405707477), ('src/_pytest/_code/code.py', 238, 238, 0.20851441405707477), ('src/_pytest/_code/code.py', 241, 241, 0.20851441405707477), ('src/_pytest/_code/code.py', 265, 267, 0.20851441405707477), ('src/_pytest/_code/code.py', 280, 280, 0.20851441405707477), ('src/_pytest/_code/code.py', 282, 283, 0.20851441405707477), ('src/_pytest/_code/code.py', 288, 291, 0.20851441405707477), ('src/_pytest/_code/code.py', 296, 296, 0.20851441405707477), ('src/_pytest/_code/code.py', 330, 330, 0.20851441405707477), ('src/_pytest/_code/code.py', 332, 336, 0.20851441405707477), ('src/_pytest/_code/code.py', 338, 338, 0.20851441405707477), ('src/_pytest/_code/code.py', 340, 340, 0.20851441405707477), ('src/_pytest/_code/code.py', 373, 373, 0.20851441405707477), ('src/_pytest/_code/code.py', 389, 389, 0.20851441405707477), ('src/_pytest/_code/code.py', 392, 392, 0.20851441405707477), ('src/_pytest/_code/code.py', 411, 412, 0.20851441405707477), ('src/_pytest/_code/code.py', 415, 415, 0.20851441405707477), ('src/_pytest/_code/code.py', 510, 510, 0.20851441405707477), ('src/_pytest/_code/code.py', 527, 532, 0.20851441405707477), ('src/_pytest/_code/code.py', 547, 548, 0.20851441405707477), ('src/_pytest/_code/code.py', 550, 550, 0.20851441405707477), ('src/_pytest/_code/code.py', 563, 564, 0.20851441405707477), ('src/_pytest/_code/code.py', 566, 566, 0.20851441405707477), ('src/_pytest/_code/code.py', 571, 572, 0.20851441405707477), ('src/_pytest/_code/code.py', 574, 574, 0.20851441405707477), ('src/_pytest/_code/code.py', 579, 581, 0.20851441405707477), ('src/_pytest/_code/code.py', 602, 608, 0.20851441405707477), ('src/_pytest/_code/code.py', 622, 627, 0.20851441405707477), ('src/_pytest/_code/code.py', 677, 677, 0.20851441405707477), ('src/_pytest/_code/code.py', 689, 696, 0.20851441405707477), ('src/_pytest/_code/code.py', 698, 698, 0.20851441405707477), ('src/_pytest/_code/code.py', 737, 738, 0.20851441405707477), ('src/_pytest/_code/code.py', 748, 748, 0.20851441405707477), ('src/_pytest/_code/code.py', 751, 754, 0.20851441405707477), ('src/_pytest/_code/code.py', 772, 773, 0.20851441405707477), ('src/_pytest/_code/code.py', 775, 775, 0.20851441405707477), ('src/_pytest/_code/code.py', 800, 801, 0.20851441405707477), ('src/_pytest/_code/code.py', 803, 807, 0.20851441405707477), ('src/_pytest/_code/code.py', 809, 809, 0.20851441405707477), ('src/_pytest/_code/code.py', 812, 812, 0.20851441405707477), ('src/_pytest/_code/code.py', 835, 835, 0.20851441405707477), ('src/_pytest/_code/code.py', 842, 846, 0.20851441405707477), ('src/_pytest/_code/code.py', 862, 867, 0.20851441405707477), ('src/_pytest/_code/code.py', 878, 880, 0.20851441405707477), ('src/_pytest/_code/code.py', 883, 883, 0.20851441405707477), ('src/_pytest/_code/code.py', 894, 894, 0.20851441405707477), ('src/_pytest/_code/code.py', 897, 897, 0.20851441405707477), ('src/_pytest/_code/code.py', 899, 899, 0.20851441405707477), ('src/_pytest/_code/code.py', 905, 906, 0.20851441405707477), ('src/_pytest/_code/code.py', 910, 912, 0.20851441405707477), ('src/_pytest/_code/code.py', 914, 914, 0.20851441405707477), ('src/_pytest/_code/code.py', 961, 961, 0.20851441405707477), ('src/_pytest/_code/code.py', 963, 969, 0.20851441405707477), ('src/_pytest/_code/code.py', 971, 971, 0.20851441405707477), ('src/_pytest/_code/code.py', 975, 975, 0.20851441405707477), ('src/_pytest/_code/code.py', 986, 987, 0.20851441405707477), ('src/_pytest/_code/code.py', 995, 995, 0.20851441405707477), ('src/_pytest/_code/code.py', 997, 997, 0.20851441405707477), ('src/_pytest/_code/code.py', 1001, 1002, 0.20851441405707477), ('src/_pytest/_code/code.py', 1008, 1010, 0.20851441405707477), ('src/_pytest/_code/code.py', 1044, 1044, 0.20851441405707477), ('src/_pytest/_code/code.py', 1061, 1063, 0.20851441405707477), ('src/_pytest/_code/code.py', 1065, 1065, 0.20851441405707477), ('src/_pytest/_code/code.py', 1068, 1070, 0.20851441405707477), ('src/_pytest/_code/code.py', 1073, 1073, 0.20851441405707477), ('src/_pytest/_code/code.py', 1096, 1097, 0.20851441405707477), ('src/_pytest/_code/code.py', 1109, 1109, 0.20851441405707477), ('src/_pytest/_code/code.py', 1152, 1152, 0.20851441405707477), ('src/_pytest/_code/code.py', 1158, 1165, 0.20851441405707477), ('src/_pytest/_code/code.py', 1167, 1168, 0.20851441405707477), ('src/_pytest/_code/code.py', 1170, 1170, 0.20851441405707477), ('src/_pytest/_code/code.py', 1173, 1174, 0.20851441405707477), ('src/_pytest/_code/code.py', 1176, 1176, 0.20851441405707477), ('src/_pytest/_code/code.py', 1179, 1180, 0.20851441405707477), ('src/_pytest/_code/code.py', 1217, 1217, 0.20851441405707477), ('src/_pytest/_code/code.py', 1222, 1224, 0.20851441405707477), ('src/_pytest/_code/code.py', 1226, 1227, 0.20851441405707477), ('src/_pytest/_code/source.py', 57, 57, 0.20851441405707477), ('src/_pytest/_code/source.py', 60, 60, 0.20851441405707477), ('src/_pytest/_code/source.py', 62, 64, 0.20851441405707477), ('src/_pytest/_code/source.py', 70, 70, 0.20851441405707477), ('src/_pytest/_code/source.py', 93, 94, 0.20851441405707477), ('src/_pytest/_code/source.py', 99, 99, 0.20851441405707477), ('src/_pytest/_code/source.py', 101, 102, 0.20851441405707477), ('src/_pytest/_code/source.py', 106, 108, 0.20851441405707477), ('src/_pytest/_code/source.py', 111, 111, 0.20851441405707477), ('src/_pytest/_code/source.py', 149, 151, 0.20851441405707477), ('src/_pytest/_code/source.py', 178, 179, 0.20851441405707477), ('src/_pytest/_code/source.py', 182, 184, 0.20851441405707477), ('src/_pytest/_code/source.py', 186, 186, 0.20851441405707477), ('src/_pytest/_code/source.py', 191, 192, 0.20851441405707477), ('src/_pytest/_code/source.py', 194, 194, 0.20851441405707477), ('src/_pytest/_code/source.py', 216, 216, 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 183, 183, 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 189, 189, 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 191, 194, 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 198, 198, 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 200, 201, 0.20851441405707477), ('src/_pytest/cacheprovider.py', 333, 334, 0.20851441405707477), ('src/_pytest/cacheprovider.py', 402, 405, 0.20851441405707477), ('src/_pytest/faulthandler.py', 93, 93, 0.20851441405707477), ('src/_pytest/faulthandler.py', 95, 95, 0.20851441405707477), ('src/_pytest/main.py', 530, 533, 0.20851441405707477), ('src/_pytest/nodes.py', 444, 444, 0.20851441405707477), ('src/_pytest/nodes.py', 446, 446, 0.20851441405707477), ('src/_pytest/nodes.py', 448, 448, 0.20851441405707477), ('src/_pytest/nodes.py', 451, 451, 0.20851441405707477), ('src/_pytest/nodes.py', 455, 455, 0.20851441405707477), ('src/_pytest/nodes.py', 459, 460, 0.20851441405707477), ('src/_pytest/nodes.py', 463, 463, 0.20851441405707477), ('src/_pytest/nodes.py', 469, 469, 0.20851441405707477), ('src/_pytest/nodes.py', 480, 481, 0.20851441405707477), ('src/_pytest/nodes.py', 485, 491, 0.20851441405707477), ('src/_pytest/python.py', 1796, 1801, 0.20851441405707477), ('src/_pytest/python.py', 1807, 1807, 0.20851441405707477), ('src/_pytest/python.py', 1811, 1812, 0.20851441405707477), ('src/_pytest/python.py', 1820, 1820, 0.20851441405707477), ('src/_pytest/python.py', 1828, 1831, 0.20851441405707477), ('src/_pytest/reports.py', 78, 78, 0.20851441405707477), ('src/_pytest/reports.py', 83, 84, 0.20851441405707477), ('src/_pytest/reports.py', 87, 89, 0.20851441405707477), ('src/_pytest/reports.py', 194, 196, 0.20851441405707477), ('src/_pytest/reports.py', 200, 201, 0.20851441405707477), ('src/_pytest/reports.py', 203, 203, 0.20851441405707477), ('src/_pytest/reports.py', 344, 344, 0.20851441405707477), ('src/_pytest/reports.py', 347, 347, 0.20851441405707477), ('src/_pytest/reports.py', 360, 362, 0.20851441405707477), ('src/_pytest/runner.py', 168, 170, 0.20851441405707477), ('src/_pytest/runner.py', 172, 174, 0.20851441405707477), ('src/_pytest/runner.py', 176, 177, 0.20851441405707477), ('src/_pytest/runner.py', 222, 229, 0.20851441405707477), ('src/_pytest/runner.py', 237, 238, 0.20851441405707477), ('src/_pytest/runner.py', 241, 241, 0.20851441405707477), ('src/_pytest/runner.py', 244, 244, 0.20851441405707477), ('src/_pytest/runner.py', 337, 344, 0.20851441405707477), ('src/_pytest/runner.py', 346, 346, 0.20851441405707477), ('src/_pytest/terminal.py', 302, 302, 0.20851441405707477), ('src/_pytest/terminal.py', 590, 590, 0.20851441405707477), ('src/_pytest/terminal.py', 592, 593, 0.20851441405707477), ('src/_pytest/terminal.py', 937, 939, 0.20851441405707477), ('src/_pytest/terminal.py', 1083, 1085, 0.20851441405707477), ('src/_pytest/terminal.py', 1087, 1087, 0.20851441405707477), ('src/_pytest/terminal.py', 1136, 1144, 0.20851441405707477), ('src/_pytest/terminal.py', 1146, 1146, 0.20851441405707477), ('src/_pytest/terminal.py', 1209, 1212, 0.20851441405707477), ('src/_pytest/terminal.py', 1325, 1327, 0.20851441405707477), ('src/_pytest/terminal.py', 1340, 1341, 0.20851441405707477), ('src/_pytest/terminal.py', 1344, 1346, 0.20851441405707477), ('src/_pytest/terminal.py', 1349, 1349, 0.20851441405707477), ('src/_pytest/terminal.py', 1356, 1356, 0.20851441405707477), ('src/_pytest/terminal.py', 1363, 1365, 0.20851441405707477), ('src/_pytest/terminal.py', 1367, 1368, 0.20851441405707477), ('src/_pytest/terminal.py', 1370, 1370, 0.20851441405707477), ('src/_pytest/terminal.py', 1372, 1372, 0.20851441405707477), ('src/_pytest/terminal.py', 1376, 1378, 0.20851441405707477), ('src/_pytest/terminal.py', 1381, 1382, 0.20851441405707477), ('src/_pytest/terminal.py', 1384, 1384, 0.20851441405707477), ('src/_pytest/unittest.py', 363, 367, 0.20851441405707477), ('src/_pytest/_code/code.py', 461, 464, 0.20412414523193154), ('src/_pytest/_code/code.py', 555, 556, 0.20412414523193154), ('src/_pytest/_code/code.py', 558, 558, 0.20412414523193154), ('src/_pytest/assertion/util.py', 58, 62, 0.20412414523193154), ('src/_pytest/config/__init__.py', 1117, 1117, 0.20412414523193154), ('src/_pytest/config/__init__.py', 1120, 1120, 0.20412414523193154), ('src/_pytest/runner.py', 161, 165, 0.20412414523193154), ('src/_pytest/terminal.py', 1222, 1224, 0.20412414523193154), ('src/_pytest/assertion/__init__.py', 152, 152, 0.2), ('src/_pytest/assertion/rewrite.py', 483, 483, 0.2), ('src/_pytest/assertion/util.py', 206, 207, 0.2), ('src/_pytest/assertion/util.py', 521, 522, 0.2), ('src/_pytest/_code/source.py', 24, 26, 0.19245008972987526), ('src/_pytest/assertion/rewrite.py', 477, 481, 0.19245008972987526), ('src/_pytest/nodes.py', 380, 382, 0.19205531989934396), ('src/_pytest/assertion/util.py', 180, 182, 0.1889822365046136), ('src/_pytest/assertion/util.py', 184, 185, 0.1889822365046136), ('src/_pytest/assertion/__init__.py', 141, 142, 0.18569533817705186), ('src/_pytest/assertion/__init__.py', 144, 144, 0.18569533817705186), ('src/_pytest/assertion/__init__.py', 181, 181, 0.18569533817705186), ('src/_pytest/assertion/util.py', 164, 164, 0.18569533817705186), ('src/_pytest/assertion/util.py', 168, 169, 0.18569533817705186), ('src/_pytest/assertion/util.py', 174, 174, 0.18569533817705186), ('src/_pytest/assertion/util.py', 187, 187, 0.18569533817705186), ('src/_pytest/assertion/rewrite.py', 472, 474, 0.18257418583505536), ('src/_pytest/pytester.py', 637, 638, 0.17677669529663687), ('src/_pytest/pytester.py', 641, 643, 0.17677669529663687), ('src/_pytest/pytester.py', 645, 646, 0.17677669529663687), ('src/_pytest/pytester.py', 651, 651, 0.17677669529663687), ('src/_pytest/pytester.py', 654, 654, 0.17677669529663687), ('src/_pytest/pytester.py', 746, 747, 0.17677669529663687), ('src/_pytest/pytester.py', 749, 749, 0.17677669529663687), ('src/_pytest/reports.py', 367, 380, 0.17407765595569785), ('src/_pytest/monkeypatch.py', 398, 400, 0.17213259316477408), ('src/_pytest/monkeypatch.py', 402, 406, 0.17213259316477408), ('src/_pytest/monkeypatch.py', 413, 415, 0.17213259316477408), ('src/_pytest/monkeypatch.py', 419, 419, 0.17213259316477408), ('src/_pytest/_io/saferepr.py', 75, 76, 0.17149858514250882), ('src/_pytest/_io/saferepr.py', 81, 83, 0.17149858514250882), ('src/_pytest/terminal.py', 1051, 1054, 0.17149858514250882), ('src/_pytest/monkeypatch.py', 132, 135, 0.1708715315433522), ('src/_pytest/capture.py', 393, 394, 0.16929979439493012), ('src/_pytest/capture.py', 396, 397, 0.16929979439493012), ('src/_pytest/capture.py', 525, 526, 0.16929979439493012), ('src/_pytest/capture.py', 528, 530, 0.16929979439493012), ('src/_pytest/capture.py', 655, 660, 0.16929979439493012), ('src/_pytest/capture.py', 760, 761, 0.16929979439493012), ('src/_pytest/capture.py', 799, 799, 0.16929979439493012), ('src/_pytest/capture.py', 836, 839, 0.16929979439493012), ('src/_pytest/logging.py', 341, 342, 0.16929979439493012), ('src/_pytest/logging.py', 345, 346, 0.16929979439493012), ('src/_pytest/logging.py', 348, 349, 0.16929979439493012), ('src/_pytest/logging.py', 352, 352, 0.16929979439493012), ('src/_pytest/logging.py', 375, 376, 0.16929979439493012), ('src/_pytest/logging.py', 782, 792, 0.16929979439493012), ('src/_pytest/nodes.py', 332, 338, 0.16929979439493012), ('src/_pytest/nodes.py', 370, 370, 0.16929979439493012), ('src/_pytest/runner.py', 250, 255, 0.16929979439493012), ('src/_pytest/runner.py', 258, 262, 0.16929979439493012), ('src/_pytest/skipping.py', 208, 208, 0.16929979439493012), ('src/_pytest/skipping.py', 228, 228, 0.16929979439493012), ('src/_pytest/stash.py', 73, 73, 0.16929979439493012), ('src/_pytest/threadexception.py', 37, 38, 0.16929979439493012), ('src/_pytest/threadexception.py', 44, 46, 0.16929979439493012), ('src/_pytest/threadexception.py', 61, 63, 0.16929979439493012), ('src/_pytest/unraisableexception.py', 37, 38, 0.16929979439493012), ('src/_pytest/unraisableexception.py', 46, 48, 0.16929979439493012), ('src/_pytest/unraisableexception.py', 63, 65, 0.16929979439493012), ('src/_pytest/cacheprovider.py', 331, 331, 0.1690308509457033), ('src/_pytest/capture.py', 367, 368, 0.1690308509457033), ('src/_pytest/capture.py', 388, 390, 0.1690308509457033), ('src/_pytest/capture.py', 487, 488, 0.1690308509457033), ('src/_pytest/capture.py', 517, 518, 0.1690308509457033), ('src/_pytest/capture.py', 520, 522, 0.1690308509457033), ('src/_pytest/capture.py', 564, 569, 0.1690308509457033), ('src/_pytest/capture.py', 645, 650, 0.1690308509457033), ('src/_pytest/capture.py', 682, 683, 0.1690308509457033), ('src/_pytest/capture.py', 685, 685, 0.1690308509457033), ('src/_pytest/capture.py', 764, 765, 0.1690308509457033), ('src/_pytest/capture.py', 777, 778, 0.1690308509457033), ('src/_pytest/capture.py', 804, 804, 0.1690308509457033), ('src/_pytest/capture.py', 841, 842, 0.1690308509457033), ('src/_pytest/capture.py', 844, 846, 0.1690308509457033), ('src/_pytest/config/__init__.py', 592, 592, 0.1690308509457033), ('src/_pytest/config/__init__.py', 595, 595, 0.1690308509457033), ('src/_pytest/config/__init__.py', 599, 601, 0.1690308509457033), ('src/_pytest/config/__init__.py', 1033, 1033, 0.1690308509457033), ('src/_pytest/config/__init__.py', 1610, 1613, 0.1690308509457033), ('src/_pytest/config/__init__.py', 1615, 1615, 0.1690308509457033), ('src/_pytest/deprecated.py', 150, 150, 0.1690308509457033), ('src/_pytest/logging.py', 355, 356, 0.1690308509457033), ('src/_pytest/logging.py', 358, 358, 0.1690308509457033), ('src/_pytest/logging.py', 778, 778, 0.1690308509457033), ('src/_pytest/logging.py', 794, 794, 0.1690308509457033), ('src/_pytest/logging.py', 796, 797, 0.1690308509457033), ('src/_pytest/logging.py', 914, 914, 0.1690308509457033), ('src/_pytest/main.py', 545, 546, 0.1690308509457033), ('src/_pytest/main.py', 549, 552, 0.1690308509457033), ('src/_pytest/main.py', 554, 555, 0.1690308509457033), ('src/_pytest/main.py', 562, 563, 0.1690308509457033), ('src/_pytest/mark/structures.py', 613, 615, 0.1690308509457033), ('src/_pytest/mark/structures.py', 617, 618, 0.1690308509457033), ('src/_pytest/nodes.py', 268, 268, 0.1690308509457033), ('src/_pytest/nodes.py', 315, 315, 0.1690308509457033), ('src/_pytest/nodes.py', 751, 752, 0.1690308509457033), ('src/_pytest/python.py', 308, 310, 0.1690308509457033), ('src/_pytest/python.py', 318, 318, 0.1690308509457033), ('src/_pytest/reports.py', 149, 149, 0.1690308509457033), ('src/_pytest/reports.py', 154, 154, 0.1690308509457033), ('src/_pytest/reports.py', 159, 159, 0.1690308509457033), ('src/_pytest/reports.py', 271, 271, 0.1690308509457033), ('src/_pytest/reports.py', 278, 278, 0.1690308509457033), ('src/_pytest/reports.py', 282, 282, 0.1690308509457033), ('src/_pytest/reports.py', 285, 285, 0.1690308509457033), ('src/_pytest/reports.py', 288, 288, 0.1690308509457033), ('src/_pytest/reports.py', 291, 291, 0.1690308509457033), ('src/_pytest/reports.py', 295, 295, 0.1690308509457033), ('src/_pytest/reports.py', 301, 301, 0.1690308509457033), ('src/_pytest/reports.py', 304, 304, 0.1690308509457033), ('src/_pytest/reports.py', 307, 307, 0.1690308509457033), ('src/_pytest/reports.py', 309, 309, 0.1690308509457033), ('src/_pytest/reports.py', 311, 311, 0.1690308509457033), ('src/_pytest/reports.py', 325, 325, 0.1690308509457033), ('src/_pytest/reports.py', 327, 336, 0.1690308509457033), ('src/_pytest/runner.py', 193, 195, 0.1690308509457033), ('src/_pytest/runner.py', 197, 198, 0.1690308509457033), ('src/_pytest/runner.py', 204, 205, 0.1690308509457033), ('src/_pytest/runner.py', 235, 235, 0.1690308509457033), ('src/_pytest/runner.py', 297, 303, 0.1690308509457033), ('src/_pytest/runner.py', 348, 358, 0.1690308509457033), ('src/_pytest/runner.py', 368, 368, 0.1690308509457033), ('src/_pytest/skipping.py', 265, 268, 0.1690308509457033), ('src/_pytest/skipping.py', 270, 270, 0.1690308509457033), ('src/_pytest/skipping.py', 274, 274, 0.1690308509457033), ('src/_pytest/skipping.py', 292, 292, 0.1690308509457033), ('src/_pytest/skipping.py', 297, 297, 0.1690308509457033), ('src/_pytest/stash.py', 80, 80, 0.1690308509457033), ('src/_pytest/stash.py', 85, 88, 0.1690308509457033), ('src/_pytest/stash.py', 93, 97, 0.1690308509457033), ('src/_pytest/terminal.py', 520, 523, 0.1690308509457033), ('src/_pytest/terminal.py', 570, 571, 0.1690308509457033), ('src/_pytest/terminal.py', 573, 574, 0.1690308509457033), ('src/_pytest/terminal.py', 576, 578, 0.1690308509457033), ('src/_pytest/terminal.py', 581, 582, 0.1690308509457033), ('src/_pytest/threadexception.py', 54, 57, 0.1690308509457033), ('src/_pytest/tmpdir.py', 314, 315, 0.1690308509457033), ('src/_pytest/tmpdir.py', 317, 318, 0.1690308509457033), ('src/_pytest/unittest.py', 351, 351, 0.1690308509457033), ('src/_pytest/unraisableexception.py', 56, 59, 0.1690308509457033), ('src/_pytest/pytester.py', 722, 722, 0.16666666666666666), ('src/_pytest/assertion/rewrite.py', 426, 426, 0.16012815380508713), ('src/_pytest/monkeypatch.py', 54, 56, 0.16012815380508713), ('src/_pytest/_code/code.py', 79, 79, 0.159111456835146), ('src/_pytest/_code/code.py', 89, 89, 0.159111456835146), ('src/_pytest/_code/code.py', 91, 92, 0.159111456835146), ('src/_pytest/compat.py', 249, 255, 0.159111456835146), ('src/_pytest/_io/wcwidth.py', 49, 52, 0.15861031714362883), ('src/_pytest/_io/wcwidth.py', 54, 55, 0.15861031714362883), ('src/_pytest/_io/saferepr.py', 51, 51, 0.15811388300841897), ('src/_pytest/_io/saferepr.py', 55, 57, 0.15811388300841897), ('src/_pytest/_io/saferepr.py', 60, 61, 0.15811388300841897), ('src/_pytest/_io/saferepr.py', 64, 64, 0.15811388300841897), ('src/_pytest/_io/saferepr.py', 70, 72, 0.15811388300841897), ('src/_pytest/_io/saferepr.py', 115, 115, 0.15811388300841897), ('src/_pytest/assertion/rewrite.py', 415, 416, 0.15811388300841897), ('src/_pytest/assertion/util.py', 46, 48, 0.15811388300841897), ('src/_pytest/assertion/util.py', 65, 65, 0.15811388300841897), ('src/_pytest/assertion/util.py', 99, 100, 0.15811388300841897), ('src/_pytest/compat.py', 244, 245, 0.15811388300841897), ('src/_pytest/compat.py', 265, 265, 0.15811388300841897), ('src/_pytest/compat.py', 267, 267, 0.15811388300841897), ('src/_pytest/terminal.py', 410, 411, 0.15811388300841897), ('src/_pytest/terminal.py', 420, 420, 0.15811388300841897), ('src/_pytest/_io/terminalwriter.py', 95, 95, 0.15762208124782012), ('src/_pytest/nodes.py', 318, 318, 0.15762208124782012), ('src/_pytest/runner.py', 516, 526, 0.15762208124782012), ('src/_pytest/runner.py', 536, 536, 0.15762208124782012), ('src/_pytest/runner.py', 538, 538, 0.15762208124782012), ('src/_pytest/runner.py', 540, 541, 0.15762208124782012), ('src/_pytest/stash.py', 104, 104, 0.15762208124782012), ('src/_pytest/terminal.py', 690, 690, 0.15762208124782012), ('src/_pytest/terminal.py', 1215, 1219, 0.15762208124782012), ('src/_pytest/terminal.py', 639, 640, 0.15713484026367722), ('src/_pytest/config/__init__.py', 1813, 1814, 0.15665208999759148), ('src/_pytest/config/__init__.py', 1816, 1816, 0.15665208999759148), ('src/_pytest/warnings.py', 41, 43, 0.15665208999759148), ('src/_pytest/warnings.py', 45, 45, 0.15665208999759148), ('src/_pytest/warnings.py', 47, 47, 0.15665208999759148), ('src/_pytest/warnings.py', 49, 50, 0.15665208999759148), ('src/_pytest/warnings.py', 52, 52, 0.15665208999759148), ('src/_pytest/warnings.py', 54, 54, 0.15665208999759148), ('src/_pytest/warnings.py', 57, 59, 0.15665208999759148), ('src/_pytest/assertion/rewrite.py', 424, 424, 0.15617376188860607), ('src/_pytest/fixtures.py', 775, 775, 0.15617376188860607), ('src/_pytest/fixtures.py', 1018, 1018, 0.15617376188860607), ('src/_pytest/warnings.py', 63, 63, 0.15617376188860607), ('src/_pytest/warnings.py', 65, 65, 0.15617376188860607), ('src/_pytest/config/__init__.py', 1495, 1499, 0.15476464650682736), ('src/_pytest/pathlib.py', 730, 730, 0.15476464650682736), ('src/_pytest/_code/code.py', 65, 65, 0.15075567228888181), ('src/_pytest/_code/code.py', 69, 69, 0.15075567228888181), ('src/_pytest/_code/source.py', 131, 132, 0.15075567228888181), ('src/_pytest/assertion/rewrite.py', 421, 422, 0.15075567228888181), ('src/_pytest/pytester.py', 781, 784, 0.14285714285714285), ('src/_pytest/terminal.py', 477, 477, 0.13834289277321493), ('src/_pytest/_io/terminalwriter.py', 145, 148, 0.13801311186847084), ('src/_pytest/_io/terminalwriter.py', 174, 174, 0.13801311186847084), ('src/_pytest/capture.py', 872, 873, 0.13801311186847084), ('src/_pytest/capture.py', 877, 878, 0.13801311186847084), ('src/_pytest/compat.py', 62, 62, 0.13801311186847084), ('src/_pytest/logging.py', 811, 811, 0.13801311186847084), ('src/_pytest/logging.py', 817, 819, 0.13801311186847084), ('src/_pytest/runner.py', 132, 134, 0.13801311186847084), ('src/_pytest/skipping.py', 255, 255, 0.13801311186847084), ('src/_pytest/terminal.py', 393, 394, 0.13801311186847084), ('src/_pytest/threadexception.py', 83, 83, 0.13801311186847084), ('src/_pytest/threadexception.py', 88, 88, 0.13801311186847084), ('src/_pytest/unraisableexception.py', 88, 88, 0.13801311186847084), ('src/_pytest/unraisableexception.py', 93, 93, 0.13801311186847084), ('testing/conftest.py', 18, 20, 0.13801311186847084), ('src/_pytest/fixtures.py', 440, 441, 0.13768567816430285), ('src/_pytest/fixtures.py', 443, 444, 0.13768567816430285), ('src/_pytest/fixtures.py', 449, 450, 0.13768567816430285), ('src/_pytest/fixtures.py', 453, 453, 0.13768567816430285), ('src/_pytest/fixtures.py', 456, 456, 0.13768567816430285), ('src/_pytest/fixtures.py', 701, 701, 0.13768567816430285), ('src/_pytest/cacheprovider.py', 556, 556, 0.13736056394868904), ('src/_pytest/config/__init__.py', 584, 586, 0.13736056394868904), ('src/_pytest/terminal.py', 764, 767, 0.13736056394868904), ('src/_pytest/config/__init__.py', 1325, 1329, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 104, 112, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 116, 116, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 120, 122, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 124, 125, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 127, 128, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 135, 137, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 190, 194, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 198, 202, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 205, 206, 0.13608276348795434), ('src/_pytest/config/findpaths.py', 225, 225, 0.13608276348795434), ('src/_pytest/pathlib.py', 739, 740, 0.13608276348795434), ('src/_pytest/pathlib.py', 753, 755, 0.13608276348795434), ('src/_pytest/pathlib.py', 758, 758, 0.13608276348795434), ('src/_pytest/pathlib.py', 762, 762, 0.13608276348795434), ('src/_pytest/pathlib.py', 764, 766, 0.13608276348795434), ('src/_pytest/pathlib.py', 768, 768, 0.13608276348795434), ('src/_pytest/pathlib.py', 770, 770, 0.13608276348795434), ('src/_pytest/reports.py', 176, 176, 0.13608276348795434), ('src/_pytest/terminal.py', 1278, 1284, 0.13608276348795434), ('src/_pytest/terminal.py', 1429, 1429, 0.13608276348795434), ('src/_pytest/main.py', 743, 745, 0.13483997249264842), ('src/_pytest/main.py', 748, 749, 0.13483997249264842), ('src/_pytest/pathlib.py', 552, 553, 0.13483997249264842), ('src/_pytest/_io/terminalwriter.py', 27, 27, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 29, 30, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 66, 68, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 76, 80, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 114, 115, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 118, 118, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 124, 124, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 129, 131, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 139, 140, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 142, 142, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 170, 171, 0.1336306209562122), ('src/_pytest/_py/path.py', 288, 288, 0.1336306209562122), ('src/_pytest/_py/path.py', 291, 292, 0.1336306209562122), ('src/_pytest/_py/path.py', 298, 298, 0.1336306209562122), ('src/_pytest/_py/path.py', 300, 300, 0.1336306209562122), ('src/_pytest/assertion/__init__.py', 109, 112, 0.1336306209562122), ('src/_pytest/assertion/__init__.py', 172, 175, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 70, 72, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 80, 82, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 84, 84, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 104, 105, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 144, 144, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 158, 160, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 162, 163, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 175, 178, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 180, 181, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 188, 192, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 199, 200, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 204, 205, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 207, 209, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 211, 212, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 299, 306, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 308, 308, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 326, 326, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 328, 328, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 337, 339, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 349, 349, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 351, 352, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 398, 399, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 412, 415, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 421, 421, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 423, 423, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 437, 437, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 443, 444, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 447, 447, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 450, 451, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 513, 513, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 517, 517, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 522, 524, 0.1336306209562122), ('src/_pytest/cacheprovider.py', 545, 545, 0.1336306209562122), ('src/_pytest/capture.py', 177, 177, 0.1336306209562122), ('src/_pytest/capture.py', 180, 181, 0.1336306209562122), ('src/_pytest/capture.py', 344, 346, 0.1336306209562122), ('src/_pytest/capture.py', 422, 427, 0.1336306209562122), ('src/_pytest/capture.py', 689, 692, 0.1336306209562122), ('src/_pytest/capture.py', 852, 858, 0.1336306209562122), ('src/_pytest/capture.py', 860, 860, 0.1336306209562122), ('src/_pytest/capture.py', 863, 863, 0.1336306209562122), ('src/_pytest/compat.py', 36, 36, 0.1336306209562122), ('src/_pytest/compat.py', 134, 135, 0.1336306209562122), ('src/_pytest/compat.py', 144, 146, 0.1336306209562122), ('src/_pytest/compat.py', 148, 148, 0.1336306209562122), ('src/_pytest/compat.py', 151, 151, 0.1336306209562122), ('src/_pytest/compat.py', 153, 153, 0.1336306209562122), ('src/_pytest/compat.py', 159, 159, 0.1336306209562122), ('src/_pytest/compat.py', 162, 162, 0.1336306209562122), ('src/_pytest/compat.py', 169, 169, 0.1336306209562122), ('src/_pytest/compat.py', 171, 171, 0.1336306209562122), ('src/_pytest/compat.py', 274, 276, 0.1336306209562122), ('src/_pytest/compat.py', 279, 279, 0.1336306209562122), ('src/_pytest/compat.py', 281, 281, 0.1336306209562122), ('src/_pytest/compat.py', 300, 300, 0.1336306209562122), ('src/_pytest/compat.py', 302, 305, 0.1336306209562122), ('src/_pytest/config/__init__.py', 145, 147, 0.1336306209562122), ('src/_pytest/config/__init__.py', 165, 167, 0.1336306209562122), ('src/_pytest/config/__init__.py', 169, 170, 0.1336306209562122), ('src/_pytest/config/__init__.py', 174, 174, 0.1336306209562122), ('src/_pytest/config/__init__.py', 320, 325, 0.1336306209562122), ('src/_pytest/config/__init__.py', 328, 330, 0.1336306209562122), ('src/_pytest/config/__init__.py', 340, 341, 0.1336306209562122), ('src/_pytest/config/__init__.py', 512, 514, 0.1336306209562122), ('src/_pytest/config/__init__.py', 518, 520, 0.1336306209562122), ('src/_pytest/config/__init__.py', 524, 524, 0.1336306209562122), ('src/_pytest/config/__init__.py', 623, 624, 0.1336306209562122), ('src/_pytest/config/__init__.py', 629, 629, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1051, 1055, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1058, 1064, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1346, 1347, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1373, 1373, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1415, 1416, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1484, 1486, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1512, 1521, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1564, 1566, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1568, 1569, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1680, 1680, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1682, 1682, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1684, 1684, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1687, 1688, 0.1336306209562122), ('src/_pytest/config/__init__.py', 1692, 1692, 0.1336306209562122), ('src/_pytest/config/compat.py', 42, 42, 0.1336306209562122), ('src/_pytest/config/compat.py', 44, 48, 0.1336306209562122), ('src/_pytest/config/compat.py', 55, 56, 0.1336306209562122), ('src/_pytest/config/compat.py', 59, 59, 0.1336306209562122), ('src/_pytest/config/compat.py', 64, 66, 0.1336306209562122), ('src/_pytest/config/compat.py', 68, 70, 0.1336306209562122), ('src/_pytest/debugging.py', 69, 69, 0.1336306209562122), ('src/_pytest/debugging.py', 71, 71, 0.1336306209562122), ('src/_pytest/debugging.py', 73, 73, 0.1336306209562122), ('src/_pytest/debugging.py', 76, 77, 0.1336306209562122), ('src/_pytest/debugging.py', 79, 81, 0.1336306209562122), ('src/_pytest/debugging.py', 85, 90, 0.1336306209562122), ('src/_pytest/debugging.py', 92, 92, 0.1336306209562122), ('src/_pytest/doctest.py', 122, 122, 0.1336306209562122), ('src/_pytest/doctest.py', 129, 131, 0.1336306209562122), ('src/_pytest/doctest.py', 139, 139, 0.1336306209562122), ('src/_pytest/faulthandler.py', 26, 26, 0.1336306209562122), ('src/_pytest/faulthandler.py', 28, 30, 0.1336306209562122), ('src/_pytest/faulthandler.py', 34, 34, 0.1336306209562122), ('src/_pytest/faulthandler.py', 36, 36, 0.1336306209562122), ('src/_pytest/faulthandler.py', 38, 41, 0.1336306209562122), ('src/_pytest/faulthandler.py', 43, 43, 0.1336306209562122), ('src/_pytest/faulthandler.py', 47, 48, 0.1336306209562122), ('src/_pytest/faulthandler.py', 54, 54, 0.1336306209562122), ('src/_pytest/faulthandler.py', 58, 58, 0.1336306209562122), ('src/_pytest/fixtures.py', 113, 113, 0.1336306209562122), ('src/_pytest/fixtures.py', 229, 231, 0.1336306209562122), ('src/_pytest/fixtures.py', 276, 283, 0.1336306209562122), ('src/_pytest/fixtures.py', 289, 291, 0.1336306209562122), ('src/_pytest/fixtures.py', 311, 312, 0.1336306209562122), ('src/_pytest/fixtures.py', 962, 962, 0.1336306209562122), ('src/_pytest/fixtures.py', 977, 977, 0.1336306209562122), ('src/_pytest/fixtures.py', 981, 981, 0.1336306209562122), ('src/_pytest/fixtures.py', 983, 983, 0.1336306209562122), ('src/_pytest/fixtures.py', 985, 986, 0.1336306209562122), ('src/_pytest/fixtures.py', 988, 988, 0.1336306209562122), ('src/_pytest/fixtures.py', 990, 992, 0.1336306209562122), ('src/_pytest/fixtures.py', 994, 994, 0.1336306209562122), ('src/_pytest/fixtures.py', 996, 996, 0.1336306209562122), ('src/_pytest/fixtures.py', 1000, 1000, 0.1336306209562122), ('src/_pytest/fixtures.py', 1002, 1002, 0.1336306209562122), ('src/_pytest/fixtures.py', 1006, 1006, 0.1336306209562122), ('src/_pytest/fixtures.py', 1009, 1010, 0.1336306209562122), ('src/_pytest/fixtures.py', 1416, 1419, 0.1336306209562122), ('src/_pytest/fixtures.py', 1421, 1422, 0.1336306209562122), ('src/_pytest/fixtures.py', 1424, 1424, 0.1336306209562122), ('src/_pytest/fixtures.py', 1464, 1468, 0.1336306209562122), ('src/_pytest/fixtures.py', 1473, 1473, 0.1336306209562122), ('src/_pytest/fixtures.py', 1483, 1483, 0.1336306209562122), ('src/_pytest/fixtures.py', 1592, 1592, 0.1336306209562122), ('src/_pytest/fixtures.py', 1634, 1635, 0.1336306209562122), ('src/_pytest/fixtures.py', 1641, 1641, 0.1336306209562122), ('src/_pytest/fixtures.py', 1644, 1646, 0.1336306209562122), ('src/_pytest/fixtures.py', 1649, 1650, 0.1336306209562122), ('src/_pytest/fixtures.py', 1654, 1656, 0.1336306209562122), ('src/_pytest/fixtures.py', 1659, 1659, 0.1336306209562122), ('src/_pytest/fixtures.py', 1661, 1661, 0.1336306209562122), ('src/_pytest/fixtures.py', 1668, 1668, 0.1336306209562122), ('src/_pytest/fixtures.py', 1670, 1678, 0.1336306209562122), ('src/_pytest/fixtures.py', 1681, 1682, 0.1336306209562122), ('src/_pytest/fixtures.py', 1689, 1691, 0.1336306209562122), ('src/_pytest/fixtures.py', 1694, 1694, 0.1336306209562122), ('src/_pytest/helpconfig.py', 148, 148, 0.1336306209562122), ('src/_pytest/helpconfig.py', 151, 151, 0.1336306209562122), ('src/_pytest/helpconfig.py', 156, 156, 0.1336306209562122), ('src/_pytest/helpconfig.py', 249, 250, 0.1336306209562122), ('src/_pytest/helpconfig.py', 257, 257, 0.1336306209562122), ('src/_pytest/helpconfig.py', 266, 266, 0.1336306209562122), ('src/_pytest/junitxml.py', 430, 430, 0.1336306209562122), ('src/_pytest/junitxml.py', 432, 432, 0.1336306209562122), ('src/_pytest/junitxml.py', 447, 448, 0.1336306209562122), ('src/_pytest/legacypath.py', 287, 288, 0.1336306209562122), ('src/_pytest/legacypath.py', 351, 351, 0.1336306209562122), ('src/_pytest/legacypath.py', 362, 362, 0.1336306209562122), ('src/_pytest/legacypath.py', 372, 372, 0.1336306209562122), ('src/_pytest/legacypath.py', 382, 382, 0.1336306209562122), ('src/_pytest/legacypath.py', 392, 392, 0.1336306209562122), ('src/_pytest/legacypath.py', 452, 454, 0.1336306209562122), ('src/_pytest/legacypath.py', 460, 461, 0.1336306209562122), ('src/_pytest/legacypath.py', 466, 467, 0.1336306209562122), ('src/_pytest/legacypath.py', 469, 469, 0.1336306209562122), ('src/_pytest/logging.py', 94, 97, 0.1336306209562122), ('src/_pytest/logging.py', 99, 100, 0.1336306209562122), ('src/_pytest/logging.py', 116, 118, 0.1336306209562122), ('src/_pytest/logging.py', 120, 120, 0.1336306209562122), ('src/_pytest/logging.py', 122, 122, 0.1336306209562122), ('src/_pytest/logging.py', 125, 127, 0.1336306209562122), ('src/_pytest/logging.py', 129, 130, 0.1336306209562122), ('src/_pytest/logging.py', 147, 148, 0.1336306209562122), ('src/_pytest/logging.py', 183, 184, 0.1336306209562122), ('src/_pytest/logging.py', 230, 235, 0.1336306209562122), ('src/_pytest/logging.py', 366, 367, 0.1336306209562122), ('src/_pytest/logging.py', 587, 591, 0.1336306209562122), ('src/_pytest/logging.py', 594, 594, 0.1336306209562122), ('src/_pytest/logging.py', 612, 612, 0.1336306209562122), ('src/_pytest/logging.py', 624, 624, 0.1336306209562122), ('src/_pytest/logging.py', 627, 630, 0.1336306209562122), ('src/_pytest/logging.py', 632, 636, 0.1336306209562122), ('src/_pytest/logging.py', 639, 641, 0.1336306209562122), ('src/_pytest/logging.py', 646, 649, 0.1336306209562122), ('src/_pytest/logging.py', 652, 653, 0.1336306209562122), ('src/_pytest/logging.py', 655, 655, 0.1336306209562122), ('src/_pytest/logging.py', 658, 659, 0.1336306209562122), ('src/_pytest/logging.py', 661, 661, 0.1336306209562122), ('src/_pytest/logging.py', 669, 673, 0.1336306209562122), ('src/_pytest/logging.py', 675, 676, 0.1336306209562122), ('src/_pytest/logging.py', 679, 680, 0.1336306209562122), ('src/_pytest/logging.py', 688, 690, 0.1336306209562122), ('src/_pytest/logging.py', 692, 693, 0.1336306209562122), ('src/_pytest/logging.py', 698, 699, 0.1336306209562122), ('src/_pytest/logging.py', 702, 702, 0.1336306209562122), ('src/_pytest/logging.py', 728, 732, 0.1336306209562122), ('src/_pytest/logging.py', 743, 743, 0.1336306209562122), ('src/_pytest/logging.py', 745, 747, 0.1336306209562122), ('src/_pytest/logging.py', 751, 751, 0.1336306209562122), ('src/_pytest/logging.py', 753, 755, 0.1336306209562122), ('src/_pytest/logging.py', 759, 759, 0.1336306209562122), ('src/_pytest/logging.py', 763, 763, 0.1336306209562122), ('src/_pytest/logging.py', 767, 769, 0.1336306209562122), ('src/_pytest/logging.py', 827, 827, 0.1336306209562122), ('src/_pytest/logging.py', 829, 831, 0.1336306209562122), ('src/_pytest/logging.py', 837, 837, 0.1336306209562122), ('src/_pytest/main.py', 301, 306, 0.1336306209562122), ('src/_pytest/main.py', 312, 313, 0.1336306209562122), ('src/_pytest/main.py', 317, 317, 0.1336306209562122), ('src/_pytest/main.py', 323, 324, 0.1336306209562122), ('src/_pytest/main.py', 334, 334, 0.1336306209562122), ('src/_pytest/main.py', 360, 363, 0.1336306209562122), ('src/_pytest/main.py', 378, 379, 0.1336306209562122), ('src/_pytest/main.py', 381, 383, 0.1336306209562122), ('src/_pytest/main.py', 386, 386, 0.1336306209562122), ('src/_pytest/main.py', 389, 390, 0.1336306209562122), ('src/_pytest/main.py', 392, 394, 0.1336306209562122), ('src/_pytest/main.py', 397, 397, 0.1336306209562122), ('src/_pytest/main.py', 400, 401, 0.1336306209562122), ('src/_pytest/main.py', 404, 404, 0.1336306209562122), ('src/_pytest/main.py', 409, 409, 0.1336306209562122), ('src/_pytest/main.py', 413, 415, 0.1336306209562122), ('src/_pytest/main.py', 474, 480, 0.1336306209562122), ('src/_pytest/main.py', 482, 487, 0.1336306209562122), ('src/_pytest/main.py', 489, 489, 0.1336306209562122), ('src/_pytest/main.py', 491, 491, 0.1336306209562122), ('src/_pytest/main.py', 495, 496, 0.1336306209562122), ('src/_pytest/main.py', 513, 513, 0.1336306209562122), ('src/_pytest/main.py', 521, 521, 0.1336306209562122), ('src/_pytest/main.py', 523, 523, 0.1336306209562122), ('src/_pytest/main.py', 577, 578, 0.1336306209562122), ('src/_pytest/main.py', 582, 584, 0.1336306209562122), ('src/_pytest/main.py', 587, 591, 0.1336306209562122), ('src/_pytest/main.py', 594, 594, 0.1336306209562122), ('src/_pytest/main.py', 596, 596, 0.1336306209562122), ('src/_pytest/main.py', 626, 627, 0.1336306209562122), ('src/_pytest/main.py', 629, 630, 0.1336306209562122), ('src/_pytest/main.py', 632, 634, 0.1336306209562122), ('src/_pytest/main.py', 636, 636, 0.1336306209562122), ('src/_pytest/main.py', 638, 645, 0.1336306209562122), ('src/_pytest/main.py', 647, 653, 0.1336306209562122), ('src/_pytest/main.py', 664, 664, 0.1336306209562122), ('src/_pytest/main.py', 667, 669, 0.1336306209562122), ('src/_pytest/main.py', 671, 673, 0.1336306209562122), ('src/_pytest/main.py', 676, 676, 0.1336306209562122), ('src/_pytest/main.py', 678, 679, 0.1336306209562122), ('src/_pytest/main.py', 682, 682, 0.1336306209562122), ('src/_pytest/main.py', 685, 686, 0.1336306209562122), ('src/_pytest/main.py', 690, 690, 0.1336306209562122), ('src/_pytest/main.py', 693, 693, 0.1336306209562122), ('src/_pytest/main.py', 695, 697, 0.1336306209562122), ('src/_pytest/main.py', 702, 705, 0.1336306209562122), ('src/_pytest/main.py', 708, 710, 0.1336306209562122), ('src/_pytest/main.py', 719, 720, 0.1336306209562122), ('src/_pytest/main.py', 722, 724, 0.1336306209562122), ('src/_pytest/main.py', 727, 728, 0.1336306209562122), ('src/_pytest/main.py', 730, 730, 0.1336306209562122), ('src/_pytest/main.py', 732, 734, 0.1336306209562122), ('src/_pytest/main.py', 739, 739, 0.1336306209562122), ('src/_pytest/main.py', 825, 825, 0.1336306209562122), ('src/_pytest/main.py', 830, 831, 0.1336306209562122), ('src/_pytest/main.py', 835, 837, 0.1336306209562122), ('src/_pytest/main.py', 840, 840, 0.1336306209562122), ('src/_pytest/main.py', 885, 887, 0.1336306209562122), ('src/_pytest/main.py', 889, 889, 0.1336306209562122), ('src/_pytest/main.py', 891, 893, 0.1336306209562122), ('src/_pytest/main.py', 900, 900, 0.1336306209562122), ('src/_pytest/main.py', 907, 907, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 114, 114, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 116, 116, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 129, 129, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 186, 188, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 226, 228, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 251, 252, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 256, 257, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 259, 259, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 261, 261, 0.1336306209562122), ('src/_pytest/mark/__init__.py', 269, 269, 0.1336306209562122), ('src/_pytest/mark/structures.py', 527, 528, 0.1336306209562122), ('src/_pytest/mark/structures.py', 575, 577, 0.1336306209562122), ('src/_pytest/nodes.py', 110, 110, 0.1336306209562122), ('src/_pytest/nodes.py', 117, 118, 0.1336306209562122), ('src/_pytest/nodes.py', 120, 120, 0.1336306209562122), ('src/_pytest/nodes.py', 140, 141, 0.1336306209562122), ('src/_pytest/nodes.py', 197, 197, 0.1336306209562122), ('src/_pytest/nodes.py', 200, 200, 0.1336306209562122), ('src/_pytest/nodes.py', 202, 202, 0.1336306209562122), ('src/_pytest/nodes.py', 204, 204, 0.1336306209562122), ('src/_pytest/nodes.py', 206, 206, 0.1336306209562122), ('src/_pytest/nodes.py', 208, 208, 0.1336306209562122), ('src/_pytest/nodes.py', 210, 210, 0.1336306209562122), ('src/_pytest/nodes.py', 212, 212, 0.1336306209562122), ('src/_pytest/nodes.py', 218, 218, 0.1336306209562122), ('src/_pytest/nodes.py', 221, 221, 0.1336306209562122), ('src/_pytest/nodes.py', 225, 225, 0.1336306209562122), ('src/_pytest/nodes.py', 228, 228, 0.1336306209562122), ('src/_pytest/nodes.py', 231, 231, 0.1336306209562122), ('src/_pytest/nodes.py', 233, 235, 0.1336306209562122), ('src/_pytest/nodes.py', 243, 243, 0.1336306209562122), ('src/_pytest/nodes.py', 245, 245, 0.1336306209562122), ('src/_pytest/nodes.py', 259, 259, 0.1336306209562122), ('src/_pytest/nodes.py', 261, 261, 0.1336306209562122), ('src/_pytest/nodes.py', 263, 263, 0.1336306209562122), ('src/_pytest/nodes.py', 591, 591, 0.1336306209562122), ('src/_pytest/nodes.py', 599, 604, 0.1336306209562122), ('src/_pytest/nodes.py', 608, 610, 0.1336306209562122), ('src/_pytest/nodes.py', 612, 614, 0.1336306209562122), ('src/_pytest/nodes.py', 616, 618, 0.1336306209562122), ('src/_pytest/nodes.py', 622, 622, 0.1336306209562122), ('src/_pytest/nodes.py', 625, 631, 0.1336306209562122), ('src/_pytest/nodes.py', 644, 644, 0.1336306209562122), ('src/_pytest/pastebin.py', 33, 33, 0.1336306209562122), ('src/_pytest/pastebin.py', 53, 53, 0.1336306209562122), ('src/_pytest/pastebin.py', 95, 96, 0.1336306209562122), ('src/_pytest/pathlib.py', 412, 414, 0.1336306209562122), ('src/_pytest/pathlib.py', 417, 417, 0.1336306209562122), ('src/_pytest/pathlib.py', 517, 517, 0.1336306209562122), ('src/_pytest/pathlib.py', 519, 519, 0.1336306209562122), ('src/_pytest/pathlib.py', 521, 521, 0.1336306209562122), ('src/_pytest/pathlib.py', 524, 524, 0.1336306209562122), ('src/_pytest/pathlib.py', 544, 545, 0.1336306209562122), ('src/_pytest/pathlib.py', 558, 558, 0.1336306209562122), ('src/_pytest/pathlib.py', 561, 563, 0.1336306209562122), ('src/_pytest/pathlib.py', 567, 567, 0.1336306209562122), ('src/_pytest/pathlib.py', 676, 680, 0.1336306209562122), ('src/_pytest/pathlib.py', 684, 684, 0.1336306209562122), ('src/_pytest/pathlib.py', 692, 693, 0.1336306209562122), ('src/_pytest/pathlib.py', 696, 698, 0.1336306209562122), ('src/_pytest/pathlib.py', 703, 705, 0.1336306209562122), ('src/_pytest/pathlib.py', 717, 720, 0.1336306209562122), ('src/_pytest/pytester.py', 230, 231, 0.1336306209562122), ('src/_pytest/pytester.py', 257, 257, 0.1336306209562122), ('src/_pytest/pytester.py', 259, 261, 0.1336306209562122), ('src/_pytest/pytester.py', 263, 264, 0.1336306209562122), ('src/_pytest/pytester.py', 266, 267, 0.1336306209562122), ('src/_pytest/pytester.py', 269, 269, 0.1336306209562122), ('src/_pytest/pytester.py', 272, 272, 0.1336306209562122), ('src/_pytest/pytester.py', 753, 755, 0.1336306209562122), ('src/_pytest/pytester.py', 1110, 1110, 0.1336306209562122), ('src/_pytest/pytester.py', 1112, 1114, 0.1336306209562122), ('src/_pytest/pytester.py', 1119, 1120, 0.1336306209562122), ('src/_pytest/pytester.py', 1128, 1128, 0.1336306209562122), ('src/_pytest/pytester.py', 1130, 1132, 0.1336306209562122), ('src/_pytest/pytester.py', 1134, 1137, 0.1336306209562122), ('src/_pytest/pytester.py', 1143, 1143, 0.1336306209562122), ('src/_pytest/pytester.py', 1151, 1151, 0.1336306209562122), ('src/_pytest/pytester.py', 1153, 1154, 0.1336306209562122), ('src/_pytest/pytester.py', 1161, 1161, 0.1336306209562122), ('src/_pytest/pytester.py', 1163, 1163, 0.1336306209562122), ('src/_pytest/pytester.py', 1165, 1170, 0.1336306209562122), ('src/_pytest/pytester.py', 1188, 1191, 0.1336306209562122), ('src/_pytest/pytester.py', 1193, 1195, 0.1336306209562122), ('src/_pytest/pytester.py', 1197, 1198, 0.1336306209562122), ('src/_pytest/pytester.py', 1205, 1207, 0.1336306209562122), ('src/_pytest/python.py', 139, 139, 0.1336306209562122), ('src/_pytest/python.py', 142, 142, 0.1336306209562122), ('src/_pytest/python.py', 145, 145, 0.1336306209562122), ('src/_pytest/python.py', 154, 156, 0.1336306209562122), ('src/_pytest/python.py', 165, 167, 0.1336306209562122), ('src/_pytest/python.py', 208, 211, 0.1336306209562122), ('src/_pytest/python.py', 214, 216, 0.1336306209562122), ('src/_pytest/python.py', 218, 218, 0.1336306209562122), ('src/_pytest/python.py', 224, 224, 0.1336306209562122), ('src/_pytest/python.py', 228, 228, 0.1336306209562122), ('src/_pytest/python.py', 231, 232, 0.1336306209562122), ('src/_pytest/python.py', 528, 528, 0.1336306209562122), ('src/_pytest/python.py', 531, 531, 0.1336306209562122), ('src/_pytest/python.py', 543, 545, 0.1336306209562122), ('src/_pytest/python_path.py', 21, 21, 0.1336306209562122), ('src/_pytest/reports.py', 405, 405, 0.1336306209562122), ('src/_pytest/reports.py', 408, 408, 0.1336306209562122), ('src/_pytest/reports.py', 411, 411, 0.1336306209562122), ('src/_pytest/reports.py', 414, 414, 0.1336306209562122), ('src/_pytest/reports.py', 420, 420, 0.1336306209562122), ('src/_pytest/reports.py', 422, 422, 0.1336306209562122), ('src/_pytest/runner.py', 72, 76, 0.1336306209562122), ('src/_pytest/runner.py', 104, 104, 0.1336306209562122), ('src/_pytest/runner.py', 108, 108, 0.1336306209562122), ('src/_pytest/runner.py', 311, 311, 0.1336306209562122), ('src/_pytest/runner.py', 316, 316, 0.1336306209562122), ('src/_pytest/runner.py', 372, 375, 0.1336306209562122), ('src/_pytest/runner.py', 468, 468, 0.1336306209562122), ('src/_pytest/runner.py', 476, 476, 0.1336306209562122), ('src/_pytest/scope.py', 71, 71, 0.1336306209562122), ('src/_pytest/scope.py', 73, 73, 0.1336306209562122), ('src/_pytest/scope.py', 75, 75, 0.1336306209562122), ('src/_pytest/scope.py', 83, 83, 0.1336306209562122), ('src/_pytest/setuponly.py', 95, 95, 0.1336306209562122), ('src/_pytest/setuponly.py', 97, 97, 0.1336306209562122), ('src/_pytest/setupplan.py', 37, 37, 0.1336306209562122), ('src/_pytest/setupplan.py', 40, 40, 0.1336306209562122), ('src/_pytest/skipping.py', 46, 46, 0.1336306209562122), ('src/_pytest/skipping.py', 59, 61, 0.1336306209562122), ('src/_pytest/skipping.py', 65, 67, 0.1336306209562122), ('src/_pytest/skipping.py', 72, 74, 0.1336306209562122), ('src/_pytest/stash.py', 108, 108, 0.1336306209562122), ('src/_pytest/stepwise.py', 41, 41, 0.1336306209562122), ('src/_pytest/stepwise.py', 44, 44, 0.1336306209562122), ('src/_pytest/stepwise.py', 49, 51, 0.1336306209562122), ('src/_pytest/stepwise.py', 56, 56, 0.1336306209562122), ('src/_pytest/terminal.py', 261, 263, 0.1336306209562122), ('src/_pytest/terminal.py', 273, 273, 0.1336306209562122), ('src/_pytest/terminal.py', 275, 278, 0.1336306209562122), ('src/_pytest/terminal.py', 280, 280, 0.1336306209562122), ('src/_pytest/terminal.py', 282, 282, 0.1336306209562122), ('src/_pytest/terminal.py', 284, 284, 0.1336306209562122), ('src/_pytest/terminal.py', 286, 287, 0.1336306209562122), ('src/_pytest/terminal.py', 289, 290, 0.1336306209562122), ('src/_pytest/terminal.py', 294, 294, 0.1336306209562122), ('src/_pytest/terminal.py', 345, 345, 0.1336306209562122), ('src/_pytest/terminal.py', 347, 350, 0.1336306209562122), ('src/_pytest/terminal.py', 352, 356, 0.1336306209562122), ('src/_pytest/terminal.py', 358, 368, 0.1336306209562122), ('src/_pytest/terminal.py', 374, 375, 0.1336306209562122), ('src/_pytest/terminal.py', 381, 381, 0.1336306209562122), ('src/_pytest/terminal.py', 383, 385, 0.1336306209562122), ('src/_pytest/terminal.py', 398, 398, 0.1336306209562122), ('src/_pytest/terminal.py', 402, 402, 0.1336306209562122), ('src/_pytest/terminal.py', 406, 406, 0.1336306209562122), ('src/_pytest/terminal.py', 423, 424, 0.1336306209562122), ('src/_pytest/terminal.py', 447, 447, 0.1336306209562122), ('src/_pytest/terminal.py', 480, 480, 0.1336306209562122), ('src/_pytest/terminal.py', 482, 483, 0.1336306209562122), ('src/_pytest/terminal.py', 510, 511, 0.1336306209562122), ('src/_pytest/terminal.py', 546, 546, 0.1336306209562122), ('src/_pytest/terminal.py', 693, 693, 0.1336306209562122), ('src/_pytest/terminal.py', 697, 697, 0.1336306209562122), ('src/_pytest/terminal.py', 705, 707, 0.1336306209562122), ('src/_pytest/terminal.py', 711, 711, 0.1336306209562122), ('src/_pytest/terminal.py', 714, 714, 0.1336306209562122), ('src/_pytest/terminal.py', 724, 730, 0.1336306209562122), ('src/_pytest/terminal.py', 736, 736, 0.1336306209562122), ('src/_pytest/terminal.py', 738, 738, 0.1336306209562122), ('src/_pytest/terminal.py', 740, 740, 0.1336306209562122), ('src/_pytest/terminal.py', 745, 745, 0.1336306209562122), ('src/_pytest/terminal.py', 749, 751, 0.1336306209562122), ('src/_pytest/terminal.py', 753, 758, 0.1336306209562122), ('src/_pytest/terminal.py', 761, 762, 0.1336306209562122), ('src/_pytest/terminal.py', 770, 772, 0.1336306209562122), ('src/_pytest/terminal.py', 774, 774, 0.1336306209562122), ('src/_pytest/terminal.py', 779, 780, 0.1336306209562122), ('src/_pytest/terminal.py', 783, 784, 0.1336306209562122), ('src/_pytest/terminal.py', 787, 787, 0.1336306209562122), ('src/_pytest/terminal.py', 789, 789, 0.1336306209562122), ('src/_pytest/terminal.py', 792, 792, 0.1336306209562122), ('src/_pytest/terminal.py', 796, 797, 0.1336306209562122), ('src/_pytest/terminal.py', 799, 799, 0.1336306209562122), ('src/_pytest/terminal.py', 802, 802, 0.1336306209562122), ('src/_pytest/terminal.py', 804, 807, 0.1336306209562122), ('src/_pytest/terminal.py', 809, 809, 0.1336306209562122), ('src/_pytest/terminal.py', 811, 811, 0.1336306209562122), ('src/_pytest/terminal.py', 856, 864, 0.1336306209562122), ('src/_pytest/terminal.py', 866, 868, 0.1336306209562122), ('src/_pytest/terminal.py', 870, 870, 0.1336306209562122), ('src/_pytest/terminal.py', 877, 877, 0.1336306209562122), ('src/_pytest/terminal.py', 881, 886, 0.1336306209562122), ('src/_pytest/terminal.py', 888, 888, 0.1336306209562122), ('src/_pytest/terminal.py', 894, 894, 0.1336306209562122), ('src/_pytest/terminal.py', 955, 955, 0.1336306209562122), ('src/_pytest/terminal.py', 958, 961, 0.1336306209562122), ('src/_pytest/terminal.py', 1012, 1013, 0.1336306209562122), ('src/_pytest/terminal.py', 1068, 1070, 0.1336306209562122), ('src/_pytest/terminal.py', 1096, 1096, 0.1336306209562122), ('src/_pytest/terminal.py', 1099, 1101, 0.1336306209562122), ('src/_pytest/terminal.py', 1103, 1111, 0.1336306209562122), ('src/_pytest/terminal.py', 1113, 1118, 0.1336306209562122), ('src/_pytest/terminal.py', 1120, 1122, 0.1336306209562122), ('src/_pytest/terminal.py', 1124, 1125, 0.1336306209562122), ('src/_pytest/terminal.py', 1127, 1128, 0.1336306209562122), ('src/_pytest/terminal.py', 1133, 1133, 0.1336306209562122), ('src/_pytest/terminal.py', 1148, 1148, 0.1336306209562122), ('src/_pytest/terminal.py', 1163, 1163, 0.1336306209562122), ('src/_pytest/terminal.py', 1174, 1174, 0.1336306209562122), ('src/_pytest/terminal.py', 1194, 1200, 0.1336306209562122), ('src/_pytest/terminal.py', 1203, 1207, 0.1336306209562122), ('src/_pytest/terminal.py', 1234, 1237, 0.1336306209562122), ('src/_pytest/terminal.py', 1262, 1262, 0.1336306209562122), ('src/_pytest/terminal.py', 1265, 1265, 0.1336306209562122), ('src/_pytest/terminal.py', 1269, 1270, 0.1336306209562122), ('src/_pytest/terminal.py', 1275, 1276, 0.1336306209562122), ('src/_pytest/terminal.py', 1286, 1286, 0.1336306209562122), ('src/_pytest/terminal.py', 1289, 1289, 0.1336306209562122), ('src/_pytest/terminal.py', 1456, 1457, 0.1336306209562122), ('src/_pytest/tmpdir.py', 63, 64, 0.1336306209562122), ('src/_pytest/tmpdir.py', 70, 74, 0.1336306209562122), ('src/_pytest/tmpdir.py', 87, 89, 0.1336306209562122), ('src/_pytest/tmpdir.py', 94, 95, 0.1336306209562122), ('src/_pytest/tmpdir.py', 100, 105, 0.1336306209562122), ('src/_pytest/tmpdir.py', 217, 220, 0.1336306209562122), ('src/_pytest/tmpdir.py', 291, 294, 0.1336306209562122), ('src/_pytest/warnings.py', 21, 23, 0.1336306209562122), ('src/_pytest/warnings.py', 116, 118, 0.1336306209562122), ('src/_pytest/warnings.py', 120, 120, 0.1336306209562122), ('src/_pytest/warnings.py', 127, 129, 0.1336306209562122), ('src/_pytest/warnings.py', 131, 131, 0.1336306209562122), ('src/_pytest/warnings.py', 136, 138, 0.1336306209562122), ('src/_pytest/warnings.py', 140, 140, 0.1336306209562122), ('src/pytest/__init__.py', 168, 168, 0.1336306209562122), ('src/pytest/__init__.py', 173, 173, 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 84, 84, 0.13245323570650439), ('src/_pytest/_io/terminalwriter.py', 86, 86, 0.13245323570650439), ('src/_pytest/assertion/rewrite.py', 182, 182, 0.13245323570650439), ('src/_pytest/assertion/rewrite.py', 184, 184, 0.13245323570650439), ('src/_pytest/assertion/rewrite.py', 1157, 1157, 0.13245323570650439), ('src/_pytest/assertion/__init__.py', 96, 99, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 76, 77, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 125, 125, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 128, 131, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 133, 133, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 143, 147, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 151, 152, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 155, 158, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 177, 179, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 199, 200, 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 353, 356, 0.13130643285972254), ('src/_pytest/config/__init__.py', 1627, 1627, 0.13130643285972254), ('src/_pytest/main.py', 540, 541, 0.13130643285972254), ('src/_pytest/_argcomplete.py', 114, 114, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 23, 30, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 32, 32, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 38, 42, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 77, 77, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 84, 86, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 91, 94, 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 101, 102, 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', 337, 341, 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', 648, 653, 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', 1143, 1144, 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', 1171, 1171, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 455, 461, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 464, 469, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 473, 478, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 481, 485, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 487, 487, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 491, 495, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 497, 498, 0.13018891098082389), ('src/_pytest/cacheprovider.py', 500, 508, 0.13018891098082389), ('src/_pytest/capture.py', 44, 51, 0.13018891098082389), ('src/_pytest/capture.py', 53, 58, 0.13018891098082389), ('src/_pytest/capture.py', 70, 70, 0.13018891098082389), ('src/_pytest/capture.py', 101, 102, 0.13018891098082389), ('src/_pytest/capture.py', 135, 141, 0.13018891098082389), ('src/_pytest/capture.py', 144, 144, 0.13018891098082389), ('src/_pytest/capture.py', 147, 150, 0.13018891098082389), ('src/_pytest/capture.py', 227, 227, 0.13018891098082389), ('src/_pytest/capture.py', 337, 342, 0.13018891098082389), ('src/_pytest/capture.py', 374, 376, 0.13018891098082389), ('src/_pytest/capture.py', 379, 380, 0.13018891098082389), ('src/_pytest/capture.py', 382, 385, 0.13018891098082389), ('src/_pytest/capture.py', 437, 437, 0.13018891098082389), ('src/_pytest/capture.py', 439, 440, 0.13018891098082389), ('src/_pytest/capture.py', 456, 457, 0.13018891098082389), ('src/_pytest/capture.py', 459, 461, 0.13018891098082389), ('src/_pytest/capture.py', 463, 468, 0.13018891098082389), ('src/_pytest/capture.py', 470, 471, 0.13018891098082389), ('src/_pytest/capture.py', 475, 475, 0.13018891098082389), ('src/_pytest/capture.py', 495, 498, 0.13018891098082389), ('src/_pytest/capture.py', 503, 504, 0.13018891098082389), ('src/_pytest/capture.py', 506, 508, 0.13018891098082389), ('src/_pytest/capture.py', 512, 514, 0.13018891098082389), ('src/_pytest/capture.py', 611, 613, 0.13018891098082389), ('src/_pytest/capture.py', 625, 631, 0.13018891098082389), ('src/_pytest/capture.py', 635, 636, 0.13018891098082389), ('src/_pytest/capture.py', 639, 639, 0.13018891098082389), ('src/_pytest/capture.py', 642, 642, 0.13018891098082389), ('src/_pytest/capture.py', 667, 667, 0.13018891098082389), ('src/_pytest/capture.py', 669, 675, 0.13018891098082389), ('src/_pytest/capture.py', 725, 727, 0.13018891098082389), ('src/_pytest/capture.py', 747, 749, 0.13018891098082389), ('src/_pytest/capture.py', 752, 755, 0.13018891098082389), ('src/_pytest/config/__init__.py', 275, 281, 0.13018891098082389), ('src/_pytest/config/__init__.py', 285, 285, 0.13018891098082389), ('src/_pytest/config/__init__.py', 287, 287, 0.13018891098082389), ('src/_pytest/config/__init__.py', 289, 290, 0.13018891098082389), ('src/_pytest/config/__init__.py', 292, 292, 0.13018891098082389), ('src/_pytest/config/__init__.py', 310, 310, 0.13018891098082389), ('src/_pytest/config/__init__.py', 312, 312, 0.13018891098082389), ('src/_pytest/config/__init__.py', 314, 314, 0.13018891098082389), ('src/_pytest/config/__init__.py', 332, 332, 0.13018891098082389), ('src/_pytest/config/__init__.py', 343, 343, 0.13018891098082389), ('src/_pytest/config/__init__.py', 351, 351, 0.13018891098082389), ('src/_pytest/config/__init__.py', 354, 359, 0.13018891098082389), ('src/_pytest/config/__init__.py', 362, 362, 0.13018891098082389), ('src/_pytest/config/__init__.py', 366, 367, 0.13018891098082389), ('src/_pytest/config/__init__.py', 375, 375, 0.13018891098082389), ('src/_pytest/config/__init__.py', 389, 389, 0.13018891098082389), ('src/_pytest/config/__init__.py', 391, 391, 0.13018891098082389), ('src/_pytest/config/__init__.py', 395, 395, 0.13018891098082389), ('src/_pytest/config/__init__.py', 399, 399, 0.13018891098082389), ('src/_pytest/config/__init__.py', 401, 401, 0.13018891098082389), ('src/_pytest/config/__init__.py', 403, 403, 0.13018891098082389), ('src/_pytest/config/__init__.py', 408, 408, 0.13018891098082389), ('src/_pytest/config/__init__.py', 410, 410, 0.13018891098082389), ('src/_pytest/config/__init__.py', 417, 417, 0.13018891098082389), ('src/_pytest/config/__init__.py', 419, 421, 0.13018891098082389), ('src/_pytest/config/__init__.py', 437, 437, 0.13018891098082389), ('src/_pytest/config/__init__.py', 439, 439, 0.13018891098082389), ('src/_pytest/config/__init__.py', 445, 446, 0.13018891098082389), ('src/_pytest/config/__init__.py', 448, 448, 0.13018891098082389), ('src/_pytest/config/__init__.py', 451, 453, 0.13018891098082389), ('src/_pytest/config/__init__.py', 455, 455, 0.13018891098082389), ('src/_pytest/config/__init__.py', 457, 457, 0.13018891098082389), ('src/_pytest/config/__init__.py', 460, 461, 0.13018891098082389), ('src/_pytest/config/__init__.py', 465, 472, 0.13018891098082389), ('src/_pytest/config/__init__.py', 474, 474, 0.13018891098082389), ('src/_pytest/config/__init__.py', 479, 479, 0.13018891098082389), ('src/_pytest/config/__init__.py', 489, 492, 0.13018891098082389), ('src/_pytest/config/__init__.py', 495, 497, 0.13018891098082389), ('src/_pytest/config/__init__.py', 545, 551, 0.13018891098082389), ('src/_pytest/config/__init__.py', 553, 554, 0.13018891098082389), ('src/_pytest/config/__init__.py', 556, 556, 0.13018891098082389), ('src/_pytest/config/__init__.py', 560, 561, 0.13018891098082389), ('src/_pytest/config/__init__.py', 564, 567, 0.13018891098082389), ('src/_pytest/config/__init__.py', 575, 575, 0.13018891098082389), ('src/_pytest/config/__init__.py', 577, 577, 0.13018891098082389), ('src/_pytest/config/__init__.py', 582, 582, 0.13018891098082389), ('src/_pytest/config/__init__.py', 606, 610, 0.13018891098082389), ('src/_pytest/config/__init__.py', 613, 614, 0.13018891098082389), ('src/_pytest/config/__init__.py', 692, 698, 0.13018891098082389), ('src/_pytest/config/__init__.py', 704, 704, 0.13018891098082389), ('src/_pytest/config/__init__.py', 745, 745, 0.13018891098082389), ('src/_pytest/config/__init__.py', 749, 749, 0.13018891098082389), ('src/_pytest/config/__init__.py', 754, 755, 0.13018891098082389), ('src/_pytest/config/__init__.py', 768, 768, 0.13018891098082389), ('src/_pytest/config/__init__.py', 771, 771, 0.13018891098082389), ('src/_pytest/config/__init__.py', 774, 775, 0.13018891098082389), ('src/_pytest/config/__init__.py', 777, 777, 0.13018891098082389), ('src/_pytest/config/__init__.py', 782, 783, 0.13018891098082389), ('src/_pytest/config/__init__.py', 792, 793, 0.13018891098082389), ('src/_pytest/config/__init__.py', 801, 802, 0.13018891098082389), ('src/_pytest/config/__init__.py', 804, 804, 0.13018891098082389), ('src/_pytest/config/__init__.py', 807, 807, 0.13018891098082389), ('src/_pytest/config/__init__.py', 810, 811, 0.13018891098082389), ('src/_pytest/config/__init__.py', 941, 943, 0.13018891098082389), ('src/_pytest/config/__init__.py', 964, 964, 0.13018891098082389), ('src/_pytest/config/__init__.py', 966, 966, 0.13018891098082389), ('src/_pytest/config/__init__.py', 971, 971, 0.13018891098082389), ('src/_pytest/config/__init__.py', 977, 977, 0.13018891098082389), ('src/_pytest/config/__init__.py', 983, 987, 0.13018891098082389), ('src/_pytest/config/__init__.py', 989, 989, 0.13018891098082389), ('src/_pytest/config/__init__.py', 995, 995, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1002, 1002, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1004, 1004, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1006, 1015, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1017, 1018, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1020, 1020, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1043, 1043, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1048, 1048, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1075, 1076, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1095, 1095, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1133, 1134, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1136, 1138, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1146, 1152, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1154, 1160, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1164, 1165, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1167, 1171, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1173, 1184, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1186, 1186, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1195, 1198, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1200, 1201, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1205, 1206, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1212, 1212, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1214, 1214, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1216, 1216, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1230, 1233, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1236, 1236, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1238, 1238, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1254, 1254, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1258, 1260, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1263, 1264, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1266, 1266, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1278, 1281, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1284, 1286, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1291, 1294, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1297, 1298, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1300, 1303, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1307, 1307, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1309, 1310, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1313, 1314, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1316, 1316, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1321, 1322, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1350, 1350, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1352, 1353, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1377, 1379, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1420, 1421, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1423, 1424, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1426, 1426, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1428, 1432, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1434, 1440, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1508, 1509, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1583, 1583, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1587, 1587, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1599, 1599, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1634, 1634, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1655, 1655, 0.13018891098082389), ('src/_pytest/config/__init__.py', 1663, 1666, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 50, 57, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 60, 62, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 79, 88, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 111, 111, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 113, 116, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 119, 119, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 121, 131, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 134, 135, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 143, 146, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 157, 157, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 171, 173, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 208, 210, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 241, 244, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 246, 249, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 252, 252, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 269, 270, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 272, 280, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 289, 289, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 293, 302, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 304, 305, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 312, 313, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 319, 320, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 326, 326, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 328, 328, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 334, 334, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 361, 365, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 381, 382, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 384, 384, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 386, 387, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 390, 391, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 394, 396, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 398, 400, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 410, 416, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 420, 420, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 439, 440, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 448, 448, 0.13018891098082389), ('src/_pytest/config/argparsing.py', 499, 501, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 97, 97, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 139, 139, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 143, 143, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 146, 146, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 149, 149, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 154, 154, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 163, 163, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 165, 165, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 169, 169, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 181, 183, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 208, 208, 0.13018891098082389), ('src/_pytest/config/findpaths.py', 216, 217, 0.13018891098082389), ('src/_pytest/debugging.py', 45, 50, 0.13018891098082389), ('src/_pytest/debugging.py', 52, 57, 0.13018891098082389), ('src/_pytest/debugging.py', 60, 64, 0.13018891098082389), ('src/_pytest/doctest.py', 70, 74, 0.13018891098082389), ('src/_pytest/doctest.py', 76, 77, 0.13018891098082389), ('src/_pytest/doctest.py', 79, 85, 0.13018891098082389), ('src/_pytest/doctest.py', 87, 93, 0.13018891098082389), ('src/_pytest/doctest.py', 95, 101, 0.13018891098082389), ('src/_pytest/doctest.py', 103, 108, 0.13018891098082389), ('src/_pytest/doctest.py', 110, 115, 0.13018891098082389), ('src/_pytest/faulthandler.py', 18, 19, 0.13018891098082389), ('src/_pytest/faulthandler.py', 22, 22, 0.13018891098082389), ('src/_pytest/fixtures.py', 1373, 1377, 0.13018891098082389), ('src/_pytest/helpconfig.py', 27, 33, 0.13018891098082389), ('src/_pytest/helpconfig.py', 45, 52, 0.13018891098082389), ('src/_pytest/helpconfig.py', 55, 60, 0.13018891098082389), ('src/_pytest/helpconfig.py', 62, 68, 0.13018891098082389), ('src/_pytest/helpconfig.py', 72, 77, 0.13018891098082389), ('src/_pytest/helpconfig.py', 79, 86, 0.13018891098082389), ('src/_pytest/helpconfig.py', 90, 95, 0.13018891098082389), ('src/_pytest/helpconfig.py', 102, 103, 0.13018891098082389), ('src/_pytest/helpconfig.py', 105, 105, 0.13018891098082389), ('src/_pytest/junitxml.py', 383, 392, 0.13018891098082389), ('src/_pytest/junitxml.py', 394, 400, 0.13018891098082389), ('src/_pytest/junitxml.py', 402, 403, 0.13018891098082389), ('src/_pytest/junitxml.py', 405, 407, 0.13018891098082389), ('src/_pytest/junitxml.py', 409, 409, 0.13018891098082389), ('src/_pytest/junitxml.py', 411, 415, 0.13018891098082389), ('src/_pytest/junitxml.py', 417, 420, 0.13018891098082389), ('src/_pytest/junitxml.py', 422, 425, 0.13018891098082389), ('src/_pytest/legacypath.py', 420, 421, 0.13018891098082389), ('src/_pytest/legacypath.py', 424, 424, 0.13018891098082389), ('src/_pytest/legacypath.py', 427, 427, 0.13018891098082389), ('src/_pytest/legacypath.py', 430, 431, 0.13018891098082389), ('src/_pytest/legacypath.py', 435, 437, 0.13018891098082389), ('src/_pytest/legacypath.py', 440, 440, 0.13018891098082389), ('src/_pytest/legacypath.py', 443, 443, 0.13018891098082389), ('src/_pytest/legacypath.py', 446, 446, 0.13018891098082389), ('src/_pytest/legacypath.py', 476, 477, 0.13018891098082389), ('src/_pytest/logging.py', 240, 240, 0.13018891098082389), ('src/_pytest/logging.py', 242, 244, 0.13018891098082389), ('src/_pytest/logging.py', 246, 246, 0.13018891098082389), ('src/_pytest/logging.py', 248, 252, 0.13018891098082389), ('src/_pytest/logging.py', 254, 254, 0.13018891098082389), ('src/_pytest/logging.py', 259, 263, 0.13018891098082389), ('src/_pytest/logging.py', 265, 269, 0.13018891098082389), ('src/_pytest/logging.py', 271, 275, 0.13018891098082389), ('src/_pytest/logging.py', 277, 278, 0.13018891098082389), ('src/_pytest/logging.py', 280, 284, 0.13018891098082389), ('src/_pytest/logging.py', 286, 290, 0.13018891098082389), ('src/_pytest/logging.py', 292, 296, 0.13018891098082389), ('src/_pytest/logging.py', 298, 302, 0.13018891098082389), ('src/_pytest/logging.py', 304, 308, 0.13018891098082389), ('src/_pytest/logging.py', 310, 314, 0.13018891098082389), ('src/_pytest/logging.py', 316, 320, 0.13018891098082389), ('src/_pytest/logging.py', 322, 327, 0.13018891098082389), ('src/_pytest/main.py', 51, 55, 0.13018891098082389), ('src/_pytest/main.py', 67, 69, 0.13018891098082389), ('src/_pytest/main.py', 71, 72, 0.13018891098082389), ('src/_pytest/main.py', 74, 81, 0.13018891098082389), ('src/_pytest/main.py', 83, 88, 0.13018891098082389), ('src/_pytest/main.py', 90, 93, 0.13018891098082389), ('src/_pytest/main.py', 97, 104, 0.13018891098082389), ('src/_pytest/main.py', 106, 109, 0.13018891098082389), ('src/_pytest/main.py', 112, 115, 0.13018891098082389), ('src/_pytest/main.py', 118, 121, 0.13018891098082389), ('src/_pytest/main.py', 123, 129, 0.13018891098082389), ('src/_pytest/main.py', 132, 137, 0.13018891098082389), ('src/_pytest/main.py', 139, 143, 0.13018891098082389), ('src/_pytest/main.py', 148, 154, 0.13018891098082389), ('src/_pytest/main.py', 156, 159, 0.13018891098082389), ('src/_pytest/main.py', 161, 165, 0.13018891098082389), ('src/_pytest/main.py', 167, 171, 0.13018891098082389), ('src/_pytest/main.py', 173, 177, 0.13018891098082389), ('src/_pytest/main.py', 179, 185, 0.13018891098082389), ('src/_pytest/main.py', 187, 192, 0.13018891098082389), ('src/_pytest/main.py', 194, 200, 0.13018891098082389), ('src/_pytest/main.py', 202, 207, 0.13018891098082389), ('src/_pytest/main.py', 209, 214, 0.13018891098082389), ('src/_pytest/main.py', 218, 224, 0.13018891098082389), ('src/_pytest/main.py', 226, 226, 0.13018891098082389), ('src/_pytest/main.py', 234, 234, 0.13018891098082389), ('src/_pytest/main.py', 237, 237, 0.13018891098082389), ('src/_pytest/main.py', 240, 240, 0.13018891098082389), ('src/_pytest/main.py', 242, 242, 0.13018891098082389), ('src/_pytest/main.py', 244, 244, 0.13018891098082389), ('src/_pytest/main.py', 247, 247, 0.13018891098082389), ('src/_pytest/main.py', 251, 251, 0.13018891098082389), ('src/_pytest/main.py', 254, 254, 0.13018891098082389), ('src/_pytest/mark/__init__.py', 71, 78, 0.13018891098082389), ('src/_pytest/mark/__init__.py', 92, 98, 0.13018891098082389), ('src/_pytest/mark/__init__.py', 102, 105, 0.13018891098082389), ('src/_pytest/mark/__init__.py', 108, 109, 0.13018891098082389), ('src/_pytest/monkeypatch.py', 251, 254, 0.13018891098082389), ('src/_pytest/pastebin.py', 19, 27, 0.13018891098082389), ('src/_pytest/pytester.py', 1215, 1216, 0.13018891098082389), ('src/_pytest/pytester.py', 1220, 1221, 0.13018891098082389), ('src/_pytest/python.py', 93, 100, 0.13018891098082389), ('src/_pytest/python.py', 103, 108, 0.13018891098082389), ('src/_pytest/python.py', 110, 112, 0.13018891098082389), ('src/_pytest/python.py', 114, 115, 0.13018891098082389), ('src/_pytest/python.py', 117, 121, 0.13018891098082389), ('src/_pytest/python.py', 123, 127, 0.13018891098082389), ('src/_pytest/python.py', 129, 133, 0.13018891098082389), ('src/_pytest/python.py', 929, 929, 0.13018891098082389), ('src/_pytest/python.py', 932, 932, 0.13018891098082389), ('src/_pytest/python_path.py', 9, 9, 0.13018891098082389), ('src/_pytest/python_path.py', 15, 15, 0.13018891098082389), ('src/_pytest/runner.py', 51, 58, 0.13018891098082389), ('src/_pytest/runner.py', 60, 66, 0.13018891098082389), ('src/_pytest/setuponly.py', 16, 21, 0.13018891098082389), ('src/_pytest/setuponly.py', 23, 27, 0.13018891098082389), ('src/_pytest/setupplan.py', 13, 18, 0.13018891098082389), ('src/_pytest/skipping.py', 27, 33, 0.13018891098082389), ('src/_pytest/skipping.py', 36, 38, 0.13018891098082389), ('src/_pytest/skipping.py', 40, 41, 0.13018891098082389), ('src/_pytest/stash.py', 69, 69, 0.13018891098082389), ('src/_pytest/stepwise.py', 19, 26, 0.13018891098082389), ('src/_pytest/stepwise.py', 28, 34, 0.13018891098082389), ('src/_pytest/terminal.py', 94, 100, 0.13018891098082389), ('src/_pytest/terminal.py', 137, 144, 0.13018891098082389), ('src/_pytest/terminal.py', 146, 151, 0.13018891098082389), ('src/_pytest/terminal.py', 153, 158, 0.13018891098082389), ('src/_pytest/terminal.py', 160, 166, 0.13018891098082389), ('src/_pytest/terminal.py', 168, 173, 0.13018891098082389), ('src/_pytest/terminal.py', 175, 181, 0.13018891098082389), ('src/_pytest/terminal.py', 187, 193, 0.13018891098082389), ('src/_pytest/terminal.py', 195, 201, 0.13018891098082389), ('src/_pytest/terminal.py', 203, 207, 0.13018891098082389), ('src/_pytest/terminal.py', 209, 216, 0.13018891098082389), ('src/_pytest/terminal.py', 218, 224, 0.13018891098082389), ('src/_pytest/terminal.py', 227, 232, 0.13018891098082389), ('src/_pytest/terminal.py', 234, 241, 0.13018891098082389), ('src/_pytest/terminal.py', 243, 247, 0.13018891098082389), ('src/_pytest/terminal.py', 251, 253, 0.13018891098082389), ('src/_pytest/terminal.py', 256, 256, 0.13018891098082389), ('src/_pytest/terminal.py', 1231, 1231, 0.13018891098082389), ('src/_pytest/terminal.py', 1239, 1240, 0.13018891098082389), ('src/_pytest/tmpdir.py', 224, 227, 0.13018891098082389), ('src/_pytest/tmpdir.py', 230, 232, 0.13018891098082389), ('src/_pytest/tmpdir.py', 234, 234, 0.13018891098082389), ('src/_pytest/warnings.py', 147, 148, 0.13018891098082389), ('src/_pytest/warnings.py', 150, 150, 0.13018891098082389), ('src/_pytest/_io/terminalwriter.py', 17, 17, 0.12909944487358055), ('src/_pytest/_io/terminalwriter.py', 20, 20, 0.12909944487358055), ('src/_pytest/_io/terminalwriter.py', 23, 23, 0.12909944487358055), ('src/_pytest/assertion/rewrite.py', 115, 119, 0.12909944487358055), ('src/_pytest/assertion/rewrite.py', 214, 215, 0.12909944487358055), ('src/_pytest/assertion/rewrite.py', 221, 225, 0.12909944487358055), ('src/_pytest/pathlib.py', 447, 448, 0.12803687993289598), ('src/_pytest/assertion/rewrite.py', 88, 88, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 90, 91, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 93, 93, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 96, 97, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 99, 99, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 102, 102, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 104, 104, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 106, 106, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 110, 110, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 112, 112, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 187, 188, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 192, 192, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 194, 194, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 197, 197, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 210, 210, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 1162, 1162, 0.1270001270001905), ('src/_pytest/config/compat.py', 31, 31, 0.1270001270001905), ('src/_pytest/pathlib.py', 438, 439, 0.1270001270001905), ('src/_pytest/pathlib.py', 441, 441, 0.1270001270001905), ('src/_pytest/pathlib.py', 453, 453, 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 60, 62, 0.1259881576697424), ('src/_pytest/assertion/rewrite.py', 65, 67, 0.1259881576697424), ('src/_pytest/assertion/rewrite.py', 70, 73, 0.1259881576697424), ('src/_pytest/pytester.py', 531, 533, 0.12403473458920847), ('src/_pytest/pytester.py', 536, 536, 0.12403473458920847), ('src/_pytest/pytester.py', 538, 538, 0.12403473458920847), ('src/_pytest/pytester.py', 540, 540, 0.12403473458920847), ('src/_pytest/pytester.py', 546, 546, 0.12403473458920847), ('src/_pytest/pytester.py', 548, 549, 0.12403473458920847), ('src/_pytest/pytester.py', 1575, 1576, 0.12403473458920847), ('src/_pytest/capture.py', 867, 868, 0.12356041264304309), ('src/_pytest/logging.py', 803, 805, 0.12356041264304309), ('src/_pytest/runner.py', 127, 130, 0.12356041264304309), ('src/_pytest/threadexception.py', 78, 78, 0.12356041264304309), ('src/_pytest/unraisableexception.py', 83, 83, 0.12356041264304309), ('src/_pytest/nose.py', 24, 25, 0.12332528319564147), ('src/_pytest/nose.py', 34, 36, 0.12332528319564147), ('src/_pytest/runner.py', 208, 208, 0.12332528319564147), ('src/_pytest/runner.py', 211, 212, 0.12332528319564147), ('src/_pytest/terminal.py', 584, 588, 0.12332528319564147), ('src/_pytest/_code/source.py', 30, 31, 0.12216944435630522), ('src/_pytest/config/compat.py', 37, 40, 0.12216944435630522), ('src/_pytest/pytester.py', 778, 779, 0.12216944435630522), ('src/_pytest/pytester.py', 879, 879, 0.12216944435630522), ('src/_pytest/pytester.py', 771, 771, 0.12126781251816648), ('src/_pytest/pytester.py', 773, 773, 0.12126781251816648), ('src/_pytest/pytester.py', 786, 796, 0.12126781251816648), ('src/_pytest/fixtures.py', 783, 785, 0.1203858530857692), ('src/_pytest/monkeypatch.py', 226, 227, 0.1203858530857692), ('src/_pytest/monkeypatch.py', 229, 229, 0.1203858530857692), ('src/_pytest/monkeypatch.py', 239, 239, 0.1203858530857692), ('src/_pytest/monkeypatch.py', 246, 247, 0.1203858530857692), ('src/_pytest/fixtures.py', 1706, 1710, 0.11952286093343936), ('src/_pytest/fixtures.py', 1715, 1718, 0.11952286093343936), ('src/_pytest/fixtures.py', 787, 787, 0.11785113019775793), ('src/_pytest/monkeypatch.py', 408, 408, 0.11785113019775793), ('src/_pytest/nodes.py', 321, 321, 0.11785113019775793), ('src/_pytest/pytester.py', 493, 493, 0.11785113019775793), ('src/_pytest/pytester.py', 629, 629, 0.11785113019775793), ('src/_pytest/pytester.py', 632, 632, 0.11785113019775793), ('src/_pytest/pytester.py', 682, 684, 0.11785113019775793), ('src/_pytest/pytester.py', 686, 688, 0.11785113019775793), ('src/_pytest/pytester.py', 691, 692, 0.11785113019775793), ('src/_pytest/pytester.py', 697, 704, 0.11785113019775793), ('src/_pytest/pytester.py', 706, 707, 0.11785113019775793), ('src/_pytest/pytester.py', 709, 709, 0.11785113019775793), ('src/_pytest/pytester.py', 711, 711, 0.11785113019775793), ('src/_pytest/pytester.py', 713, 715, 0.11785113019775793), ('src/_pytest/pytester.py', 717, 717, 0.11785113019775793), ('src/_pytest/pytester.py', 735, 737, 0.11785113019775793), ('testing/conftest.py', 136, 137, 0.11785113019775793), ('src/_pytest/fixtures.py', 1057, 1059, 0.11624763874381928), ('src/_pytest/fixtures.py', 1063, 1064, 0.11624763874381928), ('src/_pytest/nodes.py', 78, 83, 0.11624763874381928), ('src/_pytest/pytester.py', 762, 762, 0.11624763874381928), ('src/_pytest/fixtures.py', 1050, 1051, 0.11547005383792514), ('src/_pytest/monkeypatch.py', 296, 296, 0.11547005383792514), ('src/_pytest/monkeypatch.py', 298, 298, 0.11547005383792514), ('src/_pytest/monkeypatch.py', 321, 321, 0.11547005383792514), ('src/_pytest/monkeypatch.py', 332, 332, 0.11547005383792514), ('src/_pytest/monkeypatch.py', 334, 334, 0.11547005383792514), ('src/_pytest/tmpdir.py', 109, 110, 0.11547005383792514), ('src/_pytest/tmpdir.py', 112, 112, 0.11547005383792514), ('src/_pytest/tmpdir.py', 129, 130, 0.11547005383792514), ('src/_pytest/tmpdir.py', 134, 136, 0.11547005383792514), ('src/_pytest/tmpdir.py', 144, 145, 0.11547005383792514), ('src/_pytest/fixtures.py', 136, 136, 0.11470786693528087), ('src/_pytest/fixtures.py', 138, 138, 0.11470786693528087), ('src/_pytest/fixtures.py', 140, 140, 0.11470786693528087), ('src/_pytest/fixtures.py', 142, 142, 0.11470786693528087), ('src/_pytest/fixtures.py', 144, 144, 0.11470786693528087), ('src/_pytest/fixtures.py', 146, 147, 0.11470786693528087), ('src/_pytest/reports.py', 342, 342, 0.11286652959662007), ('src/_pytest/assertion/rewrite.py', 668, 670, 0.1125087900926024), ('src/_pytest/assertion/rewrite.py', 402, 402, 0.11180339887498948), ('src/_pytest/assertion/rewrite.py', 657, 658, 0.11180339887498948), ('src/_pytest/assertion/rewrite.py', 662, 662, 0.11180339887498948), ('src/_pytest/monkeypatch.py', 306, 307, 0.11180339887498948), ('src/_pytest/monkeypatch.py', 342, 343, 0.11180339887498948), ('src/_pytest/fixtures.py', 903, 905, 0.10976425998969035), ('src/_pytest/pathlib.py', 217, 223, 0.10976425998969035), ('src/_pytest/fixtures.py', 612, 618, 0.1091089451179962), ('src/_pytest/fixtures.py', 709, 711, 0.1091089451179962), ('src/_pytest/fixtures.py', 1046, 1048, 0.1091089451179962), ('src/_pytest/fixtures.py', 1114, 1120, 0.1091089451179962), ('src/_pytest/pathlib.py', 176, 178, 0.1091089451179962), ('src/_pytest/pathlib.py', 188, 189, 0.1091089451179962), ('src/_pytest/pathlib.py', 195, 195, 0.1091089451179962), ('src/_pytest/pathlib.py', 230, 230, 0.1091089451179962), ('src/_pytest/pathlib.py', 232, 236, 0.1091089451179962), ('src/_pytest/pathlib.py', 240, 241, 0.1091089451179962), ('src/_pytest/_code/source.py', 28, 28, 0.10846522890932808), ('src/_pytest/_code/source.py', 143, 143, 0.10846522890932808), ('src/_pytest/fixtures.py', 464, 466, 0.105999788000636), ('src/_pytest/fixtures.py', 469, 469, 0.105999788000636), ('src/_pytest/fixtures.py', 471, 475, 0.105999788000636), ('src/_pytest/fixtures.py', 595, 603, 0.105999788000636), ('src/_pytest/fixtures.py', 797, 800, 0.105999788000636), ('src/_pytest/fixtures.py', 630, 637, 0.10259783520851541), ('src/_pytest/compat.py', 285, 288, 0.10050378152592121), ('src/_pytest/fixtures.py', 1100, 1100, 0.10050378152592121), ('src/_pytest/fixtures.py', 1104, 1105, 0.10050378152592121), ('src/_pytest/compat.py', 68, 68, 0.09759000729485333), ('src/_pytest/fixtures.py', 891, 893, 0.09759000729485333), ('src/_pytest/fixtures.py', 895, 897, 0.09759000729485333), ('src/_pytest/fixtures.py', 900, 901, 0.09759000729485333), ('src/_pytest/fixtures.py', 912, 915, 0.09759000729485333), ('src/_pytest/fixtures.py', 1021, 1026, 0.09759000729485333), ('src/_pytest/logging.py', 815, 815, 0.09759000729485333), ('src/_pytest/nodes.py', 402, 402, 0.09759000729485333), ('src/_pytest/python.py', 189, 190, 0.09759000729485333), ('src/_pytest/python.py', 192, 194, 0.09759000729485333), ('src/_pytest/python.py', 1790, 1790, 0.09759000729485333), ('src/_pytest/skipping.py', 258, 260, 0.09759000729485333), ('src/_pytest/terminal.py', 299, 300, 0.09759000729485333), ('src/_pytest/terminal.py', 310, 310, 0.09759000729485333), ('src/_pytest/terminal.py', 598, 599, 0.09759000729485333), ('src/_pytest/terminal.py', 635, 635, 0.09759000729485333), ('src/_pytest/_io/terminalwriter.py', 98, 99, 0.09712858623572641), ('src/_pytest/_io/terminalwriter.py', 101, 101, 0.09712858623572641), ('src/_pytest/_io/terminalwriter.py', 105, 105, 0.09712858623572641), ('src/_pytest/_io/terminalwriter.py', 150, 150, 0.09712858623572641), ('src/_pytest/_io/terminalwriter.py', 152, 152, 0.09712858623572641), ('src/_pytest/_io/terminalwriter.py', 154, 155, 0.09712858623572641), ('src/_pytest/_io/terminalwriter.py', 166, 166, 0.09712858623572641), ('src/_pytest/fixtures.py', 428, 428, 0.09712858623572641), ('src/_pytest/fixtures.py', 459, 460, 0.09712858623572641), ('src/_pytest/fixtures.py', 485, 485, 0.09712858623572641), ('src/_pytest/fixtures.py', 489, 489, 0.09712858623572641), ('src/_pytest/fixtures.py', 504, 508, 0.09712858623572641), ('src/_pytest/fixtures.py', 562, 566, 0.09712858623572641), ('src/_pytest/fixtures.py', 585, 586, 0.09712858623572641), ('src/_pytest/fixtures.py', 590, 590, 0.09712858623572641), ('src/_pytest/fixtures.py', 607, 609, 0.09712858623572641), ('src/_pytest/fixtures.py', 645, 649, 0.09712858623572641), ('src/_pytest/fixtures.py', 660, 660, 0.09712858623572641), ('src/_pytest/fixtures.py', 685, 686, 0.09712858623572641), ('src/_pytest/fixtures.py', 690, 691, 0.09712858623572641), ('src/_pytest/fixtures.py', 693, 693, 0.09712858623572641), ('src/_pytest/fixtures.py', 695, 695, 0.09712858623572641), ('src/_pytest/fixtures.py', 755, 758, 0.09712858623572641), ('src/_pytest/fixtures.py', 760, 767, 0.09712858623572641), ('src/_pytest/fixtures.py', 1032, 1032, 0.09712858623572641), ('src/_pytest/fixtures.py', 1035, 1036, 0.09712858623572641), ('src/_pytest/fixtures.py', 1040, 1041, 0.09712858623572641), ('src/_pytest/fixtures.py', 1053, 1054, 0.09712858623572641), ('src/_pytest/fixtures.py', 1070, 1072, 0.09712858623572641), ('src/_pytest/fixtures.py', 1075, 1075, 0.09712858623572641), ('src/_pytest/fixtures.py', 1088, 1089, 0.09712858623572641), ('src/_pytest/fixtures.py', 1097, 1097, 0.09712858623572641), ('src/_pytest/fixtures.py', 1107, 1107, 0.09712858623572641), ('src/_pytest/fixtures.py', 1122, 1125, 0.09712858623572641), ('src/_pytest/fixtures.py', 1135, 1136, 0.09712858623572641), ('src/_pytest/runner.py', 484, 486, 0.09712858623572641), ('src/_pytest/scope.py', 57, 59, 0.09712858623572641), ('src/_pytest/setuponly.py', 35, 36, 0.09712858623572641), ('src/_pytest/setuponly.py', 52, 54, 0.09712858623572641), ('src/_pytest/setupplan.py', 28, 28, 0.09712858623572641), ('src/_pytest/setupplan.py', 32, 32, 0.09712858623572641), ('src/_pytest/terminal.py', 656, 659, 0.09712858623572641), ('src/_pytest/fixtures.py', 480, 480, 0.09667364890456635), ('src/_pytest/nodes.py', 86, 91, 0.09205746178983235), ('src/_pytest/nodes.py', 70, 72, 0.09053574604251853), ('src/_pytest/nodes.py', 75, 75, 0.09053574604251853), ('src/_pytest/nodes.py', 93, 94, 0.09053574604251853), ('src/_pytest/nodes.py', 430, 434, 0.08804509063256238), ('src/_pytest/terminal.py', 427, 428, 0.08058229640253803), ('src/_pytest/terminal.py', 435, 435, 0.08058229640253803), ('src/_pytest/terminal.py', 565, 567, 0.08058229640253803), ('src/_pytest/terminal.py', 643, 645, 0.08032193289024989), ('src/_pytest/terminal.py', 649, 649, 0.08032193289024989), ('src/_pytest/terminal.py', 651, 651, 0.08032193289024989), ('src/_pytest/terminal.py', 653, 653, 0.08032193289024989), ('src/_pytest/_code/code.py', 1272, 1273, 0.07980868844676221), ('src/_pytest/_code/code.py', 1276, 1277, 0.07980868844676221), ('src/_pytest/_code/code.py', 1293, 1293, 0.07980868844676221), ('src/_pytest/assertion/__init__.py', 124, 124, 0.07980868844676221), ('src/_pytest/assertion/__init__.py', 126, 126, 0.07980868844676221), ('src/_pytest/assertion/__init__.py', 154, 156, 0.07980868844676221), ('src/_pytest/assertion/__init__.py', 158, 158, 0.07980868844676221), ('src/_pytest/faulthandler.py', 62, 62, 0.07980868844676221), ('src/_pytest/faulthandler.py', 67, 68, 0.07980868844676221), ('src/_pytest/logging.py', 773, 774, 0.07980868844676221), ('src/_pytest/logging.py', 801, 801, 0.07980868844676221), ('src/_pytest/logging.py', 911, 911, 0.07980868844676221), ('src/_pytest/main.py', 347, 350, 0.07980868844676221), ('src/_pytest/main.py', 517, 517, 0.07980868844676221), ('src/_pytest/nodes.py', 774, 778, 0.07980868844676221), ('src/_pytest/python.py', 333, 341, 0.07980868844676221), ('src/_pytest/python.py', 343, 346, 0.07980868844676221), ('src/_pytest/python.py', 350, 352, 0.07980868844676221), ('src/_pytest/python.py', 361, 364, 0.07980868844676221), ('src/_pytest/runner.py', 112, 116, 0.07980868844676221), ('src/_pytest/runner.py', 122, 123, 0.07980868844676221), ('src/_pytest/skipping.py', 168, 168, 0.07980868844676221), ('src/_pytest/skipping.py', 185, 185, 0.07980868844676221), ('src/_pytest/skipping.py', 191, 191, 0.07980868844676221), ('src/_pytest/skipping.py', 237, 238, 0.07980868844676221), ('src/_pytest/skipping.py', 241, 242, 0.07980868844676221), ('src/_pytest/terminal.py', 561, 561, 0.07980868844676221), ('src/_pytest/unittest.py', 381, 381, 0.07980868844676221), ('src/_pytest/warnings.py', 108, 109, 0.07980868844676221), ('src/_pytest/assertion/__init__.py', 165, 165, 0.079555728417573), ('src/_pytest/assertion/__init__.py', 167, 168, 0.079555728417573), ('src/_pytest/compat.py', 49, 50, 0.079555728417573), ('src/_pytest/faulthandler.py', 78, 78, 0.079555728417573), ('src/_pytest/fixtures.py', 433, 435, 0.079555728417573), ('src/_pytest/logging.py', 809, 809, 0.079555728417573), ('src/_pytest/logging.py', 823, 823, 0.079555728417573), ('src/_pytest/main.py', 352, 352, 0.079555728417573), ('src/_pytest/nodes.py', 324, 324, 0.079555728417573), ('src/_pytest/nodes.py', 421, 421, 0.079555728417573), ('src/_pytest/nose.py', 14, 14, 0.079555728417573), ('src/_pytest/nose.py', 17, 17, 0.079555728417573), ('src/_pytest/nose.py', 22, 22, 0.079555728417573), ('src/_pytest/python.py', 1793, 1793, 0.079555728417573), ('src/_pytest/runner.py', 137, 140, 0.079555728417573), ('src/_pytest/runner.py', 156, 157, 0.079555728417573), ('src/_pytest/runner.py', 181, 183, 0.079555728417573), ('src/_pytest/runner.py', 200, 200, 0.079555728417573), ('src/_pytest/runner.py', 480, 480, 0.079555728417573), ('src/_pytest/runner.py', 489, 490, 0.079555728417573), ('src/_pytest/runner.py', 492, 494, 0.079555728417573), ('src/_pytest/runner.py', 504, 507, 0.079555728417573), ('src/_pytest/runner.py', 530, 530, 0.079555728417573), ('src/_pytest/runner.py', 532, 532, 0.079555728417573), ('src/_pytest/skipping.py', 248, 250, 0.079555728417573), ('src/_pytest/skipping.py', 252, 252, 0.079555728417573), ('src/_pytest/unittest.py', 406, 406, 0.079555728417573), ('src/_pytest/warnings.py', 111, 111, 0.079555728417573)]
2024-04-05 05:40:10 SBFL result (methods): [('src/_pytest/_code/code.py', 'Code', 'path', 1.0), ('src/_pytest/_code/code.py', 'TracebackEntry', 'getsource', 1.0), ('src/_pytest/_code/code.py', 'Traceback', 'cut', 1.0), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'get_source', 1.0), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'repr_traceback_entry', 1.0), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'repr_traceback', 1.0), ('src/_pytest/_code/source.py', '', 'findsource', 1.0), ('src/_pytest/_code/source.py', '', 'getstatementrange_ast', 1.0), ('src/_pytest/cacheprovider.py', 'LFPlugin', 'pytest_collectreport', 1.0), ('src/_pytest/capture.py', 'CaptureManager', 'pytest_keyboard_interrupt', 1.0), ('src/_pytest/main.py', '', 'wrap_session', 1.0), ('src/_pytest/main.py', '', 'pytest_runtestloop', 1.0), ('src/_pytest/main.py', 'Session', '__repr__', 1.0), ('src/_pytest/nodes.py', '', 'repr_failure', 1.0), ('src/_pytest/nodes.py', '', '_traceback_filter', 1.0), ('src/_pytest/pytester.py', 'HookRecorder', 'getcalls', 1.0), ('src/_pytest/pytester.py', 'RunResult', '__repr__', 1.0), ('src/_pytest/pytester.py', '', '__repr__', 1.0), ('src/_pytest/pytester.py', '', 'inline_run', 1.0), ('src/_pytest/python.py', 'Module', '_importtestmodule', 1.0), ('src/_pytest/reports.py', 'BaseReport', 'fspath', 1.0), ('src/_pytest/reports.py', 'CollectReport', 'location', 1.0), ('src/_pytest/runner.py', '', 'pytest_make_collect_report', 1.0), ('src/_pytest/runner.py', '', 'collect_one_node', 1.0), ('src/_pytest/terminal.py', '', 'pytest_report_teststatus', 1.0), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_collectreport', 1.0), ('src/_pytest/terminal.py', 'TerminalReporter', 'report_collect', 1.0), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_sessionfinish', 1.0), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_keyboard_interrupt', 1.0), ('src/_pytest/terminal.py', 'TerminalReporter', '_report_keyboardinterrupt', 1.0), ('src/_pytest/terminal.py', 'TerminalReporter', 'summary_errors', 1.0), ('src/_pytest/terminal.py', '', '_get_node_id_with_markup', 1.0), ('src/_pytest/terminal.py', '', 'pluralize', 1.0), ('src/_pytest/_code/code.py', 'TracebackEntry', 'ishidden', 0.5773502691896258), ('src/_pytest/_code/code.py', 'TracebackEntry', 'name', 0.5773502691896258), ('src/_pytest/_code/code.py', 'FormattedExcinfo', '_makepath', 0.5773502691896258), ('src/_pytest/_code/code.py', 'ReprTraceback', 'toterminal', 0.5773502691896258), ('src/_pytest/_code/code.py', 'ReprEntry', 'toterminal', 0.5773502691896258), ('src/_pytest/_code/source.py', '', 'get_statement_startend2', 0.5773502691896258), ('src/_pytest/_code/code.py', 'Frame', 'getargs', 0.5), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'repr_args', 0.5), ('src/_pytest/assertion/rewrite.py', 'AssertionRewriter', 'run', 0.5), ('src/_pytest/assertion/rewrite.py', 'AssertionRewriter', 'is_rewrite_disabled', 0.5), ('src/_pytest/_io/saferepr.py', '', '_ellipsize', 0.4082482904638631), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'from_exc_info', 0.30151134457776363), ('src/_pytest/assertion/util.py', '', '_format_lines', 0.2886751345948129), ('src/_pytest/assertion/util.py', '', 'issequence', 0.25), ('src/_pytest/assertion/util.py', '', 'isdict', 0.25), ('src/_pytest/assertion/util.py', '', 'isset', 0.25), ('src/_pytest/assertion/util.py', '', 'isiterable', 0.25), ('src/_pytest/assertion/util.py', '', '_compare_eq_any', 0.25), ('src/_pytest/_io/wcwidth.py', '', 'wcwidth', 0.22941573387056174), ('src/_pytest/assertion/util.py', '', 'istext', 0.22360679774997896), ('src/_pytest/assertion/util.py', '', 'assertrepr_compare', 0.22360679774997896), ('src/_pytest/nodes.py', 'Node', '_repr_failure_py', 0.21320071635561041), ('src/_pytest/_code/code.py', 'Code', 'fullsource', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Code', 'getargs', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Frame', '__init__', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Frame', 'f_globals', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Frame', 'f_locals', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Frame', 'code', 0.20851441405707477), ('src/_pytest/_code/code.py', 'TracebackEntry', '__init__', 0.20851441405707477), ('src/_pytest/_code/code.py', 'TracebackEntry', 'lineno', 0.20851441405707477), ('src/_pytest/_code/code.py', 'TracebackEntry', 'frame', 0.20851441405707477), ('src/_pytest/_code/code.py', 'TracebackEntry', 'path', 0.20851441405707477), ('src/_pytest/_code/code.py', 'TracebackEntry', 'locals', 0.20851441405707477), ('src/_pytest/_code/code.py', 'TracebackEntry', 'getfirstlinesource', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Traceback', '__init__', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Traceback', '__getitem__', 0.20851441405707477), ('src/_pytest/_code/code.py', 'Traceback', 'filter', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'from_current', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'type', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'tb', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'typename', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'exconly', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', '_getreprcrash', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'getrepr', 0.20851441405707477), ('src/_pytest/_code/code.py', 'FormattedExcinfo', '_getindent', 0.20851441405707477), ('src/_pytest/_code/code.py', 'FormattedExcinfo', '_getentrysource', 0.20851441405707477), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'get_exconly', 0.20851441405707477), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'repr_locals', 0.20851441405707477), ('src/_pytest/_code/code.py', 'FormattedExcinfo', 'repr_excinfo', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionRepr', 'toterminal', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionChainRepr', '__init__', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionChainRepr', 'toterminal', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ReprEntry', '_write_entry_lines', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ReprFileLocation', '__post_init__', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ReprFileLocation', 'toterminal', 0.20851441405707477), ('src/_pytest/_code/source.py', 'Source', '__getitem__', 0.20851441405707477), ('src/_pytest/_code/source.py', 'Source', '__len__', 0.20851441405707477), ('src/_pytest/_code/source.py', 'Source', 'getstatement', 0.20851441405707477), ('src/_pytest/_code/source.py', 'Source', 'getstatementrange', 0.20851441405707477), ('src/_pytest/_code/source.py', 'Source', 'deindent', 0.20851441405707477), ('src/_pytest/_code/source.py', 'Source', '__str__', 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', '_write_source', 0.20851441405707477), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', '_highlight', 0.20851441405707477), ('src/_pytest/cacheprovider.py', 'LFPlugin', 'pytest_runtest_logreport', 0.20851441405707477), ('src/_pytest/cacheprovider.py', 'LFPlugin', 'pytest_sessionfinish', 0.20851441405707477), ('src/_pytest/faulthandler.py', '', 'pytest_exception_interact', 0.20851441405707477), ('src/_pytest/main.py', 'Session', 'pytest_runtest_logreport', 0.20851441405707477), ('src/_pytest/python.py', 'Function', '_traceback_filter', 0.20851441405707477), ('src/_pytest/python.py', 'Function', 'repr_failure', 0.20851441405707477), ('src/_pytest/reports.py', 'BaseReport', 'toterminal', 0.20851441405707477), ('src/_pytest/reports.py', 'BaseReport', 'head_line', 0.20851441405707477), ('src/_pytest/reports.py', 'BaseReport', '_get_verbose_word', 0.20851441405707477), ('src/_pytest/reports.py', 'TestReport', 'from_item_and_call', 0.20851441405707477), ('src/_pytest/runner.py', '', 'pytest_runtest_call', 0.20851441405707477), ('src/_pytest/runner.py', '', 'call_and_report', 0.20851441405707477), ('src/_pytest/runner.py', '', 'check_interactive_exception', 0.20851441405707477), ('src/_pytest/runner.py', 'CallInfo', 'from_call', 0.20851441405707477), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_runtest_logreport', 0.20851441405707477), ('src/_pytest/terminal.py', 'TerminalReporter', '_getfailureheadline', 0.20851441405707477), ('src/_pytest/terminal.py', 'TerminalReporter', '_outrep_summary', 0.20851441405707477), ('src/_pytest/terminal.py', 'TerminalReporter', 'short_test_summary', 0.20851441405707477), ('src/_pytest/terminal.py', '', '_format_trimmed', 0.20851441405707477), ('src/_pytest/terminal.py', '', '_get_line_with_reprcrash_message', 0.20851441405707477), ('src/_pytest/unittest.py', '', 'pytest_runtest_makereport', 0.20851441405707477), ('src/_pytest/_code/code.py', 'ExceptionInfo', '__init__', 0.20412414523193154), ('src/_pytest/_code/code.py', 'ExceptionInfo', 'value', 0.20412414523193154), ('src/_pytest/assertion/util.py', '', '_split_explanation', 0.20412414523193154), ('src/_pytest/config/__init__.py', '', 'cwd_relative_nodeid', 0.20412414523193154), ('src/_pytest/terminal.py', 'TerminalReporter', '_determine_main_color', 0.20412414523193154), ('src/_pytest/assertion/__init__.py', '', 'pytest_runtest_protocol', 0.2), ('src/_pytest/assertion/rewrite.py', '', '_call_reprcompare', 0.2), ('src/_pytest/assertion/util.py', '', 'running_on_ci', 0.2), ('src/_pytest/_code/source.py', 'Source', '__init__', 0.19245008972987526), ('src/_pytest/nodes.py', 'Node', 'iter_markers_with_node', 0.19205531989934396), ('src/_pytest/assertion/__init__.py', '', 'pytest_assertrepr_compare', 0.18569533817705186), ('src/_pytest/pytester.py', 'SysModulesSnapshot', '__init__', 0.17677669529663687), ('src/_pytest/pytester.py', 'SysModulesSnapshot', 'restore', 0.17677669529663687), ('src/_pytest/pytester.py', 'SysPathsSnapshot', '__init__', 0.17677669529663687), ('src/_pytest/pytester.py', 'SysPathsSnapshot', 'restore', 0.17677669529663687), ('src/_pytest/pytester.py', '', '__take_sys_modules_snapshot', 0.17677669529663687), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', 'undo', 0.17213259316477408), ('src/_pytest/_io/saferepr.py', 'SafeRepr', 'repr_instance', 0.17149858514250882), ('src/_pytest/terminal.py', 'TerminalReporter', 'summary_failures', 0.17149858514250882), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', '__init__', 0.1708715315433522), ('src/_pytest/capture.py', 'SysCaptureBase', 'resume', 0.16929979439493012), ('src/_pytest/capture.py', 'FDCaptureBase', 'resume', 0.16929979439493012), ('src/_pytest/capture.py', 'MultiCapture', 'resume_capturing', 0.16929979439493012), ('src/_pytest/capture.py', 'CaptureManager', 'resume_global_capture', 0.16929979439493012), ('src/_pytest/capture.py', 'CaptureManager', 'activate_fixture', 0.16929979439493012), ('src/_pytest/capture.py', 'CaptureManager', 'item_capture', 0.16929979439493012), ('src/_pytest/logging.py', 'catching_logs', '__init__', 0.16929979439493012), ('src/_pytest/logging.py', 'catching_logs', '__enter__', 0.16929979439493012), ('src/_pytest/logging.py', 'LogCaptureHandler', 'reset', 0.16929979439493012), ('src/_pytest/logging.py', 'LoggingPlugin', '_runtest_for', 0.16929979439493012), ('src/_pytest/nodes.py', 'Node', 'listchain', 0.16929979439493012), ('src/_pytest/nodes.py', 'Node', 'iter_markers', 0.16929979439493012), ('src/_pytest/runner.py', '', 'call_runtest_hook', 0.16929979439493012), ('src/_pytest/skipping.py', '', 'evaluate_xfail_marks', 0.16929979439493012), ('src/_pytest/stash.py', 'Stash', '__setitem__', 0.16929979439493012), ('src/_pytest/threadexception.py', 'catch_threading_exception', '__init__', 0.16929979439493012), ('src/_pytest/threadexception.py', 'catch_threading_exception', '__enter__', 0.16929979439493012), ('src/_pytest/threadexception.py', '', 'thread_exception_runtest_hook', 0.16929979439493012), ('src/_pytest/unraisableexception.py', 'catch_unraisable_exception', '__init__', 0.16929979439493012), ('src/_pytest/unraisableexception.py', 'catch_unraisable_exception', '__enter__', 0.16929979439493012), ('src/_pytest/unraisableexception.py', '', 'unraisable_exception_runtest_hook', 0.16929979439493012), ('src/_pytest/capture.py', 'SysCaptureBase', '_assert_state', 0.1690308509457033), ('src/_pytest/capture.py', 'SysCaptureBase', 'suspend', 0.1690308509457033), ('src/_pytest/capture.py', 'FDCaptureBase', '_assert_state', 0.1690308509457033), ('src/_pytest/capture.py', 'FDCaptureBase', 'suspend', 0.1690308509457033), ('src/_pytest/capture.py', 'FDCapture', 'snap', 0.1690308509457033), ('src/_pytest/capture.py', 'MultiCapture', 'suspend_capturing', 0.1690308509457033), ('src/_pytest/capture.py', 'MultiCapture', 'readouterr', 0.1690308509457033), ('src/_pytest/capture.py', 'CaptureManager', 'suspend_global_capture', 0.1690308509457033), ('src/_pytest/capture.py', 'CaptureManager', 'read_global_capture', 0.1690308509457033), ('src/_pytest/capture.py', 'CaptureManager', 'deactivate_fixture', 0.1690308509457033), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '_getconftestmodules', 0.1690308509457033), ('src/_pytest/config/__init__.py', '', 'rootpath', 0.1690308509457033), ('src/_pytest/config/__init__.py', '', 'getoption', 0.1690308509457033), ('src/_pytest/deprecated.py', '', 'check_ispytest', 0.1690308509457033), ('src/_pytest/logging.py', 'catching_logs', '__exit__', 0.1690308509457033), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtest_logreport', 0.1690308509457033), ('src/_pytest/logging.py', '_LiveLoggingNullHandler', 'set_when', 0.1690308509457033), ('src/_pytest/main.py', 'Session', 'gethookproxy', 0.1690308509457033), ('src/_pytest/mark/structures.py', 'NodeKeywords', '__iter__', 0.1690308509457033), ('src/_pytest/nodes.py', 'Node', 'ihook', 0.1690308509457033), ('src/_pytest/nodes.py', 'Node', 'nodeid', 0.1690308509457033), ('src/_pytest/nodes.py', 'Item', 'add_report_section', 0.1690308509457033), ('src/_pytest/reports.py', 'BaseReport', 'passed', 0.1690308509457033), ('src/_pytest/reports.py', 'BaseReport', 'failed', 0.1690308509457033), ('src/_pytest/reports.py', 'BaseReport', 'skipped', 0.1690308509457033), ('src/_pytest/reports.py', 'TestReport', '__init__', 0.1690308509457033), ('src/_pytest/runner.py', '', '_update_current_test_var', 0.1690308509457033), ('src/_pytest/runner.py', '', 'pytest_report_teststatus', 0.1690308509457033), ('src/_pytest/runner.py', 'CallInfo', '__init__', 0.1690308509457033), ('src/_pytest/runner.py', '', 'pytest_runtest_makereport', 0.1690308509457033), ('src/_pytest/skipping.py', '', 'pytest_runtest_makereport', 0.1690308509457033), ('src/_pytest/skipping.py', '', 'pytest_report_teststatus', 0.1690308509457033), ('src/_pytest/stash.py', 'Stash', '__getitem__', 0.1690308509457033), ('src/_pytest/stash.py', 'Stash', 'get', 0.1690308509457033), ('src/_pytest/stash.py', 'Stash', 'setdefault', 0.1690308509457033), ('src/_pytest/terminal.py', 'TerminalReporter', '_add_stats', 0.1690308509457033), ('src/_pytest/threadexception.py', 'catch_threading_exception', '__exit__', 0.1690308509457033), ('src/_pytest/tmpdir.py', '', 'pytest_runtest_makereport', 0.1690308509457033), ('src/_pytest/unraisableexception.py', 'catch_unraisable_exception', '__exit__', 0.1690308509457033), ('src/_pytest/pytester.py', '', 'path', 0.16666666666666666), ('src/_pytest/assertion/rewrite.py', '', '_get_maxsize_for_saferepr', 0.16012815380508713), ('src/_pytest/monkeypatch.py', '', 'monkeypatch', 0.16012815380508713), ('src/_pytest/_code/code.py', 'Code', 'firstlineno', 0.159111456835146), ('src/_pytest/compat.py', '', 'get_real_func', 0.159111456835146), ('src/_pytest/_io/wcwidth.py', '', 'wcswidth', 0.15861031714362883), ('src/_pytest/_io/saferepr.py', 'SafeRepr', '__init__', 0.15811388300841897), ('src/_pytest/_io/saferepr.py', 'SafeRepr', 'repr', 0.15811388300841897), ('src/_pytest/_io/saferepr.py', '', 'saferepr', 0.15811388300841897), ('src/_pytest/assertion/rewrite.py', '', '_saferepr', 0.15811388300841897), ('src/_pytest/assertion/util.py', '', 'format_explanation', 0.15811388300841897), ('src/_pytest/terminal.py', 'TerminalReporter', 'showlongtestinfo', 0.15811388300841897), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', 'width_of_current_line', 0.15762208124782012), ('src/_pytest/nodes.py', 'Node', '__hash__', 0.15762208124782012), ('src/_pytest/runner.py', 'SetupState', 'teardown_exact', 0.15762208124782012), ('src/_pytest/stash.py', 'Stash', '__delitem__', 0.15762208124782012), ('src/_pytest/terminal.py', 'TerminalReporter', '_width_of_current_line', 0.15762208124782012), ('src/_pytest/terminal.py', 'TerminalReporter', '_get_main_color', 0.15762208124782012), ('src/_pytest/terminal.py', 'TerminalReporter', '_is_last_item', 0.15713484026367722), ('src/_pytest/config/__init__.py', '', 'apply_warning_filters', 0.15665208999759148), ('src/_pytest/warnings.py', '', 'catch_warnings_for_item', 0.15665208999759148), ('src/_pytest/fixtures.py', 'SubRequest', 'addfinalizer', 0.15617376188860607), ('src/_pytest/fixtures.py', 'FixtureDef', 'addfinalizer', 0.15617376188860607), ('src/_pytest/config/__init__.py', '', 'getini', 0.15476464650682736), ('src/_pytest/pathlib.py', '', 'absolutepath', 0.15476464650682736), ('src/_pytest/_code/code.py', 'Code', '__init__', 0.15075567228888181), ('src/_pytest/_code/code.py', 'Code', 'from_function', 0.15075567228888181), ('src/_pytest/_code/source.py', '', 'getrawcode', 0.15075567228888181), ('src/_pytest/pytester.py', '', '_makefile', 0.14285714285714285), ('src/_pytest/terminal.py', 'TerminalReporter', 'flush', 0.13834289277321493), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', 'write', 0.13801311186847084), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', 'flush', 0.13801311186847084), ('src/_pytest/capture.py', 'CaptureManager', 'pytest_runtest_call', 0.13801311186847084), ('src/_pytest/capture.py', 'CaptureManager', 'pytest_runtest_teardown', 0.13801311186847084), ('src/_pytest/compat.py', '', 'iscoroutinefunction', 0.13801311186847084), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtest_call', 0.13801311186847084), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtest_teardown', 0.13801311186847084), ('src/_pytest/runner.py', '', 'runtestprotocol', 0.13801311186847084), ('src/_pytest/skipping.py', '', 'pytest_runtest_call', 0.13801311186847084), ('src/_pytest/terminal.py', 'TerminalReporter', 'verbosity', 0.13801311186847084), ('src/_pytest/threadexception.py', '', 'pytest_runtest_call', 0.13801311186847084), ('src/_pytest/threadexception.py', '', 'pytest_runtest_teardown', 0.13801311186847084), ('src/_pytest/unraisableexception.py', '', 'pytest_runtest_call', 0.13801311186847084), ('src/_pytest/unraisableexception.py', '', 'pytest_runtest_teardown', 0.13801311186847084), ('testing/conftest.py', '', 'restore_tracing', 0.13801311186847084), ('src/_pytest/fixtures.py', 'FixtureRequest', 'node', 0.13768567816430285), ('src/_pytest/fixtures.py', 'FixtureRequest', '_schedule_finalizers', 0.13768567816430285), ('src/_pytest/cacheprovider.py', '', 'pytest_report_header', 0.13736056394868904), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '_try_load_conftest', 0.13736056394868904), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_sessionstart', 0.13736056394868904), ('src/_pytest/config/__init__.py', '', '_preparse', 0.13608276348795434), ('src/_pytest/config/findpaths.py', '', 'locate_config', 0.13608276348795434), ('src/_pytest/config/findpaths.py', '', 'get_common_ancestor', 0.13608276348795434), ('src/_pytest/config/findpaths.py', '', 'determine_setup', 0.13608276348795434), ('src/_pytest/config/findpaths.py', '', 'is_fs_root', 0.13608276348795434), ('src/_pytest/pathlib.py', '', 'commonpath', 0.13608276348795434), ('src/_pytest/pathlib.py', '', 'bestrelpath', 0.13608276348795434), ('src/_pytest/reports.py', 'BaseReport', 'count_towards_summary', 0.13608276348795434), ('src/_pytest/terminal.py', 'TerminalReporter', '_build_normal_summary_stats_line', 0.13608276348795434), ('src/_pytest/main.py', 'Session', 'collect', 0.13483997249264842), ('src/_pytest/pathlib.py', '', 'import_path', 0.13483997249264842), ('src/_pytest/_io/terminalwriter.py', '', 'should_do_markup', 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', '__init__', 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', 'sep', 0.1336306209562122), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', 'line', 0.1336306209562122), ('src/_pytest/_py/path.py', '', '__init__', 0.1336306209562122), ('src/_pytest/assertion/__init__.py', '', 'pytest_collection', 0.1336306209562122), ('src/_pytest/assertion/__init__.py', '', 'pytest_sessionfinish', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', '__init__', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', 'for_config', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', 'cache_dir_from_config', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', '_getvaluepath', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', 'get', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', 'set', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'Cache', '_ensure_supporting_files', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'LFPlugin', '__init__', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'LFPlugin', 'pytest_report_collectionfinish', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'LFPlugin', 'pytest_collection_modifyitems', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'NFPlugin', '__init__', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'NFPlugin', 'pytest_collection_modifyitems', 0.1336306209562122), ('src/_pytest/cacheprovider.py', 'NFPlugin', 'pytest_sessionfinish', 0.1336306209562122), ('src/_pytest/cacheprovider.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/cacheprovider.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/capture.py', 'CaptureIO', '__init__', 0.1336306209562122), ('src/_pytest/capture.py', 'CaptureIO', 'getvalue', 0.1336306209562122), ('src/_pytest/capture.py', 'SysCaptureBase', '__init__', 0.1336306209562122), ('src/_pytest/capture.py', 'SysCapture', 'snap', 0.1336306209562122), ('src/_pytest/capture.py', '', '_get_multicapture', 0.1336306209562122), ('src/_pytest/capture.py', 'CaptureManager', 'pytest_make_collect_report', 0.1336306209562122), ('src/_pytest/compat.py', '', 'legacy_path', 0.1336306209562122), ('src/_pytest/compat.py', '', 'getfuncargnames', 0.1336306209562122), ('src/_pytest/compat.py', '', 'get_real_method', 0.1336306209562122), ('src/_pytest/compat.py', '', 'safe_getattr', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', 'main', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_prepareconfig', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_get_directory', 0.1336306209562122), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'pytest_configure', 0.1336306209562122), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '_rget_with_confmod', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_do_configure', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_ensure_unconfigure', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', 'pytest_collection', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_validate_config_options', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_get_unknown_ini_keys', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', 'addinivalue_line', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_getini', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', '_getconftest_pathlist', 0.1336306209562122), ('src/_pytest/config/__init__.py', '', 'create_terminal_writer', 0.1336306209562122), ('src/_pytest/config/compat.py', 'PathAwareHookProxy', '__getattr__', 0.1336306209562122), ('src/_pytest/debugging.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/doctest.py', '', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/doctest.py', '', 'pytest_collect_file', 0.1336306209562122), ('src/_pytest/faulthandler.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/faulthandler.py', '', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/faulthandler.py', '', 'get_stderr_fileno', 0.1336306209562122), ('src/_pytest/fixtures.py', '', 'pytest_sessionstart', 0.1336306209562122), ('src/_pytest/fixtures.py', '', 'getfixturemarker', 0.1336306209562122), ('src/_pytest/fixtures.py', '', 'reorder_items', 0.1336306209562122), ('src/_pytest/fixtures.py', '', 'reorder_items_atscope', 0.1336306209562122), ('src/_pytest/fixtures.py', 'FixtureDef', '__init__', 0.1336306209562122), ('src/_pytest/fixtures.py', 'FixtureManager', '__init__', 0.1336306209562122), ('src/_pytest/fixtures.py', 'FixtureManager', 'pytest_plugin_registered', 0.1336306209562122), ('src/_pytest/fixtures.py', 'FixtureManager', 'pytest_collection_modifyitems', 0.1336306209562122), ('src/_pytest/fixtures.py', 'FixtureManager', 'parsefactories', 0.1336306209562122), ('src/_pytest/helpconfig.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/helpconfig.py', '', 'pytest_report_header', 0.1336306209562122), ('src/_pytest/junitxml.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/junitxml.py', '', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/legacypath.py', 'TempdirFactory', '__init__', 0.1336306209562122), ('src/_pytest/legacypath.py', '', 'TerminalReporter_startdir', 0.1336306209562122), ('src/_pytest/legacypath.py', '', 'Config_invocation_dir', 0.1336306209562122), ('src/_pytest/legacypath.py', '', 'Config_rootdir', 0.1336306209562122), ('src/_pytest/legacypath.py', '', 'Config_inifile', 0.1336306209562122), ('src/_pytest/legacypath.py', '', 'Session_stardir', 0.1336306209562122), ('src/_pytest/legacypath.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/logging.py', 'ColoredLevelFormatter', '__init__', 0.1336306209562122), ('src/_pytest/logging.py', 'ColoredLevelFormatter', 'add_color_level', 0.1336306209562122), ('src/_pytest/logging.py', 'PercentStyleMultiline', '__init__', 0.1336306209562122), ('src/_pytest/logging.py', 'PercentStyleMultiline', '_get_auto_indent', 0.1336306209562122), ('src/_pytest/logging.py', '', 'get_option_ini', 0.1336306209562122), ('src/_pytest/logging.py', 'LogCaptureHandler', '__init__', 0.1336306209562122), ('src/_pytest/logging.py', '', 'get_log_level_for_setting', 0.1336306209562122), ('src/_pytest/logging.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', '__init__', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', '_disable_loggers', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', '_create_formatter', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', '_log_cli_enabled', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_sessionstart', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_collection', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtestloop', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_sessionfinish', 0.1336306209562122), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/main.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/main.py', '', '_main', 0.1336306209562122), ('src/_pytest/main.py', '', 'pytest_collection', 0.1336306209562122), ('src/_pytest/main.py', '', '_in_venv', 0.1336306209562122), ('src/_pytest/main.py', '', 'pytest_ignore_collect', 0.1336306209562122), ('src/_pytest/main.py', '', 'pytest_collection_modifyitems', 0.1336306209562122), ('src/_pytest/main.py', 'Session', '__init__', 0.1336306209562122), ('src/_pytest/main.py', 'Session', 'from_config', 0.1336306209562122), ('src/_pytest/main.py', 'Session', 'startpath', 0.1336306209562122), ('src/_pytest/main.py', 'Session', 'pytest_collectstart', 0.1336306209562122), ('src/_pytest/main.py', 'Session', '_collectfile', 0.1336306209562122), ('src/_pytest/main.py', 'Session', 'perform_collect', 0.1336306209562122), ('src/_pytest/main.py', 'Session', 'genitems', 0.1336306209562122), ('src/_pytest/main.py', '', 'resolve_collection_argument', 0.1336306209562122), ('src/_pytest/mark/__init__.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/mark/__init__.py', '', 'deselect_by_keyword', 0.1336306209562122), ('src/_pytest/mark/__init__.py', '', 'deselect_by_mark', 0.1336306209562122), ('src/_pytest/mark/__init__.py', '', 'pytest_collection_modifyitems', 0.1336306209562122), ('src/_pytest/mark/__init__.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/mark/__init__.py', '', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/mark/structures.py', 'MarkGenerator', '__getattr__', 0.1336306209562122), ('src/_pytest/mark/structures.py', 'NodeKeywords', '__init__', 0.1336306209562122), ('src/_pytest/nodes.py', '', '_imply_path', 0.1336306209562122), ('src/_pytest/nodes.py', 'NodeMeta', '_create', 0.1336306209562122), ('src/_pytest/nodes.py', 'Node', '__init__', 0.1336306209562122), ('src/_pytest/nodes.py', 'Node', 'from_parent', 0.1336306209562122), ('src/_pytest/nodes.py', 'FSCollector', '__init__', 0.1336306209562122), ('src/_pytest/nodes.py', 'FSCollector', 'from_parent', 0.1336306209562122), ('src/_pytest/pastebin.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/pastebin.py', '', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/pastebin.py', '', 'pytest_terminal_summary', 0.1336306209562122), ('src/_pytest/pathlib.py', '', 'resolve_from_str', 0.1336306209562122), ('src/_pytest/pathlib.py', '', 'resolve_package_path', 0.1336306209562122), ('src/_pytest/pathlib.py', '', 'scandir', 0.1336306209562122), ('src/_pytest/pathlib.py', '', 'visit', 0.1336306209562122), ('src/_pytest/pytester.py', 'RecordedHookCall', '__init__', 0.1336306209562122), ('src/_pytest/pytester.py', 'HookRecorder', '__init__', 0.1336306209562122), ('src/_pytest/pytester.py', 'HookRecorder', 'finish_recording', 0.1336306209562122), ('src/_pytest/pytester.py', '', 'make_hook_recorder', 0.1336306209562122), ('src/_pytest/pytester.py', '', 'runpytest_inprocess', 0.1336306209562122), ('src/_pytest/pytester.py', '', 'runpytest', 0.1336306209562122), ('src/_pytest/python.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/python.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/python.py', '', 'pytest_collect_file', 0.1336306209562122), ('src/_pytest/python.py', '', 'path_matches_patterns', 0.1336306209562122), ('src/_pytest/python.py', '', 'pytest_pycollect_makemodule', 0.1336306209562122), ('src/_pytest/python.py', 'Module', '_getobj', 0.1336306209562122), ('src/_pytest/python.py', 'Module', 'collect', 0.1336306209562122), ('src/_pytest/python.py', 'Module', '_inject_setup_module_fixture', 0.1336306209562122), ('src/_pytest/python_path.py', '', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/reports.py', 'CollectReport', '__init__', 0.1336306209562122), ('src/_pytest/runner.py', '', 'pytest_terminal_summary', 0.1336306209562122), ('src/_pytest/runner.py', '', 'pytest_sessionstart', 0.1336306209562122), ('src/_pytest/runner.py', '', 'pytest_sessionfinish', 0.1336306209562122), ('src/_pytest/runner.py', 'CallInfo', 'result', 0.1336306209562122), ('src/_pytest/runner.py', 'SetupState', '__init__', 0.1336306209562122), ('src/_pytest/scope.py', 'Scope', 'from_user', 0.1336306209562122), ('src/_pytest/setuponly.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/setupplan.py', '', 'pytest_cmdline_main', 0.1336306209562122), ('src/_pytest/skipping.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/stash.py', 'Stash', '__contains__', 0.1336306209562122), ('src/_pytest/stepwise.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/stepwise.py', '', 'pytest_sessionfinish', 0.1336306209562122), ('src/_pytest/terminal.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/terminal.py', '', 'getreportopt', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', '__init__', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', '_determine_show_progress_info', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'showheader', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'no_header', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'no_summary', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'hasopt', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'ensure_newline', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'write_line', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'write_sep', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_plugin_registered', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_collection', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', '_write_report_lines_from_hooks', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_report_header', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_collection_finish', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_terminal_summary', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_unconfigure', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'getreports', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'summary_warnings', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'summary_passes', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'summary_stats', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', '_set_main_color', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', 'build_summary_stats_line', 0.1336306209562122), ('src/_pytest/terminal.py', 'TerminalReporter', '_get_reports_to_display', 0.1336306209562122), ('src/_pytest/terminal.py', '', 'format_session_duration', 0.1336306209562122), ('src/_pytest/tmpdir.py', 'TempPathFactory', '__init__', 0.1336306209562122), ('src/_pytest/tmpdir.py', 'TempPathFactory', 'from_config', 0.1336306209562122), ('src/_pytest/tmpdir.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/tmpdir.py', '', 'pytest_sessionfinish', 0.1336306209562122), ('src/_pytest/warnings.py', '', 'pytest_configure', 0.1336306209562122), ('src/_pytest/warnings.py', '', 'pytest_collection', 0.1336306209562122), ('src/_pytest/warnings.py', '', 'pytest_terminal_summary', 0.1336306209562122), ('src/_pytest/warnings.py', '', 'pytest_sessionfinish', 0.1336306209562122), ('src/pytest/__init__.py', '', '__getattr__', 0.1336306209562122), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', '_early_rewrite_bailout', 0.13245323570650439), ('src/_pytest/assertion/rewrite.py', '', 'try_makedirs', 0.13245323570650439), ('src/_pytest/assertion/__init__.py', '', 'install_importhook', 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', 'set_session', 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', 'create_module', 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', 'exec_module', 0.13130643285972254), ('src/_pytest/assertion/rewrite.py', '', '_read_pyc', 0.13130643285972254), ('src/_pytest/config/__init__.py', '', 'getvalue', 0.13130643285972254), ('src/_pytest/main.py', 'Session', 'isinitpath', 0.13130643285972254), ('src/_pytest/_argcomplete.py', '', 'try_argcomplete', 0.13018891098082389), ('src/_pytest/assertion/__init__.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 'DummyRewriteHook', 'mark_rewrite', 0.13018891098082389), ('src/_pytest/assertion/__init__.py', 'AssertionState', '__init__', 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', '', '_rewrite_test', 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', 'AssertionRewriter', '__init__', 0.13018891098082389), ('src/_pytest/assertion/rewrite.py', '', 'get_cache_dir', 0.13018891098082389), ('src/_pytest/cacheprovider.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/capture.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/capture.py', '', '_colorama_workaround', 0.13018891098082389), ('src/_pytest/capture.py', '', '_windowsconsoleio_workaround', 0.13018891098082389), ('src/_pytest/capture.py', '', 'pytest_load_initial_conftests', 0.13018891098082389), ('src/_pytest/capture.py', 'DontReadFromInput', 'close', 0.13018891098082389), ('src/_pytest/capture.py', 'SysCaptureBase', 'start', 0.13018891098082389), ('src/_pytest/capture.py', 'SysCaptureBase', 'done', 0.13018891098082389), ('src/_pytest/capture.py', 'FDCaptureBase', '__init__', 0.13018891098082389), ('src/_pytest/capture.py', 'FDCaptureBase', 'start', 0.13018891098082389), ('src/_pytest/capture.py', 'FDCaptureBase', 'done', 0.13018891098082389), ('src/_pytest/capture.py', 'MultiCapture', '__init__', 0.13018891098082389), ('src/_pytest/capture.py', 'MultiCapture', 'start_capturing', 0.13018891098082389), ('src/_pytest/capture.py', 'MultiCapture', 'pop_outerr_to_orig', 0.13018891098082389), ('src/_pytest/capture.py', 'MultiCapture', 'stop_capturing', 0.13018891098082389), ('src/_pytest/capture.py', 'CaptureManager', '__init__', 0.13018891098082389), ('src/_pytest/capture.py', 'CaptureManager', 'start_global_capturing', 0.13018891098082389), ('src/_pytest/capture.py', 'CaptureManager', 'stop_global_capturing', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', 'get_config', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_get_legacy_hook_marks', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '__init__', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'parse_hookimpl_opts', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'parse_hookspec_opts', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'register', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '_set_initial_conftests', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '_is_in_confcutdir', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'consider_preparse', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'consider_env', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'consider_module', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', '_import_plugin_specs', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'PytestPluginManager', 'import_plugin', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_get_plugin_specs_as_list', 0.13018891098082389), ('src/_pytest/config/__init__.py', 'InvocationParams', '__init__', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '__init__', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', 'inipath', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', 'add_cleanup', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', 'pytest_cmdline_parse', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_processopt', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', 'pytest_load_initial_conftests', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_initini', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_consider_importhook', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_mark_plugins_for_rewrite', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_validate_args', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_decide_args', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_checkversion', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_validate_plugins', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', 'parse', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_get_override_ini_value', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_warn_about_missing_assertion', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_warn_about_skipped_plugins', 0.13018891098082389), ('src/_pytest/config/__init__.py', '', '_assertion_supported', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', '__init__', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'processoption', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'getgroup', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'parse', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', '_getparser', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'parse_setoption', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'parse_known_args', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'parse_known_and_unknown_args', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Parser', 'addini', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Argument', '__init__', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Argument', 'names', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Argument', 'attrs', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'Argument', '_set_opt_strings', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'OptionGroup', '__init__', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'OptionGroup', 'addoption', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'OptionGroup', '_addoption', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'OptionGroup', '_addoption_instance', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'MyOptionParser', '__init__', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'MyOptionParser', 'parse_args', 0.13018891098082389), ('src/_pytest/config/argparsing.py', 'DropShorterLongHelpFormatter', '__init__', 0.13018891098082389), ('src/_pytest/config/findpaths.py', '', 'get_dirs_from_args', 0.13018891098082389), ('src/_pytest/debugging.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/doctest.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/faulthandler.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/fixtures.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/helpconfig.py', 'HelpAction', '__init__', 0.13018891098082389), ('src/_pytest/helpconfig.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/helpconfig.py', '', 'pytest_cmdline_parse', 0.13018891098082389), ('src/_pytest/junitxml.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/legacypath.py', '', 'pytest_load_initial_conftests', 0.13018891098082389), ('src/_pytest/legacypath.py', '', 'pytest_plugin_registered', 0.13018891098082389), ('src/_pytest/logging.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/main.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/main.py', '', 'validate_basetemp', 0.13018891098082389), ('src/_pytest/mark/__init__.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', 'setattr', 0.13018891098082389), ('src/_pytest/pastebin.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/pytester.py', '', '_ensure_basetemp', 0.13018891098082389), ('src/_pytest/python.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/python.py', '', '__getattr__', 0.13018891098082389), ('src/_pytest/python_path.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/python_path.py', '', 'pytest_load_initial_conftests', 0.13018891098082389), ('src/_pytest/runner.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/setuponly.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/setupplan.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/skipping.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/stash.py', 'Stash', '__init__', 0.13018891098082389), ('src/_pytest/stepwise.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/terminal.py', 'MoreQuietAction', '__init__', 0.13018891098082389), ('src/_pytest/terminal.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/tmpdir.py', '', 'pytest_addoption', 0.13018891098082389), ('src/_pytest/warnings.py', '', 'pytest_load_initial_conftests', 0.13018891098082389), ('src/_pytest/_io/terminalwriter.py', '', 'get_terminal_width', 0.12909944487358055), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', 'find_spec', 0.12909944487358055), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', '_should_rewrite', 0.12909944487358055), ('src/_pytest/pathlib.py', '', 'fnmatch_ex', 0.12803687993289598), ('src/_pytest/config/compat.py', 'PathAwareHookProxy', '__init__', 0.1270001270001905), ('src/_pytest/assertion/rewrite.py', 'AssertionRewritingHook', '__init__', 0.1259881576697424), ('src/_pytest/pytester.py', 'RunResult', '__init__', 0.12403473458920847), ('src/_pytest/pytester.py', 'LineMatcher', '__init__', 0.12403473458920847), ('src/_pytest/capture.py', 'CaptureManager', 'pytest_runtest_setup', 0.12356041264304309), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtest_setup', 0.12356041264304309), ('src/_pytest/threadexception.py', '', 'pytest_runtest_setup', 0.12356041264304309), ('src/_pytest/unraisableexception.py', '', 'pytest_runtest_setup', 0.12356041264304309), ('src/_pytest/nose.py', '', 'pytest_runtest_setup', 0.12332528319564147), ('src/_pytest/nose.py', '', 'call_optional', 0.12332528319564147), ('src/_pytest/pytester.py', '', 'makepyfile', 0.12216944435630522), ('src/_pytest/fixtures.py', 'SubRequest', '_schedule_finalizers', 0.1203858530857692), ('src/_pytest/fixtures.py', 'FixtureManager', 'getfixturedefs', 0.11952286093343936), ('src/_pytest/fixtures.py', 'FixtureManager', '_matchfactories', 0.11952286093343936), ('src/_pytest/nodes.py', 'Node', 'setup', 0.11785113019775793), ('src/_pytest/pytester.py', '', 'pytester', 0.11785113019775793), ('src/_pytest/pytester.py', 'CwdSnapshot', '__init__', 0.11785113019775793), ('src/_pytest/pytester.py', 'CwdSnapshot', 'restore', 0.11785113019775793), ('src/_pytest/pytester.py', '', '__init__', 0.11785113019775793), ('src/_pytest/pytester.py', '', '_finalize', 0.11785113019775793), ('testing/conftest.py', '', 'pytester', 0.11785113019775793), ('src/_pytest/fixtures.py', 'FixtureDef', 'execute', 0.11624763874381928), ('src/_pytest/nodes.py', '', 'iterparentnodeids', 0.11624763874381928), ('src/_pytest/pytester.py', '', 'chdir', 0.11624763874381928), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', 'setitem', 0.11547005383792514), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', 'setenv', 0.11547005383792514), ('src/_pytest/tmpdir.py', 'TempPathFactory', '_ensure_relative_to_basetemp', 0.11547005383792514), ('src/_pytest/tmpdir.py', 'TempPathFactory', 'mktemp', 0.11547005383792514), ('src/_pytest/tmpdir.py', 'TempPathFactory', 'getbasetemp', 0.11547005383792514), ('src/_pytest/fixtures.py', '', 'get_scope_node', 0.11470786693528087), ('src/_pytest/assertion/rewrite.py', '', 'rewrite_asserts', 0.11180339887498948), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', 'delitem', 0.11180339887498948), ('src/_pytest/monkeypatch.py', 'MonkeyPatch', 'delenv', 0.11180339887498948), ('src/_pytest/fixtures.py', '', 'call_fixture_func', 0.10976425998969035), ('src/_pytest/pathlib.py', '', '_force_symlink', 0.10976425998969035), ('src/_pytest/fixtures.py', 'FixtureRequest', '_get_fixturestack', 0.1091089451179962), ('src/_pytest/fixtures.py', 'FixtureRequest', '_check_scope', 0.1091089451179962), ('src/_pytest/fixtures.py', '', 'pytest_fixture_setup', 0.1091089451179962), ('src/_pytest/pathlib.py', '', 'find_prefixed', 0.1091089451179962), ('src/_pytest/pathlib.py', '', 'extract_suffixes', 0.1091089451179962), ('src/_pytest/pathlib.py', '', 'find_suffixes', 0.1091089451179962), ('src/_pytest/pathlib.py', '', 'make_numbered_dir', 0.1091089451179962), ('src/_pytest/_code/source.py', '', 'deindent', 0.10846522890932808), ('src/_pytest/fixtures.py', 'FixtureRequest', '_getnextfixturedef', 0.105999788000636), ('src/_pytest/fixtures.py', 'FixtureRequest', '_get_active_fixturedef', 0.105999788000636), ('src/_pytest/fixtures.py', 'FixtureLookupError', '__init__', 0.105999788000636), ('src/_pytest/fixtures.py', 'FixtureRequest', '_compute_fixture_value', 0.10259783520851541), ('src/_pytest/compat.py', '', 'getimfunc', 0.10050378152592121), ('src/_pytest/fixtures.py', '', 'resolve_fixture_function', 0.10050378152592121), ('src/_pytest/compat.py', '', 'is_async_function', 0.09759000729485333), ('src/_pytest/fixtures.py', '', '_teardown_yield_fixture', 0.09759000729485333), ('src/_pytest/fixtures.py', 'FixtureDef', 'finish', 0.09759000729485333), ('src/_pytest/nodes.py', 'Node', 'get_closest_marker', 0.09759000729485333), ('src/_pytest/python.py', '', 'pytest_pyfunc_call', 0.09759000729485333), ('src/_pytest/python.py', 'Function', 'runtest', 0.09759000729485333), ('src/_pytest/_io/terminalwriter.py', 'TerminalWriter', 'markup', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureRequest', 'scope', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureRequest', 'function', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureRequest', 'instance', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureRequest', '_fillfixtures', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureRequest', 'getfixturevalue', 0.09712858623572641), ('src/_pytest/fixtures.py', 'SubRequest', '__init__', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureDef', 'cache_key', 0.09712858623572641), ('src/_pytest/runner.py', 'SetupState', 'setup', 0.09712858623572641), ('src/_pytest/scope.py', 'Scope', '__lt__', 0.09712858623572641), ('src/_pytest/setuponly.py', '', 'pytest_fixture_setup', 0.09712858623572641), ('src/_pytest/setuponly.py', '', 'pytest_fixture_post_finalizer', 0.09712858623572641), ('src/_pytest/setupplan.py', '', 'pytest_fixture_setup', 0.09712858623572641), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_runtest_logfinish', 0.09712858623572641), ('src/_pytest/fixtures.py', 'FixtureRequest', 'config', 0.09667364890456635), ('src/_pytest/nodes.py', 'Node', 'getparent', 0.08804509063256238), ('src/_pytest/terminal.py', 'TerminalReporter', 'write_fspath_result', 0.08058229640253803), ('src/_pytest/terminal.py', 'TerminalReporter', 'pytest_runtest_logstart', 0.08058229640253803), ('src/_pytest/_code/code.py', '', 'getfslineno', 0.07980868844676221), ('src/_pytest/faulthandler.py', '', 'get_timeout_config_value', 0.07980868844676221), ('src/_pytest/faulthandler.py', '', 'pytest_runtest_protocol', 0.07980868844676221), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtest_logstart', 0.07980868844676221), ('src/_pytest/logging.py', '_LiveLoggingNullHandler', 'reset', 0.07980868844676221), ('src/_pytest/main.py', 'Session', '_node_location_to_relpath', 0.07980868844676221), ('src/_pytest/nodes.py', 'Item', 'location', 0.07980868844676221), ('src/_pytest/python.py', 'PyobjMixin', 'getmodpath', 0.07980868844676221), ('src/_pytest/python.py', 'PyobjMixin', 'reportinfo', 0.07980868844676221), ('src/_pytest/runner.py', '', 'pytest_runtest_protocol', 0.07980868844676221), ('src/_pytest/skipping.py', '', 'evaluate_skip_marks', 0.07980868844676221), ('src/_pytest/skipping.py', '', 'pytest_runtest_setup', 0.07980868844676221), ('src/_pytest/unittest.py', '', 'pytest_runtest_protocol', 0.07980868844676221), ('src/_pytest/warnings.py', '', 'pytest_runtest_protocol', 0.07980868844676221), ('src/_pytest/compat.py', '', 'is_generator', 0.079555728417573), ('src/_pytest/fixtures.py', 'FixtureRequest', 'fixturenames', 0.079555728417573), ('src/_pytest/logging.py', 'LoggingPlugin', 'pytest_runtest_logfinish', 0.079555728417573), ('src/_pytest/nodes.py', 'Node', 'teardown', 0.079555728417573), ('src/_pytest/nodes.py', 'Node', 'addfinalizer', 0.079555728417573), ('src/_pytest/python.py', 'Function', 'setup', 0.079555728417573), ('src/_pytest/runner.py', '', 'pytest_runtest_setup', 0.079555728417573), ('src/_pytest/runner.py', '', 'pytest_runtest_teardown', 0.079555728417573), ('src/_pytest/runner.py', 'SetupState', 'addfinalizer', 0.079555728417573)]
2024-04-05 05:40:10 
========== Conversation Round 0 ==========
2024-04-05 05:40:10 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>Rewrite fails when first expression of file is a number and mistaken as docstring\n'
             '- [x] a detailed description of the bug or problem you are having\n'
             '- [x] output of `pip list` from the virtual environment you are using\n'
             '- [x] pytest and operating system versions\n'
             '- [x] minimal example if possible\n'
             '```\n'
             'Installing collected packages: zipp, six, PyYAML, python-dateutil, MarkupSafe, importlib-metadata, watchdog, tomli, soupsieve, pyyaml-env-tag, '
             'pycparser, pluggy, packaging, mergedeep, Markdown, jinja2, iniconfig, ghp-import, exceptiongroup, click, websockets, urllib3, tqdm, smmap, '
             'pytest, pyee, mkdocs, lxml, importlib-resources, idna, cssselect, charset-normalizer, cffi, certifi, beautifulsoup4, attrs, appdirs, w3lib, '
             'typing-extensions, texttable, requests, pyzstd, pytest-metadata, pyquery, pyppmd, pyppeteer, pynacl, pymdown-extensions, pycryptodomex, pybcj, '
             'pyasn1, py, psutil, parse, multivolumefile, mkdocs-autorefs, inflate64, gitdb, fake-useragent, cryptography, comtypes, bs4, brotli, bcrypt, '
             'allure-python-commons, xlwt, xlrd, rsa, requests-html, pywinauto, python-i18n, python-dotenv, pytest-rerunfailures, pytest-html, pytest-check, '
             'PySocks, py7zr, paramiko, mkdocstrings, loguru, GitPython, ftputil, crcmod, chardet, brotlicffi, allure-pytest\n'
             'Successfully installed GitPython-3.1.31 Markdown-3.3.7 MarkupSafe-2.1.3 PySocks-1.7.1 PyYAML-6.0 allure-pytest-2.13.2 '
             'allure-python-commons-2.13.2 appdirs-1.4.4 attrs-23.1.0 bcrypt-4.0.1 beautifulsoup4-4.12.2 brotli-1.0.9 brotlicffi-1.0.9.2 bs4-0.0.1 '
             'certifi-2023.5.7 cffi-1.15.1 chardet-5.1.0 charset-normalizer-3.1.0 click-8.1.3 comtypes-1.2.0 crcmod-1.7 cryptography-41.0.1 cssselect-1.2.0 '
             'exceptiongroup-1.1.1 fake-useragent-1.1.3 ftputil-5.0.4 ghp-import-2.1.0 gitdb-4.0.10 idna-3.4 importlib-metadata-6.7.0 '
             'importlib-resources-5.12.0 inflate64-0.3.1 iniconfig-2.0.0 jinja2-3.1.2 loguru-0.7.0 lxml-4.9.2 mergedeep-1.3.4 mkdocs-1.4.3 '
             'mkdocs-autorefs-0.4.1 mkdocstrings-0.22.0 multivolumefile-0.2.3 packaging-23.1 paramiko-3.2.0 parse-1.19.1 pluggy-1.2.0 psutil-5.9.5 py-1.11.0 '
             'py7zr-0.20.5 pyasn1-0.5.0 pybcj-1.0.1 pycparser-2.21 pycryptodomex-3.18.0 pyee-8.2.2 pymdown-extensions-10.0.1 pynacl-1.5.0 pyppeteer-1.0.2 '
             'pyppmd-1.0.0 pyquery-2.0.0 pytest-7.4.0 pytest-check-2.1.5 pytest-html-3.2.0 pytest-metadata-3.0.0 pytest-rerunfailures-11.1.2 '
             'python-dateutil-2.8.2 python-dotenv-1.0.0 python-i18n-0.3.9 pywinauto-0.6.6 pyyaml-env-tag-0.1 pyzstd-0.15.9 requests-2.31.0 '
             'requests-html-0.10.0 rsa-4.9 six-1.16.0 smmap-5.0.0 soupsieve-2.4.1 texttable-1.6.7 tomli-2.0.1 tqdm-4.65.0 typing-extensions-4.6.3 '
             'urllib3-1.26.16 w3lib-2.1.1 watchdog-3.0.0 websockets-10.4 xlrd-2.0.1 xlwt-1.3.0 zipp-3.15.0\n'
             '```\n'
             "use `pytest -k xxx`， report an error：`TypeError: argument of type 'int' is not iterable`\n"
             'it seems a error in collecting testcase\n'
             '```\n'
             '==================================== ERRORS ====================================\n'
             '_ ERROR collecting testcases/基线/代理策略/SOCKS二级代理迭代二/在线用户/在线用户更新/上线用户/test_socks_user_011.py _\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/runner.py:341: in from_call\n'
             'result: Optional[TResult] = func()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/runner.py:372: in <lambda>\n'
             'call = CallInfo.from_call(lambda: list(collector.collect()), "collect")\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:531: in collect\n'
             'self._inject_setup_module_fixture()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:545: in _inject_setup_module_fixture\n'
             'self.obj, ("setUpModule", "setup_module")\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:310: in obj\n'
             'self._obj = obj = self._getobj()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:528: in _getobj\n'
             'return self._importtestmodule()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:617: in _importtestmodule\n'
             'mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/pathlib.py:565: in import_path\n'
             'importlib.import_module(module_name)\n'
             '/usr/local/lib/python3.8/importlib/__init__.py:127: in import_module\n'
             'return _bootstrap._gcd_import(name[level:], package, level)\n'
             '<frozen importlib._bootstrap>:1014: in _gcd_import\n'
             '???\n'
             '<frozen importlib._bootstrap>:991: in _find_and_load\n'
             '???\n'
             '<frozen importlib._bootstrap>:975: in _find_and_load_unlocked\n'
             '???\n'
             '<frozen importlib._bootstrap>:671: in _load_unlocked\n'
             '???\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:169: in exec_module\n'
             'source_stat, co = _rewrite_test(fn, self.config)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:352: in _rewrite_test\n'
             'rewrite_asserts(tree, source, strfn, config)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:413: in rewrite_asserts\n'
             'AssertionRewriter(module_path, config, source).run(mod)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:695: in run\n'
             'if self.is_rewrite_disabled(doc):\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:760: in is_rewrite_disabled\n'
             'return "PYTEST_DONT_REWRITE" in docstring\n'
             "E   TypeError: argument of type 'int' is not iterable\n"
             '```\n'
             '</issue>'},
 {'role': 'user',
  'content': 'An external analysis tool has been deployed to identify the suspicious code to be fixed. You can choose to use the results from this tool, if '
             'you think they are useful.The tool output is as follows:\n'
             'Top-5 suspicious methods:\n'
             'Suspicious method #1:\n'
             '<file>src/_pytest/_code/code.py</file> <class>Code</class> <func>path</func>\n'
             '\n'
             'Suspicious method #2:\n'
             '<file>src/_pytest/_code/code.py</file> <class>TracebackEntry</class> <func>getsource</func>\n'
             '\n'
             'Suspicious method #3:\n'
             '<file>src/_pytest/_code/code.py</file> <class>Traceback</class> <func>cut</func>\n'
             '\n'
             'Suspicious method #4:\n'
             '<file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>get_source</func>\n'
             '\n'
             'Suspicious method #5:\n'
             '<file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>repr_traceback_entry</func>\n'
             '\n'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '}]
2024-04-05 05:40:24 Model API request cost info: input_tokens=2240, output_tokens=409, cost=0.034670
2024-04-05 05:40:24 Raw model response: ChatCompletionMessage(content='To address the issue effectively, I will need to gather more context about the specific methods and classes mentioned in both the issue and the external analysis tool\'s output. Given the nature of the problem, it seems crucial to understand how docstrings are handled or misinterpreted in the context of pytest\'s assertion rewriting mechanism. The error message suggests that the issue arises when pytest\'s assertion rewrite mechanism encounters a number as the first expression in a file, possibly mistaking it for a docstring.\n\nHere are the API calls I would like to make to gather more context:\n\n1. `search_method_in_file("exec_module", "src/_pytest/assertion/rewrite.py")` - This method is directly mentioned in the stack trace related to the issue. Understanding its implementation will provide insights into how modules are executed and possibly how docstrings are handled during the assertion rewriting process.\n\n2. `search_method_in_file("is_rewrite_disabled", "src/_pytest/assertion/rewrite.py")` - This method is also mentioned in the stack trace and seems to be involved in determining whether to rewrite assertions in a module based on its docstring. Understanding its logic will be crucial.\n\n3. `search_class("AssertionRewriter")` - Since this class is responsible for the assertion rewriting process and is mentioned in the stack trace, getting more context about its methods and usage will be helpful.\n\n4. `search_method_in_class("get_source", "FormattedExcinfo")` - This method is listed as suspicious by the external analysis tool and might be involved in how source code is retrieved for formatting exceptions, which could relate to how docstrings or initial expressions are parsed.\n\n5. `search_method_in_class("repr_traceback_entry", "FormattedExcinfo")` - Another method marked as suspicious, potentially involved in representing traceback entries, which might interact with the assertion rewriting process or the handling of docstrings.\n\nThese API calls are aimed at understanding the components involved in the issue more deeply, focusing on assertion rewriting, docstring handling, and traceback formatting in pytest.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:40:24 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 05:40:28 Model API request cost info: input_tokens=729, output_tokens=103, cost=0.010380
2024-04-05 05:40:28 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [\n        "search_method_in_file(\\"exec_module\\", \\"src/_pytest/assertion/rewrite.py\\")",\n        "search_method_in_file(\\"is_rewrite_disabled\\", \\"src/_pytest/assertion/rewrite.py\\")",\n        "search_class(\\"AssertionRewriter\\")",\n        "search_method_in_class(\\"get_source\\", \\"FormattedExcinfo\\")",\n        "search_method_in_class(\\"repr_traceback_entry\\", \\"FormattedExcinfo\\")"\n    ],\n    "bug_locations": []\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:40:28 Raw issue json produced. Writing issue json into file.
2024-04-05 05:40:28 Extracted a valid json. Congratulations!
2024-04-05 05:40:28 Refactored invocation argument parsing failed on 'search_method_in_file("exec_module", "src/_pytest/assertion/rewrite.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e27e19780>
2024-04-05 05:40:28 Result of dispatch_intent: ('Found 1 methods with name `exec_module` in file src/_pytest/assertion/rewrite.py.\nSearch result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewritingHook</class> <func>exec_module</func> <code>    def exec_module(self, module: types.ModuleType) -> None:\n        assert module.__spec__ is not None\n        assert module.__spec__.origin is not None\n        fn = Path(module.__spec__.origin)\n        state = self.config.stash[assertstate_key]\n\n        self._rewritten_names[module.__name__] = fn\n\n        # The requested module looks like a test file, so rewrite it. This is\n        # the most magical part of the process: load the source, rewrite the\n        # asserts, and load the rewritten source. We also cache the rewritten\n        # module code in a special pyc. We must be aware of the possibility of\n        # concurrent pytest processes rewriting and loading pycs. To avoid\n        # tricky race conditions, we maintain the following invariant: The\n        # cached pyc is always a complete, valid pyc. Operations on it must be\n        # atomic. POSIX\'s atomic rename comes in handy.\n        write = not sys.dont_write_bytecode\n        cache_dir = get_cache_dir(fn)\n        if write:\n            ok = try_makedirs(cache_dir)\n            if not ok:\n                write = False\n                state.trace(f"read only directory: {cache_dir}")\n\n        cache_name = fn.name[:-3] + PYC_TAIL\n        pyc = cache_dir / cache_name\n        # Notice that even if we\'re in a read-only directory, I\'m going\n        # to check for a cached pyc. This may not be optimal...\n        co = _read_pyc(fn, pyc, state.trace)\n        if co is None:\n            state.trace(f"rewriting {fn!r}")\n            source_stat, co = _rewrite_test(fn, self.config)\n            if write:\n                self._writing_pyc = True\n                try:\n                    _write_pyc(state, co, source_stat, pyc)\n                finally:\n                    self._writing_pyc = False\n        else:\n            state.trace(f"found cached rewritten pyc for {fn}")\n        exec(co, module.__dict__)\n</code>\n\n', 'Found 1 methods with name `exec_module` in file src/_pytest/assertion/rewrite.py.\n', True)
2024-04-05 05:40:28 Refactored invocation argument parsing failed on 'search_method_in_file("is_rewrite_disabled", "src/_pytest/assertion/rewrite.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e27e18850>
2024-04-05 05:40:28 Result of dispatch_intent: ('Found 1 methods with name `is_rewrite_disabled` in file src/_pytest/assertion/rewrite.py.\nSearch result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewriter</class> <func>is_rewrite_disabled</func> <code>    def is_rewrite_disabled(docstring: str) -> bool:\n        return "PYTEST_DONT_REWRITE" in docstring\n</code>\n\n', 'Found 1 methods with name `is_rewrite_disabled` in file src/_pytest/assertion/rewrite.py.\n', True)
2024-04-05 05:40:28 Refactored invocation argument parsing failed on 'search_class("AssertionRewriter")': malformed node or string on line 1: <ast.Name object at 0x7f0e27e18190>
2024-04-05 05:40:28 Result of dispatch_intent: ('Found 1 classes with name AssertionRewriter in the codebase.\nSearch result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewriter</class> <code>class AssertionRewriter(ast.NodeVisitor):\n    def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n    def run(self, mod: ast.Module) -> None:\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n    def variable(self) -> str:\n    def assign(self, expr: ast.expr) -> ast.Name:\n    def display(self, expr: ast.expr) -> ast.expr:\n    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n    def builtin(self, name: str) -> ast.Attribute:\n    def explanation_param(self, expr: ast.expr) -> str:\n    def push_format_context(self) -> None:\n    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n    def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n</code>\n\n', 'The tool returned information about class `AssertionRewriter`.', True)
2024-04-05 05:40:28 Refactored invocation argument parsing failed on 'search_method_in_class("get_source", "FormattedExcinfo")': malformed node or string on line 1: <ast.Name object at 0x7f0e22aeee00>
2024-04-05 05:40:28 Result of dispatch_intent: ('Found 1 methods with name get_source in class FormattedExcinfo.\nSearch result 1: <file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>get_source</func> <code>    def get_source(\n        self,\n        source: Optional["Source"],\n        line_index: int = -1,\n        excinfo: Optional[ExceptionInfo[BaseException]] = None,\n        short: bool = False,\n    ) -> List[str]:\n        """Return formatted and marked up source lines."""\n        lines = []\n        if source is not None and line_index < 0:\n            line_index += len(source)\n        if source is None or line_index >= len(source.lines) or line_index < 0:\n            # `line_index` could still be outside `range(len(source.lines))` if\n            # we\'re processing AST with pathological position attributes.\n            source = Source("???")\n            line_index = 0\n        space_prefix = "    "\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + "   " + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name get_source in class FormattedExcinfo.\n', True)
2024-04-05 05:40:28 Refactored invocation argument parsing failed on 'search_method_in_class("repr_traceback_entry", "FormattedExcinfo")': malformed node or string on line 1: <ast.Name object at 0x7f0e22aef040>
2024-04-05 05:40:28 Result of dispatch_intent: ('Found 1 methods with name repr_traceback_entry in class FormattedExcinfo.\nSearch result 1: <file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>repr_traceback_entry</func> <code>    def repr_traceback_entry(\n        self,\n        entry: Optional[TracebackEntry],\n        excinfo: Optional[ExceptionInfo[BaseException]] = None,\n    ) -> "ReprEntry":\n        lines: List[str] = []\n        style = (\n            entry._repr_style\n            if entry is not None and entry._repr_style is not None\n            else self.style\n        )\n        if style in ("short", "long") and entry is not None:\n            source = self._getentrysource(entry)\n            if source is None:\n                source = Source("???")\n                line_index = 0\n            else:\n                line_index = entry.lineno - entry.getfirstlinesource()\n            short = style == "short"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = "in %s" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or ""\n            entry_path = entry.path\n            path = self._makepath(entry_path)\n            reprfileloc = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, reprfileloc, style)\n        elif style == "value":\n            if excinfo:\n                lines.extend(str(excinfo.value).split("\\n"))\n            return ReprEntry(lines, None, None, None, style)\n        else:\n            if excinfo:\n                lines.extend(self.get_exconly(excinfo, indent=4))\n            return ReprEntry(lines, None, None, None, style)\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name repr_traceback_entry in class FormattedExcinfo.\n', True)
2024-04-05 05:40:50 Model API request cost info: input_tokens=4572, output_tokens=699, cost=0.066690
2024-04-05 05:40:50 Raw model response: ChatCompletionMessage(content='Analyzing the collected context from the search results provides insights into how pytest handles assertion rewriting and potentially where the issue with interpreting a number as a docstring might originate.\n\n1. **`exec_module` in `AssertionRewritingHook`**: This method is responsible for executing a module that potentially needs its assertions rewritten. It checks if the module should be rewritten, reads or writes a cached compiled version of the module if necessary, and finally executes the compiled object. This process involves determining if a module is a test file and rewriting its asserts. The issue does not seem to directly originate from here, but understanding this process is crucial since it\'s part of how pytest processes test files.\n\n2. **`is_rewrite_disabled` in `AssertionRewriter`**: This method checks if a docstring contains "PYTEST_DONT_REWRITE" to decide whether assertion rewriting should be disabled for the module. The issue reported is related to this functionality, as the error occurs when checking if an integer (mistakenly identified as a docstring) contains this string. This suggests a misinterpretation of the module\'s first expression, possibly due to how the module\'s content is parsed or loaded before this check.\n\n3. **`AssertionRewriter` class**: This class is central to the assertion rewriting mechanism in pytest. It visits nodes in the abstract syntax tree (AST) of the module, rewriting assert statements to provide more detailed assertion error messages. The class\'s methods manipulate the AST based on the module\'s content, which could be where the initial parsing or handling of the module\'s first expression (mistakenly a number) needs to be more robust or fails to correctly identify the start of executable code versus docstrings or comments.\n\n4. **`get_source` in `FormattedExcinfo`**: This method formats and marks up source lines for display in traceback entries. While it deals with source code representation, the issue does not seem to directly relate to this functionality. However, understanding how source lines are handled might give clues about how different parts of a file are interpreted, especially in error contexts.\n\n5. **`repr_traceback_entry` in `FormattedExcinfo`**: Similar to `get_source`, this method formats traceback entries, including source code lines. It\'s another point in the code where the representation of a file\'s content is manipulated, but again, it seems tangential to the core issue of misinterpreting a number as a docstring.\n\n**Analysis Summary**:\nThe core of the issue likely revolves around how pytest\'s assertion rewriting mechanism interprets the initial content of a module. Specifically, the error occurs because an integer is not expected where a docstring (or any iterable) is anticipated. This suggests a problem in the pre-processing or loading phase of a module\'s content before or during the assertion rewriting process, particularly in how the module\'s first expression is handled or identified. The `is_rewrite_disabled` method\'s straightforward check for "PYTEST_DONT_REWRITE" in what is assumed to be a docstring hints at a lack of validation or incorrect assumption about the module\'s structure at this point in the process.\n\n**Next Steps**:\nTo address the issue, a patch should ensure that the module\'s first expression is correctly identified and handled, distinguishing between actual docstrings, comments, and other expressions (like numbers). This might involve adjusting how the module\'s content is parsed or pre-processed before assertion rewriting checks, ensuring robust handling of various valid module starts.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:40:50 
========== Conversation Round 1 ==========
2024-04-05 05:40:50 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>Rewrite fails when first expression of file is a number and mistaken as docstring\n'
             '- [x] a detailed description of the bug or problem you are having\n'
             '- [x] output of `pip list` from the virtual environment you are using\n'
             '- [x] pytest and operating system versions\n'
             '- [x] minimal example if possible\n'
             '```\n'
             'Installing collected packages: zipp, six, PyYAML, python-dateutil, MarkupSafe, importlib-metadata, watchdog, tomli, soupsieve, pyyaml-env-tag, '
             'pycparser, pluggy, packaging, mergedeep, Markdown, jinja2, iniconfig, ghp-import, exceptiongroup, click, websockets, urllib3, tqdm, smmap, '
             'pytest, pyee, mkdocs, lxml, importlib-resources, idna, cssselect, charset-normalizer, cffi, certifi, beautifulsoup4, attrs, appdirs, w3lib, '
             'typing-extensions, texttable, requests, pyzstd, pytest-metadata, pyquery, pyppmd, pyppeteer, pynacl, pymdown-extensions, pycryptodomex, pybcj, '
             'pyasn1, py, psutil, parse, multivolumefile, mkdocs-autorefs, inflate64, gitdb, fake-useragent, cryptography, comtypes, bs4, brotli, bcrypt, '
             'allure-python-commons, xlwt, xlrd, rsa, requests-html, pywinauto, python-i18n, python-dotenv, pytest-rerunfailures, pytest-html, pytest-check, '
             'PySocks, py7zr, paramiko, mkdocstrings, loguru, GitPython, ftputil, crcmod, chardet, brotlicffi, allure-pytest\n'
             'Successfully installed GitPython-3.1.31 Markdown-3.3.7 MarkupSafe-2.1.3 PySocks-1.7.1 PyYAML-6.0 allure-pytest-2.13.2 '
             'allure-python-commons-2.13.2 appdirs-1.4.4 attrs-23.1.0 bcrypt-4.0.1 beautifulsoup4-4.12.2 brotli-1.0.9 brotlicffi-1.0.9.2 bs4-0.0.1 '
             'certifi-2023.5.7 cffi-1.15.1 chardet-5.1.0 charset-normalizer-3.1.0 click-8.1.3 comtypes-1.2.0 crcmod-1.7 cryptography-41.0.1 cssselect-1.2.0 '
             'exceptiongroup-1.1.1 fake-useragent-1.1.3 ftputil-5.0.4 ghp-import-2.1.0 gitdb-4.0.10 idna-3.4 importlib-metadata-6.7.0 '
             'importlib-resources-5.12.0 inflate64-0.3.1 iniconfig-2.0.0 jinja2-3.1.2 loguru-0.7.0 lxml-4.9.2 mergedeep-1.3.4 mkdocs-1.4.3 '
             'mkdocs-autorefs-0.4.1 mkdocstrings-0.22.0 multivolumefile-0.2.3 packaging-23.1 paramiko-3.2.0 parse-1.19.1 pluggy-1.2.0 psutil-5.9.5 py-1.11.0 '
             'py7zr-0.20.5 pyasn1-0.5.0 pybcj-1.0.1 pycparser-2.21 pycryptodomex-3.18.0 pyee-8.2.2 pymdown-extensions-10.0.1 pynacl-1.5.0 pyppeteer-1.0.2 '
             'pyppmd-1.0.0 pyquery-2.0.0 pytest-7.4.0 pytest-check-2.1.5 pytest-html-3.2.0 pytest-metadata-3.0.0 pytest-rerunfailures-11.1.2 '
             'python-dateutil-2.8.2 python-dotenv-1.0.0 python-i18n-0.3.9 pywinauto-0.6.6 pyyaml-env-tag-0.1 pyzstd-0.15.9 requests-2.31.0 '
             'requests-html-0.10.0 rsa-4.9 six-1.16.0 smmap-5.0.0 soupsieve-2.4.1 texttable-1.6.7 tomli-2.0.1 tqdm-4.65.0 typing-extensions-4.6.3 '
             'urllib3-1.26.16 w3lib-2.1.1 watchdog-3.0.0 websockets-10.4 xlrd-2.0.1 xlwt-1.3.0 zipp-3.15.0\n'
             '```\n'
             "use `pytest -k xxx`， report an error：`TypeError: argument of type 'int' is not iterable`\n"
             'it seems a error in collecting testcase\n'
             '```\n'
             '==================================== ERRORS ====================================\n'
             '_ ERROR collecting testcases/基线/代理策略/SOCKS二级代理迭代二/在线用户/在线用户更新/上线用户/test_socks_user_011.py _\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/runner.py:341: in from_call\n'
             'result: Optional[TResult] = func()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/runner.py:372: in <lambda>\n'
             'call = CallInfo.from_call(lambda: list(collector.collect()), "collect")\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:531: in collect\n'
             'self._inject_setup_module_fixture()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:545: in _inject_setup_module_fixture\n'
             'self.obj, ("setUpModule", "setup_module")\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:310: in obj\n'
             'self._obj = obj = self._getobj()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:528: in _getobj\n'
             'return self._importtestmodule()\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/python.py:617: in _importtestmodule\n'
             'mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/pathlib.py:565: in import_path\n'
             'importlib.import_module(module_name)\n'
             '/usr/local/lib/python3.8/importlib/__init__.py:127: in import_module\n'
             'return _bootstrap._gcd_import(name[level:], package, level)\n'
             '<frozen importlib._bootstrap>:1014: in _gcd_import\n'
             '???\n'
             '<frozen importlib._bootstrap>:991: in _find_and_load\n'
             '???\n'
             '<frozen importlib._bootstrap>:975: in _find_and_load_unlocked\n'
             '???\n'
             '<frozen importlib._bootstrap>:671: in _load_unlocked\n'
             '???\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:169: in exec_module\n'
             'source_stat, co = _rewrite_test(fn, self.config)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:352: in _rewrite_test\n'
             'rewrite_asserts(tree, source, strfn, config)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:413: in rewrite_asserts\n'
             'AssertionRewriter(module_path, config, source).run(mod)\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:695: in run\n'
             'if self.is_rewrite_disabled(doc):\n'
             '/usr/local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:760: in is_rewrite_disabled\n'
             'return "PYTEST_DONT_REWRITE" in docstring\n'
             "E   TypeError: argument of type 'int' is not iterable\n"
             '```\n'
             '</issue>'},
 {'role': 'user',
  'content': 'An external analysis tool has been deployed to identify the suspicious code to be fixed. You can choose to use the results from this tool, if '
             'you think they are useful.The tool output is as follows:\n'
             'Top-5 suspicious methods:\n'
             'Suspicious method #1:\n'
             '<file>src/_pytest/_code/code.py</file> <class>Code</class> <func>path</func>\n'
             '\n'
             'Suspicious method #2:\n'
             '<file>src/_pytest/_code/code.py</file> <class>TracebackEntry</class> <func>getsource</func>\n'
             '\n'
             'Suspicious method #3:\n'
             '<file>src/_pytest/_code/code.py</file> <class>Traceback</class> <func>cut</func>\n'
             '\n'
             'Suspicious method #4:\n'
             '<file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>get_source</func>\n'
             '\n'
             'Suspicious method #5:\n'
             '<file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>repr_traceback_entry</func>\n'
             '\n'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '},
 {'role': 'assistant',
  'content': 'To address the issue effectively, I will need to gather more context about the specific methods and classes mentioned in both the issue and the '
             "external analysis tool's output. Given the nature of the problem, it seems crucial to understand how docstrings are handled or misinterpreted in "
             "the context of pytest's assertion rewriting mechanism. The error message suggests that the issue arises when pytest's assertion rewrite "
             'mechanism encounters a number as the first expression in a file, possibly mistaking it for a docstring.\n'
             '\n'
             'Here are the API calls I would like to make to gather more context:\n'
             '\n'
             '1. `search_method_in_file("exec_module", "src/_pytest/assertion/rewrite.py")` - This method is directly mentioned in the stack trace related to '
             'the issue. Understanding its implementation will provide insights into how modules are executed and possibly how docstrings are handled during '
             'the assertion rewriting process.\n'
             '\n'
             '2. `search_method_in_file("is_rewrite_disabled", "src/_pytest/assertion/rewrite.py")` - This method is also mentioned in the stack trace and '
             'seems to be involved in determining whether to rewrite assertions in a module based on its docstring. Understanding its logic will be crucial.\n'
             '\n'
             '3. `search_class("AssertionRewriter")` - Since this class is responsible for the assertion rewriting process and is mentioned in the stack '
             'trace, getting more context about its methods and usage will be helpful.\n'
             '\n'
             '4. `search_method_in_class("get_source", "FormattedExcinfo")` - This method is listed as suspicious by the external analysis tool and might be '
             'involved in how source code is retrieved for formatting exceptions, which could relate to how docstrings or initial expressions are parsed.\n'
             '\n'
             '5. `search_method_in_class("repr_traceback_entry", "FormattedExcinfo")` - Another method marked as suspicious, potentially involved in '
             'representing traceback entries, which might interact with the assertion rewriting process or the handling of docstrings.\n'
             '\n'
             'These API calls are aimed at understanding the components involved in the issue more deeply, focusing on assertion rewriting, docstring '
             'handling, and traceback formatting in pytest.'},
 {'role': 'user',
  'content': 'Result of search_method_in_file("exec_module", "src/_pytest/assertion/rewrite.py"):\n'
             'Found 1 methods with name `exec_module` in file src/_pytest/assertion/rewrite.py.\n'
             'Search result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewritingHook</class> <func>exec_module</func> <code>    def '
             'exec_module(self, module: types.ModuleType) -> None:\n'
             '        assert module.__spec__ is not None\n'
             '        assert module.__spec__.origin is not None\n'
             '        fn = Path(module.__spec__.origin)\n'
             '        state = self.config.stash[assertstate_key]\n'
             '\n'
             '        self._rewritten_names[module.__name__] = fn\n'
             '\n'
             '        # The requested module looks like a test file, so rewrite it. This is\n'
             '        # the most magical part of the process: load the source, rewrite the\n'
             '        # asserts, and load the rewritten source. We also cache the rewritten\n'
             '        # module code in a special pyc. We must be aware of the possibility of\n'
             '        # concurrent pytest processes rewriting and loading pycs. To avoid\n'
             '        # tricky race conditions, we maintain the following invariant: The\n'
             '        # cached pyc is always a complete, valid pyc. Operations on it must be\n'
             "        # atomic. POSIX's atomic rename comes in handy.\n"
             '        write = not sys.dont_write_bytecode\n'
             '        cache_dir = get_cache_dir(fn)\n'
             '        if write:\n'
             '            ok = try_makedirs(cache_dir)\n'
             '            if not ok:\n'
             '                write = False\n'
             '                state.trace(f"read only directory: {cache_dir}")\n'
             '\n'
             '        cache_name = fn.name[:-3] + PYC_TAIL\n'
             '        pyc = cache_dir / cache_name\n'
             "        # Notice that even if we're in a read-only directory, I'm going\n"
             '        # to check for a cached pyc. This may not be optimal...\n'
             '        co = _read_pyc(fn, pyc, state.trace)\n'
             '        if co is None:\n'
             '            state.trace(f"rewriting {fn!r}")\n'
             '            source_stat, co = _rewrite_test(fn, self.config)\n'
             '            if write:\n'
             '                self._writing_pyc = True\n'
             '                try:\n'
             '                    _write_pyc(state, co, source_stat, pyc)\n'
             '                finally:\n'
             '                    self._writing_pyc = False\n'
             '        else:\n'
             '            state.trace(f"found cached rewritten pyc for {fn}")\n'
             '        exec(co, module.__dict__)\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_file("is_rewrite_disabled", "src/_pytest/assertion/rewrite.py"):\n'
             'Found 1 methods with name `is_rewrite_disabled` in file src/_pytest/assertion/rewrite.py.\n'
             'Search result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewriter</class> <func>is_rewrite_disabled</func> <code>    def '
             'is_rewrite_disabled(docstring: str) -> bool:\n'
             '        return "PYTEST_DONT_REWRITE" in docstring\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_class("AssertionRewriter"):\n'
             'Found 1 classes with name AssertionRewriter in the codebase.\n'
             'Search result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewriter</class> <code>class AssertionRewriter(ast.NodeVisitor):\n'
             '    def __init__(\n'
             '        self, module_path: Optional[str], config: Optional[Config], source: bytes\n'
             '    ) -> None:\n'
             '    def run(self, mod: ast.Module) -> None:\n'
             '    @staticmethod\n'
             '    def is_rewrite_disabled(docstring: str) -> bool:\n'
             '    def variable(self) -> str:\n'
             '    def assign(self, expr: ast.expr) -> ast.Name:\n'
             '    def display(self, expr: ast.expr) -> ast.expr:\n'
             '    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n'
             '    def builtin(self, name: str) -> ast.Attribute:\n'
             '    def explanation_param(self, expr: ast.expr) -> str:\n'
             '    def push_format_context(self) -> None:\n'
             '    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n'
             '    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n'
             '    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n'
             '    def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n'
             '    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n'
             '    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n'
             '    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n'
             '    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n'
             '    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n'
             '    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n'
             '    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n'
             '    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_class("get_source", "FormattedExcinfo"):\n'
             'Found 1 methods with name get_source in class FormattedExcinfo.\n'
             'Search result 1: <file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>get_source</func> <code>    def get_source(\n'
             '        self,\n'
             '        source: Optional["Source"],\n'
             '        line_index: int = -1,\n'
             '        excinfo: Optional[ExceptionInfo[BaseException]] = None,\n'
             '        short: bool = False,\n'
             '    ) -> List[str]:\n'
             '        """Return formatted and marked up source lines."""\n'
             '        lines = []\n'
             '        if source is not None and line_index < 0:\n'
             '            line_index += len(source)\n'
             '        if source is None or line_index >= len(source.lines) or line_index < 0:\n'
             '            # `line_index` could still be outside `range(len(source.lines))` if\n'
             "            # we're processing AST with pathological position attributes.\n"
             '            source = Source("???")\n'
             '            line_index = 0\n'
             '        space_prefix = "    "\n'
             '        if short:\n'
             '            lines.append(space_prefix + source.lines[line_index].strip())\n'
             '        else:\n'
             '            for line in source.lines[:line_index]:\n'
             '                lines.append(space_prefix + line)\n'
             '            lines.append(self.flow_marker + "   " + source.lines[line_index])\n'
             '            for line in source.lines[line_index + 1 :]:\n'
             '                lines.append(space_prefix + line)\n'
             '        if excinfo is not None:\n'
             '            indent = 4 if short else self._getindent(source)\n'
             '            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n'
             '        return lines\n'
             '</code>\n'
             '\n'
             'Other results are in these files:\n'
             '\n'
             '\n'
             'Result of search_method_in_class("repr_traceback_entry", "FormattedExcinfo"):\n'
             'Found 1 methods with name repr_traceback_entry in class FormattedExcinfo.\n'
             'Search result 1: <file>src/_pytest/_code/code.py</file> <class>FormattedExcinfo</class> <func>repr_traceback_entry</func> <code>    def '
             'repr_traceback_entry(\n'
             '        self,\n'
             '        entry: Optional[TracebackEntry],\n'
             '        excinfo: Optional[ExceptionInfo[BaseException]] = None,\n'
             '    ) -> "ReprEntry":\n'
             '        lines: List[str] = []\n'
             '        style = (\n'
             '            entry._repr_style\n'
             '            if entry is not None and entry._repr_style is not None\n'
             '            else self.style\n'
             '        )\n'
             '        if style in ("short", "long") and entry is not None:\n'
             '            source = self._getentrysource(entry)\n'
             '            if source is None:\n'
             '                source = Source("???")\n'
             '                line_index = 0\n'
             '            else:\n'
             '                line_index = entry.lineno - entry.getfirstlinesource()\n'
             '            short = style == "short"\n'
             '            reprargs = self.repr_args(entry) if not short else None\n'
             '            s = self.get_source(source, line_index, excinfo, short=short)\n'
             '            lines.extend(s)\n'
             '            if short:\n'
             '                message = "in %s" % (entry.name)\n'
             '            else:\n'
             '                message = excinfo and excinfo.typename or ""\n'
             '            entry_path = entry.path\n'
             '            path = self._makepath(entry_path)\n'
             '            reprfileloc = ReprFileLocation(path, entry.lineno + 1, message)\n'
             '            localsrepr = self.repr_locals(entry.locals)\n'
             '            return ReprEntry(lines, reprargs, localsrepr, reprfileloc, style)\n'
             '        elif style == "value":\n'
             '            if excinfo:\n'
             '                lines.extend(str(excinfo.value).split("\\n"))\n'
             '            return ReprEntry(lines, None, None, None, style)\n'
             '        else:\n'
             '            if excinfo:\n'
             '                lines.extend(self.get_exconly(excinfo, indent=4))\n'
             '            return ReprEntry(lines, None, None, None, style)\n'
             '</code>\n'
             '\n'
             'Other results are in these files:\n'
             '\n'
             '\n'},
 {'role': 'user', 'content': "Let's analyze collected context first"},
 {'role': 'assistant',
  'content': 'Analyzing the collected context from the search results provides insights into how pytest handles assertion rewriting and potentially where the '
             'issue with interpreting a number as a docstring might originate.\n'
             '\n'
             '1. **`exec_module` in `AssertionRewritingHook`**: This method is responsible for executing a module that potentially needs its assertions '
             'rewritten. It checks if the module should be rewritten, reads or writes a cached compiled version of the module if necessary, and finally '
             'executes the compiled object. This process involves determining if a module is a test file and rewriting its asserts. The issue does not seem to '
             "directly originate from here, but understanding this process is crucial since it's part of how pytest processes test files.\n"
             '\n'
             '2. **`is_rewrite_disabled` in `AssertionRewriter`**: This method checks if a docstring contains "PYTEST_DONT_REWRITE" to decide whether '
             'assertion rewriting should be disabled for the module. The issue reported is related to this functionality, as the error occurs when checking if '
             "an integer (mistakenly identified as a docstring) contains this string. This suggests a misinterpretation of the module's first expression, "
             "possibly due to how the module's content is parsed or loaded before this check.\n"
             '\n'
             '3. **`AssertionRewriter` class**: This class is central to the assertion rewriting mechanism in pytest. It visits nodes in the abstract syntax '
             "tree (AST) of the module, rewriting assert statements to provide more detailed assertion error messages. The class's methods manipulate the AST "
             "based on the module's content, which could be where the initial parsing or handling of the module's first expression (mistakenly a number) needs "
             'to be more robust or fails to correctly identify the start of executable code versus docstrings or comments.\n'
             '\n'
             '4. **`get_source` in `FormattedExcinfo`**: This method formats and marks up source lines for display in traceback entries. While it deals with '
             'source code representation, the issue does not seem to directly relate to this functionality. However, understanding how source lines are '
             'handled might give clues about how different parts of a file are interpreted, especially in error contexts.\n'
             '\n'
             '5. **`repr_traceback_entry` in `FormattedExcinfo`**: Similar to `get_source`, this method formats traceback entries, including source code '
             "lines. It's another point in the code where the representation of a file's content is manipulated, but again, it seems tangential to the core "
             'issue of misinterpreting a number as a docstring.\n'
             '\n'
             '**Analysis Summary**:\n'
             "The core of the issue likely revolves around how pytest's assertion rewriting mechanism interprets the initial content of a module. "
             'Specifically, the error occurs because an integer is not expected where a docstring (or any iterable) is anticipated. This suggests a problem in '
             "the pre-processing or loading phase of a module's content before or during the assertion rewriting process, particularly in how the module's "
             'first expression is handled or identified. The `is_rewrite_disabled` method\'s straightforward check for "PYTEST_DONT_REWRITE" in what is '
             "assumed to be a docstring hints at a lack of validation or incorrect assumption about the module's structure at this point in the process.\n"
             '\n'
             '**Next Steps**:\n'
             "To address the issue, a patch should ensure that the module's first expression is correctly identified and handled, distinguishing between "
             "actual docstrings, comments, and other expressions (like numbers). This might involve adjusting how the module's content is parsed or "
             'pre-processed before assertion rewriting checks, ensuring robust handling of various valid module starts.'},
 {'role': 'user',
  'content': 'Based on your analysis, answer below questions:  - do we need more context: construct search API calls to get more context of the project. '
             "(leave it empty if you don't need more context)  - where are bug locations: buggy files and methods. (leave it empty if you don't have enough "
             'information)'}]
2024-04-05 05:41:02 Model API request cost info: input_tokens=5344, output_tokens=234, cost=0.060460
2024-04-05 05:41:02 Raw model response: ChatCompletionMessage(content='- do we need more context: \n\n- where are bug locations: \n  - **Buggy File**: `src/_pytest/assertion/rewrite.py`\n  - **Buggy Methods**: \n    - `is_rewrite_disabled` in class `AssertionRewriter`: This method fails to handle cases where the first expression in a file is not a string (docstring) but instead an integer, leading to a `TypeError` when attempting to check if "PYTEST_DONT_REWRITE" is in the docstring.\n    - The process leading to the call to `is_rewrite_disabled` might also be considered part of the bug location, as it should handle or validate the module\'s content more robustly before this point. However, the specific method(s) or part of the process requiring adjustment is less clear without deeper inspection into how modules are loaded and pre-processed for assertion rewriting. The description and analysis suggest that the issue arises earlier in the handling of the module\'s content, possibly in or before the `exec_module` method in the `AssertionRewritingHook` class, where the decision to rewrite a module\'s assertions is made based on its content.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:41:02 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 05:41:05 Model API request cost info: input_tokens=554, output_tokens=88, cost=0.008180
2024-04-05 05:41:05 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [],\n    "bug_locations":[\n        {\n            "file": "src/_pytest/assertion/rewrite.py",\n            "class": "AssertionRewriter",\n            "method": "is_rewrite_disabled"\n        },\n        {\n            "file": "src/_pytest/assertion/rewrite.py",\n            "class": "AssertionRewritingHook",\n            "method": "exec_module"\n        }\n    ]\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:41:05 Raw issue json produced. Writing issue json into file.
2024-04-05 05:41:05 Extracted a valid json. Congratulations!
2024-04-05 05:41:05 Result of dispatch_intent: ('Found 1 methods with name is_rewrite_disabled in class AssertionRewriter.\nSearch result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewriter</class> <func>is_rewrite_disabled</func> <code>    def is_rewrite_disabled(docstring: str) -> bool:\n        return "PYTEST_DONT_REWRITE" in docstring\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name is_rewrite_disabled in class AssertionRewriter.\n', True)
2024-04-05 05:41:05 Result of dispatch_intent: ('Found 1 methods with name exec_module in class AssertionRewritingHook.\nSearch result 1: <file>src/_pytest/assertion/rewrite.py</file> <class>AssertionRewritingHook</class> <func>exec_module</func> <code>    def exec_module(self, module: types.ModuleType) -> None:\n        assert module.__spec__ is not None\n        assert module.__spec__.origin is not None\n        fn = Path(module.__spec__.origin)\n        state = self.config.stash[assertstate_key]\n\n        self._rewritten_names[module.__name__] = fn\n\n        # The requested module looks like a test file, so rewrite it. This is\n        # the most magical part of the process: load the source, rewrite the\n        # asserts, and load the rewritten source. We also cache the rewritten\n        # module code in a special pyc. We must be aware of the possibility of\n        # concurrent pytest processes rewriting and loading pycs. To avoid\n        # tricky race conditions, we maintain the following invariant: The\n        # cached pyc is always a complete, valid pyc. Operations on it must be\n        # atomic. POSIX\'s atomic rename comes in handy.\n        write = not sys.dont_write_bytecode\n        cache_dir = get_cache_dir(fn)\n        if write:\n            ok = try_makedirs(cache_dir)\n            if not ok:\n                write = False\n                state.trace(f"read only directory: {cache_dir}")\n\n        cache_name = fn.name[:-3] + PYC_TAIL\n        pyc = cache_dir / cache_name\n        # Notice that even if we\'re in a read-only directory, I\'m going\n        # to check for a cached pyc. This may not be optimal...\n        co = _read_pyc(fn, pyc, state.trace)\n        if co is None:\n            state.trace(f"rewriting {fn!r}")\n            source_stat, co = _rewrite_test(fn, self.config)\n            if write:\n                self._writing_pyc = True\n                try:\n                    _write_pyc(state, co, source_stat, pyc)\n                finally:\n                    self._writing_pyc = False\n        else:\n            state.trace(f"found cached rewritten pyc for {fn}")\n        exec(co, module.__dict__)\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name exec_module in class AssertionRewritingHook.\n', True)
2024-04-05 05:41:05 Gathered enough information. Invoking write_patch.
2024-04-05 05:41:05 Trying to write a patch. Try 1 of 3.
2024-04-05 05:41:22 Model API request cost info: input_tokens=6353, output_tokens=358, cost=0.074270
2024-04-05 05:41:22 Raw model response: ChatCompletionMessage(content='# modification 1\n```python\n<file>src/_pytest/assertion/rewrite.py</file>\n<original>    def is_rewrite_disabled(docstring: str) -> bool:\n        return "PYTEST_DONT_REWRITE" in docstring\n</original>\n<patched>    def is_rewrite_disabled(docstring: Optional[str]) -> bool:\n        if docstring is None:\n            return False\n        return "PYTEST_DONT_REWRITE" in docstring\n</patched>\n```\n\n# modification 2\n```python\n<file>src/_pytest/assertion/rewrite.py</file>\n<original>        exec(co, module.__dict__)</original>\n<patched>        try:\n            exec(co, module.__dict__)\n        except TypeError as e:\n            if "not iterable" in str(e):\n                raise TypeError(f"TypeError encountered while trying to execute module {module.__name__}. "\n                                "This may be caused by a non-string (e.g., number) at the beginning of the file, "\n                                "which is being mistaken for a docstring.") from e\n            raise\n</patched>\n```\n\nThese modifications address the issue by first ensuring that the `is_rewrite_disabled` function can gracefully handle cases where the input is not a string, which could occur if the first expression in a file is mistakenly treated as a docstring. The second modification adds error handling around the `exec` call in `exec_module` to provide a more informative error message if a `TypeError` related to iterability occurs, suggesting a possible cause related to the file\'s initial content. This approach aims to make the error more understandable to the user and hints at a potential fix, without fundamentally changing how pytest processes test files.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:41:22 Raw patch produced in try 1. Writing patch into file.
2024-04-05 05:41:23 [Validation] Applied patch. Going to run test suite.
2024-04-05 05:41:23 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_pytest-dev__pytest__8.0 ; pytest -rA testing/test_assertrewrite.py ; conda deactivate
2024-04-05 05:41:26 [Run test-suite] Result of parsing test log: True
2024-04-05 05:41:26 [Run test-suite] Eval status: {'test_constant_not_picked_as_module_docstring.py': 'ERROR', 'test_rewrites_plugin_as_a_package.py::test': 'FAILED', 'test_assertion_message.py::test_foo': 'FAILED', 'test_assertion_message_multiline.py::test_foo': 'FAILED', 'test_assertion_message_tuple.py::test_foo': 'FAILED', 'test_assertion_message_expr.py::test_foo': 'FAILED', 'test_assertion_message_escape.py::test_foo': 'FAILED', 'test_assertion_messages_bytes.py::test_bytes_assertion': 'FAILED', 'test_issue731.py::test_long_repr': 'FAILED', 'test_simple_case.py::test_ternary_display': 'FAILED', 'test_long_case.py::test_ternary_display': 'FAILED', 'test_many_brackets.py::test_ternary_display': 'FAILED', 'tests/file.py::test_simple_failure': 'FAILED', 'test_assertion_walrus_no_variable_name_conflict.py::test_walrus_conversion_no_conflict': 'FAILED', 'test_assertion_walrus_operator_fail_assertion.py::test_walrus_conversion_fails': 'FAILED', 'test_assertion_walrus_operator_compare_boolean_fails.py::test_walrus_operator_change_boolean_value': 'FAILED', 'test_assertion_walrus_operator_boolean_none_fails.py::test_walrus_operator_change_boolean_value': 'FAILED', 'test_assertion_walrus_operator_gt_operand_function.py::test_gt': 'FAILED', 'test_hook_call.py::test_simple': 'FAILED', 'test_hook_call.py::test_fails': 'FAILED', 'test_hook_call_with_parens.py::test': 'FAILED', 'test_default_verbosity.py::test_very_long_string': 'FAILED', 'test_increased_verbosity.py::test_very_long_string': 'FAILED', 'test_max_increased_verbosity.py::test_very_long_string': 'FAILED', 'test_pyc_vs_pyo.py::test_optimized': 'FAILED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_name': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_call': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_len': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assert': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multiple': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[latin1': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[backslash': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assertion': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[escaped': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[no': 'PASSED', 'testing/test_assertrewrite.py::test_try_makedirs': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support': 'PASSED', 'testing/test_assertrewrite.py::test_issue731': 'PASSED', 'testing/test_assertrewrite.py::TestIssue925::test_simple_case': 'PASSED', 'testing/test_assertrewrite.py::TestIssue925::test_long_case': 'PASSED', 'testing/test_assertrewrite.py::TestIssue925::test_many_brackets': 'PASSED', 'testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand_json_dumps': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_keyword_arg': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_arg_as_function': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_gt_operand_function': 'PASSED', 'testing/test_assertrewrite.py::test_source_mtime_long_long[-1]': 'PASSED', 'testing/test_assertrewrite.py::test_source_mtime_long_long[1]': 'PASSED', 'testing/test_assertrewrite.py::test_rewrite_infinite_recursion': 'PASSED', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic': 'PASSED', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories': 'PASSED', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_option_default': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_call': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11140::test_constant_not_picked_as_module_docstring': 'FAILED'}
2024-04-05 05:41:26 [Run test-suite] Eval result: {'FAIL_TO_PASS': {'success': [], 'failure': ['testing/test_assertrewrite.py::TestIssue11140::test_constant_not_picked_as_module_docstring']}, 'PASS_TO_PASS': {'success': ['testing/test_assertrewrite.py::TestAssertionPass::test_hook_call', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl', 'testing/test_assertrewrite.py::TestAssertionPass::test_option_default', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_call', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_len', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_name', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_arg_as_function', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_keyword_arg', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_gt_operand_function', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand_json_dumps', 'testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs', 'testing/test_assertrewrite.py::TestIssue925::test_long_case', 'testing/test_assertrewrite.py::TestIssue925::test_many_brackets', 'testing/test_assertrewrite.py::TestIssue925::test_simple_case', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assert', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assertion', 'testing/test_assertrewrite.py::test_get_assertion_exprs[backslash', 'testing/test_assertrewrite.py::test_get_assertion_exprs[escaped', 'testing/test_assertrewrite.py::test_get_assertion_exprs[latin1', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multiple', 'testing/test_assertrewrite.py::test_get_assertion_exprs[no', 'testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]', 'testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8', 'testing/test_assertrewrite.py::test_issue731', 'testing/test_assertrewrite.py::test_rewrite_infinite_recursion', 'testing/test_assertrewrite.py::test_source_mtime_long_long[-1]', 'testing/test_assertrewrite.py::test_source_mtime_long_long[1]', 'testing/test_assertrewrite.py::test_try_makedirs'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}
2024-04-05 05:41:26 [Run test-suite] Resolution status: ResolvedStatus.NO
2024-04-05 05:41:26 [Run test-suite] Returning False since some tests failed.
2024-04-05 05:41:26 [Validation] Finishing. Result is False. Message: Some tests have failed..
2024-04-05 05:41:26 Trying to write a patch. Try 2 of 3.
2024-04-05 05:41:46 Model API request cost info: input_tokens=6742, output_tokens=446, cost=0.080800
2024-04-05 05:41:46 Raw model response: ChatCompletionMessage(content='Given the feedback and the need to directly address the issue of a number being mistaken for a docstring, it seems the best approach is to ensure that the module\'s content is correctly interpreted before the assertion rewriting process begins. The initial patch attempted to handle the symptom rather than preventing the issue at its source. Let\'s focus on ensuring that the module\'s first expression is correctly identified and handled, particularly before any checks for disabling rewrite based on docstrings.\n\n# modification 1\n```python\n<file>src/_pytest/assertion/rewrite.py</file>\n<original>    def is_rewrite_disabled(docstring: str) -> bool:\n        return "PYTEST_DONT_REWRITE" in docstring\n</original>\n<patched>    def is_rewrite_disabled(docstring: Optional[Union[str, int]]) -> bool:\n        if isinstance(docstring, str):\n            return "PYTEST_DONT_REWRITE" in docstring\n        return False\n</patched>\n```\n\nThis modification ensures that `is_rewrite_disabled` can handle cases where the "docstring" is not actually a string, directly addressing the issue of a number being misinterpreted as a docstring. By checking the type of `docstring` before attempting to search within it, we avoid the `TypeError` that was being raised.\n\nHowever, upon reflection, the root cause seems to be earlier in the process, where the module\'s content is interpreted. The `exec_module` method and the process leading up to the call to `is_rewrite_disabled` should ensure that the first expression of a file is correctly identified as a docstring or not. Since the initial patch did not resolve the issue and without direct access to the part of the code where the module\'s content is initially parsed or loaded, a more precise patch cannot be provided without further context.\n\nThe proposed modification to `is_rewrite_disabled` aims to make the system more robust in the face of unexpected input types, but it\'s important to note that a comprehensive solution would likely involve adjustments to how modules are pre-processed before assertion rewriting checks are applied. This might include better detection and handling of initial expressions in test files to ensure that non-docstring content is not misinterpreted.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 05:41:46 Raw patch produced in try 2. Writing patch into file.
2024-04-05 05:41:46 [Validation] Applied patch. Going to run test suite.
2024-04-05 05:41:46 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_pytest-dev__pytest__8.0 ; pytest -rA testing/test_assertrewrite.py ; conda deactivate
2024-04-05 05:41:49 [Run test-suite] Result of parsing test log: True
2024-04-05 05:41:49 [Run test-suite] Eval status: {'test_rewrites_plugin_as_a_package.py::test': 'FAILED', 'test_assertion_message.py::test_foo': 'FAILED', 'test_assertion_message_multiline.py::test_foo': 'FAILED', 'test_assertion_message_tuple.py::test_foo': 'FAILED', 'test_assertion_message_expr.py::test_foo': 'FAILED', 'test_assertion_message_escape.py::test_foo': 'FAILED', 'test_assertion_messages_bytes.py::test_bytes_assertion': 'FAILED', 'test_issue731.py::test_long_repr': 'FAILED', 'test_simple_case.py::test_ternary_display': 'FAILED', 'test_long_case.py::test_ternary_display': 'FAILED', 'test_many_brackets.py::test_ternary_display': 'FAILED', 'tests/file.py::test_simple_failure': 'FAILED', 'test_assertion_walrus_no_variable_name_conflict.py::test_walrus_conversion_no_conflict': 'FAILED', 'test_assertion_walrus_operator_fail_assertion.py::test_walrus_conversion_fails': 'FAILED', 'test_assertion_walrus_operator_compare_boolean_fails.py::test_walrus_operator_change_boolean_value': 'FAILED', 'test_assertion_walrus_operator_boolean_none_fails.py::test_walrus_operator_change_boolean_value': 'FAILED', 'test_assertion_walrus_operator_gt_operand_function.py::test_gt': 'FAILED', 'test_hook_call.py::test_simple': 'FAILED', 'test_hook_call.py::test_fails': 'FAILED', 'test_hook_call_with_parens.py::test': 'FAILED', 'test_default_verbosity.py::test_very_long_string': 'FAILED', 'test_increased_verbosity.py::test_very_long_string': 'FAILED', 'test_max_increased_verbosity.py::test_very_long_string': 'FAILED', 'test_pyc_vs_pyo.py::test_optimized': 'FAILED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_name': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_call': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_len': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assert': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multiple': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[latin1': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[backslash': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assertion': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[escaped': 'PASSED', 'testing/test_assertrewrite.py::test_get_assertion_exprs[no': 'PASSED', 'testing/test_assertrewrite.py::test_try_makedirs': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support': 'PASSED', 'testing/test_assertrewrite.py::test_issue731': 'PASSED', 'testing/test_assertrewrite.py::TestIssue925::test_simple_case': 'PASSED', 'testing/test_assertrewrite.py::TestIssue925::test_long_case': 'PASSED', 'testing/test_assertrewrite.py::TestIssue925::test_many_brackets': 'PASSED', 'testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails': 'PASSED', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand_json_dumps': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_keyword_arg': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_arg_as_function': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_gt_operand_function': 'PASSED', 'testing/test_assertrewrite.py::test_source_mtime_long_long[-1]': 'PASSED', 'testing/test_assertrewrite.py::test_source_mtime_long_long[1]': 'PASSED', 'testing/test_assertrewrite.py::test_rewrite_infinite_recursion': 'PASSED', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic': 'PASSED', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories': 'PASSED', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_option_default': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_call': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option': 'PASSED', 'testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity': 'PASSED', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity': 'PASSED', 'testing/test_assertrewrite.py::TestIssue11140::test_constant_not_picked_as_module_docstring': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins': 'PASSED', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var': 'PASSED', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader': 'PASSED'}
2024-04-05 05:41:49 [Run test-suite] Eval result: {'FAIL_TO_PASS': {'success': ['testing/test_assertrewrite.py::TestIssue11140::test_constant_not_picked_as_module_docstring'], 'failure': []}, 'PASS_TO_PASS': {'success': ['testing/test_assertrewrite.py::TestAssertionPass::test_hook_call', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option', 'testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl', 'testing/test_assertrewrite.py::TestAssertionPass::test_option_default', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_call', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_len', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_name', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect', 'testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged', 'testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed', 'testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value', 'testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_arg_as_function', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_keyword_arg', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_gt_operand_function', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand', 'testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand_json_dumps', 'testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs', 'testing/test_assertrewrite.py::TestIssue925::test_long_case', 'testing/test_assertrewrite.py::TestIssue925::test_many_brackets', 'testing/test_assertrewrite.py::TestIssue925::test_simple_case', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]', 'testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity', 'testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines', 'testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assert', 'testing/test_assertrewrite.py::test_get_assertion_exprs[assertion', 'testing/test_assertrewrite.py::test_get_assertion_exprs[backslash', 'testing/test_assertrewrite.py::test_get_assertion_exprs[escaped', 'testing/test_assertrewrite.py::test_get_assertion_exprs[latin1', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line', 'testing/test_assertrewrite.py::test_get_assertion_exprs[multiple', 'testing/test_assertrewrite.py::test_get_assertion_exprs[no', 'testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]', 'testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8', 'testing/test_assertrewrite.py::test_issue731', 'testing/test_assertrewrite.py::test_rewrite_infinite_recursion', 'testing/test_assertrewrite.py::test_source_mtime_long_long[-1]', 'testing/test_assertrewrite.py::test_source_mtime_long_long[1]', 'testing/test_assertrewrite.py::test_try_makedirs'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}
2024-04-05 05:41:49 [Run test-suite] Resolution status: ResolvedStatus.FULL
2024-04-05 05:41:49 [Run test-suite] Returning True since all resolved.
2024-04-05 05:41:49 [Validation] Finishing. Result is True. Message: .
2024-04-05 05:41:49 Result of dispatch_intent: ('Written a patch that resolves the issue. Congratulations!', 'The tool returned the patch written by another agent.', True)
2024-04-05 05:41:49 Invoked write_patch. Ending workflow.
2024-04-05 05:41:49 Task pytest-dev__pytest-11143 completed successfully.
