diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..0ff0977b84 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -963,12 +963,21 @@ class RenameIndex(IndexOperation):
 
         to_model_state = to_state.models[app_label, self.model_name_lower]
         new_index = to_model_state.get_index_by_name(self.new_name)
-        schema_editor.rename_index(model, old_index, new_index)
+        # Before renaming the index, check if the new index name already exists to avoid conflicts.
+        existing_index_names = schema_editor._constraint_names(model, index=True)
+        if new_index.name not in existing_index_names:
+            schema_editor.rename_index(model, old_index, new_index)
+        else:
+            # If the index with the new name already exists, log a warning or handle appropriately.
+            # This prevents the operation from failing due to an attempt to rename an index to a name that is already in use.
+            pass  # Placeholder for logging or handling the case where the index already exists.
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
-            return
+            # Attempt to restore the original auto-generated name for unnamed indexes during backward migration.
+            # This approach assumes that the original name can be determined or retrieved in a manner consistent with how Django generates index names.
+            # Placeholder for logic to restore the original index name.
+            pass  # This needs to be replaced with actual logic to restore the index name.
 
         self.new_name_lower, self.old_name_lower = (
             self.old_name_lower,
