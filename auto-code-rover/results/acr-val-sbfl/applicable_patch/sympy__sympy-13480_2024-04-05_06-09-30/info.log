2024-04-05 06:09:30 ========== Running task sympy__sympy-13480 (relative counter in this run: 238/300) ==========
2024-04-05 06:09:30 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.1 ; python -m pip install -e . ; conda deactivate
2024-04-05 06:09:31 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.1 ; python -m pip install xmlrunner coverage pytest pytest-cov ; conda deactivate
2024-04-05 06:10:33 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.1 ; python -m pytest --cov --cov-context=test --no-header -rA --tb=no -p no:cacheprovider sympy/functions/elementary/tests/test_hyperbolic.py ; conda deactivate
2024-04-05 06:10:40 SBFL result (lines): [('sympy/core/cache.py', 92, 94, 1.0), ('sympy/core/function.py', 547, 548, 1.0), ('sympy/core/mul.py', 1280, 1282, 1.0), ('sympy/core/numbers.py', 2090, 2093, 1.0), ('sympy/core/numbers.py', 2095, 2095, 1.0), ('sympy/functions/elementary/exponential.py', 541, 544, 1.0), ('sympy/functions/elementary/exponential.py', 696, 696, 1.0), ('sympy/functions/elementary/hyperbolic.py', 54, 60, 1.0), ('sympy/functions/elementary/hyperbolic.py', 561, 571, 1.0), ('sympy/functions/elementary/hyperbolic.py', 573, 574, 1.0), ('sympy/functions/elementary/hyperbolic.py', 578, 581, 1.0), ('sympy/functions/elementary/hyperbolic.py', 583, 584, 1.0), ('sympy/functions/elementary/hyperbolic.py', 586, 590, 1.0), ('sympy/functions/elementary/trigonometric.py', 945, 947, 1.0), ('sympy/functions/elementary/trigonometric.py', 949, 949, 1.0), ('sympy/functions/elementary/trigonometric.py', 951, 951, 1.0), ('sympy/functions/elementary/trigonometric.py', 1240, 1241, 1.0), ('sympy/functions/elementary/trigonometric.py', 1247, 1247, 1.0), ('sympy/functions/elementary/trigonometric.py', 1250, 1250, 1.0), ('sympy/functions/elementary/trigonometric.py', 1253, 1254, 1.0), ('sympy/functions/elementary/trigonometric.py', 1257, 1260, 1.0), ('sympy/functions/elementary/trigonometric.py', 1262, 1262, 1.0), ('sympy/functions/elementary/trigonometric.py', 1268, 1283, 1.0), ('sympy/functions/elementary/trigonometric.py', 1285, 1287, 1.0), ('sympy/functions/elementary/trigonometric.py', 1292, 1292, 1.0), ('sympy/functions/elementary/trigonometric.py', 1295, 1298, 1.0), ('sympy/functions/elementary/trigonometric.py', 1300, 1301, 1.0), ('sympy/functions/elementary/trigonometric.py', 1304, 1304, 1.0), ('sympy/functions/elementary/trigonometric.py', 1313, 1313, 1.0), ('sympy/functions/elementary/trigonometric.py', 1316, 1316, 1.0), ('sympy/functions/elementary/trigonometric.py', 1320, 1320, 1.0), ('sympy/functions/elementary/trigonometric.py', 1324, 1324, 1.0), ('sympy/functions/elementary/trigonometric.py', 1328, 1328, 1.0), ('sympy/functions/elementary/trigonometric.py', 1332, 1332, 1.0), ('sympy/functions/elementary/trigonometric.py', 1336, 1336, 1.0), ('sympy/functions/elementary/trigonometric.py', 1430, 1430, 1.0), ('sympy/functions/elementary/trigonometric.py', 1461, 1462, 1.0), ('sympy/core/add.py', 542, 543, 0.7071067811865475), ('sympy/core/add.py', 550, 553, 0.7071067811865475), ('sympy/core/add.py', 558, 559, 0.7071067811865475), ('sympy/core/evalf.py', 1439, 1446, 0.7071067811865475), ('sympy/core/mul.py', 279, 280, 0.7071067811865475), ('sympy/core/mul.py', 283, 283, 0.7071067811865475), ('sympy/core/mul.py', 286, 287, 0.7071067811865475), ('sympy/core/mul.py', 585, 587, 0.7071067811865475), ('sympy/core/numbers.py', 2055, 2056, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 708, 708, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 954, 954, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 966, 966, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 969, 970, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 973, 974, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1022, 1022, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1031, 1031, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1034, 1034, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1038, 1038, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1042, 1042, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1046, 1046, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1050, 1050, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1054, 1054, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1177, 1177, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1180, 1180, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 1182, 1182, 0.7071067811865475), ('sympy/core/evalf.py', 1250, 1250, 0.5773502691896258), ('sympy/core/evalf.py', 1306, 1308, 0.5773502691896258), ('sympy/core/evalf.py', 1450, 1451, 0.5773502691896258), ('sympy/functions/elementary/trigonometric.py', 45, 47, 0.5773502691896258), ('sympy/core/add.py', 666, 668, 0.5), ('sympy/core/expr.py', 349, 351, 0.5), ('sympy/core/function.py', 539, 542, 0.5), ('sympy/core/numbers.py', 1572, 1573, 0.5), ('sympy/core/numbers.py', 3295, 3295, 0.5), ('sympy/functions/elementary/exponential.py', 568, 568, 0.5), ('sympy/functions/elementary/hyperbolic.py', 65, 67, 0.5), ('sympy/functions/elementary/trigonometric.py', 33, 35, 0.5), ('sympy/functions/elementary/trigonometric.py', 41, 43, 0.5), ('sympy/functions/elementary/trigonometric.py', 187, 193, 0.5), ('sympy/core/evalf.py', 477, 482, 0.4472135954999579), ('sympy/core/mul.py', 657, 659, 0.4472135954999579), ('sympy/core/mul.py', 662, 665, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 546, 546, 0.4472135954999579), ('sympy/functions/elementary/trigonometric.py', 164, 167, 0.4472135954999579), ('sympy/core/add.py', 51, 54, 0.4082482904638631), ('sympy/core/add.py', 64, 65, 0.4082482904638631), ('sympy/core/add.py', 67, 67, 0.4082482904638631), ('sympy/core/add.py', 582, 584, 0.4082482904638631), ('sympy/core/evalf.py', 180, 182, 0.4082482904638631), ('sympy/core/evalf.py', 198, 200, 0.4082482904638631), ('sympy/core/evalf.py', 202, 202, 0.4082482904638631), ('sympy/core/evalf.py', 425, 428, 0.4082482904638631), ('sympy/core/evalf.py', 432, 436, 0.4082482904638631), ('sympy/core/evalf.py', 438, 438, 0.4082482904638631), ('sympy/core/evalf.py', 443, 444, 0.4082482904638631), ('sympy/core/evalf.py', 446, 452, 0.4082482904638631), ('sympy/core/evalf.py', 455, 455, 0.4082482904638631), ('sympy/core/evalf.py', 461, 461, 0.4082482904638631), ('sympy/core/evalf.py', 463, 463, 0.4082482904638631), ('sympy/core/evalf.py', 465, 465, 0.4082482904638631), ('sympy/core/evalf.py', 469, 471, 0.4082482904638631), ('sympy/core/evalf.py', 473, 473, 0.4082482904638631), ('sympy/core/evalf.py', 486, 487, 0.4082482904638631), ('sympy/core/evalf.py', 493, 493, 0.4082482904638631), ('sympy/core/evalf.py', 495, 496, 0.4082482904638631), ('sympy/core/evalf.py', 498, 498, 0.4082482904638631), ('sympy/core/evalf.py', 500, 507, 0.4082482904638631), ('sympy/core/evalf.py', 509, 509, 0.4082482904638631), ('sympy/core/evalf.py', 519, 520, 0.4082482904638631), ('sympy/core/evalf.py', 522, 522, 0.4082482904638631), ('sympy/core/evalf.py', 524, 524, 0.4082482904638631), ('sympy/core/evalf.py', 1285, 1290, 0.4082482904638631), ('sympy/core/evalf.py', 1292, 1292, 0.4082482904638631), ('sympy/core/evalf.py', 1294, 1296, 0.4082482904638631), ('sympy/core/evalf.py', 1298, 1298, 0.4082482904638631), ('sympy/core/evalf.py', 1301, 1303, 0.4082482904638631), ('sympy/core/evalf.py', 1314, 1314, 0.4082482904638631), ('sympy/core/expr.py', 1655, 1657, 0.4082482904638631), ('sympy/core/expr.py', 1669, 1669, 0.4082482904638631), ('sympy/core/expr.py', 1674, 1676, 0.4082482904638631), ('sympy/core/expr.py', 1686, 1687, 0.4082482904638631), ('sympy/core/expr.py', 1691, 1695, 0.4082482904638631), ('sympy/core/mul.py', 668, 669, 0.4082482904638631), ('sympy/core/mul.py', 1171, 1172, 0.4082482904638631), ('sympy/core/numbers.py', 1113, 1113, 0.4082482904638631), ('sympy/core/numbers.py', 1151, 1151, 0.4082482904638631), ('sympy/core/numbers.py', 1155, 1157, 0.4082482904638631), ('sympy/core/numbers.py', 1559, 1561, 0.4082482904638631), ('sympy/core/numbers.py', 2041, 2043, 0.4082482904638631), ('sympy/core/operations.py', 305, 310, 0.4082482904638631), ('sympy/core/operations.py', 313, 313, 0.4082482904638631), ('sympy/core/operations.py', 336, 339, 0.4082482904638631), ('sympy/core/operations.py', 342, 343, 0.4082482904638631), ('sympy/functions/elementary/hyperbolic.py', 63, 63, 0.4082482904638631), ('sympy/core/evalf.py', 135, 138, 0.3779644730092272), ('sympy/core/evalf.py', 1253, 1253, 0.3779644730092272), ('sympy/core/expr.py', 2056, 2061, 0.3779644730092272), ('sympy/core/function.py', 511, 513, 0.3779644730092272), ('sympy/core/function.py', 516, 516, 0.3779644730092272), ('sympy/core/function.py', 528, 531, 0.3779644730092272), ('sympy/core/function.py', 553, 554, 0.3779644730092272), ('sympy/core/function.py', 556, 556, 0.3779644730092272), ('sympy/core/logic.py', 165, 166, 0.3779644730092272), ('sympy/core/mul.py', 1180, 1181, 0.3779644730092272), ('sympy/core/numbers.py', 594, 595, 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 558, 559, 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 576, 576, 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 595, 595, 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 599, 599, 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 603, 603, 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 606, 606, 0.3779644730092272), ('sympy/core/evalf.py', 37, 37, 0.35355339059327373), ('sympy/core/evalf.py', 131, 133, 0.35355339059327373), ('sympy/core/evalf.py', 528, 529, 0.35355339059327373), ('sympy/core/evalf.py', 534, 534, 0.35355339059327373), ('sympy/core/evalf.py', 537, 541, 0.35355339059327373), ('sympy/core/evalf.py', 543, 544, 0.35355339059327373), ('sympy/core/evalf.py', 546, 546, 0.35355339059327373), ('sympy/core/evalf.py', 555, 555, 0.35355339059327373), ('sympy/core/evalf.py', 558, 558, 0.35355339059327373), ('sympy/core/evalf.py', 561, 561, 0.35355339059327373), ('sympy/core/evalf.py', 567, 570, 0.35355339059327373), ('sympy/core/evalf.py', 572, 573, 0.35355339059327373), ('sympy/core/evalf.py', 576, 579, 0.35355339059327373), ('sympy/core/evalf.py', 582, 583, 0.35355339059327373), ('sympy/core/evalf.py', 589, 593, 0.35355339059327373), ('sympy/core/evalf.py', 596, 599, 0.35355339059327373), ('sympy/core/evalf.py', 601, 601, 0.35355339059327373), ('sympy/core/evalf.py', 604, 604, 0.35355339059327373), ('sympy/core/expr.py', 1142, 1145, 0.35355339059327373), ('sympy/core/expr.py', 1260, 1261, 0.35355339059327373), ('sympy/core/expr.py', 1264, 1264, 0.35355339059327373), ('sympy/core/expr.py', 1266, 1266, 0.35355339059327373), ('sympy/core/expr.py', 1269, 1269, 0.35355339059327373), ('sympy/core/expr.py', 1274, 1274, 0.35355339059327373), ('sympy/core/expr.py', 1281, 1281, 0.35355339059327373), ('sympy/core/expr.py', 1292, 1292, 0.35355339059327373), ('sympy/core/expr.py', 1294, 1294, 0.35355339059327373), ('sympy/core/expr.py', 1303, 1303, 0.35355339059327373), ('sympy/core/expr.py', 1335, 1339, 0.35355339059327373), ('sympy/core/expr.py', 1342, 1346, 0.35355339059327373), ('sympy/core/expr.py', 1348, 1351, 0.35355339059327373), ('sympy/core/expr.py', 1353, 1354, 0.35355339059327373), ('sympy/core/expr.py', 2936, 2936, 0.35355339059327373), ('sympy/core/facts.py', 523, 525, 0.35355339059327373), ('sympy/core/logic.py', 106, 109, 0.35355339059327373), ('sympy/core/mul.py', 1164, 1164, 0.35355339059327373), ('sympy/core/numbers.py', 1121, 1121, 0.35355339059327373), ('sympy/core/numbers.py', 1123, 1123, 0.35355339059327373), ('sympy/core/numbers.py', 1507, 1516, 0.35355339059327373), ('sympy/core/numbers.py', 1554, 1557, 0.35355339059327373), ('sympy/core/numbers.py', 1569, 1570, 0.35355339059327373), ('sympy/core/numbers.py', 1593, 1598, 0.35355339059327373), ('sympy/core/numbers.py', 1877, 1877, 0.35355339059327373), ('sympy/functions/elementary/trigonometric.py', 169, 173, 0.35355339059327373), ('sympy/functions/elementary/trigonometric.py', 196, 196, 0.35355339059327373), ('sympy/core/basic.py', 599, 600, 0.3333333333333333), ('sympy/core/basic.py', 602, 603, 0.3333333333333333), ('sympy/core/basic.py', 605, 607, 0.3333333333333333), ('sympy/core/basic.py', 609, 609, 0.3333333333333333), ('sympy/core/basic.py', 616, 616, 0.3333333333333333), ('sympy/core/expr.py', 728, 731, 0.3333333333333333), ('sympy/core/expr.py', 733, 733, 0.3333333333333333), ('sympy/core/expr.py', 735, 736, 0.3333333333333333), ('sympy/core/expr.py', 738, 738, 0.3333333333333333), ('sympy/core/expr.py', 740, 740, 0.3333333333333333), ('sympy/core/expr.py', 744, 745, 0.3333333333333333), ('sympy/core/expr.py', 747, 748, 0.3333333333333333), ('sympy/core/numbers.py', 1107, 1108, 0.3333333333333333), ('sympy/core/numbers.py', 1110, 1110, 0.3333333333333333), ('sympy/core/numbers.py', 1282, 1283, 0.3333333333333333), ('sympy/core/numbers.py', 1286, 1286, 0.3333333333333333), ('sympy/core/numbers.py', 1288, 1292, 0.3333333333333333), ('sympy/core/evalf.py', 1245, 1245, 0.31622776601683794), ('sympy/core/expr.py', 1679, 1680, 0.31622776601683794), ('sympy/core/expr.py', 2019, 2024, 0.31622776601683794), ('sympy/core/function.py', 575, 575, 0.31622776601683794), ('sympy/core/function.py', 578, 578, 0.31622776601683794), ('sympy/core/symbol.py', 584, 584, 0.31622776601683794), ('sympy/core/symbol.py', 586, 591, 0.31622776601683794), ('sympy/core/symbol.py', 598, 599, 0.31622776601683794), ('sympy/core/symbol.py', 602, 602, 0.31622776601683794), ('sympy/core/symbol.py', 604, 606, 0.31622776601683794), ('sympy/core/symbol.py', 608, 608, 0.31622776601683794), ('sympy/core/symbol.py', 612, 613, 0.31622776601683794), ('sympy/core/symbol.py', 616, 617, 0.31622776601683794), ('sympy/core/symbol.py', 619, 620, 0.31622776601683794), ('sympy/core/symbol.py', 622, 623, 0.31622776601683794), ('sympy/core/symbol.py', 626, 629, 0.31622776601683794), ('sympy/core/symbol.py', 668, 668, 0.31622776601683794), ('sympy/core/symbol.py', 673, 673, 0.31622776601683794), ('sympy/core/add.py', 928, 929, 0.30151134457776363), ('sympy/core/expr.py', 2013, 2017, 0.30151134457776363), ('sympy/core/expr.py', 2034, 2036, 0.30151134457776363), ('sympy/core/mul.py', 310, 310, 0.30151134457776363), ('sympy/core/mul.py', 313, 313, 0.30151134457776363), ('sympy/core/mul.py', 316, 318, 0.30151134457776363), ('sympy/core/mul.py', 466, 469, 0.30151134457776363), ('sympy/core/mul.py', 473, 476, 0.30151134457776363), ('sympy/core/mul.py', 479, 479, 0.30151134457776363), ('sympy/core/mul.py', 483, 484, 0.30151134457776363), ('sympy/core/mul.py', 488, 493, 0.30151134457776363), ('sympy/core/mul.py', 514, 516, 0.30151134457776363), ('sympy/core/mul.py', 520, 521, 0.30151134457776363), ('sympy/core/mul.py', 524, 526, 0.30151134457776363), ('sympy/core/mul.py', 528, 529, 0.30151134457776363), ('sympy/core/mul.py', 532, 533, 0.30151134457776363), ('sympy/core/numbers.py', 1636, 1639, 0.30151134457776363), ('sympy/core/numbers.py', 2480, 2480, 0.30151134457776363), ('sympy/core/numbers.py', 3350, 3350, 0.30151134457776363), ('sympy/utilities/iterables.py', 663, 666, 0.30151134457776363), ('sympy/core/expr.py', 2026, 2026, 0.2886751345948129), ('sympy/core/mul.py', 1287, 1288, 0.2886751345948129), ('sympy/core/numbers.py', 1266, 1268, 0.2886751345948129), ('sympy/core/numbers.py', 1719, 1725, 0.2886751345948129), ('sympy/core/numbers.py', 2053, 2053, 0.2886751345948129), ('sympy/core/expr.py', 1136, 1138, 0.2773500981126146), ('sympy/core/expr.py', 1514, 1516, 0.2773500981126146), ('sympy/core/mul.py', 594, 594, 0.2773500981126146), ('sympy/core/mul.py', 596, 596, 0.2773500981126146), ('sympy/core/add.py', 911, 915, 0.2672612419124244), ('sympy/core/add.py', 918, 919, 0.2672612419124244), ('sympy/core/add.py', 921, 923, 0.2672612419124244), ('sympy/core/expr.py', 2040, 2041, 0.2672612419124244), ('sympy/core/expr.py', 2043, 2043, 0.2672612419124244), ('sympy/core/expr.py', 2053, 2053, 0.2672612419124244), ('sympy/core/function.py', 462, 466, 0.2672612419124244), ('sympy/core/mul.py', 774, 774, 0.2672612419124244), ('sympy/functions/elementary/exponential.py', 550, 551, 0.2672612419124244), ('sympy/functions/elementary/exponential.py', 553, 553, 0.2672612419124244), ('sympy/core/add.py', 94, 106, 0.2581988897471611), ('sympy/core/function.py', 82, 84, 0.2581988897471611), ('sympy/core/mul.py', 1259, 1261, 0.25), ('sympy/core/numbers.py', 198, 206, 0.25), ('sympy/core/numbers.py', 2050, 2051, 0.25), ('sympy/core/add.py', 204, 205, 0.24253562503633297), ('sympy/core/expr.py', 125, 125, 0.24253562503633297), ('sympy/core/expr.py', 1647, 1650, 0.24253562503633297), ('sympy/core/expr.py', 1652, 1652, 0.24253562503633297), ('sympy/core/expr.py', 1663, 1666, 0.24253562503633297), ('sympy/core/expr.py', 1671, 1671, 0.24253562503633297), ('sympy/core/expr.py', 2000, 2002, 0.24253562503633297), ('sympy/core/expr.py', 2005, 2005, 0.24253562503633297), ('sympy/core/expr.py', 2010, 2010, 0.24253562503633297), ('sympy/core/function.py', 584, 584, 0.24253562503633297), ('sympy/core/add.py', 190, 192, 0.23570226039551587), ('sympy/core/basic.py', 1183, 1186, 0.23570226039551587), ('sympy/core/logic.py', 168, 168, 0.23570226039551587), ('sympy/core/mul.py', 306, 307, 0.23570226039551587), ('sympy/core/numbers.py', 3347, 3348, 0.23570226039551587), ('sympy/core/add.py', 548, 548, 0.22941573387056174), ('sympy/core/expr.py', 758, 761, 0.22941573387056174), ('sympy/core/expr.py', 763, 763, 0.22941573387056174), ('sympy/core/expr.py', 765, 766, 0.22941573387056174), ('sympy/core/expr.py', 768, 768, 0.22941573387056174), ('sympy/core/expr.py', 770, 770, 0.22941573387056174), ('sympy/core/expr.py', 774, 775, 0.22941573387056174), ('sympy/core/expr.py', 777, 778, 0.22941573387056174), ('sympy/core/expr.py', 1126, 1128, 0.22941573387056174), ('sympy/core/expr.py', 2067, 2074, 0.22941573387056174), ('sympy/core/expr.py', 2989, 2989, 0.22941573387056174), ('sympy/core/expr.py', 2993, 2993, 0.22941573387056174), ('sympy/core/expr.py', 3003, 3003, 0.22941573387056174), ('sympy/core/expr.py', 3008, 3008, 0.22941573387056174), ('sympy/core/expr.py', 3020, 3020, 0.22941573387056174), ('sympy/core/expr.py', 3022, 3023, 0.22941573387056174), ('sympy/core/expr.py', 3025, 3026, 0.22941573387056174), ('sympy/core/expr.py', 3030, 3030, 0.22941573387056174), ('sympy/core/expr.py', 3033, 3033, 0.22941573387056174), ('sympy/core/expr.py', 3053, 3053, 0.22941573387056174), ('sympy/core/expr.py', 3055, 3057, 0.22941573387056174), ('sympy/core/expr.py', 3059, 3063, 0.22941573387056174), ('sympy/core/expr.py', 3066, 3077, 0.22941573387056174), ('sympy/core/expr.py', 3079, 3079, 0.22941573387056174), ('sympy/core/expr.py', 3098, 3098, 0.22941573387056174), ('sympy/core/mul.py', 771, 771, 0.22941573387056174), ('sympy/core/numbers.py', 591, 591, 0.22941573387056174), ('sympy/core/numbers.py', 679, 679, 0.22941573387056174), ('sympy/core/numbers.py', 684, 684, 0.22941573387056174), ('sympy/core/numbers.py', 1612, 1613, 0.22941573387056174), ('sympy/core/numbers.py', 1615, 1615, 0.22941573387056174), ('sympy/core/numbers.py', 1618, 1618, 0.22941573387056174), ('sympy/core/symbol.py', 179, 184, 0.22941573387056174), ('sympy/core/symbol.py', 194, 195, 0.22941573387056174), ('sympy/core/symbol.py', 198, 198, 0.22941573387056174), ('sympy/core/evalf.py', 1247, 1247, 0.22360679774997896), ('sympy/core/numbers.py', 1274, 1275, 0.22360679774997896), ('sympy/core/numbers.py', 1310, 1311, 0.22360679774997896), ('sympy/core/numbers.py', 1314, 1314, 0.22360679774997896), ('sympy/core/numbers.py', 1316, 1320, 0.22360679774997896), ('sympy/core/numbers.py', 2084, 2085, 0.22360679774997896), ('sympy/core/numbers.py', 3210, 3210, 0.22360679774997896), ('sympy/core/numbers.py', 3341, 3342, 0.22360679774997896), ('sympy/core/numbers.py', 3345, 3345, 0.22360679774997896), ('sympy/functions/elementary/miscellaneous.py', 127, 127, 0.22360679774997896), ('sympy/core/add.py', 162, 163, 0.2182178902359924), ('sympy/core/add.py', 216, 216, 0.2182178902359924), ('sympy/core/add.py', 221, 221, 0.2182178902359924), ('sympy/core/assumptions.py', 222, 224, 0.2182178902359924), ('sympy/core/assumptions.py', 231, 231, 0.2182178902359924), ('sympy/core/evalf.py', 1317, 1317, 0.2182178902359924), ('sympy/core/evalf.py', 1322, 1323, 0.2182178902359924), ('sympy/core/evalf.py', 1334, 1334, 0.2182178902359924), ('sympy/core/evalf.py', 1336, 1336, 0.2182178902359924), ('sympy/core/evalf.py', 1376, 1377, 0.2182178902359924), ('sympy/core/evalf.py', 1379, 1379, 0.2182178902359924), ('sympy/core/evalf.py', 1383, 1383, 0.2182178902359924), ('sympy/core/evalf.py', 1390, 1390, 0.2182178902359924), ('sympy/core/evalf.py', 1392, 1395, 0.2182178902359924), ('sympy/core/evalf.py', 1397, 1397, 0.2182178902359924), ('sympy/core/evalf.py', 1399, 1400, 0.2182178902359924), ('sympy/core/evalf.py', 1412, 1415, 0.2182178902359924), ('sympy/core/evalf.py', 1417, 1418, 0.2182178902359924), ('sympy/core/evalf.py', 1423, 1423, 0.2182178902359924), ('sympy/core/expr.py', 1729, 1730, 0.2182178902359924), ('sympy/core/expr.py', 1733, 1733, 0.2182178902359924), ('sympy/core/numbers.py', 90, 91, 0.2182178902359924), ('sympy/core/numbers.py', 103, 105, 0.2182178902359924), ('sympy/core/numbers.py', 1073, 1073, 0.2182178902359924), ('sympy/core/numbers.py', 1075, 1075, 0.2182178902359924), ('sympy/core/numbers.py', 1078, 1079, 0.2182178902359924), ('sympy/core/numbers.py', 1081, 1082, 0.2182178902359924), ('sympy/core/numbers.py', 1092, 1092, 0.2182178902359924), ('sympy/core/numbers.py', 1258, 1262, 0.2182178902359924), ('sympy/core/numbers.py', 1950, 1950, 0.2182178902359924), ('sympy/core/numbers.py', 1998, 1998, 0.2182178902359924), ('sympy/core/numbers.py', 2081, 2082, 0.2182178902359924), ('sympy/core/numbers.py', 3221, 3221, 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 53, 53, 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 55, 55, 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 57, 58, 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 149, 149, 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 151, 151, 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 153, 154, 0.2182178902359924), ('sympy/core/basic.py', 1450, 1451, 0.21320071635561041), ('sympy/core/basic.py', 1911, 1912, 0.21320071635561041), ('sympy/core/basic.py', 1915, 1916, 0.21320071635561041), ('sympy/core/compatibility.py', 509, 509, 0.21320071635561041), ('sympy/core/compatibility.py', 511, 512, 0.21320071635561041), ('sympy/core/compatibility.py', 614, 620, 0.21320071635561041), ('sympy/core/core.py', 83, 92, 0.21320071635561041), ('sympy/core/numbers.py', 183, 193, 0.21320071635561041), ('sympy/core/numbers.py', 195, 195, 0.21320071635561041), ('sympy/core/numbers.py', 1250, 1250, 0.21320071635561041), ('sympy/core/numbers.py', 1338, 1338, 0.21320071635561041), ('sympy/core/numbers.py', 2032, 2036, 0.21320071635561041), ('sympy/functions/elementary/exponential.py', 486, 488, 0.21320071635561041), ('sympy/functions/elementary/exponential.py', 490, 490, 0.21320071635561041), ('sympy/functions/elementary/exponential.py', 516, 516, 0.21320071635561041), ('sympy/functions/elementary/exponential.py', 531, 531, 0.21320071635561041), ('sympy/functions/elementary/exponential.py', 533, 533, 0.21320071635561041), ('sympy/functions/elementary/exponential.py', 535, 535, 0.21320071635561041), ('sympy/core/basic.py', 1873, 1875, 0.20851441405707477), ('sympy/core/function.py', 504, 505, 0.20851441405707477), ('sympy/core/numbers.py', 2118, 2119, 0.20851441405707477), ('sympy/core/numbers.py', 2122, 2123, 0.20851441405707477), ('sympy/core/numbers.py', 3052, 3052, 0.20851441405707477), ('sympy/core/add.py', 211, 211, 0.20412414523193154), ('sympy/core/assumptions.py', 306, 308, 0.20412414523193154), ('sympy/core/basic.py', 1174, 1174, 0.20412414523193154), ('sympy/core/basic.py', 1178, 1179, 0.20412414523193154), ('sympy/core/compatibility.py', 455, 458, 0.20412414523193154), ('sympy/core/compatibility.py', 460, 461, 0.20412414523193154), ('sympy/core/expr.py', 2206, 2207, 0.20412414523193154), ('sympy/core/expr.py', 2209, 2213, 0.20412414523193154), ('sympy/core/mul.py', 1197, 1201, 0.20412414523193154), ('sympy/core/numbers.py', 1454, 1454, 0.20412414523193154), ('sympy/core/numbers.py', 1489, 1490, 0.20412414523193154), ('sympy/core/numbers.py', 1492, 1497, 0.20412414523193154), ('sympy/core/numbers.py', 1500, 1500, 0.20412414523193154), ('sympy/core/numbers.py', 2070, 2077, 0.20412414523193154), ('sympy/core/numbers.py', 2782, 2782, 0.20412414523193154), ('sympy/core/sympify.py', 262, 265, 0.20412414523193154), ('sympy/core/assumptions.py', 217, 219, 0.2), ('sympy/core/facts.py', 516, 517, 0.2), ('sympy/core/facts.py', 534, 538, 0.2), ('sympy/core/mul.py', 1138, 1147, 0.2), ('sympy/core/numbers.py', 386, 386, 0.2), ('sympy/core/numbers.py', 389, 389, 0.2), ('sympy/core/numbers.py', 391, 394, 0.2), ('sympy/core/expr.py', 1986, 1987, 0.19611613513818404), ('sympy/core/operations.py', 364, 364, 0.19611613513818404), ('sympy/core/add.py', 166, 167, 0.19245008972987526), ('sympy/core/expr.py', 1123, 1124, 0.19245008972987526), ('sympy/core/function.py', 249, 252, 0.19245008972987526), ('sympy/core/function.py', 308, 308, 0.19245008972987526), ('sympy/core/mul.py', 1206, 1206, 0.19245008972987526), ('sympy/core/mul.py', 1211, 1211, 0.19245008972987526), ('sympy/core/numbers.py', 1607, 1609, 0.19245008972987526), ('sympy/core/operations.py', 53, 56, 0.19245008972987526), ('sympy/core/operations.py', 361, 362, 0.19245008972987526), ('sympy/core/add.py', 483, 486, 0.1889822365046136), ('sympy/core/expr.py', 1133, 1134, 0.1889822365046136), ('sympy/core/expr.py', 1148, 1148, 0.1889822365046136), ('sympy/core/expr.py', 2038, 2038, 0.1889822365046136), ('sympy/core/mul.py', 1068, 1073, 0.1889822365046136), ('sympy/core/mul.py', 1123, 1123, 0.1889822365046136), ('sympy/core/mul.py', 1184, 1184, 0.1889822365046136), ('sympy/core/mul.py', 1187, 1187, 0.1889822365046136), ('sympy/core/mul.py', 1189, 1190, 0.1889822365046136), ('sympy/core/mul.py', 1195, 1195, 0.1889822365046136), ('sympy/core/mul.py', 1220, 1221, 0.1889822365046136), ('sympy/core/mul.py', 1223, 1223, 0.1889822365046136), ('sympy/core/mul.py', 1235, 1236, 0.1889822365046136), ('sympy/core/mul.py', 1312, 1312, 0.1889822365046136), ('sympy/core/mul.py', 1321, 1321, 0.1889822365046136), ('sympy/core/add.py', 180, 181, 0.18569533817705186), ('sympy/core/facts.py', 491, 493, 0.18569533817705186), ('sympy/core/facts.py', 528, 529, 0.18569533817705186), ('sympy/core/logic.py', 77, 82, 0.18569533817705186), ('sympy/core/mul.py', 1087, 1087, 0.18569533817705186), ('sympy/core/mul.py', 1094, 1094, 0.18569533817705186), ('sympy/core/mul.py', 1109, 1112, 0.18569533817705186), ('sympy/core/mul.py', 1115, 1115, 0.18569533817705186), ('sympy/core/mul.py', 1117, 1117, 0.18569533817705186), ('sympy/core/mul.py', 1177, 1178, 0.18569533817705186), ('sympy/core/mul.py', 1227, 1229, 0.18569533817705186), ('sympy/core/mul.py', 1275, 1275, 0.18569533817705186), ('sympy/core/mul.py', 1292, 1292, 0.18569533817705186), ('sympy/core/mul.py', 1294, 1294, 0.18569533817705186), ('sympy/core/mul.py', 1316, 1316, 0.18569533817705186), ('sympy/core/mul.py', 1318, 1318, 0.18569533817705186), ('sympy/core/mul.py', 1325, 1325, 0.18569533817705186), ('sympy/core/numbers.py', 1731, 1731, 0.18569533817705186), ('sympy/core/add.py', 651, 652, 0.18257418583505536), ('sympy/core/mul.py', 1076, 1076, 0.18257418583505536), ('sympy/core/mul.py', 1084, 1085, 0.18257418583505536), ('sympy/core/mul.py', 1091, 1092, 0.18257418583505536), ('sympy/core/mul.py', 1132, 1132, 0.18257418583505536), ('sympy/core/mul.py', 1135, 1136, 0.18257418583505536), ('sympy/core/mul.py', 1252, 1252, 0.18257418583505536), ('sympy/core/mul.py', 1255, 1257, 0.18257418583505536), ('sympy/core/mul.py', 1265, 1265, 0.18257418583505536), ('sympy/core/mul.py', 1268, 1268, 0.18257418583505536), ('sympy/core/mul.py', 1270, 1270, 0.18257418583505536), ('sympy/core/sympify.py', 14, 15, 0.18257418583505536), ('sympy/core/sympify.py', 272, 276, 0.18257418583505536), ('sympy/core/add.py', 530, 536, 0.1796053020267749), ('sympy/core/add.py', 538, 539, 0.1796053020267749), ('sympy/core/assumptions.py', 286, 289, 0.1796053020267749), ('sympy/core/assumptions.py', 311, 311, 0.1796053020267749), ('sympy/core/basic.py', 1853, 1854, 0.1796053020267749), ('sympy/core/basic.py', 1857, 1858, 0.1796053020267749), ('sympy/core/basic.py', 1861, 1862, 0.1796053020267749), ('sympy/core/basic.py', 1867, 1868, 0.1796053020267749), ('sympy/core/basic.py', 1903, 1903, 0.1796053020267749), ('sympy/core/basic.py', 1906, 1906, 0.1796053020267749), ('sympy/core/expr.py', 1979, 1979, 0.1796053020267749), ('sympy/core/expr.py', 1981, 1982, 0.1796053020267749), ('sympy/core/expr.py', 1984, 1984, 0.1796053020267749), ('sympy/core/expr.py', 1989, 1989, 0.1796053020267749), ('sympy/core/expr.py', 1994, 1994, 0.1796053020267749), ('sympy/core/logic.py', 138, 141, 0.1796053020267749), ('sympy/core/logic.py', 143, 145, 0.1796053020267749), ('sympy/core/numbers.py', 2595, 2595, 0.1796053020267749), ('sympy/logic/boolalg.py', 377, 377, 0.1796053020267749), ('sympy/core/expr.py', 150, 150, 0.17677669529663687), ('sympy/core/expr.py', 153, 154, 0.17677669529663687), ('sympy/core/mul.py', 176, 186, 0.17677669529663687), ('sympy/core/mul.py', 1106, 1107, 0.17677669529663687), ('sympy/core/numbers.py', 3419, 3419, 0.17677669529663687), ('sympy/logic/boolalg.py', 406, 406, 0.17677669529663687), ('sympy/core/add.py', 526, 526, 0.17407765595569785), ('sympy/core/expr.py', 145, 145, 0.17407765595569785), ('sympy/core/assumptions.py', 297, 303, 0.17149858514250882), ('sympy/core/expr.py', 1774, 1774, 0.17149858514250882), ('sympy/core/logic.py', 86, 86, 0.17149858514250882), ('sympy/core/numbers.py', 2542, 2542, 0.17149858514250882), ('sympy/core/add.py', 347, 348, 0.1690308509457033), ('sympy/core/expr.py', 111, 111, 0.1690308509457033), ('sympy/core/expr.py', 130, 130, 0.1690308509457033), ('sympy/core/function.py', 254, 254, 0.1690308509457033), ('sympy/core/function.py', 257, 257, 0.1690308509457033), ('sympy/core/function.py', 263, 263, 0.1690308509457033), ('sympy/core/function.py', 269, 269, 0.1690308509457033), ('sympy/core/function.py', 273, 273, 0.1690308509457033), ('sympy/core/function.py', 275, 276, 0.1690308509457033), ('sympy/core/mul.py', 241, 243, 0.1690308509457033), ('sympy/core/mul.py', 257, 257, 0.1690308509457033), ('sympy/core/mul.py', 615, 616, 0.1690308509457033), ('sympy/core/mul.py', 766, 769, 0.1690308509457033), ('sympy/core/mul.py', 1098, 1101, 0.1690308509457033), ('sympy/core/numbers.py', 656, 656, 0.1690308509457033), ('sympy/core/numbers.py', 673, 673, 0.1690308509457033), ('sympy/core/numbers.py', 675, 675, 0.1690308509457033), ('sympy/core/numbers.py', 1601, 1601, 0.1690308509457033), ('sympy/core/numbers.py', 2108, 2112, 0.1690308509457033), ('sympy/core/add.py', 131, 132, 0.16666666666666666), ('sympy/core/add.py', 136, 138, 0.16666666666666666), ('sympy/core/add.py', 269, 270, 0.16666666666666666), ('sympy/core/basic.py', 345, 345, 0.16666666666666666), ('sympy/core/core.py', 97, 99, 0.16666666666666666), ('sympy/core/function.py', 438, 442, 0.16666666666666666), ('sympy/core/function.py', 459, 460, 0.16666666666666666), ('sympy/core/mul.py', 300, 301, 0.16666666666666666), ('sympy/core/mul.py', 611, 612, 0.16666666666666666), ('sympy/core/add.py', 170, 170, 0.1643989873053573), ('sympy/core/add.py', 207, 208, 0.1643989873053573), ('sympy/core/assumptions.py', 227, 227, 0.1643989873053573), ('sympy/core/assumptions.py', 243, 248, 0.1643989873053573), ('sympy/core/assumptions.py', 278, 279, 0.1643989873053573), ('sympy/core/assumptions.py', 283, 283, 0.1643989873053573), ('sympy/core/assumptions.py', 291, 294, 0.1643989873053573), ('sympy/core/basic.py', 334, 334, 0.1643989873053573), ('sympy/core/containers.py', 49, 52, 0.1643989873053573), ('sympy/core/containers.py', 67, 67, 0.1643989873053573), ('sympy/core/core.py', 102, 104, 0.1643989873053573), ('sympy/core/expr.py', 120, 120, 0.1643989873053573), ('sympy/core/facts.py', 497, 498, 0.1643989873053573), ('sympy/core/facts.py', 512, 514, 0.1643989873053573), ('sympy/core/facts.py', 519, 520, 0.1643989873053573), ('sympy/core/facts.py', 531, 531, 0.1643989873053573), ('sympy/core/mul.py', 289, 291, 0.1643989873053573), ('sympy/core/mul.py', 427, 428, 0.1643989873053573), ('sympy/core/mul.py', 431, 432, 0.1643989873053573), ('sympy/core/mul.py', 538, 538, 0.1643989873053573), ('sympy/core/mul.py', 540, 541, 0.1643989873053573), ('sympy/core/mul.py', 544, 545, 0.1643989873053573), ('sympy/core/numbers.py', 179, 181, 0.1643989873053573), ('sympy/core/numbers.py', 1845, 1845, 0.1643989873053573), ('sympy/core/numbers.py', 2007, 2009, 0.1643989873053573), ('sympy/core/operations.py', 106, 106, 0.1643989873053573), ('sympy/core/operations.py', 109, 110, 0.1643989873053573), ('sympy/core/add.py', 19, 19, 0.16222142113076254), ('sympy/core/add.py', 109, 109, 0.16222142113076254), ('sympy/core/add.py', 112, 112, 0.16222142113076254), ('sympy/core/add.py', 114, 114, 0.16222142113076254), ('sympy/core/add.py', 116, 116, 0.16222142113076254), ('sympy/core/add.py', 119, 119, 0.16222142113076254), ('sympy/core/add.py', 143, 143, 0.16222142113076254), ('sympy/core/add.py', 147, 147, 0.16222142113076254), ('sympy/core/add.py', 152, 152, 0.16222142113076254), ('sympy/core/add.py', 160, 160, 0.16222142113076254), ('sympy/core/add.py', 196, 196, 0.16222142113076254), ('sympy/core/add.py', 200, 202, 0.16222142113076254), ('sympy/core/add.py', 223, 223, 0.16222142113076254), ('sympy/core/add.py', 226, 226, 0.16222142113076254), ('sympy/core/add.py', 230, 230, 0.16222142113076254), ('sympy/core/add.py', 234, 234, 0.16222142113076254), ('sympy/core/add.py', 247, 247, 0.16222142113076254), ('sympy/core/add.py', 266, 266, 0.16222142113076254), ('sympy/core/add.py', 273, 273, 0.16222142113076254), ('sympy/core/add.py', 276, 276, 0.16222142113076254), ('sympy/core/basic.py', 642, 642, 0.16222142113076254), ('sympy/core/compatibility.py', 331, 333, 0.16222142113076254), ('sympy/core/compatibility.py', 337, 337, 0.16222142113076254), ('sympy/core/expr.py', 177, 177, 0.16222142113076254), ('sympy/core/mul.py', 260, 261, 0.16222142113076254), ('sympy/core/mul.py', 264, 266, 0.16222142113076254), ('sympy/core/mul.py', 764, 764, 0.16222142113076254), ('sympy/core/numbers.py', 176, 176, 0.16222142113076254), ('sympy/core/numbers.py', 1734, 1734, 0.16222142113076254), ('sympy/core/numbers.py', 3217, 3217, 0.16222142113076254), ('sympy/core/operations.py', 38, 39, 0.16222142113076254), ('sympy/core/add.py', 345, 345, 0.16012815380508713), ('sympy/core/basic.py', 322, 322, 0.16012815380508713), ('sympy/core/basic.py', 324, 324, 0.16012815380508713), ('sympy/core/basic.py', 326, 327, 0.16012815380508713), ('sympy/core/basic.py', 331, 332, 0.16012815380508713), ('sympy/core/compatibility.py', 601, 608, 0.16012815380508713), ('sympy/core/compatibility.py', 627, 629, 0.16012815380508713), ('sympy/core/expr.py', 384, 384, 0.16012815380508713), ('sympy/core/function.py', 216, 216, 0.16012815380508713), ('sympy/core/function.py', 219, 219, 0.16012815380508713), ('sympy/core/function.py', 237, 238, 0.16012815380508713), ('sympy/core/function.py', 240, 241, 0.16012815380508713), ('sympy/core/function.py', 244, 244, 0.16012815380508713), ('sympy/core/function.py', 246, 246, 0.16012815380508713), ('sympy/core/function.py', 419, 419, 0.16012815380508713), ('sympy/core/function.py', 422, 423, 0.16012815380508713), ('sympy/core/function.py', 446, 446, 0.16012815380508713), ('sympy/core/mul.py', 34, 34, 0.16012815380508713), ('sympy/core/mul.py', 293, 293, 0.16012815380508713), ('sympy/core/mul.py', 296, 296, 0.16012815380508713), ('sympy/core/mul.py', 327, 327, 0.16012815380508713), ('sympy/core/mul.py', 379, 391, 0.16012815380508713), ('sympy/core/mul.py', 421, 425, 0.16012815380508713), ('sympy/core/mul.py', 442, 443, 0.16012815380508713), ('sympy/core/mul.py', 599, 601, 0.16012815380508713), ('sympy/core/mul.py', 604, 605, 0.16012815380508713), ('sympy/core/mul.py', 608, 608, 0.16012815380508713), ('sympy/core/mul.py', 621, 621, 0.16012815380508713), ('sympy/core/numbers.py', 1873, 1873, 0.16012815380508713), ('sympy/core/numbers.py', 2831, 2831, 0.16012815380508713), ('sympy/core/power.py', 711, 712, 0.16012815380508713), ('sympy/core/power.py', 714, 714, 0.16012815380508713), ('sympy/core/relational.py', 306, 309, 0.16012815380508713), ('sympy/core/relational.py', 311, 312, 0.16012815380508713), ('sympy/core/relational.py', 314, 314, 0.16012815380508713), ('sympy/core/relational.py', 316, 316, 0.16012815380508713), ('sympy/core/relational.py', 318, 318, 0.16012815380508713), ('sympy/core/relational.py', 322, 322, 0.16012815380508713), ('sympy/core/relational.py', 327, 328, 0.16012815380508713), ('sympy/logic/boolalg.py', 314, 314, 0.16012815380508713), ('sympy/logic/boolalg.py', 319, 319, 0.16012815380508713), ('sympy/sets/sets.py', 57, 58, 0.16012815380508713), ('sympy/sets/sets.py', 60, 63, 0.16012815380508713), ('sympy/sets/sets.py', 306, 308, 0.16012815380508713), ('sympy/sets/sets.py', 310, 310, 0.16012815380508713), ('sympy/sets/sets.py', 579, 580, 0.16012815380508713), ('sympy/sets/sets.py', 582, 582, 0.16012815380508713), ('sympy/sets/sets.py', 1891, 1893, 0.16012815380508713), ('sympy/sets/sets.py', 1895, 1895, 0.16012815380508713), ('sympy/sets/sets.py', 1900, 1903, 0.16012815380508713), ('sympy/sets/sets.py', 2006, 2007, 0.16012815380508713), ('sympy/sets/sets.py', 2010, 2012, 0.16012815380508713), ('sympy/core/basic.py', 190, 190, 0.15811388300841897), ('sympy/core/basic.py', 192, 196, 0.15811388300841897), ('sympy/core/core.py', 76, 76, 0.15811388300841897), ('sympy/core/core.py', 78, 80, 0.15811388300841897), ('sympy/core/core.py', 94, 94, 0.15811388300841897), ('sympy/core/expr.py', 2932, 2932, 0.15811388300841897), ('sympy/core/mul.py', 199, 199, 0.15811388300841897), ('sympy/core/mul.py', 203, 204, 0.15811388300841897), ('sympy/core/mul.py', 206, 206, 0.15811388300841897), ('sympy/core/mul.py', 208, 208, 0.15811388300841897), ('sympy/core/mul.py', 211, 211, 0.15811388300841897), ('sympy/core/mul.py', 214, 214, 0.15811388300841897), ('sympy/core/mul.py', 217, 217, 0.15811388300841897), ('sympy/core/mul.py', 219, 219, 0.15811388300841897), ('sympy/core/mul.py', 222, 222, 0.15811388300841897), ('sympy/core/mul.py', 235, 235, 0.15811388300841897), ('sympy/core/mul.py', 237, 237, 0.15811388300841897), ('sympy/core/mul.py', 271, 271, 0.15811388300841897), ('sympy/core/mul.py', 275, 275, 0.15811388300841897), ('sympy/core/mul.py', 394, 394, 0.15811388300841897), ('sympy/core/mul.py', 397, 397, 0.15811388300841897), ('sympy/core/mul.py', 446, 446, 0.15811388300841897), ('sympy/core/mul.py', 452, 452, 0.15811388300841897), ('sympy/core/mul.py', 456, 456, 0.15811388300841897), ('sympy/core/mul.py', 458, 458, 0.15811388300841897), ('sympy/core/mul.py', 460, 460, 0.15811388300841897), ('sympy/core/mul.py', 462, 462, 0.15811388300841897), ('sympy/core/mul.py', 536, 536, 0.15811388300841897), ('sympy/core/mul.py', 560, 560, 0.15811388300841897), ('sympy/core/mul.py', 563, 563, 0.15811388300841897), ('sympy/core/mul.py', 579, 579, 0.15811388300841897), ('sympy/core/mul.py', 591, 591, 0.15811388300841897), ('sympy/core/numbers.py', 1727, 1728, 0.15811388300841897), ('sympy/core/numbers.py', 1812, 1812, 0.15811388300841897), ('sympy/core/numbers.py', 2503, 2503, 0.15811388300841897), ('sympy/core/basic.py', 320, 320, 0.15617376188860607), ('sympy/core/basic.py', 1659, 1663, 0.15617376188860607), ('sympy/core/basic.py', 1667, 1667, 0.15617376188860607), ('sympy/core/basic.py', 1669, 1670, 0.15617376188860607), ('sympy/core/basic.py', 1672, 1672, 0.15617376188860607), ('sympy/core/expr.py', 140, 140, 0.15617376188860607), ('sympy/core/numbers.py', 2029, 2030, 0.15617376188860607), ('sympy/core/operations.py', 58, 59, 0.15617376188860607), ('sympy/core/operations.py', 61, 62, 0.15617376188860607), ('sympy/core/basic.py', 122, 126, 0.1543033499620919), ('sympy/core/basic.py', 316, 318, 0.1543033499620919), ('sympy/core/basic.py', 674, 674, 0.1543033499620919), ('sympy/core/basic.py', 1677, 1677, 0.1543033499620919), ('sympy/core/basic.py', 1679, 1679, 0.1543033499620919), ('sympy/core/basic.py', 1682, 1682, 0.1543033499620919), ('sympy/core/decorators.py', 89, 91, 0.1543033499620919), ('sympy/core/operations.py', 29, 31, 0.1543033499620919), ('sympy/core/operations.py', 33, 33, 0.1543033499620919), ('sympy/core/operations.py', 36, 36, 0.1543033499620919), ('sympy/core/operations.py', 41, 44, 0.1543033499620919), ('sympy/core/operations.py', 46, 46, 0.1543033499620919), ('sympy/core/operations.py', 48, 48, 0.1543033499620919), ('sympy/core/symbol.py', 172, 173, 0.1543033499620919), ('sympy/core/symbol.py', 210, 211, 0.1543033499620919), ('sympy/core/basic.py', 95, 97, 0.15249857033260467), ('sympy/core/basic.py', 99, 100, 0.15249857033260467), ('sympy/core/basic.py', 136, 136, 0.15249857033260467), ('sympy/core/decorators.py', 86, 86, 0.15249857033260467), ('sympy/core/decorators.py', 124, 125, 0.15249857033260467), ('sympy/core/decorators.py', 132, 132, 0.15249857033260467), ('sympy/core/numbers.py', 727, 727, 0.15249857033260467), ('sympy/core/numbers.py', 1958, 1958, 0.15249857033260467), ('sympy/core/numbers.py', 1966, 1967, 0.15249857033260467), ('sympy/core/numbers.py', 1971, 1972, 0.15249857033260467), ('sympy/core/numbers.py', 2154, 2154, 0.15249857033260467), ('sympy/core/sympify.py', 258, 259, 0.15249857033260467), ('sympy/core/sympify.py', 268, 269, 0.15249857033260467), ('sympy/core/sympify.py', 282, 282, 0.15249857033260467), ('sympy/core/sympify.py', 287, 288, 0.15249857033260467), ('sympy/core/sympify.py', 396, 396, 0.15249857033260467), ('conftest.py', 37, 38, 0.15075567228888181), ('conftest.py', 42, 42, 0.15075567228888181), ('sympy/core/cache.py', 96, 96, 0.15075567228888181)]
2024-04-05 06:10:40 SBFL result (methods): [('sympy/core/function.py', 'Function', '_eval_evalf', 1.0), ('sympy/core/mul.py', 'Mul', '_eval_pos_neg', 1.0), ('sympy/core/numbers.py', 'Integer', '__mod__', 1.0), ('sympy/functions/elementary/exponential.py', 'log', 'eval', 1.0), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_real', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'sinh', 'fdiff', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'sinh', 'inverse', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'coth', 'taylor_term', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'coth', '_eval_conjugate', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'coth', 'as_real_imag', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'coth', '_eval_rewrite_as_tractable', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'coth', '_eval_rewrite_as_exp', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'coth', '_eval_rewrite_as_sinh', 1.0), ('sympy/functions/elementary/trigonometric.py', 'tan', 'eval', 1.0), ('sympy/functions/elementary/trigonometric.py', 'cot', 'eval', 1.0), ('sympy/functions/elementary/trigonometric.py', 'cot', '_eval_expand_trig', 1.0), ('sympy/functions/elementary/trigonometric.py', 'cot', '_eval_subs', 1.0), ('sympy/core/add.py', 'Add', '_eval_is_zero', 0.7071067811865475), ('sympy/core/add.py', 'Add', '_eval_is_odd', 0.7071067811865475), ('sympy/core/evalf.py', 'EvalfMixin', '_to_mpmath', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', 'flatten', 0.7071067811865475), ('sympy/core/numbers.py', 'Integer', '__sub__', 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_zero', 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 'tan', '_eval_is_finite', 0.7071067811865475), ('sympy/core/evalf.py', '', '_create_evalf_table', 0.5773502691896258), ('sympy/core/evalf.py', '', 'evalf', 0.5773502691896258), ('sympy/functions/elementary/trigonometric.py', 'TrigonometricFunction', '_eval_is_algebraic', 0.5773502691896258), ('sympy/core/add.py', 'Add', '_eval_is_negative', 0.5), ('sympy/core/expr.py', 'Expr', '__lt__', 0.5), ('sympy/core/numbers.py', 'Rational', '__sub__', 0.5), ('sympy/core/numbers.py', 'ComplexInfinity', '_eval_power', 0.5), ('sympy/functions/elementary/exponential.py', 'log', 'as_base_exp', 0.5), ('sympy/functions/elementary/hyperbolic.py', 'sinh', 'eval', 0.5), ('sympy/functions/elementary/trigonometric.py', 'TrigonometricFunction', '_eval_is_rational', 0.5), ('sympy/functions/elementary/trigonometric.py', '', '_pi_coeff', 0.5), ('sympy/core/evalf.py', '', 'add_terms', 0.4472135954999579), ('sympy/core/mul.py', 'Mul', '_eval_evalf', 0.4472135954999579), ('sympy/core/add.py', '', '_unevaluated_Add', 0.4082482904638631), ('sympy/core/add.py', 'Add', '_eval_is_positive', 0.4082482904638631), ('sympy/core/evalf.py', '', 'iszero', 0.4082482904638631), ('sympy/core/evalf.py', '', 'complex_accuracy', 0.4082482904638631), ('sympy/core/evalf.py', '', 'evalf_add', 0.4082482904638631), ('sympy/core/expr.py', 'Expr', 'as_independent', 0.4082482904638631), ('sympy/core/mul.py', 'Mul', '_eval_real_imag', 0.4082482904638631), ('sympy/core/numbers.py', 'Float', '_eval_is_finite', 0.4082482904638631), ('sympy/core/numbers.py', 'Float', '__add__', 0.4082482904638631), ('sympy/core/numbers.py', 'Rational', '__add__', 0.4082482904638631), ('sympy/core/numbers.py', 'Integer', '__radd__', 0.4082482904638631), ('sympy/core/operations.py', 'AssocOp', '_eval_evalf', 0.4082482904638631), ('sympy/core/evalf.py', '', 'pure_complex', 0.3779644730092272), ('sympy/core/expr.py', 'Expr', 'extract_multiplicatively', 0.3779644730092272), ('sympy/core/logic.py', '', 'fuzzy_not', 0.3779644730092272), ('sympy/core/mul.py', 'Mul', '_eval_is_imaginary', 0.3779644730092272), ('sympy/core/numbers.py', 'Number', '_as_mpf_op', 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 'coth', '_eval_rewrite_as_tanh', 0.3779644730092272), ('sympy/functions/elementary/hyperbolic.py', 'coth', '_eval_as_leading_term', 0.3779644730092272), ('sympy/core/evalf.py', '', 'bitcount', 0.35355339059327373), ('sympy/core/evalf.py', '', 'evalf_mul', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', 'args_cnc', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', 'coeff', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', 'as_coeff_Mul', 0.35355339059327373), ('sympy/core/facts.py', 'FactKB', 'deduce_all_facts', 0.35355339059327373), ('sympy/core/logic.py', '', 'fuzzy_bool', 0.35355339059327373), ('sympy/core/numbers.py', 'Float', '_eval_is_infinite', 0.35355339059327373), ('sympy/core/numbers.py', 'Float', '_eval_is_integer', 0.35355339059327373), ('sympy/core/numbers.py', 'Rational', '__new__', 0.35355339059327373), ('sympy/core/numbers.py', 'Rational', '__mul__', 0.35355339059327373), ('sympy/core/basic.py', 'Basic', 'is_comparable', 0.3333333333333333), ('sympy/core/basic.py', 'Basic', 'func', 0.3333333333333333), ('sympy/core/expr.py', 'Expr', 'equals', 0.3333333333333333), ('sympy/core/expr.py', 'Expr', '_eval_is_positive', 0.3333333333333333), ('sympy/core/numbers.py', 'Float', '_as_mpf_val', 0.3333333333333333), ('sympy/core/numbers.py', 'Float', '_as_mpf_op', 0.3333333333333333), ('sympy/core/numbers.py', 'Float', '__gt__', 0.3333333333333333), ('sympy/core/symbol.py', '', 'var', 0.31622776601683794), ('sympy/core/add.py', 'Add', 'primitive', 0.30151134457776363), ('sympy/core/numbers.py', 'Rational', '__mod__', 0.30151134457776363), ('sympy/core/numbers.py', 'Zero', '_eval_power', 0.30151134457776363), ('sympy/utilities/iterables.py', '', 'sift', 0.30151134457776363), ('sympy/core/mul.py', 'Mul', '_eval_is_negative', 0.2886751345948129), ('sympy/core/numbers.py', 'Float', '__eq__', 0.2886751345948129), ('sympy/core/numbers.py', 'Rational', '__eq__', 0.2886751345948129), ('sympy/core/expr.py', 'Expr', 'as_coefficient', 0.2773500981126146), ('sympy/core/function.py', 'Function', '_should_evalf', 0.2672612419124244), ('sympy/core/mul.py', 'Mul', 'as_coeff_Mul', 0.2672612419124244), ('sympy/core/add.py', 'Add', 'flatten', 0.2581988897471611), ('sympy/core/function.py', '', '_coeff_isneg', 0.2581988897471611), ('sympy/core/numbers.py', '', 'igcd', 0.25), ('sympy/core/expr.py', 'Expr', '__radd__', 0.24253562503633297), ('sympy/core/function.py', 'Function', 'as_base_exp', 0.24253562503633297), ('sympy/core/basic.py', 'Basic', '_has_matcher', 0.23570226039551587), ('sympy/core/basic.py', 'Basic', 'replace', 0.23570226039551587), ('sympy/core/numbers.py', 'NumberSymbol', '__ne__', 0.23570226039551587), ('sympy/core/expr.py', 'Expr', '_eval_is_negative', 0.22941573387056174), ('sympy/core/expr.py', 'Expr', '_expand_hint', 0.22941573387056174), ('sympy/core/expr.py', 'Expr', 'expand', 0.22941573387056174), ('sympy/core/numbers.py', 'Number', '_eval_evalf', 0.22941573387056174), ('sympy/core/numbers.py', 'Number', '__div__', 0.22941573387056174), ('sympy/core/numbers.py', 'Rational', '__div__', 0.22941573387056174), ('sympy/core/numbers.py', 'Float', '__lt__', 0.22360679774997896), ('sympy/core/numbers.py', 'Integer', '__rmul__', 0.22360679774997896), ('sympy/core/numbers.py', 'NaN', '_sage_', 0.22360679774997896), ('sympy/core/numbers.py', 'NumberSymbol', '__eq__', 0.22360679774997896), ('sympy/functions/elementary/miscellaneous.py', '', 'sqrt', 0.22360679774997896), ('sympy/core/assumptions.py', 'StdFactKB', '__init__', 0.2182178902359924), ('sympy/core/assumptions.py', 'StdFactKB', 'generator', 0.2182178902359924), ('sympy/core/evalf.py', 'EvalfMixin', 'evalf', 0.2182178902359924), ('sympy/core/expr.py', 'Expr', 'as_real_imag', 0.2182178902359924), ('sympy/core/numbers.py', '', 'mpf_norm', 0.2182178902359924), ('sympy/core/numbers.py', 'Float', '_new', 0.2182178902359924), ('sympy/core/numbers.py', 'Float', 'floor', 0.2182178902359924), ('sympy/core/numbers.py', 'Integer', '_mpmath_', 0.2182178902359924), ('sympy/core/numbers.py', 'Integer', '__abs__', 0.2182178902359924), ('sympy/core/numbers.py', 'NaN', '__ne__', 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 're', 'eval', 0.2182178902359924), ('sympy/functions/elementary/complexes.py', 'im', 'eval', 0.2182178902359924), ('sympy/core/basic.py', 'Basic', 'matches', 0.21320071635561041), ('sympy/core/compatibility.py', '', '_nodes', 0.21320071635561041), ('sympy/core/compatibility.py', '', 'ordered', 0.21320071635561041), ('sympy/core/core.py', 'BasicMeta', '__cmp__', 0.21320071635561041), ('sympy/core/numbers.py', 'Float', 'epsilon_eq', 0.21320071635561041), ('sympy/core/numbers.py', 'Integer', '__add__', 0.21320071635561041), ('sympy/core/basic.py', 'preorder_traversal', 'skip', 0.20851441405707477), ('sympy/core/function.py', 'Function', 'is_commutative', 0.20851441405707477), ('sympy/core/numbers.py', 'Integer', '__gt__', 0.20851441405707477), ('sympy/core/numbers.py', 'NegativeInfinity', '__eq__', 0.20851441405707477), ('sympy/core/assumptions.py', '', '_ask', 0.20412414523193154), ('sympy/core/basic.py', 'Basic', '_has', 0.20412414523193154), ('sympy/core/compatibility.py', '', 'default_sort_key', 0.20412414523193154), ('sympy/core/expr.py', 'Expr', 'could_extract_minus_sign', 0.20412414523193154), ('sympy/core/mul.py', 'Mul', '_eval_herm_antiherm', 0.20412414523193154), ('sympy/core/numbers.py', 'Integer', '__mul__', 0.20412414523193154), ('sympy/core/numbers.py', 'Infinity', '_eval_power', 0.20412414523193154), ('sympy/core/sympify.py', '', 'sympify', 0.20412414523193154), ('sympy/core/numbers.py', '', 'ilcm', 0.2), ('sympy/core/operations.py', 'AssocOp', 'make_args', 0.19611613513818404), ('sympy/core/function.py', 'Application', '__new__', 0.19245008972987526), ('sympy/core/function.py', 'Application', 'func', 0.19245008972987526), ('sympy/core/operations.py', 'AssocOp', '_from_args', 0.19245008972987526), ('sympy/core/mul.py', 'Mul', '_eval_is_integer', 0.1889822365046136), ('sympy/core/mul.py', 'Mul', '_eval_is_hermitian', 0.1889822365046136), ('sympy/core/mul.py', 'Mul', '_eval_is_antihermitian', 0.1889822365046136), ('sympy/core/mul.py', 'Mul', '_eval_is_irrational', 0.1889822365046136), ('sympy/core/mul.py', 'Mul', '_eval_is_odd', 0.1889822365046136), ('sympy/core/mul.py', 'Mul', '_eval_is_even', 0.1889822365046136), ('sympy/core/facts.py', 'FactKB', '_tell', 0.18569533817705186), ('sympy/core/logic.py', '', '_fuzzy_group', 0.18569533817705186), ('sympy/core/mul.py', 'Mul', '_eval_is_rational', 0.18569533817705186), ('sympy/core/mul.py', 'Mul', '_eval_is_algebraic', 0.18569533817705186), ('sympy/core/mul.py', 'Mul', '_eval_is_zero', 0.18569533817705186), ('sympy/core/mul.py', 'Mul', '_eval_is_composite', 0.18569533817705186), ('sympy/core/add.py', 'Add', '_eval_is_nonpositive', 0.18257418583505536), ('sympy/core/mul.py', 'Mul', '_eval_is_infinite', 0.18257418583505536), ('sympy/core/mul.py', 'Mul', '_eval_is_real', 0.18257418583505536), ('sympy/core/mul.py', 'Mul', '_eval_is_positive', 0.18257418583505536), ('sympy/core/sympify.py', 'SympifyError', '__init__', 0.18257418583505536), ('sympy/core/basic.py', 'preorder_traversal', '_preorder_traversal', 0.1796053020267749), ('sympy/core/basic.py', '', '_make_find_query', 0.1796053020267749), ('sympy/core/logic.py', '', 'fuzzy_and', 0.1796053020267749), ('sympy/core/numbers.py', 'NegativeOne', '_eval_power', 0.1796053020267749), ('sympy/logic/boolalg.py', 'And', 'as_set', 0.1796053020267749), ('sympy/core/expr.py', 'Expr', '_pow', 0.17677669529663687), ('sympy/core/expr.py', 'Expr', '__pow__', 0.17677669529663687), ('sympy/core/expr.py', 'Expr', '__rmul__', 0.17407765595569785), ('sympy/core/expr.py', 'Expr', 'as_coefficients_dict', 0.17149858514250882), ('sympy/core/numbers.py', 'One', '_eval_power', 0.17149858514250882), ('sympy/core/add.py', 'Add', 'as_coeff_Add', 0.1690308509457033), ('sympy/core/expr.py', 'Expr', '__neg__', 0.1690308509457033), ('sympy/core/expr.py', 'Expr', '__sub__', 0.1690308509457033), ('sympy/core/numbers.py', 'Number', '__mul__', 0.1690308509457033), ('sympy/core/numbers.py', 'Integer', '__eq__', 0.1690308509457033), ('sympy/core/numbers.py', 'Integer', '__ne__', 0.1690308509457033), ('sympy/core/basic.py', 'Basic', 'dummy_eq', 0.16666666666666666), ('sympy/core/core.py', 'BasicMeta', '__lt__', 0.16666666666666666), ('sympy/core/function.py', 'Function', '__new__', 0.16666666666666666), ('sympy/core/assumptions.py', 'StdFactKB', 'copy', 0.1643989873053573), ('sympy/core/assumptions.py', '', 'make_property', 0.1643989873053573), ('sympy/core/containers.py', 'Tuple', '__new__', 0.1643989873053573), ('sympy/core/containers.py', 'Tuple', '__iter__', 0.1643989873053573), ('sympy/core/core.py', 'BasicMeta', '__gt__', 0.1643989873053573), ('sympy/core/expr.py', 'Expr', '__add__', 0.1643989873053573), ('sympy/core/numbers.py', 'Rational', '_sage_', 0.1643989873053573), ('sympy/core/numbers.py', 'Integer', '__divmod__', 0.1643989873053573), ('sympy/core/operations.py', 'AssocOp', '_new_rawargs', 0.1643989873053573), ('sympy/core/add.py', '', '_addsort', 0.16222142113076254), ('sympy/core/basic.py', 'Basic', 'args', 0.16222142113076254), ('sympy/core/compatibility.py', '', 'as_int', 0.16222142113076254), ('sympy/core/expr.py', 'Expr', '__div__', 0.16222142113076254), ('sympy/core/numbers.py', 'Rational', '__ne__', 0.16222142113076254), ('sympy/core/numbers.py', 'NaN', '__eq__', 0.16222142113076254), ('sympy/core/operations.py', 'AssocOp', '__new__', 0.16222142113076254), ('sympy/core/basic.py', 'Basic', '__ne__', 0.16012815380508713), ('sympy/core/expr.py', 'Expr', 'is_number', 0.16012815380508713), ('sympy/core/function.py', 'FunctionClass', 'nargs', 0.16012815380508713), ('sympy/core/mul.py', '', '_mulsort', 0.16012815380508713), ('sympy/core/numbers.py', 'Rational', 'as_coeff_Add', 0.16012815380508713), ('sympy/core/numbers.py', 'Infinity', '__eq__', 0.16012815380508713), ('sympy/core/power.py', 'Pow', 'as_base_exp', 0.16012815380508713), ('sympy/core/relational.py', 'Equality', '__new__', 0.16012815380508713), ('sympy/sets/sets.py', 'Set', '_infimum_key', 0.16012815380508713), ('sympy/sets/sets.py', 'Set', 'contains', 0.16012815380508713), ('sympy/sets/sets.py', 'Set', '__contains__', 0.16012815380508713), ('sympy/sets/sets.py', 'FiniteSet', '__new__', 0.16012815380508713), ('sympy/sets/sets.py', 'FiniteSet', '_eval_Eq', 0.16012815380508713), ('sympy/sets/sets.py', 'FiniteSet', '_contains', 0.16012815380508713), ('sympy/sets/sets.py', 'FiniteSet', '_eval_imageset', 0.16012815380508713), ('sympy/core/basic.py', 'Basic', 'compare', 0.15811388300841897), ('sympy/core/expr.py', 'Expr', 'leadterm', 0.15811388300841897), ('sympy/core/numbers.py', 'Rational', 'factors', 0.15811388300841897), ('sympy/core/basic.py', 'Basic', '__eq__', 0.15617376188860607), ('sympy/core/basic.py', 'Basic', '_exec_constructor_postprocessors', 0.15617376188860607), ('sympy/core/expr.py', 'Expr', '__mul__', 0.15617376188860607), ('sympy/core/basic.py', 'Basic', '_hashable_content', 0.1543033499620919), ('sympy/core/basic.py', 'Basic', 'assumptions0', 0.1543033499620919), ('sympy/core/basic.py', 'Basic', 'as_poly', 0.1543033499620919), ('sympy/core/decorators.py', '', '__sympifyit', 0.1543033499620919), ('sympy/core/symbol.py', 'Symbol', 'is_constant', 0.1543033499620919), ('sympy/core/basic.py', 'Basic', '__getnewargs__', 0.15249857033260467), ('sympy/core/basic.py', 'Basic', '__getstate__', 0.15249857033260467), ('sympy/core/decorators.py', '', 'call_highest_priority', 0.15249857033260467), ('sympy/core/numbers.py', 'Number', '__hash__', 0.15249857033260467), ('sympy/core/numbers.py', 'Integer', '__new__', 0.15249857033260467), ('sympy/core/numbers.py', 'Integer', '__index__', 0.15249857033260467), ('sympy/core/sympify.py', '', 'kernS', 0.15249857033260467), ('conftest.py', '', 'pytest_runtest_setup', 0.15075567228888181)]
2024-04-05 06:10:40 
========== Conversation Round 0 ==========
2024-04-05 06:10:40 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>.subs on coth(log(tan(x))) errors for certain integral values\n'
             '>>> from sympy import *\n'
             ">>> x = Symbol('x')\n"
             '>>> e = coth(log(tan(x)))\n'
             '>>> print(e.subs(x, 2))\n'
             '...\n'
             'File "C:\\Users\\E\\Desktop\\sympy-master\\sympy\\functions\\elementary\\hyperbolic.py", line 590, in eval\n'
             'if cotm is S.ComplexInfinity:\n'
             "NameError: name 'cotm' is not defined\n"
             'Fails for 2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18, ... etc.\n'
             '</issue>'},
 {'role': 'user',
  'content': 'An external analysis tool has been deployed to identify the suspicious code to be fixed. You can choose to use the results from this tool, if '
             'you think they are useful.The tool output is as follows:\n'
             'Top-5 suspicious methods:\n'
             'Suspicious method #1:\n'
             '<file>sympy/core/function.py</file> <class>Function</class> <func>_eval_evalf</func>\n'
             '\n'
             'Suspicious method #2:\n'
             '<file>sympy/core/mul.py</file> <class>Mul</class> <func>_eval_pos_neg</func>\n'
             '\n'
             'Suspicious method #3:\n'
             '<file>sympy/core/numbers.py</file> <class>Integer</class> <func>__mod__</func>\n'
             '\n'
             'Suspicious method #4:\n'
             '<file>sympy/functions/elementary/exponential.py</file> <class>log</class> <func>eval</func>\n'
             '\n'
             'Suspicious method #5:\n'
             '<file>sympy/functions/elementary/exponential.py</file> <class>log</class> <func>_eval_is_real</func>\n'
             '\n'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '}]
2024-04-05 06:10:41 Model API request cost info: input_tokens=653, output_tokens=11, cost=0.006860
2024-04-05 06:10:41 Raw model response: ChatCompletionMessage(content='search_method_in_class("eval", "coth")', role='assistant', function_call=None, tool_calls=None)
2024-04-05 06:10:41 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 06:10:42 Model API request cost info: input_tokens=331, output_tokens=26, cost=0.004090
2024-04-05 06:10:42 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": ["search_method_in_class(\\"eval\\", \\"coth\\")"],\n    "bug_locations": []\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 06:10:42 Raw issue json produced. Writing issue json into file.
2024-04-05 06:10:42 Extracted a valid json. Congratulations!
2024-04-05 06:10:42 Refactored invocation argument parsing failed on 'search_method_in_class("eval", "coth")': malformed node or string on line 1: <ast.Name object at 0x7f0ec795c0d0>
2024-04-05 06:10:42 Result of dispatch_intent: ('Found 1 methods with name eval in class coth.\nSearch result 1: <file>sympy/functions/elementary/hyperbolic.py</file> <class>coth</class> <func>eval</func> <code>    def eval(cls, arg):\n        from sympy import cot\n        arg = sympify(arg)\n\n        if arg.is_Number:\n            if arg is S.NaN:\n                return S.NaN\n            elif arg is S.Infinity:\n                return S.One\n            elif arg is S.NegativeInfinity:\n                return S.NegativeOne\n            elif arg is S.Zero:\n                return S.ComplexInfinity\n            elif arg.is_negative:\n                return -cls(-arg)\n        else:\n            if arg is S.ComplexInfinity:\n                return S.NaN\n\n            i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n\n            if i_coeff is not None:\n                if _coeff_isneg(i_coeff):\n                    return S.ImaginaryUnit * cot(-i_coeff)\n                return -S.ImaginaryUnit * cot(i_coeff)\n            else:\n                if _coeff_isneg(arg):\n                    return -cls(-arg)\n\n            if arg.is_Add:\n                x, m = _peeloff_ipi(arg)\n                if m:\n                    cothm = coth(m)\n                    if cotm is S.ComplexInfinity:\n                        return coth(x)\n                    else: # cothm == 0\n                        return tanh(x)\n\n            if arg.func == asinh:\n                x = arg.args[0]\n                return sqrt(1 + x**2)/x\n\n            if arg.func == acosh:\n                x = arg.args[0]\n                return x/(sqrt(x - 1) * sqrt(x + 1))\n\n            if arg.func == atanh:\n                return 1/arg.args[0]\n\n            if arg.func == acoth:\n                return arg.args[0]\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name eval in class coth.\n', True)
2024-04-05 06:11:17 Model API request cost info: input_tokens=1105, output_tokens=341, cost=0.021280
2024-04-05 06:11:17 Raw model response: ChatCompletionMessage(content="Based on the issue description and the analysis of the suspicious methods provided by the external tool, the error occurs when substituting certain integral values into the expression involving `coth(log(tan(x)))`. The error message indicates an issue with a variable `cotm` not being defined within the `eval` method of the `coth` class in `sympy/functions/elementary/hyperbolic.py`.\n\nFrom the provided code snippet of the `coth` class's `eval` method, we can observe a few key points:\n\n1. The `eval` method attempts to simplify the `coth` function under various conditions, including handling specific numeric values, infinity, and complex infinity.\n\n2. The error likely originates from the block handling the case when `arg` is an addition (`arg.is_Add`). In this block, there's a reference to `cotm` in the condition `if cotm is S.ComplexInfinity:`. However, `cotm` is not defined anywhere in the provided code snippet. Instead, the variable `cothm` is defined and used in the line just above.\n\n3. The error message and the code snippet suggest that the issue is a simple typo: `cotm` should be `cothm`.\n\nGiven this analysis, the patch should involve correcting the typo in the `eval` method of the `coth` class. Specifically, the reference to `cotm` should be changed to `cothm` to match the variable that is actually defined and used in the calculation.\n\nThis typo correction should resolve the error encountered when substituting certain integral values into the expression involving `coth(log(tan(x)))`.", role='assistant', function_call=None, tool_calls=None)
2024-04-05 06:11:17 
========== Conversation Round 1 ==========
2024-04-05 06:11:17 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>.subs on coth(log(tan(x))) errors for certain integral values\n'
             '>>> from sympy import *\n'
             ">>> x = Symbol('x')\n"
             '>>> e = coth(log(tan(x)))\n'
             '>>> print(e.subs(x, 2))\n'
             '...\n'
             'File "C:\\Users\\E\\Desktop\\sympy-master\\sympy\\functions\\elementary\\hyperbolic.py", line 590, in eval\n'
             'if cotm is S.ComplexInfinity:\n'
             "NameError: name 'cotm' is not defined\n"
             'Fails for 2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18, ... etc.\n'
             '</issue>'},
 {'role': 'user',
  'content': 'An external analysis tool has been deployed to identify the suspicious code to be fixed. You can choose to use the results from this tool, if '
             'you think they are useful.The tool output is as follows:\n'
             'Top-5 suspicious methods:\n'
             'Suspicious method #1:\n'
             '<file>sympy/core/function.py</file> <class>Function</class> <func>_eval_evalf</func>\n'
             '\n'
             'Suspicious method #2:\n'
             '<file>sympy/core/mul.py</file> <class>Mul</class> <func>_eval_pos_neg</func>\n'
             '\n'
             'Suspicious method #3:\n'
             '<file>sympy/core/numbers.py</file> <class>Integer</class> <func>__mod__</func>\n'
             '\n'
             'Suspicious method #4:\n'
             '<file>sympy/functions/elementary/exponential.py</file> <class>log</class> <func>eval</func>\n'
             '\n'
             'Suspicious method #5:\n'
             '<file>sympy/functions/elementary/exponential.py</file> <class>log</class> <func>_eval_is_real</func>\n'
             '\n'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '},
 {'role': 'assistant', 'content': 'search_method_in_class("eval", "coth")'},
 {'role': 'user',
  'content': 'Result of search_method_in_class("eval", "coth"):\n'
             'Found 1 methods with name eval in class coth.\n'
             'Search result 1: <file>sympy/functions/elementary/hyperbolic.py</file> <class>coth</class> <func>eval</func> <code>    def eval(cls, arg):\n'
             '        from sympy import cot\n'
             '        arg = sympify(arg)\n'
             '\n'
             '        if arg.is_Number:\n'
             '            if arg is S.NaN:\n'
             '                return S.NaN\n'
             '            elif arg is S.Infinity:\n'
             '                return S.One\n'
             '            elif arg is S.NegativeInfinity:\n'
             '                return S.NegativeOne\n'
             '            elif arg is S.Zero:\n'
             '                return S.ComplexInfinity\n'
             '            elif arg.is_negative:\n'
             '                return -cls(-arg)\n'
             '        else:\n'
             '            if arg is S.ComplexInfinity:\n'
             '                return S.NaN\n'
             '\n'
             '            i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n'
             '\n'
             '            if i_coeff is not None:\n'
             '                if _coeff_isneg(i_coeff):\n'
             '                    return S.ImaginaryUnit * cot(-i_coeff)\n'
             '                return -S.ImaginaryUnit * cot(i_coeff)\n'
             '            else:\n'
             '                if _coeff_isneg(arg):\n'
             '                    return -cls(-arg)\n'
             '\n'
             '            if arg.is_Add:\n'
             '                x, m = _peeloff_ipi(arg)\n'
             '                if m:\n'
             '                    cothm = coth(m)\n'
             '                    if cotm is S.ComplexInfinity:\n'
             '                        return coth(x)\n'
             '                    else: # cothm == 0\n'
             '                        return tanh(x)\n'
             '\n'
             '            if arg.func == asinh:\n'
             '                x = arg.args[0]\n'
             '                return sqrt(1 + x**2)/x\n'
             '\n'
             '            if arg.func == acosh:\n'
             '                x = arg.args[0]\n'
             '                return x/(sqrt(x - 1) * sqrt(x + 1))\n'
             '\n'
             '            if arg.func == atanh:\n'
             '                return 1/arg.args[0]\n'
             '\n'
             '            if arg.func == acoth:\n'
             '                return arg.args[0]\n'
             '</code>\n'
             '\n'
             'Other results are in these files:\n'
             '\n'
             '\n'},
 {'role': 'user', 'content': "Let's analyze collected context first"},
 {'role': 'assistant',
  'content': 'Based on the issue description and the analysis of the suspicious methods provided by the external tool, the error occurs when substituting '
             'certain integral values into the expression involving `coth(log(tan(x)))`. The error message indicates an issue with a variable `cotm` not being '
             'defined within the `eval` method of the `coth` class in `sympy/functions/elementary/hyperbolic.py`.\n'
             '\n'
             "From the provided code snippet of the `coth` class's `eval` method, we can observe a few key points:\n"
             '\n'
             '1. The `eval` method attempts to simplify the `coth` function under various conditions, including handling specific numeric values, infinity, '
             'and complex infinity.\n'
             '\n'
             "2. The error likely originates from the block handling the case when `arg` is an addition (`arg.is_Add`). In this block, there's a reference to "
             '`cotm` in the condition `if cotm is S.ComplexInfinity:`. However, `cotm` is not defined anywhere in the provided code snippet. Instead, the '
             'variable `cothm` is defined and used in the line just above.\n'
             '\n'
             '3. The error message and the code snippet suggest that the issue is a simple typo: `cotm` should be `cothm`.\n'
             '\n'
             'Given this analysis, the patch should involve correcting the typo in the `eval` method of the `coth` class. Specifically, the reference to '
             '`cotm` should be changed to `cothm` to match the variable that is actually defined and used in the calculation.\n'
             '\n'
             'This typo correction should resolve the error encountered when substituting certain integral values into the expression involving '
             '`coth(log(tan(x)))`.'},
 {'role': 'user',
  'content': 'Based on your analysis, answer below questions:  - do we need more context: construct search API calls to get more context of the project. '
             "(leave it empty if you don't need more context)  - where are bug locations: buggy files and methods. (leave it empty if you don't have enough "
             'information)'}]
2024-04-05 06:11:20 Model API request cost info: input_tokens=1519, output_tokens=48, cost=0.016630
2024-04-05 06:11:20 Raw model response: ChatCompletionMessage(content='- do we need more context:\n\n- where are bug locations:\n  - Buggy file: `sympy/functions/elementary/hyperbolic.py`\n  - Buggy method: `eval` in class `coth`', role='assistant', function_call=None, tool_calls=None)
2024-04-05 06:11:20 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 06:11:21 Model API request cost info: input_tokens=368, output_tokens=43, cost=0.004970
2024-04-05 06:11:21 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [],\n    "bug_locations":[{"file": "sympy/functions/elementary/hyperbolic.py", "class": "coth", "method": "eval"}]\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 06:11:21 Raw issue json produced. Writing issue json into file.
2024-04-05 06:11:21 Extracted a valid json. Congratulations!
2024-04-05 06:11:21 Result of dispatch_intent: ('Found 1 methods with name eval in class coth.\nSearch result 1: <file>sympy/functions/elementary/hyperbolic.py</file> <class>coth</class> <func>eval</func> <code>    def eval(cls, arg):\n        from sympy import cot\n        arg = sympify(arg)\n\n        if arg.is_Number:\n            if arg is S.NaN:\n                return S.NaN\n            elif arg is S.Infinity:\n                return S.One\n            elif arg is S.NegativeInfinity:\n                return S.NegativeOne\n            elif arg is S.Zero:\n                return S.ComplexInfinity\n            elif arg.is_negative:\n                return -cls(-arg)\n        else:\n            if arg is S.ComplexInfinity:\n                return S.NaN\n\n            i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n\n            if i_coeff is not None:\n                if _coeff_isneg(i_coeff):\n                    return S.ImaginaryUnit * cot(-i_coeff)\n                return -S.ImaginaryUnit * cot(i_coeff)\n            else:\n                if _coeff_isneg(arg):\n                    return -cls(-arg)\n\n            if arg.is_Add:\n                x, m = _peeloff_ipi(arg)\n                if m:\n                    cothm = coth(m)\n                    if cotm is S.ComplexInfinity:\n                        return coth(x)\n                    else: # cothm == 0\n                        return tanh(x)\n\n            if arg.func == asinh:\n                x = arg.args[0]\n                return sqrt(1 + x**2)/x\n\n            if arg.func == acosh:\n                x = arg.args[0]\n                return x/(sqrt(x - 1) * sqrt(x + 1))\n\n            if arg.func == atanh:\n                return 1/arg.args[0]\n\n            if arg.func == acoth:\n                return arg.args[0]\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name eval in class coth.\n', True)
2024-04-05 06:11:21 Gathered enough information. Invoking write_patch.
2024-04-05 06:11:21 Trying to write a patch. Try 1 of 3.
2024-04-05 06:11:25 Model API request cost info: input_tokens=2161, output_tokens=106, cost=0.024790
2024-04-05 06:11:25 Raw model response: ChatCompletionMessage(content='# modification 1\n```python\n<file>sympy/functions/elementary/hyperbolic.py</file>\n<original>                    if cotm is S.ComplexInfinity:\n                        return coth(x)\n                    else: # cothm == 0\n                        return tanh(x)</original>\n<patched>                    if cothm is S.ComplexInfinity:\n                        return coth(x)\n                    else: # cothm == 0\n                        return tanh(x)</patched>\n```', role='assistant', function_call=None, tool_calls=None)
2024-04-05 06:11:25 Raw patch produced in try 1. Writing patch into file.
2024-04-05 06:11:26 [Validation] Applied patch. Going to run test suite.
2024-04-05 06:11:26 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.1 ; bin/test -C --verbose sympy/functions/elementary/tests/test_hyperbolic.py ; conda deactivate
2024-04-05 06:11:31 [Run test-suite] Result of parsing test log: True
2024-04-05 06:11:31 [Run test-suite] Eval status: {'test_sinh': 'PASSED', 'test_sinh_series': 'PASSED', 'test_cosh': 'PASSED', 'test_cosh_series': 'PASSED', 'test_tanh': 'PASSED', 'test_tanh_series': 'PASSED', 'test_coth': 'PASSED', 'test_coth_series': 'PASSED', 'test_csch': 'PASSED', 'test_csch_series': 'PASSED', 'test_sech': 'PASSED', 'test_sech_series': 'PASSED', 'test_asinh': 'PASSED', 'test_asinh_rewrite': 'PASSED', 'test_asinh_series': 'PASSED', 'test_acosh': 'PASSED', 'test_acosh_rewrite': 'PASSED', 'test_acosh_series': 'PASSED', 'test_asech': 'PASSED', 'test_asech_series': 'PASSED', 'test_asech_rewrite': 'PASSED', 'test_acsch': 'PASSED', 'test_acsch_infinities': 'PASSED', 'test_acsch_rewrite': 'PASSED', 'test_atanh': 'PASSED', 'test_atanh_rewrite': 'PASSED', 'test_atanh_series': 'PASSED', 'test_acoth': 'PASSED', 'test_acoth_rewrite': 'PASSED', 'test_acoth_series': 'PASSED', 'test_inverses': 'PASSED', 'test_leading_term': 'PASSED', 'test_complex': 'PASSED', 'test_complex_2899': 'PASSED', 'test_simplifications': 'PASSED', 'test_issue_4136': 'PASSED', 'test_sinh_rewrite': 'PASSED', 'test_cosh_rewrite': 'PASSED', 'test_tanh_rewrite': 'PASSED', 'test_coth_rewrite': 'PASSED', 'test_csch_rewrite': 'PASSED', 'test_sech_rewrite': 'PASSED', 'test_derivs': 'PASSED', 'test_sinh_expansion': 'PASSED'}
2024-04-05 06:11:31 [Run test-suite] Eval result: {'FAIL_TO_PASS': {'success': ['test_coth'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_acosh', 'test_acosh_rewrite', 'test_acosh_series', 'test_acoth', 'test_acoth_rewrite', 'test_acoth_series', 'test_acsch', 'test_acsch_infinities', 'test_acsch_rewrite', 'test_asech', 'test_asech_rewrite', 'test_asech_series', 'test_asinh', 'test_asinh_rewrite', 'test_asinh_series', 'test_atanh', 'test_atanh_rewrite', 'test_atanh_series', 'test_complex', 'test_complex_2899', 'test_cosh', 'test_cosh_rewrite', 'test_cosh_series', 'test_coth_rewrite', 'test_coth_series', 'test_csch', 'test_csch_rewrite', 'test_csch_series', 'test_derivs', 'test_inverses', 'test_issue_4136', 'test_leading_term', 'test_sech', 'test_sech_rewrite', 'test_sech_series', 'test_simplifications', 'test_sinh', 'test_sinh_expansion', 'test_sinh_rewrite', 'test_sinh_series', 'test_tanh', 'test_tanh_rewrite', 'test_tanh_series'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}
2024-04-05 06:11:31 [Run test-suite] Resolution status: ResolvedStatus.FULL
2024-04-05 06:11:31 [Run test-suite] Returning True since all resolved.
2024-04-05 06:11:31 [Validation] Finishing. Result is True. Message: .
2024-04-05 06:11:31 Result of dispatch_intent: ('Written a patch that resolves the issue. Congratulations!', 'The tool returned the patch written by another agent.', True)
2024-04-05 06:11:31 Invoked write_patch. Ending workflow.
2024-04-05 06:11:31 Task sympy__sympy-13480 completed successfully.
