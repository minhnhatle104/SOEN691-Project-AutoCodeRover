2024-04-05 04:15:14 ========== Running task sympy__sympy-21627 (relative counter in this run: 288/300) ==========
2024-04-05 04:15:15 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.9 ; python -m pip install -e . ; conda deactivate
2024-04-05 04:15:16 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.9 ; python -m pip install xmlrunner coverage pytest pytest-cov ; conda deactivate
2024-04-05 04:16:44 Running command: source /home/yuntong/miniconda3/etc/profile.d/conda.sh ; conda activate setup_sympy__sympy__1.9 ; python -m pytest --cov --cov-context=test --no-header -rA --tb=no -p no:cacheprovider sympy/functions/elementary/tests/test_complexes.py ; conda deactivate
2024-04-05 04:16:53 SBFL result (lines): [('sympy/core/add.py', 321, 322, 1.0), ('sympy/core/add.py', 732, 734, 1.0), ('sympy/core/add.py', 1079, 1087, 1.0), ('sympy/core/basic.py', 227, 230, 1.0), ('sympy/core/evalf.py', 520, 525, 1.0), ('sympy/core/evalf.py', 610, 617, 1.0), ('sympy/core/evalf.py', 641, 641, 1.0), ('sympy/core/evalf.py', 647, 652, 1.0), ('sympy/core/evalf.py', 654, 654, 1.0), ('sympy/core/evalf.py', 657, 658, 1.0), ('sympy/core/evalf.py', 660, 667, 1.0), ('sympy/core/evalf.py', 670, 670, 1.0), ('sympy/core/evalf.py', 672, 672, 1.0), ('sympy/core/evalf.py', 890, 892, 1.0), ('sympy/core/evalf.py', 894, 894, 1.0), ('sympy/core/evalf.py', 896, 896, 1.0), ('sympy/core/expr.py', 257, 257, 1.0), ('sympy/core/expr.py', 275, 275, 1.0), ('sympy/core/expr.py', 846, 853, 1.0), ('sympy/core/expr.py', 1889, 1892, 1.0), ('sympy/core/expr.py', 2228, 2231, 1.0), ('sympy/core/expr.py', 2233, 2235, 1.0), ('sympy/core/expr.py', 2478, 2484, 1.0), ('sympy/core/expr.py', 3543, 3544, 1.0), ('sympy/core/mul.py', 834, 840, 1.0), ('sympy/core/mul.py', 940, 942, 1.0), ('sympy/core/mul.py', 1403, 1406, 1.0), ('sympy/core/mul.py', 1457, 1460, 1.0), ('sympy/core/mul.py', 1550, 1553, 1.0), ('sympy/core/mul.py', 1555, 1560, 1.0), ('sympy/core/mul.py', 1562, 1565, 1.0), ('sympy/core/mul.py', 1568, 1569, 1.0), ('sympy/core/mul.py', 1574, 1575, 1.0), ('sympy/core/numbers.py', 720, 724, 1.0), ('sympy/core/numbers.py', 1777, 1780, 1.0), ('sympy/core/numbers.py', 1933, 1934, 1.0), ('sympy/core/numbers.py', 2325, 2325, 1.0), ('sympy/core/numbers.py', 2330, 2332, 1.0), ('sympy/core/numbers.py', 2761, 2761, 1.0), ('sympy/core/numbers.py', 2866, 2866, 1.0), ('sympy/core/numbers.py', 2870, 2870, 1.0), ('sympy/core/numbers.py', 2887, 2892, 1.0), ('sympy/core/numbers.py', 2898, 2901, 1.0), ('sympy/core/numbers.py', 2903, 2903, 1.0), ('sympy/core/numbers.py', 2905, 2905, 1.0), ('sympy/core/numbers.py', 3064, 3067, 1.0), ('sympy/core/numbers.py', 3069, 3069, 1.0), ('sympy/core/numbers.py', 3071, 3071, 1.0), ('sympy/core/numbers.py', 3985, 3985, 1.0), ('sympy/core/power.py', 593, 594, 1.0), ('sympy/core/power.py', 1503, 1506, 1.0), ('sympy/functions/elementary/complexes.py', 357, 359, 1.0), ('sympy/functions/elementary/complexes.py', 369, 371, 1.0), ('sympy/functions/elementary/complexes.py', 523, 524, 1.0), ('sympy/functions/elementary/complexes.py', 526, 526, 1.0), ('sympy/functions/elementary/complexes.py', 534, 539, 1.0), ('sympy/functions/elementary/complexes.py', 542, 545, 1.0), ('sympy/functions/elementary/complexes.py', 547, 554, 1.0), ('sympy/functions/elementary/complexes.py', 556, 556, 1.0), ('sympy/functions/elementary/complexes.py', 562, 574, 1.0), ('sympy/functions/elementary/complexes.py', 576, 584, 1.0), ('sympy/functions/elementary/complexes.py', 586, 593, 1.0), ('sympy/functions/elementary/complexes.py', 597, 606, 1.0), ('sympy/functions/elementary/complexes.py', 658, 663, 1.0), ('sympy/functions/elementary/complexes.py', 677, 679, 1.0), ('sympy/functions/elementary/complexes.py', 833, 833, 1.0), ('sympy/functions/elementary/exponential.py', 307, 309, 1.0), ('sympy/functions/elementary/exponential.py', 311, 311, 1.0), ('sympy/functions/elementary/exponential.py', 334, 339, 1.0), ('sympy/functions/elementary/exponential.py', 347, 347, 1.0), ('sympy/functions/elementary/exponential.py', 349, 354, 1.0), ('sympy/functions/elementary/exponential.py', 357, 359, 1.0), ('sympy/functions/elementary/exponential.py', 363, 363, 1.0), ('sympy/functions/elementary/exponential.py', 365, 367, 1.0), ('sympy/functions/elementary/exponential.py', 671, 672, 1.0), ('sympy/functions/elementary/exponential.py', 736, 740, 1.0), ('sympy/functions/elementary/exponential.py', 746, 746, 1.0), ('sympy/functions/elementary/exponential.py', 748, 750, 1.0), ('sympy/functions/elementary/exponential.py', 752, 770, 1.0), ('sympy/functions/elementary/exponential.py', 772, 772, 1.0), ('sympy/functions/elementary/exponential.py', 778, 778, 1.0), ('sympy/functions/elementary/exponential.py', 898, 906, 1.0), ('sympy/functions/elementary/exponential.py', 910, 910, 1.0), ('sympy/functions/elementary/exponential.py', 927, 928, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1250, 1250, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1252, 1252, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1266, 1266, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1295, 1295, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1297, 1297, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1299, 1299, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1302, 1302, 1.0), ('sympy/functions/elementary/hyperbolic.py', 1305, 1305, 1.0), ('sympy/functions/elementary/trigonometric.py', 2021, 2042, 1.0), ('sympy/functions/elementary/trigonometric.py', 2357, 2359, 1.0), ('sympy/functions/elementary/trigonometric.py', 2366, 2366, 1.0), ('sympy/functions/elementary/trigonometric.py', 2380, 2380, 1.0), ('sympy/functions/elementary/trigonometric.py', 2383, 2385, 1.0), ('sympy/functions/elementary/trigonometric.py', 2387, 2387, 1.0), ('sympy/functions/elementary/trigonometric.py', 2390, 2391, 1.0), ('sympy/functions/elementary/trigonometric.py', 2394, 2394, 1.0), ('sympy/functions/elementary/trigonometric.py', 2403, 2403, 1.0), ('sympy/functions/elementary/trigonometric.py', 2443, 2444, 1.0), ('sympy/functions/elementary/trigonometric.py', 2447, 2447, 1.0), ('sympy/functions/elementary/trigonometric.py', 2513, 2516, 1.0), ('sympy/functions/elementary/trigonometric.py', 2585, 2585, 1.0), ('sympy/ntheory/factor_.py', 314, 318, 1.0), ('sympy/ntheory/factor_.py', 332, 333, 1.0), ('sympy/ntheory/factor_.py', 935, 939, 1.0), ('sympy/ntheory/factor_.py', 944, 947, 1.0), ('sympy/ntheory/factor_.py', 949, 952, 1.0), ('sympy/ntheory/generate.py', 141, 142, 1.0), ('sympy/ntheory/generate.py', 190, 190, 1.0), ('sympy/ntheory/generate.py', 329, 329, 1.0), ('sympy/ntheory/generate.py', 340, 340, 1.0), ('sympy/ntheory/generate.py', 344, 346, 1.0), ('sympy/ntheory/generate.py', 590, 595, 1.0), ('sympy/ntheory/generate.py', 753, 755, 1.0), ('sympy/parsing/sympy_parser.py', 557, 558, 1.0), ('sympy/polys/euclidtools.py', 1238, 1239, 1.0), ('sympy/polys/euclidtools.py', 1241, 1241, 1.0), ('sympy/polys/factortools.py', 560, 561, 1.0), ('sympy/printing/str.py', 660, 660, 1.0), ('sympy/printing/str.py', 662, 662, 1.0), ('sympy/sets/sets.py', 919, 922, 1.0), ('sympy/sets/sets.py', 924, 925, 1.0), ('sympy/sets/sets.py', 931, 931, 1.0), ('sympy/sets/sets.py', 935, 935, 1.0), ('sympy/sets/sets.py', 937, 937, 1.0), ('sympy/sets/sets.py', 940, 940, 1.0), ('sympy/sets/sets.py', 942, 942, 1.0), ('sympy/sets/sets.py', 948, 948, 1.0), ('sympy/sets/sets.py', 950, 950, 1.0), ('sympy/sets/sets.py', 952, 952, 1.0), ('sympy/sets/sets.py', 955, 955, 1.0), ('sympy/simplify/cse_opts.py', 33, 35, 1.0), ('sympy/simplify/simplify.py', 1045, 1046, 1.0), ('sympy/simplify/simplify.py', 1048, 1055, 1.0), ('sympy/core/add.py', 53, 58, 0.7071067811865475), ('sympy/core/add.py', 62, 63, 0.7071067811865475), ('sympy/core/add.py', 65, 69, 0.7071067811865475), ('sympy/core/add.py', 318, 319, 0.7071067811865475), ('sympy/core/add.py', 724, 730, 0.7071067811865475), ('sympy/core/add.py', 916, 917, 0.7071067811865475), ('sympy/core/add.py', 1115, 1116, 0.7071067811865475), ('sympy/core/add.py', 1119, 1122, 0.7071067811865475), ('sympy/core/basic.py', 1610, 1612, 0.7071067811865475), ('sympy/core/basic.py', 1614, 1614, 0.7071067811865475), ('sympy/core/basic.py', 1616, 1620, 0.7071067811865475), ('sympy/core/basic.py', 1622, 1622, 0.7071067811865475), ('sympy/core/basic.py', 1628, 1630, 0.7071067811865475), ('sympy/core/basic.py', 1838, 1839, 0.7071067811865475), ('sympy/core/evalf.py', 176, 179, 0.7071067811865475), ('sympy/core/evalf.py', 181, 184, 0.7071067811865475), ('sympy/core/evalf.py', 212, 213, 0.7071067811865475), ('sympy/core/evalf.py', 215, 219, 0.7071067811865475), ('sympy/core/evalf.py', 503, 509, 0.7071067811865475), ('sympy/core/evalf.py', 545, 546, 0.7071067811865475), ('sympy/core/evalf.py', 548, 550, 0.7071067811865475), ('sympy/core/evalf.py', 553, 556, 0.7071067811865475), ('sympy/core/evalf.py', 716, 717, 0.7071067811865475), ('sympy/core/evalf.py', 719, 719, 0.7071067811865475), ('sympy/core/evalf.py', 722, 722, 0.7071067811865475), ('sympy/core/evalf.py', 725, 725, 0.7071067811865475), ('sympy/core/evalf.py', 728, 728, 0.7071067811865475), ('sympy/core/evalf.py', 752, 752, 0.7071067811865475), ('sympy/core/evalf.py', 754, 754, 0.7071067811865475), ('sympy/core/evalf.py', 758, 758, 0.7071067811865475), ('sympy/core/evalf.py', 764, 764, 0.7071067811865475), ('sympy/core/evalf.py', 768, 768, 0.7071067811865475), ('sympy/core/evalf.py', 773, 773, 0.7071067811865475), ('sympy/core/evalf.py', 1391, 1393, 0.7071067811865475), ('sympy/core/evalf.py', 1548, 1549, 0.7071067811865475), ('sympy/core/evalf.py', 1551, 1551, 0.7071067811865475), ('sympy/core/evalf.py', 1561, 1566, 0.7071067811865475), ('sympy/core/evalf.py', 1568, 1568, 0.7071067811865475), ('sympy/core/expr.py', 94, 95, 0.7071067811865475), ('sympy/core/expr.py', 101, 101, 0.7071067811865475), ('sympy/core/expr.py', 393, 394, 0.7071067811865475), ('sympy/core/expr.py', 396, 400, 0.7071067811865475), ('sympy/core/expr.py', 898, 904, 0.7071067811865475), ('sympy/core/expr.py', 1250, 1250, 0.7071067811865475), ('sympy/core/expr.py', 1575, 1578, 0.7071067811865475), ('sympy/core/expr.py', 1584, 1585, 0.7071067811865475), ('sympy/core/expr.py', 1657, 1657, 0.7071067811865475), ('sympy/core/expr.py', 1894, 1894, 0.7071067811865475), ('sympy/core/expr.py', 1899, 1899, 0.7071067811865475), ('sympy/core/expr.py', 1907, 1907, 0.7071067811865475), ('sympy/core/expr.py', 1912, 1914, 0.7071067811865475), ('sympy/core/expr.py', 1960, 1962, 0.7071067811865475), ('sympy/core/expr.py', 2084, 2084, 0.7071067811865475), ('sympy/core/expr.py', 2086, 2087, 0.7071067811865475), ('sympy/core/expr.py', 2089, 2089, 0.7071067811865475), ('sympy/core/expr.py', 2284, 2291, 0.7071067811865475), ('sympy/core/expr.py', 2293, 2293, 0.7071067811865475), ('sympy/core/expr.py', 3664, 3665, 0.7071067811865475), ('sympy/core/expr.py', 3714, 3715, 0.7071067811865475), ('sympy/core/exprtools.py', 352, 355, 0.7071067811865475), ('sympy/core/exprtools.py', 357, 357, 0.7071067811865475), ('sympy/core/exprtools.py', 359, 360, 0.7071067811865475), ('sympy/core/exprtools.py', 365, 365, 0.7071067811865475), ('sympy/core/exprtools.py', 367, 367, 0.7071067811865475), ('sympy/core/function.py', 140, 143, 0.7071067811865475), ('sympy/core/function.py', 145, 147, 0.7071067811865475), ('sympy/core/function.py', 538, 538, 0.7071067811865475), ('sympy/core/function.py', 540, 540, 0.7071067811865475), ('sympy/core/function.py', 544, 544, 0.7071067811865475), ('sympy/core/function.py', 549, 549, 0.7071067811865475), ('sympy/core/function.py', 551, 554, 0.7071067811865475), ('sympy/core/function.py', 559, 559, 0.7071067811865475), ('sympy/core/function.py', 573, 576, 0.7071067811865475), ('sympy/core/function.py', 584, 584, 0.7071067811865475), ('sympy/core/function.py', 587, 589, 0.7071067811865475), ('sympy/core/function.py', 593, 593, 0.7071067811865475), ('sympy/core/function.py', 598, 599, 0.7071067811865475), ('sympy/core/function.py', 601, 601, 0.7071067811865475), ('sympy/core/function.py', 2851, 2857, 0.7071067811865475), ('sympy/core/function.py', 3069, 3071, 0.7071067811865475), ('sympy/core/mul.py', 750, 752, 0.7071067811865475), ('sympy/core/mul.py', 1234, 1238, 0.7071067811865475), ('sympy/core/mul.py', 1288, 1292, 0.7071067811865475), ('sympy/core/mul.py', 1364, 1365, 0.7071067811865475), ('sympy/core/mul.py', 1429, 1432, 0.7071067811865475), ('sympy/core/mul.py', 1478, 1488, 0.7071067811865475), ('sympy/core/mul.py', 2072, 2076, 0.7071067811865475), ('sympy/core/mul.py', 2080, 2080, 0.7071067811865475), ('sympy/core/numbers.py', 461, 461, 0.7071067811865475), ('sympy/core/numbers.py', 464, 464, 0.7071067811865475), ('sympy/core/numbers.py', 466, 466, 0.7071067811865475), ('sympy/core/numbers.py', 469, 469, 0.7071067811865475), ('sympy/core/numbers.py', 472, 472, 0.7071067811865475), ('sympy/core/numbers.py', 474, 474, 0.7071067811865475), ('sympy/core/numbers.py', 477, 477, 0.7071067811865475), ('sympy/core/numbers.py', 479, 479, 0.7071067811865475), ('sympy/core/numbers.py', 481, 483, 0.7071067811865475), ('sympy/core/numbers.py', 485, 485, 0.7071067811865475), ('sympy/core/numbers.py', 717, 718, 0.7071067811865475), ('sympy/core/numbers.py', 748, 750, 0.7071067811865475), ('sympy/core/numbers.py', 752, 753, 0.7071067811865475), ('sympy/core/numbers.py', 755, 756, 0.7071067811865475), ('sympy/core/numbers.py', 1066, 1070, 0.7071067811865475), ('sympy/core/numbers.py', 1253, 1253, 0.7071067811865475), ('sympy/core/numbers.py', 1256, 1256, 0.7071067811865475), ('sympy/core/numbers.py', 1258, 1258, 0.7071067811865475), ('sympy/core/numbers.py', 1290, 1293, 0.7071067811865475), ('sympy/core/numbers.py', 1404, 1406, 0.7071067811865475), ('sympy/core/numbers.py', 1408, 1408, 0.7071067811865475), ('sympy/core/numbers.py', 1411, 1411, 0.7071067811865475), ('sympy/core/numbers.py', 1429, 1434, 0.7071067811865475), ('sympy/core/numbers.py', 2355, 2358, 0.7071067811865475), ('sympy/core/numbers.py', 3025, 3025, 0.7071067811865475), ('sympy/core/numbers.py', 3028, 3028, 0.7071067811865475), ('sympy/core/numbers.py', 3041, 3042, 0.7071067811865475), ('sympy/core/numbers.py', 3044, 3044, 0.7071067811865475), ('sympy/core/numbers.py', 3053, 3054, 0.7071067811865475), ('sympy/core/numbers.py', 3056, 3057, 0.7071067811865475), ('sympy/core/numbers.py', 3078, 3078, 0.7071067811865475), ('sympy/core/numbers.py', 3955, 3955, 0.7071067811865475), ('sympy/core/power.py', 89, 94, 0.7071067811865475), ('sympy/core/power.py', 98, 99, 0.7071067811865475), ('sympy/core/power.py', 107, 107, 0.7071067811865475), ('sympy/core/power.py', 116, 116, 0.7071067811865475), ('sympy/core/power.py', 118, 119, 0.7071067811865475), ('sympy/core/power.py', 122, 122, 0.7071067811865475), ('sympy/core/power.py', 125, 125, 0.7071067811865475), ('sympy/core/power.py', 310, 314, 0.7071067811865475), ('sympy/core/power.py', 602, 602, 0.7071067811865475), ('sympy/core/power.py', 605, 607, 0.7071067811865475), ('sympy/core/power.py', 617, 620, 0.7071067811865475), ('sympy/core/power.py', 986, 988, 0.7071067811865475), ('sympy/core/power.py', 992, 992, 0.7071067811865475), ('sympy/core/power.py', 997, 997, 0.7071067811865475), ('sympy/core/power.py', 1003, 1006, 0.7071067811865475), ('sympy/core/power.py', 1118, 1120, 0.7071067811865475), ('sympy/core/power.py', 1128, 1130, 0.7071067811865475), ('sympy/core/power.py', 1132, 1133, 0.7071067811865475), ('sympy/core/power.py', 1203, 1203, 0.7071067811865475), ('sympy/core/power.py', 1209, 1211, 0.7071067811865475), ('sympy/core/power.py', 1214, 1214, 0.7071067811865475), ('sympy/core/power.py', 1226, 1226, 0.7071067811865475), ('sympy/core/power.py', 1229, 1229, 0.7071067811865475), ('sympy/core/power.py', 1242, 1242, 0.7071067811865475), ('sympy/core/power.py', 1332, 1333, 0.7071067811865475), ('sympy/core/power.py', 1337, 1340, 0.7071067811865475), ('sympy/core/power.py', 1344, 1344, 0.7071067811865475), ('sympy/core/symbol.py', 419, 420, 0.7071067811865475), ('sympy/core/sympify.py', 443, 443, 0.7071067811865475), ('sympy/core/sympify.py', 458, 458, 0.7071067811865475), ('sympy/core/sympify.py', 460, 461, 0.7071067811865475), ('sympy/core/sympify.py', 463, 463, 0.7071067811865475), ('sympy/core/sympify.py', 465, 465, 0.7071067811865475), ('sympy/core/sympify.py', 467, 468, 0.7071067811865475), ('sympy/core/sympify.py', 470, 472, 0.7071067811865475), ('sympy/core/sympify.py', 476, 476, 0.7071067811865475), ('sympy/external/pythonmpq.py', 74, 77, 0.7071067811865475), ('sympy/external/pythonmpq.py', 97, 100, 0.7071067811865475), ('sympy/external/pythonmpq.py', 123, 123, 0.7071067811865475), ('sympy/external/pythonmpq.py', 127, 131, 0.7071067811865475), ('sympy/external/pythonmpq.py', 133, 133, 0.7071067811865475), ('sympy/external/pythonmpq.py', 216, 216, 0.7071067811865475), ('sympy/external/pythonmpq.py', 220, 220, 0.7071067811865475), ('sympy/external/pythonmpq.py', 231, 236, 0.7071067811865475), ('sympy/external/pythonmpq.py', 238, 241, 0.7071067811865475), ('sympy/external/pythonmpq.py', 249, 249, 0.7071067811865475), ('sympy/external/pythonmpq.py', 253, 256, 0.7071067811865475), ('sympy/external/pythonmpq.py', 262, 262, 0.7071067811865475), ('sympy/external/pythonmpq.py', 274, 274, 0.7071067811865475), ('sympy/external/pythonmpq.py', 278, 278, 0.7071067811865475), ('sympy/external/pythonmpq.py', 293, 302, 0.7071067811865475), ('sympy/external/pythonmpq.py', 306, 306, 0.7071067811865475), ('sympy/external/pythonmpq.py', 329, 338, 0.7071067811865475), ('sympy/external/pythonmpq.py', 342, 342, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 87, 91, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 112, 112, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 235, 235, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 336, 341, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 343, 343, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 346, 346, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 558, 560, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 628, 629, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 643, 644, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 647, 648, 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 651, 652, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 342, 343, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 668, 669, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 704, 705, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 707, 707, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 709, 709, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 719, 720, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 722, 722, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 724, 726, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 732, 733, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 913, 915, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 917, 917, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 923, 925, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 937, 938, 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 947, 947, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 2568, 2571, 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 2582, 2582, 0.7071067811865475), ('sympy/logic/boolalg.py', 406, 406, 0.7071067811865475), ('sympy/ntheory/factor_.py', 501, 502, 0.7071067811865475), ('sympy/ntheory/factor_.py', 515, 515, 0.7071067811865475), ('sympy/ntheory/factor_.py', 519, 519, 0.7071067811865475), ('sympy/ntheory/factor_.py', 1247, 1250, 0.7071067811865475), ('sympy/ntheory/multinomial.py', 21, 27, 0.7071067811865475), ('sympy/ntheory/multinomial.py', 103, 111, 0.7071067811865475), ('sympy/ntheory/multinomial.py', 119, 126, 0.7071067811865475), ('sympy/ntheory/primetest.py', 541, 542, 0.7071067811865475), ('sympy/ntheory/primetest.py', 550, 555, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 542, 543, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 545, 550, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 552, 553, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 555, 555, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 560, 560, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 563, 563, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 571, 575, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 577, 581, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 584, 584, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 586, 586, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 588, 588, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 597, 600, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 602, 602, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 626, 626, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 628, 628, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 633, 636, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 644, 644, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 646, 646, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 648, 648, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 650, 652, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 657, 660, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 663, 663, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 665, 665, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 667, 667, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 677, 677, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 679, 679, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 683, 685, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 697, 698, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 700, 700, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 702, 702, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 706, 706, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 708, 708, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 710, 710, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 712, 712, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 758, 758, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 769, 769, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 771, 772, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 790, 790, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 792, 792, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 894, 897, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 899, 900, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 902, 902, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 911, 913, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 986, 987, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 991, 993, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 997, 999, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1002, 1003, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1007, 1007, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1011, 1011, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1013, 1013, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1016, 1017, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1019, 1019, 0.7071067811865475), ('sympy/parsing/sympy_parser.py', 1021, 1021, 0.7071067811865475), ('sympy/polys/constructor.py', 29, 29, 0.7071067811865475), ('sympy/polys/constructor.py', 37, 38, 0.7071067811865475), ('sympy/polys/constructor.py', 51, 51, 0.7071067811865475), ('sympy/polys/constructor.py', 58, 58, 0.7071067811865475), ('sympy/polys/constructor.py', 137, 137, 0.7071067811865475), ('sympy/polys/constructor.py', 139, 140, 0.7071067811865475), ('sympy/polys/constructor.py', 142, 143, 0.7071067811865475), ('sympy/polys/constructor.py', 145, 146, 0.7071067811865475), ('sympy/polys/constructor.py', 149, 150, 0.7071067811865475), ('sympy/polys/constructor.py', 153, 153, 0.7071067811865475), ('sympy/polys/constructor.py', 155, 156, 0.7071067811865475), ('sympy/polys/constructor.py', 158, 158, 0.7071067811865475), ('sympy/polys/constructor.py', 161, 161, 0.7071067811865475), ('sympy/polys/constructor.py', 163, 164, 0.7071067811865475), ('sympy/polys/constructor.py', 166, 167, 0.7071067811865475), ('sympy/polys/constructor.py', 169, 169, 0.7071067811865475), ('sympy/polys/constructor.py', 172, 172, 0.7071067811865475), ('sympy/polys/constructor.py', 174, 175, 0.7071067811865475), ('sympy/polys/constructor.py', 179, 179, 0.7071067811865475), ('sympy/polys/constructor.py', 181, 183, 0.7071067811865475), ('sympy/polys/constructor.py', 185, 188, 0.7071067811865475), ('sympy/polys/constructor.py', 194, 195, 0.7071067811865475), ('sympy/polys/constructor.py', 197, 199, 0.7071067811865475), ('sympy/polys/constructor.py', 219, 219, 0.7071067811865475), ('sympy/polys/constructor.py', 221, 221, 0.7071067811865475), ('sympy/polys/constructor.py', 223, 223, 0.7071067811865475), ('sympy/polys/constructor.py', 225, 225, 0.7071067811865475), ('sympy/polys/constructor.py', 230, 230, 0.7071067811865475), ('sympy/polys/constructor.py', 233, 233, 0.7071067811865475), ('sympy/polys/constructor.py', 235, 235, 0.7071067811865475), ('sympy/polys/constructor.py', 237, 238, 0.7071067811865475), ('sympy/polys/constructor.py', 240, 242, 0.7071067811865475), ('sympy/polys/constructor.py', 244, 244, 0.7071067811865475), ('sympy/polys/constructor.py', 257, 257, 0.7071067811865475), ('sympy/polys/constructor.py', 362, 362, 0.7071067811865475), ('sympy/polys/constructor.py', 375, 375, 0.7071067811865475), ('sympy/polys/constructor.py', 378, 378, 0.7071067811865475), ('sympy/polys/constructor.py', 380, 381, 0.7071067811865475), ('sympy/polys/constructor.py', 389, 389, 0.7071067811865475), ('sympy/polys/densearith.py', 28, 28, 0.7071067811865475), ('sympy/polys/densearith.py', 31, 32, 0.7071067811865475), ('sympy/polys/densearith.py', 34, 34, 0.7071067811865475), ('sympy/polys/densearith.py', 37, 38, 0.7071067811865475), ('sympy/polys/densearith.py', 40, 40, 0.7071067811865475), ('sympy/polys/densearith.py', 154, 154, 0.7071067811865475), ('sympy/polys/densearith.py', 157, 157, 0.7071067811865475), ('sympy/polys/densearith.py', 174, 174, 0.7071067811865475), ('sympy/polys/densearith.py', 177, 177, 0.7071067811865475), ('sympy/polys/densearith.py', 179, 181, 0.7071067811865475), ('sympy/polys/densearith.py', 184, 184, 0.7071067811865475), ('sympy/polys/densearith.py', 269, 270, 0.7071067811865475), ('sympy/polys/densearith.py', 272, 272, 0.7071067811865475), ('sympy/polys/densearith.py', 317, 318, 0.7071067811865475), ('sympy/polys/densearith.py', 449, 449, 0.7071067811865475), ('sympy/polys/densearith.py', 488, 488, 0.7071067811865475), ('sympy/polys/densearith.py', 505, 506, 0.7071067811865475), ('sympy/polys/densearith.py', 527, 530, 0.7071067811865475), ('sympy/polys/densearith.py', 532, 533, 0.7071067811865475), ('sympy/polys/densearith.py', 535, 536, 0.7071067811865475), ('sympy/polys/densearith.py', 538, 538, 0.7071067811865475), ('sympy/polys/densearith.py', 540, 541, 0.7071067811865475), ('sympy/polys/densearith.py', 543, 543, 0.7071067811865475), ('sympy/polys/densearith.py', 545, 545, 0.7071067811865475), ('sympy/polys/densearith.py', 604, 607, 0.7071067811865475), ('sympy/polys/densearith.py', 609, 610, 0.7071067811865475), ('sympy/polys/densearith.py', 612, 613, 0.7071067811865475), ('sympy/polys/densearith.py', 615, 615, 0.7071067811865475), ('sympy/polys/densearith.py', 617, 618, 0.7071067811865475), ('sympy/polys/densearith.py', 620, 620, 0.7071067811865475), ('sympy/polys/densearith.py', 622, 622, 0.7071067811865475), ('sympy/polys/densearith.py', 639, 640, 0.7071067811865475), ('sympy/polys/densearith.py', 642, 642, 0.7071067811865475), ('sympy/polys/densearith.py', 644, 644, 0.7071067811865475), ('sympy/polys/densearith.py', 647, 647, 0.7071067811865475), ('sympy/polys/densearith.py', 649, 649, 0.7071067811865475), ('sympy/polys/densearith.py', 652, 652, 0.7071067811865475), ('sympy/polys/densearith.py', 654, 655, 0.7071067811865475), ('sympy/polys/densearith.py', 715, 715, 0.7071067811865475), ('sympy/polys/densearith.py', 749, 750, 0.7071067811865475), ('sympy/polys/densearith.py', 752, 753, 0.7071067811865475), ('sympy/polys/densearith.py', 755, 756, 0.7071067811865475), ('sympy/polys/densearith.py', 758, 758, 0.7071067811865475), ('sympy/polys/densearith.py', 760, 761, 0.7071067811865475), ('sympy/polys/densearith.py', 763, 764, 0.7071067811865475), ('sympy/polys/densearith.py', 766, 767, 0.7071067811865475), ('sympy/polys/densearith.py', 769, 769, 0.7071067811865475), ('sympy/polys/densearith.py', 771, 771, 0.7071067811865475), ('sympy/polys/densearith.py', 806, 807, 0.7071067811865475), ('sympy/polys/densearith.py', 849, 849, 0.7071067811865475), ('sympy/polys/densearith.py', 851, 852, 0.7071067811865475), ('sympy/polys/densearith.py', 854, 855, 0.7071067811865475), ('sympy/polys/densearith.py', 857, 857, 0.7071067811865475), ('sympy/polys/densearith.py', 859, 859, 0.7071067811865475), ('sympy/polys/densearith.py', 861, 862, 0.7071067811865475), ('sympy/polys/densearith.py', 864, 864, 0.7071067811865475), ('sympy/polys/densearith.py', 866, 868, 0.7071067811865475), ('sympy/polys/densearith.py', 870, 870, 0.7071067811865475), ('sympy/polys/densearith.py', 872, 872, 0.7071067811865475), ('sympy/polys/densearith.py', 937, 939, 0.7071067811865475), ('sympy/polys/densearith.py', 941, 942, 0.7071067811865475), ('sympy/polys/densearith.py', 944, 944, 0.7071067811865475), ('sympy/polys/densearith.py', 947, 947, 0.7071067811865475), ('sympy/polys/densearith.py', 949, 950, 0.7071067811865475), ('sympy/polys/densearith.py', 952, 953, 0.7071067811865475), ('sympy/polys/densearith.py', 955, 955, 0.7071067811865475), ('sympy/polys/densearith.py', 957, 957, 0.7071067811865475), ('sympy/polys/densearith.py', 974, 975, 0.7071067811865475), ('sympy/polys/densearith.py', 1067, 1068, 0.7071067811865475), ('sympy/polys/densearith.py', 1070, 1070, 0.7071067811865475), ('sympy/polys/densearith.py', 1072, 1072, 0.7071067811865475), ('sympy/polys/densearith.py', 1074, 1074, 0.7071067811865475), ('sympy/polys/densearith.py', 1077, 1078, 0.7071067811865475), ('sympy/polys/densearith.py', 1081, 1082, 0.7071067811865475), ('sympy/polys/densearith.py', 1084, 1086, 0.7071067811865475), ('sympy/polys/densearith.py', 1088, 1088, 0.7071067811865475), ('sympy/polys/densearith.py', 1090, 1092, 0.7071067811865475), ('sympy/polys/densearith.py', 1095, 1095, 0.7071067811865475), ('sympy/polys/densearith.py', 1216, 1216, 0.7071067811865475), ('sympy/polys/densearith.py', 1219, 1220, 0.7071067811865475), ('sympy/polys/densearith.py', 1222, 1222, 0.7071067811865475), ('sympy/polys/densearith.py', 1225, 1225, 0.7071067811865475), ('sympy/polys/densearith.py', 1227, 1227, 0.7071067811865475), ('sympy/polys/densearith.py', 1230, 1231, 0.7071067811865475), ('sympy/polys/densearith.py', 1234, 1235, 0.7071067811865475), ('sympy/polys/densearith.py', 1237, 1239, 0.7071067811865475), ('sympy/polys/densearith.py', 1241, 1241, 0.7071067811865475), ('sympy/polys/densearith.py', 1243, 1245, 0.7071067811865475), ('sympy/polys/densearith.py', 1248, 1248, 0.7071067811865475), ('sympy/polys/densearith.py', 1250, 1250, 0.7071067811865475), ('sympy/polys/densearith.py', 1322, 1323, 0.7071067811865475), ('sympy/polys/densearith.py', 1325, 1325, 0.7071067811865475), ('sympy/polys/densearith.py', 1327, 1327, 0.7071067811865475), ('sympy/polys/densearith.py', 1329, 1330, 0.7071067811865475), ('sympy/polys/densearith.py', 1332, 1332, 0.7071067811865475), ('sympy/polys/densearith.py', 1335, 1335, 0.7071067811865475), ('sympy/polys/densearith.py', 1337, 1338, 0.7071067811865475), ('sympy/polys/densearith.py', 1340, 1341, 0.7071067811865475), ('sympy/polys/densearith.py', 1343, 1345, 0.7071067811865475), ('sympy/polys/densearith.py', 1347, 1347, 0.7071067811865475), ('sympy/polys/densearith.py', 1349, 1351, 0.7071067811865475), ('sympy/polys/densearith.py', 1354, 1354, 0.7071067811865475), ('sympy/polys/densearith.py', 1371, 1372, 0.7071067811865475), ('sympy/polys/densearith.py', 1533, 1533, 0.7071067811865475), ('sympy/polys/densearith.py', 1536, 1536, 0.7071067811865475), ('sympy/polys/densearith.py', 1578, 1578, 0.7071067811865475), ('sympy/polys/densearith.py', 1626, 1626, 0.7071067811865475), ('sympy/polys/densearith.py', 1629, 1629, 0.7071067811865475), ('sympy/polys/densearith.py', 1671, 1671, 0.7071067811865475), ('sympy/polys/densearith.py', 1719, 1719, 0.7071067811865475), ('sympy/polys/densearith.py', 1722, 1722, 0.7071067811865475), ('sympy/polys/densearith.py', 1761, 1761, 0.7071067811865475), ('sympy/polys/densearith.py', 1764, 1764, 0.7071067811865475), ('sympy/polys/densebasic.py', 152, 154, 0.7071067811865475), ('sympy/polys/densebasic.py', 178, 179, 0.7071067811865475), ('sympy/polys/densebasic.py', 270, 272, 0.7071067811865475), ('sympy/polys/densebasic.py', 292, 292, 0.7071067811865475), ('sympy/polys/densebasic.py', 295, 296, 0.7071067811865475), ('sympy/polys/densebasic.py', 298, 298, 0.7071067811865475), ('sympy/polys/densebasic.py', 300, 302, 0.7071067811865475), ('sympy/polys/densebasic.py', 304, 304, 0.7071067811865475), ('sympy/polys/densebasic.py', 306, 306, 0.7071067811865475), ('sympy/polys/densebasic.py', 309, 309, 0.7071067811865475), ('sympy/polys/densebasic.py', 535, 535, 0.7071067811865475), ('sympy/polys/densebasic.py', 538, 538, 0.7071067811865475), ('sympy/polys/densebasic.py', 710, 712, 0.7071067811865475), ('sympy/polys/densebasic.py', 714, 715, 0.7071067811865475), ('sympy/polys/densebasic.py', 733, 733, 0.7071067811865475), ('sympy/polys/densebasic.py', 735, 735, 0.7071067811865475), ('sympy/polys/densebasic.py', 738, 738, 0.7071067811865475), ('sympy/polys/densebasic.py', 820, 820, 0.7071067811865475), ('sympy/polys/densebasic.py', 823, 824, 0.7071067811865475), ('sympy/polys/densebasic.py', 826, 826, 0.7071067811865475), ('sympy/polys/densebasic.py', 845, 846, 0.7071067811865475), ('sympy/polys/densebasic.py', 848, 848, 0.7071067811865475), ('sympy/polys/densebasic.py', 851, 851, 0.7071067811865475), ('sympy/polys/densebasic.py', 991, 993, 0.7071067811865475), ('sympy/polys/densebasic.py', 996, 996, 0.7071067811865475), ('sympy/polys/densebasic.py', 998, 999, 0.7071067811865475), ('sympy/polys/densebasic.py', 1001, 1001, 0.7071067811865475), ('sympy/polys/densebasic.py', 1004, 1004, 0.7071067811865475), ('sympy/polys/densebasic.py', 1006, 1006, 0.7071067811865475), ('sympy/polys/densebasic.py', 1008, 1009, 0.7071067811865475), ('sympy/polys/densebasic.py', 1011, 1012, 0.7071067811865475), ('sympy/polys/densebasic.py', 1014, 1014, 0.7071067811865475), ('sympy/polys/densebasic.py', 1016, 1016, 0.7071067811865475), ('sympy/polys/densebasic.py', 1647, 1648, 0.7071067811865475), ('sympy/polys/densetools.py', 154, 154, 0.7071067811865475), ('sympy/polys/densetools.py', 157, 157, 0.7071067811865475), ('sympy/polys/densetools.py', 159, 159, 0.7071067811865475), ('sympy/polys/densetools.py', 162, 162, 0.7071067811865475), ('sympy/polys/densetools.py', 164, 167, 0.7071067811865475), ('sympy/polys/densetools.py', 178, 178, 0.7071067811865475), ('sympy/polys/densetools.py', 276, 276, 0.7071067811865475), ('sympy/polys/densetools.py', 279, 279, 0.7071067811865475), ('sympy/polys/densetools.py', 281, 283, 0.7071067811865475), ('sympy/polys/densetools.py', 285, 285, 0.7071067811865475), ('sympy/polys/densetools.py', 446, 447, 0.7071067811865475), ('sympy/polys/densetools.py', 449, 450, 0.7071067811865475), ('sympy/polys/densetools.py', 452, 453, 0.7071067811865475), ('sympy/polys/densetools.py', 455, 455, 0.7071067811865475), ('sympy/polys/densetools.py', 459, 459, 0.7071067811865475), ('sympy/polys/densetools.py', 600, 602, 0.7071067811865475), ('sympy/polys/densetools.py', 741, 742, 0.7071067811865475), ('sympy/polys/densetools.py', 744, 744, 0.7071067811865475), ('sympy/polys/densetools.py', 746, 746, 0.7071067811865475), ('sympy/polys/densetools.py', 750, 750, 0.7071067811865475), ('sympy/polys/densetools.py', 1187, 1187, 0.7071067811865475), ('sympy/polys/densetools.py', 1193, 1193, 0.7071067811865475), ('sympy/polys/densetools.py', 1195, 1196, 0.7071067811865475), ('sympy/polys/densetools.py', 1198, 1198, 0.7071067811865475), ('sympy/polys/densetools.py', 1201, 1202, 0.7071067811865475), ('sympy/polys/domains/domain.py', 383, 383, 0.7071067811865475), ('sympy/polys/domains/domain.py', 394, 395, 0.7071067811865475), ('sympy/polys/domains/domain.py', 399, 399, 0.7071067811865475), ('sympy/polys/domains/domain.py', 401, 402, 0.7071067811865475), ('sympy/polys/domains/domain.py', 404, 405, 0.7071067811865475), ('sympy/polys/domains/domain.py', 414, 415, 0.7071067811865475), ('sympy/polys/domains/domain.py', 422, 423, 0.7071067811865475), ('sympy/polys/domains/domain.py', 670, 670, 0.7071067811865475), ('sympy/polys/domains/domain.py', 673, 673, 0.7071067811865475), ('sympy/polys/domains/domain.py', 692, 693, 0.7071067811865475), ('sympy/polys/domains/domain.py', 695, 696, 0.7071067811865475), ('sympy/polys/domains/domain.py', 853, 854, 0.7071067811865475), ('sympy/polys/domains/domain.py', 917, 917, 0.7071067811865475), ('sympy/polys/domains/field.py', 61, 62, 0.7071067811865475), ('sympy/polys/domains/field.py', 66, 67, 0.7071067811865475), ('sympy/polys/domains/field.py', 69, 69, 0.7071067811865475), ('sympy/polys/domains/integerring.py', 170, 171, 0.7071067811865475), ('sympy/polys/domains/integerring.py', 204, 205, 0.7071067811865475), ('sympy/polys/domains/integerring.py', 208, 208, 0.7071067811865475), ('sympy/polys/domains/integerring.py', 216, 216, 0.7071067811865475), ('sympy/polys/domains/integerring.py', 220, 220, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 20, 20, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 22, 22, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 25, 25, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 27, 28, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 30, 33, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 36, 37, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 41, 41, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 44, 44, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 48, 48, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 52, 52, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 66, 68, 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 83, 83, 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 50, 51, 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 55, 55, 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 59, 60, 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 103, 103, 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 140, 140, 0.7071067811865475), ('sympy/polys/domains/ring.py', 21, 21, 0.7071067811865475), ('sympy/polys/domains/ring.py', 24, 24, 0.7071067811865475), ('sympy/polys/domains/ring.py', 40, 40, 0.7071067811865475), ('sympy/polys/domains/ring.py', 42, 43, 0.7071067811865475), ('sympy/polys/euclidtools.py', 337, 338, 0.7071067811865475), ('sympy/polys/euclidtools.py', 340, 340, 0.7071067811865475), ('sympy/polys/euclidtools.py', 344, 344, 0.7071067811865475), ('sympy/polys/euclidtools.py', 347, 347, 0.7071067811865475), ('sympy/polys/euclidtools.py', 350, 351, 0.7071067811865475), ('sympy/polys/euclidtools.py', 353, 353, 0.7071067811865475), ('sympy/polys/euclidtools.py', 355, 356, 0.7071067811865475), ('sympy/polys/euclidtools.py', 358, 359, 0.7071067811865475), ('sympy/polys/euclidtools.py', 362, 363, 0.7071067811865475), ('sympy/polys/euclidtools.py', 365, 367, 0.7071067811865475), ('sympy/polys/euclidtools.py', 369, 369, 0.7071067811865475), ('sympy/polys/euclidtools.py', 371, 371, 0.7071067811865475), ('sympy/polys/euclidtools.py', 373, 374, 0.7071067811865475), ('sympy/polys/euclidtools.py', 376, 376, 0.7071067811865475), ('sympy/polys/euclidtools.py', 378, 378, 0.7071067811865475), ('sympy/polys/euclidtools.py', 382, 382, 0.7071067811865475), ('sympy/polys/euclidtools.py', 384, 384, 0.7071067811865475), ('sympy/polys/euclidtools.py', 386, 386, 0.7071067811865475), ('sympy/polys/euclidtools.py', 420, 420, 0.7071067811865475), ('sympy/polys/euclidtools.py', 423, 423, 0.7071067811865475), ('sympy/polys/euclidtools.py', 425, 425, 0.7071067811865475), ('sympy/polys/euclidtools.py', 428, 428, 0.7071067811865475), ('sympy/polys/euclidtools.py', 445, 445, 0.7071067811865475), ('sympy/polys/euclidtools.py', 447, 447, 0.7071067811865475), ('sympy/polys/euclidtools.py', 473, 473, 0.7071067811865475), ('sympy/polys/euclidtools.py', 476, 477, 0.7071067811865475), ('sympy/polys/euclidtools.py', 479, 479, 0.7071067811865475), ('sympy/polys/euclidtools.py', 483, 483, 0.7071067811865475), ('sympy/polys/euclidtools.py', 486, 487, 0.7071067811865475), ('sympy/polys/euclidtools.py', 490, 491, 0.7071067811865475), ('sympy/polys/euclidtools.py', 493, 493, 0.7071067811865475), ('sympy/polys/euclidtools.py', 495, 496, 0.7071067811865475), ('sympy/polys/euclidtools.py', 498, 499, 0.7071067811865475), ('sympy/polys/euclidtools.py', 501, 502, 0.7071067811865475), ('sympy/polys/euclidtools.py', 504, 506, 0.7071067811865475), ('sympy/polys/euclidtools.py', 508, 508, 0.7071067811865475), ('sympy/polys/euclidtools.py', 510, 511, 0.7071067811865475), ('sympy/polys/euclidtools.py', 513, 514, 0.7071067811865475), ('sympy/polys/euclidtools.py', 516, 516, 0.7071067811865475), ('sympy/polys/euclidtools.py', 518, 518, 0.7071067811865475), ('sympy/polys/euclidtools.py', 523, 523, 0.7071067811865475), ('sympy/polys/euclidtools.py', 525, 525, 0.7071067811865475), ('sympy/polys/euclidtools.py', 527, 527, 0.7071067811865475), ('sympy/polys/euclidtools.py', 579, 579, 0.7071067811865475), ('sympy/polys/euclidtools.py', 582, 582, 0.7071067811865475), ('sympy/polys/euclidtools.py', 585, 585, 0.7071067811865475), ('sympy/polys/euclidtools.py', 587, 587, 0.7071067811865475), ('sympy/polys/euclidtools.py', 590, 590, 0.7071067811865475), ('sympy/polys/euclidtools.py', 786, 787, 0.7071067811865475), ('sympy/polys/euclidtools.py', 789, 789, 0.7071067811865475), ('sympy/polys/euclidtools.py', 792, 792, 0.7071067811865475), ('sympy/polys/euclidtools.py', 796, 796, 0.7071067811865475), ('sympy/polys/euclidtools.py', 799, 799, 0.7071067811865475), ('sympy/polys/euclidtools.py', 862, 862, 0.7071067811865475), ('sympy/polys/euclidtools.py', 864, 864, 0.7071067811865475), ('sympy/polys/euclidtools.py', 869, 869, 0.7071067811865475), ('sympy/polys/euclidtools.py', 875, 875, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1130, 1130, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1132, 1133, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1135, 1136, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1138, 1139, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1141, 1141, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1179, 1179, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1181, 1181, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1184, 1185, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1187, 1187, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1189, 1189, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1192, 1193, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1195, 1195, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1197, 1199, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1201, 1203, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1205, 1206, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1208, 1209, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1211, 1212, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1214, 1214, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1216, 1217, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1219, 1221, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1223, 1223, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1225, 1225, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1227, 1227, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1234, 1234, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1236, 1236, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1245, 1245, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1489, 1489, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1505, 1505, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1514, 1516, 0.7071067811865475), ('sympy/polys/euclidtools.py', 1604, 1604, 0.7071067811865475), ('sympy/polys/factortools.py', 84, 84, 0.7071067811865475), ('sympy/polys/factortools.py', 86, 87, 0.7071067811865475), ('sympy/polys/factortools.py', 90, 90, 0.7071067811865475), ('sympy/polys/factortools.py', 92, 93, 0.7071067811865475), ('sympy/polys/factortools.py', 97, 97, 0.7071067811865475), ('sympy/polys/factortools.py', 99, 99, 0.7071067811865475), ('sympy/polys/factortools.py', 222, 222, 0.7071067811865475), ('sympy/polys/factortools.py', 224, 225, 0.7071067811865475), ('sympy/polys/factortools.py', 227, 227, 0.7071067811865475), ('sympy/polys/factortools.py', 229, 230, 0.7071067811865475), ('sympy/polys/factortools.py', 232, 234, 0.7071067811865475), ('sympy/polys/factortools.py', 236, 237, 0.7071067811865475), ('sympy/polys/factortools.py', 239, 239, 0.7071067811865475), ('sympy/polys/factortools.py', 241, 242, 0.7071067811865475), ('sympy/polys/factortools.py', 244, 246, 0.7071067811865475), ('sympy/polys/factortools.py', 248, 248, 0.7071067811865475), ('sympy/polys/factortools.py', 274, 275, 0.7071067811865475), ('sympy/polys/factortools.py', 277, 279, 0.7071067811865475), ('sympy/polys/factortools.py', 281, 283, 0.7071067811865475), ('sympy/polys/factortools.py', 285, 285, 0.7071067811865475), ('sympy/polys/factortools.py', 287, 288, 0.7071067811865475), ('sympy/polys/factortools.py', 290, 290, 0.7071067811865475), ('sympy/polys/factortools.py', 292, 293, 0.7071067811865475), ('sympy/polys/factortools.py', 295, 295, 0.7071067811865475), ('sympy/polys/factortools.py', 297, 300, 0.7071067811865475), ('sympy/polys/factortools.py', 302, 303, 0.7071067811865475), ('sympy/polys/factortools.py', 305, 306, 0.7071067811865475), ('sympy/polys/factortools.py', 309, 311, 0.7071067811865475), ('sympy/polys/factortools.py', 313, 313, 0.7071067811865475), ('sympy/polys/factortools.py', 317, 317, 0.7071067811865475), ('sympy/polys/factortools.py', 319, 319, 0.7071067811865475), ('sympy/polys/factortools.py', 322, 329, 0.7071067811865475), ('sympy/polys/factortools.py', 333, 334, 0.7071067811865475), ('sympy/polys/factortools.py', 337, 337, 0.7071067811865475), ('sympy/polys/factortools.py', 339, 339, 0.7071067811865475), ('sympy/polys/factortools.py', 341, 347, 0.7071067811865475), ('sympy/polys/factortools.py', 349, 349, 0.7071067811865475), ('sympy/polys/factortools.py', 351, 351, 0.7071067811865475), ('sympy/polys/factortools.py', 353, 353, 0.7071067811865475), ('sympy/polys/factortools.py', 355, 358, 0.7071067811865475), ('sympy/polys/factortools.py', 360, 361, 0.7071067811865475), ('sympy/polys/factortools.py', 366, 372, 0.7071067811865475), ('sympy/polys/factortools.py', 383, 385, 0.7071067811865475), ('sympy/polys/factortools.py', 387, 391, 0.7071067811865475), ('sympy/polys/factortools.py', 393, 394, 0.7071067811865475), ('sympy/polys/factortools.py', 396, 396, 0.7071067811865475), ('sympy/polys/factortools.py', 398, 399, 0.7071067811865475), ('sympy/polys/factortools.py', 401, 403, 0.7071067811865475), ('sympy/polys/factortools.py', 405, 406, 0.7071067811865475), ('sympy/polys/factortools.py', 408, 409, 0.7071067811865475), ('sympy/polys/factortools.py', 411, 411, 0.7071067811865475), ('sympy/polys/factortools.py', 413, 413, 0.7071067811865475), ('sympy/polys/factortools.py', 415, 415, 0.7071067811865475), ('sympy/polys/factortools.py', 552, 552, 0.7071067811865475), ('sympy/polys/factortools.py', 554, 554, 0.7071067811865475), ('sympy/polys/factortools.py', 557, 558, 0.7071067811865475), ('sympy/polys/factortools.py', 657, 658, 0.7071067811865475), ('sympy/polys/factortools.py', 662, 662, 0.7071067811865475), ('sympy/polys/factortools.py', 665, 665, 0.7071067811865475), ('sympy/polys/factortools.py', 669, 670, 0.7071067811865475), ('sympy/polys/factortools.py', 672, 673, 0.7071067811865475), ('sympy/polys/factortools.py', 675, 676, 0.7071067811865475), ('sympy/polys/factortools.py', 678, 679, 0.7071067811865475), ('sympy/polys/factortools.py', 1321, 1322, 0.7071067811865475), ('sympy/polys/factortools.py', 1324, 1325, 0.7071067811865475), ('sympy/polys/factortools.py', 1343, 1345, 0.7071067811865475), ('sympy/polys/factortools.py', 1347, 1348, 0.7071067811865475), ('sympy/polys/factortools.py', 1350, 1350, 0.7071067811865475), ('sympy/polys/galoistools.py', 127, 128, 0.7071067811865475), ('sympy/polys/galoistools.py', 130, 130, 0.7071067811865475), ('sympy/polys/galoistools.py', 148, 148, 0.7071067811865475), ('sympy/polys/galoistools.py', 205, 206, 0.7071067811865475), ('sympy/polys/galoistools.py', 208, 208, 0.7071067811865475), ('sympy/polys/galoistools.py', 210, 212, 0.7071067811865475), ('sympy/polys/galoistools.py', 214, 214, 0.7071067811865475), ('sympy/polys/galoistools.py', 216, 216, 0.7071067811865475), ('sympy/polys/galoistools.py', 232, 232, 0.7071067811865475), ('sympy/polys/galoistools.py', 322, 322, 0.7071067811865475), ('sympy/polys/galoistools.py', 341, 342, 0.7071067811865475), ('sympy/polys/galoistools.py', 361, 361, 0.7071067811865475), ('sympy/polys/galoistools.py', 406, 406, 0.7071067811865475), ('sympy/polys/galoistools.py', 409, 409, 0.7071067811865475), ('sympy/polys/galoistools.py', 411, 412, 0.7071067811865475), ('sympy/polys/galoistools.py', 414, 415, 0.7071067811865475), ('sympy/polys/galoistools.py', 417, 417, 0.7071067811865475), ('sympy/polys/galoistools.py', 434, 435, 0.7071067811865475), ('sympy/polys/galoistools.py', 437, 437, 0.7071067811865475), ('sympy/polys/galoistools.py', 454, 454, 0.7071067811865475), ('sympy/polys/galoistools.py', 471, 471, 0.7071067811865475), ('sympy/polys/galoistools.py', 473, 474, 0.7071067811865475), ('sympy/polys/galoistools.py', 476, 477, 0.7071067811865475), ('sympy/polys/galoistools.py', 479, 480, 0.7071067811865475), ('sympy/polys/galoistools.py', 482, 482, 0.7071067811865475), ('sympy/polys/galoistools.py', 484, 485, 0.7071067811865475), ('sympy/polys/galoistools.py', 487, 487, 0.7071067811865475), ('sympy/polys/galoistools.py', 489, 489, 0.7071067811865475), ('sympy/polys/galoistools.py', 506, 509, 0.7071067811865475), ('sympy/polys/galoistools.py', 511, 512, 0.7071067811865475), ('sympy/polys/galoistools.py', 514, 515, 0.7071067811865475), ('sympy/polys/galoistools.py', 517, 517, 0.7071067811865475), ('sympy/polys/galoistools.py', 519, 520, 0.7071067811865475), ('sympy/polys/galoistools.py', 522, 522, 0.7071067811865475), ('sympy/polys/galoistools.py', 524, 524, 0.7071067811865475), ('sympy/polys/galoistools.py', 541, 542, 0.7071067811865475), ('sympy/polys/galoistools.py', 544, 545, 0.7071067811865475), ('sympy/polys/galoistools.py', 547, 548, 0.7071067811865475), ('sympy/polys/galoistools.py', 550, 551, 0.7071067811865475), ('sympy/polys/galoistools.py', 553, 553, 0.7071067811865475), ('sympy/polys/galoistools.py', 555, 555, 0.7071067811865475), ('sympy/polys/galoistools.py', 572, 572, 0.7071067811865475), ('sympy/polys/galoistools.py', 574, 575, 0.7071067811865475), ('sympy/polys/galoistools.py', 577, 578, 0.7071067811865475), ('sympy/polys/galoistools.py', 580, 581, 0.7071067811865475), ('sympy/polys/galoistools.py', 583, 583, 0.7071067811865475), ('sympy/polys/galoistools.py', 585, 585, 0.7071067811865475), ('sympy/polys/galoistools.py', 587, 588, 0.7071067811865475), ('sympy/polys/galoistools.py', 590, 590, 0.7071067811865475), ('sympy/polys/galoistools.py', 592, 594, 0.7071067811865475), ('sympy/polys/galoistools.py', 596, 596, 0.7071067811865475), ('sympy/polys/galoistools.py', 598, 598, 0.7071067811865475), ('sympy/polys/galoistools.py', 630, 630, 0.7071067811865475), ('sympy/polys/galoistools.py', 689, 690, 0.7071067811865475), ('sympy/polys/galoistools.py', 692, 692, 0.7071067811865475), ('sympy/polys/galoistools.py', 694, 695, 0.7071067811865475), ('sympy/polys/galoistools.py', 697, 697, 0.7071067811865475), ('sympy/polys/galoistools.py', 699, 699, 0.7071067811865475), ('sympy/polys/galoistools.py', 701, 702, 0.7071067811865475), ('sympy/polys/galoistools.py', 704, 705, 0.7071067811865475), ('sympy/polys/galoistools.py', 707, 708, 0.7071067811865475), ('sympy/polys/galoistools.py', 710, 710, 0.7071067811865475), ('sympy/polys/galoistools.py', 712, 712, 0.7071067811865475), ('sympy/polys/galoistools.py', 729, 729, 0.7071067811865475), ('sympy/polys/galoistools.py', 748, 749, 0.7071067811865475), ('sympy/polys/galoistools.py', 751, 751, 0.7071067811865475), ('sympy/polys/galoistools.py', 753, 753, 0.7071067811865475), ('sympy/polys/galoistools.py', 756, 756, 0.7071067811865475), ('sympy/polys/galoistools.py', 758, 758, 0.7071067811865475), ('sympy/polys/galoistools.py', 760, 761, 0.7071067811865475), ('sympy/polys/galoistools.py', 763, 764, 0.7071067811865475), ('sympy/polys/galoistools.py', 766, 766, 0.7071067811865475), ('sympy/polys/galoistools.py', 768, 768, 0.7071067811865475), ('sympy/polys/galoistools.py', 812, 812, 0.7071067811865475), ('sympy/polys/galoistools.py', 815, 815, 0.7071067811865475), ('sympy/polys/galoistools.py', 890, 903, 0.7071067811865475), ('sympy/polys/galoistools.py', 905, 905, 0.7071067811865475), ('sympy/polys/galoistools.py', 932, 933, 0.7071067811865475), ('sympy/polys/galoistools.py', 935, 935, 0.7071067811865475), ('sympy/polys/galoistools.py', 937, 942, 0.7071067811865475), ('sympy/polys/galoistools.py', 950, 956, 0.7071067811865475), ('sympy/polys/galoistools.py', 958, 959, 0.7071067811865475), ('sympy/polys/galoistools.py', 984, 984, 0.7071067811865475), ('sympy/polys/galoistools.py', 986, 986, 0.7071067811865475), ('sympy/polys/galoistools.py', 988, 989, 0.7071067811865475), ('sympy/polys/galoistools.py', 991, 991, 0.7071067811865475), ('sympy/polys/galoistools.py', 994, 997, 0.7071067811865475), ('sympy/polys/galoistools.py', 999, 999, 0.7071067811865475), ('sympy/polys/galoistools.py', 1001, 1002, 0.7071067811865475), ('sympy/polys/galoistools.py', 1004, 1005, 0.7071067811865475), ('sympy/polys/galoistools.py', 1007, 1007, 0.7071067811865475), ('sympy/polys/galoistools.py', 1024, 1025, 0.7071067811865475), ('sympy/polys/galoistools.py', 1027, 1027, 0.7071067811865475), ('sympy/polys/galoistools.py', 1109, 1109, 0.7071067811865475), ('sympy/polys/galoistools.py', 1112, 1113, 0.7071067811865475), ('sympy/polys/galoistools.py', 1115, 1115, 0.7071067811865475), ('sympy/polys/galoistools.py', 1117, 1117, 0.7071067811865475), ('sympy/polys/galoistools.py', 1120, 1121, 0.7071067811865475), ('sympy/polys/galoistools.py', 1124, 1124, 0.7071067811865475), ('sympy/polys/galoistools.py', 1126, 1127, 0.7071067811865475), ('sympy/polys/galoistools.py', 1129, 1129, 0.7071067811865475), ('sympy/polys/galoistools.py', 1131, 1131, 0.7071067811865475), ('sympy/polys/galoistools.py', 1133, 1134, 0.7071067811865475), ('sympy/polys/galoistools.py', 1136, 1137, 0.7071067811865475), ('sympy/polys/galoistools.py', 1139, 1139, 0.7071067811865475), ('sympy/polys/galoistools.py', 1156, 1156, 0.7071067811865475), ('sympy/polys/galoistools.py', 1159, 1159, 0.7071067811865475), ('sympy/polys/galoistools.py', 1161, 1162, 0.7071067811865475), ('sympy/polys/galoistools.py', 1164, 1164, 0.7071067811865475), ('sympy/polys/galoistools.py', 1181, 1181, 0.7071067811865475), ('sympy/polys/galoistools.py', 1183, 1183, 0.7071067811865475), ('sympy/polys/galoistools.py', 1185, 1187, 0.7071067811865475), ('sympy/polys/galoistools.py', 1189, 1190, 0.7071067811865475), ('sympy/polys/galoistools.py', 1192, 1192, 0.7071067811865475), ('sympy/polys/galoistools.py', 1194, 1194, 0.7071067811865475), ('sympy/polys/galoistools.py', 1376, 1376, 0.7071067811865475), ('sympy/polys/galoistools.py', 1532, 1532, 0.7071067811865475), ('sympy/polys/galoistools.py', 1534, 1534, 0.7071067811865475), ('sympy/polys/galoistools.py', 1537, 1537, 0.7071067811865475), ('sympy/polys/galoistools.py', 1834, 1834, 0.7071067811865475), ('sympy/polys/galoistools.py', 1836, 1839, 0.7071067811865475), ('sympy/polys/galoistools.py', 1841, 1842, 0.7071067811865475), ('sympy/polys/galoistools.py', 1844, 1846, 0.7071067811865475), ('sympy/polys/galoistools.py', 1848, 1848, 0.7071067811865475), ('sympy/polys/galoistools.py', 1850, 1851, 0.7071067811865475), ('sympy/polys/galoistools.py', 1853, 1853, 0.7071067811865475), ('sympy/polys/galoistools.py', 1881, 1881, 0.7071067811865475), ('sympy/polys/galoistools.py', 1883, 1884, 0.7071067811865475), ('sympy/polys/galoistools.py', 1886, 1888, 0.7071067811865475), ('sympy/polys/galoistools.py', 1890, 1891, 0.7071067811865475), ('sympy/polys/galoistools.py', 1893, 1893, 0.7071067811865475), ('sympy/polys/galoistools.py', 1902, 1903, 0.7071067811865475), ('sympy/polys/galoistools.py', 1905, 1907, 0.7071067811865475), ('sympy/polys/galoistools.py', 1909, 1909, 0.7071067811865475), ('sympy/polys/galoistools.py', 2065, 2065, 0.7071067811865475), ('sympy/polys/galoistools.py', 2067, 2068, 0.7071067811865475), ('sympy/polys/galoistools.py', 2070, 2070, 0.7071067811865475), ('sympy/polys/galoistools.py', 2115, 2115, 0.7071067811865475), ('sympy/polys/galoistools.py', 2117, 2117, 0.7071067811865475), ('sympy/polys/galoistools.py', 2120, 2120, 0.7071067811865475), ('sympy/polys/galoistools.py', 2122, 2123, 0.7071067811865475), ('sympy/polys/galoistools.py', 2127, 2127, 0.7071067811865475), ('sympy/polys/monomials.py', 204, 204, 0.7071067811865475), ('sympy/polys/monomials.py', 358, 358, 0.7071067811865475), ('sympy/polys/monomials.py', 360, 362, 0.7071067811865475), ('sympy/polys/monomials.py', 364, 364, 0.7071067811865475), ('sympy/polys/monomials.py', 403, 403, 0.7071067811865475), ('sympy/polys/monomials.py', 406, 408, 0.7071067811865475), ('sympy/polys/monomials.py', 411, 411, 0.7071067811865475), ('sympy/polys/monomials.py', 414, 415, 0.7071067811865475), ('sympy/polys/monomials.py', 421, 425, 0.7071067811865475), ('sympy/polys/monomials.py', 428, 429, 0.7071067811865475), ('sympy/polys/monomials.py', 434, 437, 0.7071067811865475), ('sympy/polys/monomials.py', 440, 441, 0.7071067811865475), ('sympy/polys/monomials.py', 447, 451, 0.7071067811865475), ('sympy/polys/monomials.py', 454, 455, 0.7071067811865475), ('sympy/polys/monomials.py', 461, 465, 0.7071067811865475), ('sympy/polys/monomials.py', 468, 469, 0.7071067811865475), ('sympy/polys/monomials.py', 476, 481, 0.7071067811865475), ('sympy/polys/monomials.py', 484, 485, 0.7071067811865475), ('sympy/polys/monomials.py', 491, 495, 0.7071067811865475), ('sympy/polys/monomials.py', 498, 499, 0.7071067811865475), ('sympy/polys/monomials.py', 505, 509, 0.7071067811865475), ('sympy/polys/numberfields.py', 53, 53, 0.7071067811865475), ('sympy/polys/numberfields.py', 55, 58, 0.7071067811865475), ('sympy/polys/numberfields.py', 60, 63, 0.7071067811865475), ('sympy/polys/numberfields.py', 66, 67, 0.7071067811865475), ('sympy/polys/numberfields.py', 70, 71, 0.7071067811865475), ('sympy/polys/numberfields.py', 75, 76, 0.7071067811865475), ('sympy/polys/numberfields.py', 80, 80, 0.7071067811865475), ('sympy/polys/numberfields.py', 86, 89, 0.7071067811865475), ('sympy/polys/numberfields.py', 91, 91, 0.7071067811865475), ('sympy/polys/numberfields.py', 123, 125, 0.7071067811865475), ('sympy/polys/numberfields.py', 127, 133, 0.7071067811865475), ('sympy/polys/numberfields.py', 139, 142, 0.7071067811865475), ('sympy/polys/numberfields.py', 144, 154, 0.7071067811865475), ('sympy/polys/numberfields.py', 156, 160, 0.7071067811865475), ('sympy/polys/numberfields.py', 254, 258, 0.7071067811865475), ('sympy/polys/numberfields.py', 260, 260, 0.7071067811865475), ('sympy/polys/numberfields.py', 262, 262, 0.7071067811865475), ('sympy/polys/numberfields.py', 264, 267, 0.7071067811865475), ('sympy/polys/numberfields.py', 273, 274, 0.7071067811865475), ('sympy/polys/numberfields.py', 278, 279, 0.7071067811865475), ('sympy/polys/numberfields.py', 281, 282, 0.7071067811865475), ('sympy/polys/numberfields.py', 284, 286, 0.7071067811865475), ('sympy/polys/numberfields.py', 289, 289, 0.7071067811865475), ('sympy/polys/numberfields.py', 291, 294, 0.7071067811865475), ('sympy/polys/numberfields.py', 312, 312, 0.7071067811865475), ('sympy/polys/numberfields.py', 314, 316, 0.7071067811865475), ('sympy/polys/numberfields.py', 349, 352, 0.7071067811865475), ('sympy/polys/numberfields.py', 354, 354, 0.7071067811865475), ('sympy/polys/numberfields.py', 363, 369, 0.7071067811865475), ('sympy/polys/numberfields.py', 376, 381, 0.7071067811865475), ('sympy/polys/numberfields.py', 553, 555, 0.7071067811865475), ('sympy/polys/numberfields.py', 559, 559, 0.7071067811865475), ('sympy/polys/numberfields.py', 566, 566, 0.7071067811865475), ('sympy/polys/numberfields.py', 574, 574, 0.7071067811865475), ('sympy/polys/numberfields.py', 577, 577, 0.7071067811865475), ('sympy/polys/numberfields.py', 579, 579, 0.7071067811865475), ('sympy/polys/numberfields.py', 581, 583, 0.7071067811865475), ('sympy/polys/numberfields.py', 585, 585, 0.7071067811865475), ('sympy/polys/numberfields.py', 587, 601, 0.7071067811865475), ('sympy/polys/numberfields.py', 607, 609, 0.7071067811865475), ('sympy/polys/numberfields.py', 612, 613, 0.7071067811865475), ('sympy/polys/numberfields.py', 626, 626, 0.7071067811865475), ('sympy/polys/numberfields.py', 683, 685, 0.7071067811865475), ('sympy/polys/numberfields.py', 687, 688, 0.7071067811865475), ('sympy/polys/numberfields.py', 690, 692, 0.7071067811865475), ('sympy/polys/numberfields.py', 696, 697, 0.7071067811865475), ('sympy/polys/numberfields.py', 699, 699, 0.7071067811865475), ('sympy/polys/numberfields.py', 701, 702, 0.7071067811865475), ('sympy/polys/numberfields.py', 705, 706, 0.7071067811865475), ('sympy/polys/numberfields.py', 710, 714, 0.7071067811865475), ('sympy/polys/numberfields.py', 716, 716, 0.7071067811865475), ('sympy/polys/orderings.py', 31, 31, 0.7071067811865475), ('sympy/polys/polyclasses.py', 203, 205, 0.7071067811865475), ('sympy/polys/polyclasses.py', 207, 207, 0.7071067811865475), ('sympy/polys/polyclasses.py', 296, 297, 0.7071067811865475), ('sympy/polys/polyclasses.py', 663, 664, 0.7071067811865475), ('sympy/polys/polyclasses.py', 667, 667, 0.7071067811865475), ('sympy/polys/polyconfig.py', 49, 49, 0.7071067811865475), ('sympy/polys/polyerrors.py', 153, 153, 0.7071067811865475), ('sympy/polys/polyerrors.py', 159, 160, 0.7071067811865475), ('sympy/polys/polyerrors.py', 162, 163, 0.7071067811865475), ('sympy/polys/polyoptions.py', 219, 220, 0.7071067811865475), ('sympy/polys/polyoptions.py', 363, 363, 0.7071067811865475), ('sympy/polys/polyoptions.py', 391, 391, 0.7071067811865475), ('sympy/polys/polyoptions.py', 774, 776, 0.7071067811865475), ('sympy/polys/polytools.py', 454, 454, 0.7071067811865475), ('sympy/polys/polytools.py', 456, 456, 0.7071067811865475), ('sympy/polys/polytools.py', 462, 463, 0.7071067811865475), ('sympy/polys/polytools.py', 465, 465, 0.7071067811865475), ('sympy/polys/polytools.py', 467, 467, 0.7071067811865475), ('sympy/polys/polytools.py', 476, 476, 0.7071067811865475), ('sympy/polys/polytools.py', 478, 478, 0.7071067811865475), ('sympy/polys/polytools.py', 487, 487, 0.7071067811865475), ('sympy/polys/polytools.py', 491, 491, 0.7071067811865475), ('sympy/polys/polytools.py', 493, 495, 0.7071067811865475), ('sympy/polys/polytools.py', 497, 498, 0.7071067811865475), ('sympy/polys/polytools.py', 500, 500, 0.7071067811865475), ('sympy/polys/polytools.py', 502, 502, 0.7071067811865475), ('sympy/polys/polytools.py', 1067, 1068, 0.7071067811865475), ('sympy/polys/polytools.py', 1844, 1845, 0.7071067811865475), ('sympy/polys/polytools.py', 2671, 2671, 0.7071067811865475), ('sympy/polys/polytools.py', 2673, 2674, 0.7071067811865475), ('sympy/polys/polytools.py', 2677, 2677, 0.7071067811865475), ('sympy/polys/polytools.py', 2681, 2681, 0.7071067811865475), ('sympy/polys/polytools.py', 2683, 2683, 0.7071067811865475), ('sympy/polys/polytools.py', 4292, 4293, 0.7071067811865475), ('sympy/polys/polytools.py', 4298, 4298, 0.7071067811865475), ('sympy/polys/polytools.py', 4300, 4300, 0.7071067811865475), ('sympy/polys/polytools.py', 4302, 4302, 0.7071067811865475), ('sympy/polys/polytools.py', 4312, 4313, 0.7071067811865475), ('sympy/polys/polytools.py', 4315, 4316, 0.7071067811865475), ('sympy/polys/polytools.py', 4319, 4320, 0.7071067811865475), ('sympy/polys/polytools.py', 4322, 4323, 0.7071067811865475), ('sympy/polys/polytools.py', 4327, 4328, 0.7071067811865475), ('sympy/polys/polytools.py', 4330, 4331, 0.7071067811865475), ('sympy/polys/polytools.py', 4333, 4333, 0.7071067811865475), ('sympy/polys/polytools.py', 4339, 4340, 0.7071067811865475), ('sympy/polys/polytools.py', 4345, 4345, 0.7071067811865475), ('sympy/polys/polytools.py', 4347, 4348, 0.7071067811865475), ('sympy/polys/polytools.py', 4350, 4350, 0.7071067811865475), ('sympy/polys/polytools.py', 4364, 4365, 0.7071067811865475), ('sympy/polys/polytools.py', 4367, 4367, 0.7071067811865475), ('sympy/polys/polytools.py', 4369, 4370, 0.7071067811865475), ('sympy/polys/polytools.py', 4372, 4373, 0.7071067811865475), ('sympy/polys/polytools.py', 4376, 4376, 0.7071067811865475), ('sympy/polys/polytools.py', 4378, 4379, 0.7071067811865475), ('sympy/polys/polytools.py', 4383, 4383, 0.7071067811865475), ('sympy/polys/polytools.py', 4385, 4385, 0.7071067811865475), ('sympy/polys/polytools.py', 4388, 4388, 0.7071067811865475), ('sympy/polys/polytools.py', 4393, 4395, 0.7071067811865475), ('sympy/polys/polytools.py', 4397, 4398, 0.7071067811865475), ('sympy/polys/polytools.py', 4401, 4401, 0.7071067811865475), ('sympy/polys/polytools.py', 4403, 4404, 0.7071067811865475), ('sympy/polys/polytools.py', 4406, 4407, 0.7071067811865475), ('sympy/polys/polytools.py', 4409, 4410, 0.7071067811865475), ('sympy/polys/polytools.py', 4412, 4412, 0.7071067811865475), ('sympy/polys/polytools.py', 4414, 4414, 0.7071067811865475), ('sympy/polys/polytools.py', 4416, 4417, 0.7071067811865475), ('sympy/polys/polytools.py', 4421, 4423, 0.7071067811865475), ('sympy/polys/polytools.py', 4425, 4425, 0.7071067811865475), ('sympy/polys/polytools.py', 4427, 4430, 0.7071067811865475), ('sympy/polys/polytools.py', 4432, 4433, 0.7071067811865475), ('sympy/polys/polytools.py', 4435, 4435, 0.7071067811865475), ('sympy/polys/polytools.py', 4475, 4479, 0.7071067811865475), ('sympy/polys/polytools.py', 4481, 4483, 0.7071067811865475), ('sympy/polys/polytools.py', 4486, 4486, 0.7071067811865475), ('sympy/polys/polytools.py', 4488, 4488, 0.7071067811865475), ('sympy/polys/polytools.py', 4491, 4492, 0.7071067811865475), ('sympy/polys/polytools.py', 4495, 4495, 0.7071067811865475), ('sympy/polys/polytools.py', 4497, 4497, 0.7071067811865475), ('sympy/polys/polytools.py', 4503, 4504, 0.7071067811865475), ('sympy/polys/polytools.py', 5102, 5102, 0.7071067811865475), ('sympy/polys/polytools.py', 5104, 5105, 0.7071067811865475), ('sympy/polys/polytools.py', 5109, 5109, 0.7071067811865475), ('sympy/polys/polytools.py', 5112, 5112, 0.7071067811865475), ('sympy/polys/polytools.py', 5114, 5115, 0.7071067811865475), ('sympy/polys/polytools.py', 5117, 5117, 0.7071067811865475), ('sympy/polys/polytools.py', 5295, 5295, 0.7071067811865475), ('sympy/polys/polytools.py', 5300, 5300, 0.7071067811865475), ('sympy/polys/polytools.py', 5303, 5303, 0.7071067811865475), ('sympy/polys/polytools.py', 5305, 5306, 0.7071067811865475), ('sympy/polys/polytools.py', 5316, 5317, 0.7071067811865475), ('sympy/polys/polytools.py', 5319, 5320, 0.7071067811865475), ('sympy/polys/polytools.py', 5425, 5425, 0.7071067811865475), ('sympy/polys/polytools.py', 5430, 5430, 0.7071067811865475), ('sympy/polys/polytools.py', 5433, 5433, 0.7071067811865475), ('sympy/polys/polytools.py', 5435, 5436, 0.7071067811865475), ('sympy/polys/polytools.py', 5445, 5446, 0.7071067811865475), ('sympy/polys/polytools.py', 5448, 5449, 0.7071067811865475), ('sympy/polys/polytools.py', 6669, 6672, 0.7071067811865475), ('sympy/polys/polytools.py', 6674, 6676, 0.7071067811865475), ('sympy/polys/polytools.py', 6679, 6681, 0.7071067811865475), ('sympy/polys/polyutils.py', 94, 97, 0.7071067811865475), ('sympy/polys/polyutils.py', 99, 99, 0.7071067811865475), ('sympy/polys/polyutils.py', 111, 112, 0.7071067811865475), ('sympy/polys/polyutils.py', 114, 115, 0.7071067811865475), ('sympy/polys/polyutils.py', 160, 161, 0.7071067811865475), ('sympy/polys/polyutils.py', 166, 166, 0.7071067811865475), ('sympy/polys/polyutils.py', 211, 214, 0.7071067811865475), ('sympy/polys/polyutils.py', 239, 241, 0.7071067811865475), ('sympy/polys/polyutils.py', 319, 320, 0.7071067811865475), ('sympy/polys/polyutils.py', 325, 326, 0.7071067811865475), ('sympy/polys/polyutils.py', 328, 328, 0.7071067811865475), ('sympy/polys/polyutils.py', 331, 332, 0.7071067811865475), ('sympy/polys/polyutils.py', 334, 334, 0.7071067811865475), ('sympy/polys/polyutils.py', 336, 336, 0.7071067811865475), ('sympy/polys/polyutils.py', 341, 342, 0.7071067811865475), ('sympy/polys/polyutils.py', 350, 352, 0.7071067811865475), ('sympy/polys/ring_series.py', 78, 87, 0.7071067811865475), ('sympy/polys/ring_series.py', 91, 94, 0.7071067811865475), ('sympy/polys/ring_series.py', 140, 142, 0.7071067811865475), ('sympy/polys/ring_series.py', 144, 144, 0.7071067811865475), ('sympy/polys/ring_series.py', 146, 146, 0.7071067811865475), ('sympy/polys/ring_series.py', 230, 232, 0.7071067811865475), ('sympy/polys/ring_series.py', 234, 235, 0.7071067811865475), ('sympy/polys/ring_series.py', 237, 247, 0.7071067811865475), ('sympy/polys/ring_series.py', 249, 249, 0.7071067811865475), ('sympy/polys/ring_series.py', 260, 261, 0.7071067811865475), ('sympy/polys/ring_series.py', 440, 447, 0.7071067811865475), ('sympy/polys/ring_series.py', 449, 449, 0.7071067811865475), ('sympy/polys/ring_series.py', 458, 466, 0.7071067811865475), ('sympy/polys/ring_series.py', 468, 468, 0.7071067811865475), ('sympy/polys/ring_series.py', 495, 495, 0.7071067811865475), ('sympy/polys/ring_series.py', 497, 499, 0.7071067811865475), ('sympy/polys/ring_series.py', 503, 504, 0.7071067811865475), ('sympy/polys/ring_series.py', 506, 506, 0.7071067811865475), ('sympy/polys/ring_series.py', 508, 508, 0.7071067811865475), ('sympy/polys/ring_series.py', 511, 512, 0.7071067811865475), ('sympy/polys/ring_series.py', 514, 514, 0.7071067811865475), ('sympy/polys/ring_series.py', 516, 516, 0.7071067811865475), ('sympy/polys/ring_series.py', 518, 522, 0.7071067811865475), ('sympy/polys/ring_series.py', 542, 543, 0.7071067811865475), ('sympy/polys/ring_series.py', 545, 548, 0.7071067811865475), ('sympy/polys/ring_series.py', 551, 551, 0.7071067811865475), ('sympy/polys/ring_series.py', 554, 554, 0.7071067811865475), ('sympy/polys/ring_series.py', 557, 558, 0.7071067811865475), ('sympy/polys/ring_series.py', 560, 560, 0.7071067811865475), ('sympy/polys/ring_series.py', 684, 686, 0.7071067811865475), ('sympy/polys/ring_series.py', 693, 702, 0.7071067811865475), ('sympy/polys/ring_series.py', 711, 734, 0.7071067811865475), ('sympy/polys/ring_series.py', 788, 793, 0.7071067811865475), ('sympy/polys/ring_series.py', 795, 798, 0.7071067811865475), ('sympy/polys/ring_series.py', 1120, 1120, 0.7071067811865475), ('sympy/polys/ring_series.py', 1122, 1124, 0.7071067811865475), ('sympy/polys/ring_series.py', 1150, 1150, 0.7071067811865475), ('sympy/polys/ring_series.py', 1152, 1158, 0.7071067811865475), ('sympy/polys/ring_series.py', 1160, 1161, 0.7071067811865475), ('sympy/polys/ring_series.py', 1765, 1770, 0.7071067811865475), ('sympy/polys/ring_series.py', 1790, 1791, 0.7071067811865475), ('sympy/polys/ring_series.py', 1793, 1796, 0.7071067811865475), ('sympy/polys/ring_series.py', 1798, 1800, 0.7071067811865475), ('sympy/polys/ring_series.py', 1826, 1840, 0.7071067811865475), ('sympy/polys/ring_series.py', 1848, 1850, 0.7071067811865475), ('sympy/polys/rings.py', 63, 64, 0.7071067811865475), ('sympy/polys/rings.py', 183, 185, 0.7071067811865475), ('sympy/polys/rings.py', 187, 188, 0.7071067811865475), ('sympy/polys/rings.py', 190, 191, 0.7071067811865475), ('sympy/polys/rings.py', 201, 204, 0.7071067811865475), ('sympy/polys/rings.py', 206, 207, 0.7071067811865475), ('sympy/polys/rings.py', 209, 210, 0.7071067811865475), ('sympy/polys/rings.py', 213, 220, 0.7071067811865475), ('sympy/polys/rings.py', 222, 224, 0.7071067811865475), ('sympy/polys/rings.py', 226, 226, 0.7071067811865475), ('sympy/polys/rings.py', 228, 228, 0.7071067811865475), ('sympy/polys/rings.py', 230, 237, 0.7071067811865475), ('sympy/polys/rings.py', 249, 250, 0.7071067811865475), ('sympy/polys/rings.py', 254, 256, 0.7071067811865475), ('sympy/polys/rings.py', 258, 259, 0.7071067811865475), ('sympy/polys/rings.py', 261, 261, 0.7071067811865475), ('sympy/polys/rings.py', 263, 263, 0.7071067811865475), ('sympy/polys/rings.py', 267, 274, 0.7071067811865475), ('sympy/polys/rings.py', 290, 290, 0.7071067811865475), ('sympy/polys/rings.py', 293, 295, 0.7071067811865475), ('sympy/polys/rings.py', 298, 298, 0.7071067811865475), ('sympy/polys/rings.py', 305, 307, 0.7071067811865475), ('sympy/polys/rings.py', 311, 311, 0.7071067811865475), ('sympy/polys/rings.py', 315, 315, 0.7071067811865475), ('sympy/polys/rings.py', 318, 318, 0.7071067811865475), ('sympy/polys/rings.py', 321, 321, 0.7071067811865475), ('sympy/polys/rings.py', 324, 328, 0.7071067811865475), ('sympy/polys/rings.py', 331, 331, 0.7071067811865475), ('sympy/polys/rings.py', 338, 338, 0.7071067811865475), ('sympy/polys/rings.py', 340, 342, 0.7071067811865475), ('sympy/polys/rings.py', 347, 347, 0.7071067811865475), ('sympy/polys/rings.py', 350, 350, 0.7071067811865475), ('sympy/polys/rings.py', 355, 356, 0.7071067811865475), ('sympy/polys/rings.py', 358, 361, 0.7071067811865475), ('sympy/polys/rings.py', 363, 363, 0.7071067811865475), ('sympy/polys/rings.py', 402, 404, 0.7071067811865475), ('sympy/polys/rings.py', 407, 407, 0.7071067811865475), ('sympy/polys/rings.py', 416, 418, 0.7071067811865475), ('sympy/polys/rings.py', 429, 429, 0.7071067811865475), ('sympy/polys/rings.py', 557, 557, 0.7071067811865475), ('sympy/polys/rings.py', 573, 576, 0.7071067811865475), ('sympy/polys/rings.py', 604, 604, 0.7071067811865475), ('sympy/polys/rings.py', 616, 616, 0.7071067811865475), ('sympy/polys/rings.py', 619, 619, 0.7071067811865475), ('sympy/polys/rings.py', 621, 621, 0.7071067811865475), ('sympy/polys/rings.py', 624, 625, 0.7071067811865475), ('sympy/polys/rings.py', 646, 648, 0.7071067811865475), ('sympy/polys/rings.py', 667, 669, 0.7071067811865475), ('sympy/polys/rings.py', 671, 671, 0.7071067811865475), ('sympy/polys/rings.py', 674, 674, 0.7071067811865475), ('sympy/polys/rings.py', 677, 677, 0.7071067811865475), ('sympy/polys/rings.py', 842, 842, 0.7071067811865475), ('sympy/polys/rings.py', 908, 908, 0.7071067811865475), ('sympy/polys/rings.py', 927, 937, 0.7071067811865475), ('sympy/polys/rings.py', 939, 941, 0.7071067811865475), ('sympy/polys/rings.py', 949, 950, 0.7071067811865475), ('sympy/polys/rings.py', 954, 955, 0.7071067811865475), ('sympy/polys/rings.py', 957, 959, 0.7071067811865475), ('sympy/polys/rings.py', 961, 962, 0.7071067811865475), ('sympy/polys/rings.py', 965, 965, 0.7071067811865475), ('sympy/polys/rings.py', 1003, 1013, 0.7071067811865475), ('sympy/polys/rings.py', 1015, 1017, 0.7071067811865475), ('sympy/polys/rings.py', 1025, 1026, 0.7071067811865475), ('sympy/polys/rings.py', 1030, 1032, 0.7071067811865475), ('sympy/polys/rings.py', 1035, 1036, 0.7071067811865475), ('sympy/polys/rings.py', 1039, 1039, 0.7071067811865475), ('sympy/polys/rings.py', 1056, 1058, 0.7071067811865475), ('sympy/polys/rings.py', 1062, 1066, 0.7071067811865475), ('sympy/polys/rings.py', 1084, 1086, 0.7071067811865475), ('sympy/polys/rings.py', 1088, 1098, 0.7071067811865475), ('sympy/polys/rings.py', 1162, 1162, 0.7071067811865475), ('sympy/polys/rings.py', 1164, 1166, 0.7071067811865475), ('sympy/polys/rings.py', 1169, 1173, 0.7071067811865475), ('sympy/polys/rings.py', 1175, 1176, 0.7071067811865475), ('sympy/polys/rings.py', 1327, 1327, 0.7071067811865475), ('sympy/polys/rings.py', 1329, 1329, 0.7071067811865475), ('sympy/polys/rings.py', 1331, 1333, 0.7071067811865475), ('sympy/polys/rings.py', 1336, 1336, 0.7071067811865475), ('sympy/polys/rings.py', 1344, 1345, 0.7071067811865475), ('sympy/polys/rings.py', 1349, 1349, 0.7071067811865475), ('sympy/polys/rings.py', 1612, 1612, 0.7071067811865475), ('sympy/polys/rings.py', 1614, 1614, 0.7071067811865475), ('sympy/polys/rings.py', 1616, 1616, 0.7071067811865475), ('sympy/polys/rings.py', 1619, 1619, 0.7071067811865475), ('sympy/polys/rings.py', 1676, 1677, 0.7071067811865475), ('sympy/polys/rings.py', 1682, 1682, 0.7071067811865475), ('sympy/polys/rings.py', 1727, 1727, 0.7071067811865475), ('sympy/polys/rings.py', 1877, 1877, 0.7071067811865475), ('sympy/polys/rings.py', 1881, 1881, 0.7071067811865475), ('sympy/polys/rings.py', 1885, 1885, 0.7071067811865475), ('sympy/polys/rings.py', 1889, 1889, 0.7071067811865475), ('sympy/polys/rings.py', 1893, 1893, 0.7071067811865475), ('sympy/polys/rings.py', 1936, 1938, 0.7071067811865475), ('sympy/polys/rings.py', 1940, 1941, 0.7071067811865475), ('sympy/polys/rings.py', 1943, 1943, 0.7071067811865475), ('sympy/polys/rings.py', 1947, 1948, 0.7071067811865475), ('sympy/polys/rings.py', 1982, 1982, 0.7071067811865475), ('sympy/polys/rings.py', 1984, 1984, 0.7071067811865475), ('sympy/polys/rings.py', 1986, 1987, 0.7071067811865475), ('sympy/polys/rings.py', 1989, 1991, 0.7071067811865475), ('sympy/polys/rings.py', 1995, 1995, 0.7071067811865475), ('sympy/polys/rings.py', 2272, 2280, 0.7071067811865475), ('sympy/polys/sqfreetools.py', 210, 210, 0.7071067811865475), ('sympy/polys/sqfreetools.py', 213, 213, 0.7071067811865475), ('sympy/polys/sqfreetools.py', 216, 216, 0.7071067811865475), ('sympy/polys/sqfreetools.py', 219, 220, 0.7071067811865475), ('sympy/polys/sqfreetools.py', 222, 222, 0.7071067811865475), ('sympy/polys/sqfreetools.py', 225, 225, 0.7071067811865475), ('sympy/simplify/radsimp.py', 163, 167, 0.7071067811865475), ('sympy/simplify/radsimp.py', 169, 169, 0.7071067811865475), ('sympy/simplify/radsimp.py', 171, 172, 0.7071067811865475), ('sympy/simplify/radsimp.py', 185, 185, 0.7071067811865475), ('sympy/simplify/radsimp.py', 188, 189, 0.7071067811865475), ('sympy/simplify/radsimp.py', 191, 192, 0.7071067811865475), ('sympy/simplify/radsimp.py', 198, 200, 0.7071067811865475), ('sympy/simplify/radsimp.py', 206, 206, 0.7071067811865475), ('sympy/simplify/radsimp.py', 208, 208, 0.7071067811865475), ('sympy/simplify/radsimp.py', 235, 235, 0.7071067811865475), ('sympy/simplify/radsimp.py', 247, 248, 0.7071067811865475), ('sympy/simplify/radsimp.py', 250, 251, 0.7071067811865475), ('sympy/simplify/radsimp.py', 254, 254, 0.7071067811865475), ('sympy/simplify/radsimp.py', 256, 256, 0.7071067811865475), ('sympy/simplify/radsimp.py', 264, 265, 0.7071067811865475), ('sympy/simplify/radsimp.py', 273, 273, 0.7071067811865475), ('sympy/simplify/radsimp.py', 280, 280, 0.7071067811865475), ('sympy/simplify/radsimp.py', 283, 283, 0.7071067811865475), ('sympy/simplify/radsimp.py', 285, 285, 0.7071067811865475), ('sympy/simplify/radsimp.py', 290, 290, 0.7071067811865475), ('sympy/simplify/radsimp.py', 292, 292, 0.7071067811865475), ('sympy/simplify/radsimp.py', 297, 297, 0.7071067811865475), ('sympy/simplify/radsimp.py', 299, 300, 0.7071067811865475), ('sympy/simplify/radsimp.py', 302, 302, 0.7071067811865475), ('sympy/simplify/radsimp.py', 304, 304, 0.7071067811865475), ('sympy/simplify/radsimp.py', 308, 309, 0.7071067811865475), ('sympy/simplify/radsimp.py', 312, 312, 0.7071067811865475), ('sympy/simplify/radsimp.py', 317, 317, 0.7071067811865475), ('sympy/simplify/radsimp.py', 320, 321, 0.7071067811865475), ('sympy/simplify/radsimp.py', 324, 324, 0.7071067811865475), ('sympy/simplify/radsimp.py', 327, 327, 0.7071067811865475), ('sympy/simplify/radsimp.py', 329, 329, 0.7071067811865475), ('sympy/simplify/radsimp.py', 331, 331, 0.7071067811865475), ('sympy/simplify/radsimp.py', 346, 347, 0.7071067811865475), ('sympy/simplify/radsimp.py', 349, 349, 0.7071067811865475), ('sympy/simplify/radsimp.py', 353, 353, 0.7071067811865475), ('sympy/simplify/radsimp.py', 355, 355, 0.7071067811865475), ('sympy/simplify/radsimp.py', 357, 370, 0.7071067811865475), ('sympy/simplify/radsimp.py', 372, 372, 0.7071067811865475), ('sympy/simplify/radsimp.py', 374, 374, 0.7071067811865475), ('sympy/simplify/radsimp.py', 376, 377, 0.7071067811865475), ('sympy/simplify/radsimp.py', 379, 379, 0.7071067811865475), ('sympy/simplify/radsimp.py', 385, 385, 0.7071067811865475), ('sympy/simplify/radsimp.py', 387, 392, 0.7071067811865475), ('sympy/simplify/radsimp.py', 394, 395, 0.7071067811865475), ('sympy/simplify/radsimp.py', 400, 400, 0.7071067811865475), ('sympy/simplify/radsimp.py', 403, 403, 0.7071067811865475), ('sympy/simplify/radsimp.py', 405, 405, 0.7071067811865475), ('sympy/simplify/radsimp.py', 408, 409, 0.7071067811865475), ('sympy/simplify/radsimp.py', 412, 412, 0.7071067811865475), ('sympy/simplify/radsimp.py', 416, 420, 0.7071067811865475), ('sympy/simplify/radsimp.py', 423, 424, 0.7071067811865475), ('sympy/simplify/radsimp.py', 427, 430, 0.7071067811865475), ('sympy/simplify/radsimp.py', 433, 433, 0.7071067811865475), ('sympy/simplify/radsimp.py', 435, 435, 0.7071067811865475), ('sympy/simplify/radsimp.py', 437, 438, 0.7071067811865475), ('sympy/simplify/radsimp.py', 440, 440, 0.7071067811865475), ('sympy/simplify/radsimp.py', 444, 444, 0.7071067811865475), ('sympy/simplify/radsimp.py', 448, 449, 0.7071067811865475), ('sympy/simplify/radsimp.py', 1195, 1201, 0.7071067811865475), ('sympy/simplify/radsimp.py', 1203, 1205, 0.7071067811865475), ('sympy/simplify/simplify.py', 209, 213, 0.7071067811865475), ('sympy/simplify/simplify.py', 1024, 1026, 0.7071067811865475), ('sympy/simplify/simplify.py', 1028, 1028, 0.7071067811865475), ('sympy/simplify/simplify.py', 1031, 1032, 0.7071067811865475), ('sympy/simplify/simplify.py', 1034, 1034, 0.7071067811865475), ('sympy/simplify/simplify.py', 1039, 1043, 0.7071067811865475), ('sympy/simplify/simplify.py', 1057, 1057, 0.7071067811865475), ('sympy/simplify/simplify.py', 1060, 1061, 0.7071067811865475), ('sympy/simplify/simplify.py', 1063, 1063, 0.7071067811865475), ('sympy/simplify/simplify.py', 1066, 1066, 0.7071067811865475), ('sympy/simplify/simplify.py', 1070, 1070, 0.7071067811865475), ('sympy/simplify/simplify.py', 1074, 1075, 0.7071067811865475), ('sympy/utilities/iterables.py', 633, 633, 0.7071067811865475), ('sympy/utilities/iterables.py', 637, 638, 0.7071067811865475), ('sympy/utilities/iterables.py', 640, 640, 0.7071067811865475), ('sympy/core/add.py', 666, 670, 0.5773502691896258), ('sympy/core/add.py', 695, 699, 0.5773502691896258), ('sympy/core/add.py', 1096, 1100, 0.5773502691896258), ('sympy/core/basic.py', 1853, 1853, 0.5773502691896258), ('sympy/core/cache.py', 71, 75, 0.5773502691896258), ('sympy/core/evalf.py', 116, 116, 0.5773502691896258), ('sympy/core/evalf.py', 118, 118, 0.5773502691896258), ('sympy/core/evalf.py', 677, 678, 0.5773502691896258), ('sympy/core/evalf.py', 683, 683, 0.5773502691896258), ('sympy/core/evalf.py', 732, 733, 0.5773502691896258), ('sympy/core/evalf.py', 735, 735, 0.5773502691896258), ('sympy/core/evalf.py', 738, 738, 0.5773502691896258), ('sympy/core/evalf.py', 741, 741, 0.5773502691896258), ('sympy/core/evalf.py', 746, 746, 0.5773502691896258), ('sympy/core/evalf.py', 1292, 1296, 0.5773502691896258), ('sympy/core/expr.py', 1355, 1359, 0.5773502691896258), ('sympy/core/expr.py', 1490, 1492, 0.5773502691896258), ('sympy/core/expr.py', 1869, 1869, 0.5773502691896258), ('sympy/core/expr.py', 2220, 2224, 0.5773502691896258), ('sympy/core/expr.py', 3520, 3521, 0.5773502691896258), ('sympy/core/expr.py', 4024, 4025, 0.5773502691896258), ('sympy/core/exprtools.py', 102, 104, 0.5773502691896258), ('sympy/core/function.py', 2865, 2865, 0.5773502691896258), ('sympy/core/function.py', 2867, 2872, 0.5773502691896258), ('sympy/core/mul.py', 65, 69, 0.5773502691896258), ('sympy/core/mul.py', 80, 81, 0.5773502691896258), ('sympy/core/mul.py', 83, 83, 0.5773502691896258), ('sympy/core/mul.py', 85, 85, 0.5773502691896258), ('sympy/core/mul.py', 165, 171, 0.5773502691896258), ('sympy/core/mul.py', 554, 560, 0.5773502691896258), ('sympy/core/mul.py', 644, 648, 0.5773502691896258), ('sympy/core/mul.py', 650, 650, 0.5773502691896258), ('sympy/core/mul.py', 653, 657, 0.5773502691896258), ('sympy/core/mul.py', 682, 685, 0.5773502691896258), ('sympy/core/mul.py', 711, 717, 0.5773502691896258), ('sympy/core/mul.py', 730, 731, 0.5773502691896258), ('sympy/core/mul.py', 740, 742, 0.5773502691896258), ('sympy/core/mul.py', 745, 748, 0.5773502691896258), ('sympy/core/mul.py', 791, 791, 0.5773502691896258), ('sympy/core/mul.py', 793, 793, 0.5773502691896258), ('sympy/core/mul.py', 795, 796, 0.5773502691896258), ('sympy/core/mul.py', 1303, 1307, 0.5773502691896258), ('sympy/core/mul.py', 1337, 1339, 0.5773502691896258), ('sympy/core/numbers.py', 739, 740, 0.5773502691896258), ('sympy/core/numbers.py', 742, 743, 0.5773502691896258), ('sympy/core/numbers.py', 745, 746, 0.5773502691896258), ('sympy/core/numbers.py', 829, 829, 0.5773502691896258), ('sympy/core/numbers.py', 831, 831, 0.5773502691896258), ('sympy/core/numbers.py', 1286, 1286, 0.5773502691896258), ('sympy/core/numbers.py', 1352, 1357, 0.5773502691896258), ('sympy/core/numbers.py', 1361, 1365, 0.5773502691896258), ('sympy/core/numbers.py', 1373, 1373, 0.5773502691896258), ('sympy/core/numbers.py', 1882, 1882, 0.5773502691896258), ('sympy/core/numbers.py', 1884, 1885, 0.5773502691896258), ('sympy/core/numbers.py', 1887, 1887, 0.5773502691896258), ('sympy/core/numbers.py', 1892, 1892, 0.5773502691896258), ('sympy/core/numbers.py', 1900, 1901, 0.5773502691896258), ('sympy/core/numbers.py', 1930, 1931, 0.5773502691896258), ('sympy/core/numbers.py', 2023, 2026, 0.5773502691896258), ('sympy/core/numbers.py', 2346, 2347, 0.5773502691896258), ('sympy/core/numbers.py', 2349, 2349, 0.5773502691896258), ('sympy/core/numbers.py', 2371, 2374, 0.5773502691896258), ('sympy/core/numbers.py', 2387, 2393, 0.5773502691896258), ('sympy/core/numbers.py', 2395, 2396, 0.5773502691896258), ('sympy/core/numbers.py', 2859, 2859, 0.5773502691896258), ('sympy/core/numbers.py', 2862, 2862, 0.5773502691896258), ('sympy/core/numbers.py', 3263, 3263, 0.5773502691896258), ('sympy/core/power.py', 299, 303, 0.5773502691896258), ('sympy/core/power.py', 324, 328, 0.5773502691896258), ('sympy/core/power.py', 330, 330, 0.5773502691896258), ('sympy/core/power.py', 652, 654, 0.5773502691896258), ('sympy/core/power.py', 677, 677, 0.5773502691896258), ('sympy/core/power.py', 689, 689, 0.5773502691896258), ('sympy/core/power.py', 957, 960, 0.5773502691896258), ('sympy/core/power.py', 1008, 1008, 0.5773502691896258), ('sympy/core/power.py', 1013, 1013, 0.5773502691896258), ('sympy/core/power.py', 1033, 1035, 0.5773502691896258), ('sympy/core/power.py', 1043, 1048, 0.5773502691896258), ('sympy/core/power.py', 1074, 1074, 0.5773502691896258), ('sympy/core/power.py', 1083, 1083, 0.5773502691896258), ('sympy/core/power.py', 1087, 1087, 0.5773502691896258), ('sympy/core/power.py', 1097, 1097, 0.5773502691896258), ('sympy/core/power.py', 1104, 1105, 0.5773502691896258), ('sympy/core/power.py', 1107, 1108, 0.5773502691896258), ('sympy/core/power.py', 1110, 1111, 0.5773502691896258), ('sympy/core/power.py', 1289, 1291, 0.5773502691896258), ('sympy/core/power.py', 1370, 1372, 0.5773502691896258), ('sympy/core/sympify.py', 399, 400, 0.5773502691896258), ('sympy/core/sympify.py', 435, 435, 0.5773502691896258), ('sympy/external/pythonmpq.py', 58, 58, 0.5773502691896258), ('sympy/external/pythonmpq.py', 62, 62, 0.5773502691896258), ('sympy/external/pythonmpq.py', 64, 67, 0.5773502691896258), ('sympy/external/pythonmpq.py', 95, 95, 0.5773502691896258), ('sympy/external/pythonmpq.py', 105, 108, 0.5773502691896258), ('sympy/external/pythonmpq.py', 184, 184, 0.5773502691896258), ('sympy/external/pythonmpq.py', 186, 188, 0.5773502691896258), ('sympy/external/pythonmpq.py', 192, 192, 0.5773502691896258), ('sympy/functions/elementary/complexes.py', 624, 625, 0.5773502691896258), ('sympy/functions/elementary/exponential.py', 276, 277, 0.5773502691896258), ('sympy/functions/elementary/exponential.py', 279, 282, 0.5773502691896258), ('sympy/functions/elementary/exponential.py', 934, 934, 0.5773502691896258), ('sympy/functions/elementary/exponential.py', 950, 950, 0.5773502691896258), ('sympy/ntheory/factor_.py', 212, 213, 0.5773502691896258), ('sympy/ntheory/factor_.py', 215, 217, 0.5773502691896258), ('sympy/ntheory/factor_.py', 276, 276, 0.5773502691896258), ('sympy/ntheory/factor_.py', 278, 279, 0.5773502691896258), ('sympy/ntheory/factor_.py', 305, 305, 0.5773502691896258), ('sympy/ntheory/factor_.py', 307, 307, 0.5773502691896258), ('sympy/ntheory/factor_.py', 309, 309, 0.5773502691896258), ('sympy/ntheory/factor_.py', 311, 312, 0.5773502691896258), ('sympy/ntheory/factor_.py', 485, 486, 0.5773502691896258), ('sympy/ntheory/factor_.py', 492, 493, 0.5773502691896258), ('sympy/ntheory/factor_.py', 495, 495, 0.5773502691896258), ('sympy/ntheory/factor_.py', 522, 525, 0.5773502691896258), ('sympy/ntheory/factor_.py', 889, 889, 0.5773502691896258), ('sympy/ntheory/factor_.py', 893, 893, 0.5773502691896258), ('sympy/ntheory/factor_.py', 895, 895, 0.5773502691896258), ('sympy/ntheory/factor_.py', 897, 903, 0.5773502691896258), ('sympy/ntheory/factor_.py', 908, 909, 0.5773502691896258), ('sympy/ntheory/factor_.py', 917, 917, 0.5773502691896258), ('sympy/ntheory/factor_.py', 922, 923, 0.5773502691896258), ('sympy/ntheory/factor_.py', 927, 932, 0.5773502691896258), ('sympy/ntheory/factor_.py', 973, 973, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1223, 1223, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1226, 1226, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1234, 1234, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1236, 1239, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1241, 1241, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1244, 1244, 0.5773502691896258), ('sympy/ntheory/factor_.py', 1252, 1252, 0.5773502691896258), ('sympy/ntheory/generate.py', 181, 188, 0.5773502691896258), ('sympy/polys/constructor.py', 17, 18, 0.5773502691896258), ('sympy/polys/constructor.py', 20, 20, 0.5773502691896258), ('sympy/polys/constructor.py', 23, 23, 0.5773502691896258), ('sympy/polys/constructor.py', 25, 27, 0.5773502691896258), ('sympy/polys/constructor.py', 62, 62, 0.5773502691896258), ('sympy/polys/constructor.py', 64, 64, 0.5773502691896258), ('sympy/polys/constructor.py', 67, 67, 0.5773502691896258), ('sympy/polys/constructor.py', 69, 69, 0.5773502691896258), ('sympy/polys/constructor.py', 71, 71, 0.5773502691896258), ('sympy/polys/constructor.py', 74, 74, 0.5773502691896258), ('sympy/polys/constructor.py', 76, 76, 0.5773502691896258), ('sympy/polys/constructor.py', 78, 78, 0.5773502691896258), ('sympy/polys/constructor.py', 353, 353, 0.5773502691896258), ('sympy/polys/constructor.py', 355, 356, 0.5773502691896258), ('sympy/polys/constructor.py', 366, 367, 0.5773502691896258), ('sympy/polys/constructor.py', 369, 371, 0.5773502691896258), ('sympy/polys/constructor.py', 385, 386, 0.5773502691896258), ('sympy/polys/densearith.py', 315, 315, 0.5773502691896258), ('sympy/polys/densearith.py', 320, 320, 0.5773502691896258), ('sympy/polys/densearith.py', 323, 323, 0.5773502691896258), ('sympy/polys/densebasic.py', 27, 27, 0.5773502691896258), ('sympy/polys/densebasic.py', 30, 30, 0.5773502691896258), ('sympy/polys/densebasic.py', 49, 49, 0.5773502691896258), ('sympy/polys/densebasic.py', 52, 52, 0.5773502691896258), ('sympy/polys/densebasic.py', 181, 181, 0.5773502691896258), ('sympy/polys/densebasic.py', 212, 213, 0.5773502691896258), ('sympy/polys/densebasic.py', 265, 266, 0.5773502691896258), ('sympy/polys/densebasic.py', 268, 268, 0.5773502691896258), ('sympy/polys/densebasic.py', 274, 274, 0.5773502691896258), ('sympy/polys/densebasic.py', 276, 276, 0.5773502691896258), ('sympy/polys/densebasic.py', 717, 717, 0.5773502691896258), ('sympy/polys/densebasic.py', 933, 933, 0.5773502691896258), ('sympy/polys/densebasic.py', 936, 936, 0.5773502691896258), ('sympy/polys/densebasic.py', 938, 938, 0.5773502691896258), ('sympy/polys/densebasic.py', 942, 942, 0.5773502691896258), ('sympy/polys/densebasic.py', 944, 945, 0.5773502691896258), ('sympy/polys/densebasic.py', 947, 947, 0.5773502691896258), ('sympy/polys/densebasic.py', 1034, 1034, 0.5773502691896258), ('sympy/polys/densebasic.py', 1037, 1037, 0.5773502691896258), ('sympy/polys/densebasic.py', 1039, 1041, 0.5773502691896258), ('sympy/polys/densebasic.py', 1043, 1043, 0.5773502691896258), ('sympy/polys/densebasic.py', 1086, 1087, 0.5773502691896258), ('sympy/polys/densebasic.py', 1650, 1650, 0.5773502691896258), ('sympy/polys/densebasic.py', 1652, 1654, 0.5773502691896258), ('sympy/polys/densebasic.py', 1656, 1656, 0.5773502691896258), ('sympy/polys/densebasic.py', 1658, 1658, 0.5773502691896258), ('sympy/polys/densebasic.py', 1696, 1696, 0.5773502691896258), ('sympy/polys/densebasic.py', 1698, 1701, 0.5773502691896258), ('sympy/polys/densebasic.py', 1703, 1703, 0.5773502691896258), ('sympy/polys/densebasic.py', 1710, 1710, 0.5773502691896258), ('sympy/polys/densebasic.py', 1731, 1731, 0.5773502691896258), ('sympy/polys/densebasic.py', 1734, 1734, 0.5773502691896258), ('sympy/polys/densebasic.py', 1736, 1736, 0.5773502691896258), ('sympy/polys/densebasic.py', 1739, 1740, 0.5773502691896258), ('sympy/polys/densetools.py', 593, 593, 0.5773502691896258), ('sympy/polys/densetools.py', 595, 595, 0.5773502691896258), ('sympy/polys/densetools.py', 598, 598, 0.5773502691896258), ('sympy/polys/densetools.py', 604, 605, 0.5773502691896258), ('sympy/polys/densetools.py', 607, 608, 0.5773502691896258), ('sympy/polys/densetools.py', 610, 610, 0.5773502691896258), ('sympy/polys/densetools.py', 680, 680, 0.5773502691896258), ('sympy/polys/densetools.py', 683, 683, 0.5773502691896258), ('sympy/polys/densetools.py', 685, 686, 0.5773502691896258), ('sympy/polys/densetools.py', 688, 688, 0.5773502691896258), ('sympy/polys/domains/domain.py', 375, 375, 0.5773502691896258), ('sympy/polys/domains/domain.py', 378, 378, 0.5773502691896258), ('sympy/polys/domains/domain.py', 387, 387, 0.5773502691896258), ('sympy/polys/domains/domain.py', 411, 411, 0.5773502691896258), ('sympy/polys/domains/domain.py', 417, 418, 0.5773502691896258), ('sympy/polys/domains/domain.py', 420, 420, 0.5773502691896258), ('sympy/polys/domains/domain.py', 425, 425, 0.5773502691896258), ('sympy/polys/domains/domain.py', 428, 428, 0.5773502691896258), ('sympy/polys/domains/domain.py', 437, 437, 0.5773502691896258), ('sympy/polys/domains/domain.py', 441, 441, 0.5773502691896258), ('sympy/polys/domains/domain.py', 445, 445, 0.5773502691896258), ('sympy/polys/domains/domain.py', 449, 449, 0.5773502691896258), ('sympy/polys/domains/domain.py', 452, 454, 0.5773502691896258), ('sympy/polys/domains/domain.py', 470, 470, 0.5773502691896258), ('sympy/polys/domains/domain.py', 814, 814, 0.5773502691896258), ('sympy/polys/domains/domain.py', 818, 818, 0.5773502691896258), ('sympy/polys/domains/domain.py', 891, 891, 0.5773502691896258), ('sympy/polys/domains/domain.py', 899, 899, 0.5773502691896258), ('sympy/polys/domains/integerring.py', 55, 55, 0.5773502691896258), ('sympy/polys/domains/integerring.py', 59, 60, 0.5773502691896258), ('sympy/polys/domains/integerring.py', 212, 212, 0.5773502691896258), ('sympy/polys/domains/rationalfield.py', 152, 152, 0.5773502691896258), ('sympy/polys/domains/rationalfield.py', 156, 156, 0.5773502691896258), ('sympy/polys/factortools.py', 653, 653, 0.5773502691896258), ('sympy/polys/factortools.py', 655, 655, 0.5773502691896258), ('sympy/polys/factortools.py', 660, 660, 0.5773502691896258), ('sympy/polys/factortools.py', 1303, 1304, 0.5773502691896258), ('sympy/polys/factortools.py', 1306, 1306, 0.5773502691896258), ('sympy/polys/factortools.py', 1308, 1308, 0.5773502691896258), ('sympy/polys/factortools.py', 1310, 1310, 0.5773502691896258), ('sympy/polys/factortools.py', 1312, 1312, 0.5773502691896258), ('sympy/polys/factortools.py', 1315, 1315, 0.5773502691896258), ('sympy/polys/factortools.py', 1319, 1319, 0.5773502691896258), ('sympy/polys/factortools.py', 1329, 1330, 0.5773502691896258), ('sympy/polys/factortools.py', 1361, 1362, 0.5773502691896258), ('sympy/polys/factortools.py', 1364, 1364, 0.5773502691896258), ('sympy/polys/factortools.py', 1380, 1381, 0.5773502691896258), ('sympy/polys/polyclasses.py', 150, 151, 0.5773502691896258), ('sympy/polys/polyclasses.py', 153, 153, 0.5773502691896258), ('sympy/polys/polyclasses.py', 158, 161, 0.5773502691896258), ('sympy/polys/polyclasses.py', 171, 171, 0.5773502691896258), ('sympy/polys/polyclasses.py', 174, 175, 0.5773502691896258), ('sympy/polys/polyclasses.py', 201, 201, 0.5773502691896258), ('sympy/polys/polyclasses.py', 209, 210, 0.5773502691896258), ('sympy/polys/polyclasses.py', 212, 213, 0.5773502691896258), ('sympy/polys/polyclasses.py', 215, 215, 0.5773502691896258), ('sympy/polys/polyclasses.py', 241, 241, 0.5773502691896258), ('sympy/polys/polyclasses.py', 243, 244, 0.5773502691896258), ('sympy/polys/polyclasses.py', 246, 246, 0.5773502691896258), ('sympy/polys/polyclasses.py', 276, 276, 0.5773502691896258), ('sympy/polys/polyclasses.py', 315, 315, 0.5773502691896258), ('sympy/polys/polyclasses.py', 515, 516, 0.5773502691896258), ('sympy/polys/polyclasses.py', 795, 796, 0.5773502691896258), ('sympy/polys/polyoptions.py', 34, 34, 0.5773502691896258), ('sympy/polys/polyoptions.py', 42, 42, 0.5773502691896258), ('sympy/polys/polyoptions.py', 68, 71, 0.5773502691896258), ('sympy/polys/polyoptions.py', 130, 130, 0.5773502691896258), ('sympy/polys/polyoptions.py', 132, 132, 0.5773502691896258), ('sympy/polys/polyoptions.py', 135, 137, 0.5773502691896258), ('sympy/polys/polyoptions.py', 139, 139, 0.5773502691896258), ('sympy/polys/polyoptions.py', 141, 144, 0.5773502691896258), ('sympy/polys/polyoptions.py', 148, 148, 0.5773502691896258), ('sympy/polys/polyoptions.py', 153, 154, 0.5773502691896258), ('sympy/polys/polyoptions.py', 156, 156, 0.5773502691896258), ('sympy/polys/polyoptions.py', 158, 158, 0.5773502691896258), ('sympy/polys/polyoptions.py', 169, 169, 0.5773502691896258), ('sympy/polys/polyoptions.py', 171, 172, 0.5773502691896258), ('sympy/polys/polyoptions.py', 174, 174, 0.5773502691896258), ('sympy/polys/polyoptions.py', 178, 179, 0.5773502691896258), ('sympy/polys/polyoptions.py', 182, 183, 0.5773502691896258), ('sympy/polys/polyoptions.py', 208, 208, 0.5773502691896258), ('sympy/polys/polyoptions.py', 210, 211, 0.5773502691896258), ('sympy/polys/polyoptions.py', 213, 214, 0.5773502691896258), ('sympy/polys/polyoptions.py', 216, 216, 0.5773502691896258), ('sympy/polys/polyoptions.py', 268, 268, 0.5773502691896258), ('sympy/polys/polyoptions.py', 281, 281, 0.5773502691896258), ('sympy/polys/polyoptions.py', 285, 285, 0.5773502691896258), ('sympy/polys/polyoptions.py', 287, 287, 0.5773502691896258), ('sympy/polys/polyoptions.py', 290, 290, 0.5773502691896258), ('sympy/polys/polyoptions.py', 292, 292, 0.5773502691896258), ('sympy/polys/polyoptions.py', 294, 294, 0.5773502691896258), ('sympy/polys/polyoptions.py', 297, 297, 0.5773502691896258), ('sympy/polys/polyoptions.py', 337, 337, 0.5773502691896258), ('sympy/polys/polyoptions.py', 416, 417, 0.5773502691896258), ('sympy/polys/polyoptions.py', 503, 503, 0.5773502691896258), ('sympy/polys/polyoptions.py', 507, 508, 0.5773502691896258), ('sympy/polys/polyoptions.py', 523, 523, 0.5773502691896258), ('sympy/polys/polyoptions.py', 538, 538, 0.5773502691896258), ('sympy/polys/polyoptions.py', 571, 571, 0.5773502691896258), ('sympy/polys/polyoptions.py', 596, 596, 0.5773502691896258), ('sympy/polys/polyoptions.py', 634, 635, 0.5773502691896258), ('sympy/polys/polyoptions.py', 708, 708, 0.5773502691896258), ('sympy/polys/polyoptions.py', 743, 744, 0.5773502691896258), ('sympy/polys/polyoptions.py', 746, 747, 0.5773502691896258), ('sympy/polys/polyoptions.py', 749, 749, 0.5773502691896258), ('sympy/polys/polyoptions.py', 772, 772, 0.5773502691896258), ('sympy/polys/polytools.py', 146, 146, 0.5773502691896258), ('sympy/polys/polytools.py', 148, 148, 0.5773502691896258), ('sympy/polys/polytools.py', 151, 151, 0.5773502691896258), ('sympy/polys/polytools.py', 153, 153, 0.5773502691896258), ('sympy/polys/polytools.py', 159, 159, 0.5773502691896258), ('sympy/polys/polytools.py', 161, 161, 0.5773502691896258), ('sympy/polys/polytools.py', 164, 164, 0.5773502691896258), ('sympy/polys/polytools.py', 178, 178, 0.5773502691896258), ('sympy/polys/polytools.py', 181, 181, 0.5773502691896258), ('sympy/polys/polytools.py', 184, 186, 0.5773502691896258), ('sympy/polys/polytools.py', 188, 188, 0.5773502691896258), ('sympy/polys/polytools.py', 192, 192, 0.5773502691896258), ('sympy/polys/polytools.py', 228, 228, 0.5773502691896258), ('sympy/polys/polytools.py', 230, 230, 0.5773502691896258), ('sympy/polys/polytools.py', 234, 235, 0.5773502691896258), ('sympy/polys/polytools.py', 237, 237, 0.5773502691896258), ('sympy/polys/polytools.py', 240, 241, 0.5773502691896258), ('sympy/polys/polytools.py', 243, 243, 0.5773502691896258), ('sympy/polys/polytools.py', 293, 294, 0.5773502691896258), ('sympy/polys/polytools.py', 522, 523, 0.5773502691896258), ('sympy/polys/polytools.py', 525, 525, 0.5773502691896258), ('sympy/polys/polytools.py', 531, 531, 0.5773502691896258), ('sympy/polys/polytools.py', 914, 914, 0.5773502691896258), ('sympy/polys/polytools.py', 1832, 1833, 0.5773502691896258), ('sympy/polys/polytools.py', 1835, 1836, 0.5773502691896258), ('sympy/polys/polytools.py', 1839, 1839, 0.5773502691896258), ('sympy/polys/polytools.py', 1870, 1870, 0.5773502691896258), ('sympy/polys/polytools.py', 1872, 1873, 0.5773502691896258), ('sympy/polys/polytools.py', 3334, 3336, 0.5773502691896258), ('sympy/polys/polytools.py', 3342, 3342, 0.5773502691896258), ('sympy/polys/polyutils.py', 63, 63, 0.5773502691896258), ('sympy/polys/polyutils.py', 65, 65, 0.5773502691896258), ('sympy/polys/polyutils.py', 67, 68, 0.5773502691896258), ('sympy/polys/polyutils.py', 70, 70, 0.5773502691896258), ('sympy/polys/polyutils.py', 73, 74, 0.5773502691896258), ('sympy/polys/polyutils.py', 76, 76, 0.5773502691896258), ('sympy/polys/polyutils.py', 82, 82, 0.5773502691896258), ('sympy/polys/polyutils.py', 84, 84, 0.5773502691896258), ('sympy/polys/polyutils.py', 87, 87, 0.5773502691896258), ('sympy/polys/polyutils.py', 89, 92, 0.5773502691896258), ('sympy/polys/polyutils.py', 101, 102, 0.5773502691896258), ('sympy/polys/polyutils.py', 106, 106, 0.5773502691896258), ('sympy/polys/polyutils.py', 156, 158, 0.5773502691896258), ('sympy/polys/polyutils.py', 163, 164, 0.5773502691896258), ('sympy/polys/polyutils.py', 173, 173, 0.5773502691896258), ('sympy/polys/polyutils.py', 175, 175, 0.5773502691896258), ('sympy/polys/polyutils.py', 177, 177, 0.5773502691896258), ('sympy/polys/polyutils.py', 182, 182, 0.5773502691896258), ('sympy/polys/polyutils.py', 184, 185, 0.5773502691896258), ('sympy/polys/polyutils.py', 187, 187, 0.5773502691896258), ('sympy/polys/polyutils.py', 189, 190, 0.5773502691896258), ('sympy/polys/polyutils.py', 192, 192, 0.5773502691896258), ('sympy/polys/polyutils.py', 195, 196, 0.5773502691896258), ('sympy/polys/polyutils.py', 198, 200, 0.5773502691896258), ('sympy/polys/polyutils.py', 202, 204, 0.5773502691896258), ('sympy/polys/polyutils.py', 206, 206, 0.5773502691896258), ('sympy/polys/polyutils.py', 219, 219, 0.5773502691896258), ('sympy/polys/polyutils.py', 221, 221, 0.5773502691896258), ('sympy/polys/polyutils.py', 224, 224, 0.5773502691896258), ('sympy/polys/polyutils.py', 226, 226, 0.5773502691896258), ('sympy/polys/polyutils.py', 228, 228, 0.5773502691896258), ('sympy/polys/polyutils.py', 233, 233, 0.5773502691896258), ('sympy/polys/polyutils.py', 236, 236, 0.5773502691896258), ('sympy/polys/polyutils.py', 246, 246, 0.5773502691896258), ('sympy/polys/polyutils.py', 248, 249, 0.5773502691896258), ('sympy/polys/polyutils.py', 251, 251, 0.5773502691896258), ('sympy/polys/polyutils.py', 254, 255, 0.5773502691896258), ('sympy/polys/polyutils.py', 257, 259, 0.5773502691896258), ('sympy/polys/polyutils.py', 261, 262, 0.5773502691896258), ('sympy/polys/polyutils.py', 264, 264, 0.5773502691896258), ('sympy/polys/polyutils.py', 269, 270, 0.5773502691896258), ('sympy/polys/polyutils.py', 272, 272, 0.5773502691896258), ('sympy/polys/polyutils.py', 274, 274, 0.5773502691896258), ('sympy/polys/polyutils.py', 276, 277, 0.5773502691896258), ('sympy/polys/polyutils.py', 279, 280, 0.5773502691896258), ('sympy/polys/polyutils.py', 282, 282, 0.5773502691896258), ('sympy/polys/polyutils.py', 284, 285, 0.5773502691896258), ('sympy/polys/polyutils.py', 287, 288, 0.5773502691896258), ('sympy/polys/polyutils.py', 290, 291, 0.5773502691896258), ('sympy/polys/polyutils.py', 293, 293, 0.5773502691896258), ('sympy/polys/polyutils.py', 295, 295, 0.5773502691896258), ('sympy/polys/polyutils.py', 298, 298, 0.5773502691896258), ('sympy/polys/polyutils.py', 300, 300, 0.5773502691896258), ('sympy/polys/polyutils.py', 302, 302, 0.5773502691896258), ('sympy/polys/polyutils.py', 307, 308, 0.5773502691896258), ('sympy/polys/polyutils.py', 313, 314, 0.5773502691896258), ('sympy/polys/polyutils.py', 347, 347, 0.5773502691896258), ('sympy/polys/polyutils.py', 354, 355, 0.5773502691896258), ('sympy/polys/polyutils.py', 357, 357, 0.5773502691896258), ('sympy/polys/polyutils.py', 359, 361, 0.5773502691896258), ('sympy/polys/polyutils.py', 364, 364, 0.5773502691896258), ('sympy/polys/polyutils.py', 367, 368, 0.5773502691896258), ('sympy/polys/polyutils.py', 370, 370, 0.5773502691896258), ('sympy/polys/polyutils.py', 372, 372, 0.5773502691896258), ('sympy/polys/polyutils.py', 377, 377, 0.5773502691896258), ('sympy/polys/polyutils.py', 379, 383, 0.5773502691896258), ('sympy/polys/polyutils.py', 385, 385, 0.5773502691896258), ('sympy/polys/polyutils.py', 387, 387, 0.5773502691896258), ('sympy/printing/str.py', 142, 142, 0.5773502691896258), ('sympy/simplify/radsimp.py', 1119, 1119, 0.5773502691896258), ('sympy/simplify/simplify.py', 1192, 1196, 0.5773502691896258), ('sympy/simplify/simplify.py', 1198, 1199, 0.5773502691896258), ('sympy/core/assumptions.py', 537, 544, 0.5), ('sympy/core/assumptions.py', 563, 564, 0.5), ('sympy/core/basic.py', 667, 671, 0.5), ('sympy/core/basic.py', 1842, 1842, 0.5), ('sympy/core/evalf.py', 1300, 1301, 0.5), ('sympy/core/expr.py', 1202, 1206, 0.5), ('sympy/core/expr.py', 2226, 2226, 0.5), ('sympy/core/expr.py', 2572, 2572, 0.5), ('sympy/core/exprtools.py', 150, 152, 0.5), ('sympy/core/exprtools.py', 154, 154, 0.5), ('sympy/core/exprtools.py', 157, 157, 0.5), ('sympy/core/mul.py', 728, 728, 0.5), ('sympy/core/mul.py', 878, 879, 0.5), ('sympy/core/mul.py', 881, 881, 0.5), ('sympy/core/mul.py', 900, 902, 0.5), ('sympy/core/mul.py', 904, 906, 0.5), ('sympy/core/mul.py', 1577, 1578, 0.5), ('sympy/core/numbers.py', 692, 692, 0.5), ('sympy/core/numbers.py', 1048, 1048, 0.5), ('sympy/core/numbers.py', 1052, 1052, 0.5), ('sympy/core/numbers.py', 1062, 1062, 0.5), ('sympy/core/numbers.py', 1064, 1064, 0.5), ('sympy/core/numbers.py', 1696, 1699, 0.5), ('sympy/core/numbers.py', 1919, 1925, 0.5), ('sympy/core/numbers.py', 1949, 1950, 0.5), ('sympy/core/numbers.py', 2742, 2742, 0.5), ('sympy/core/numbers.py', 2744, 2744, 0.5), ('sympy/core/numbers.py', 2746, 2746, 0.5), ('sympy/core/numbers.py', 3259, 3259, 0.5), ('sympy/core/numbers.py', 3975, 3975, 0.5), ('sympy/core/power.py', 556, 559, 0.5), ('sympy/core/power.py', 576, 578, 0.5), ('sympy/core/power.py', 588, 591, 0.5), ('sympy/core/power.py', 659, 661, 0.5), ('sympy/core/power.py', 858, 859, 0.5), ('sympy/core/power.py', 862, 862, 0.5), ('sympy/core/power.py', 1001, 1001, 0.5), ('sympy/core/power.py', 1248, 1252, 0.5), ('sympy/core/relational.py', 1242, 1244, 0.5), ('sympy/functions/elementary/complexes.py', 96, 98, 0.5), ('sympy/functions/elementary/complexes.py', 102, 103, 0.5), ('sympy/functions/elementary/complexes.py', 105, 105, 0.5), ('sympy/functions/elementary/complexes.py', 210, 211, 0.5), ('sympy/functions/elementary/complexes.py', 214, 215, 0.5), ('sympy/functions/elementary/complexes.py', 219, 221, 0.5), ('sympy/functions/elementary/complexes.py', 225, 226, 0.5), ('sympy/functions/elementary/complexes.py', 228, 228, 0.5), ('sympy/functions/elementary/complexes.py', 632, 632, 0.5), ('sympy/functions/elementary/complexes.py', 638, 639, 0.5), ('sympy/functions/elementary/exponential.py', 57, 61, 0.5), ('sympy/functions/elementary/exponential.py', 63, 63, 0.5), ('sympy/functions/elementary/exponential.py', 369, 369, 0.5), ('sympy/functions/elementary/exponential.py', 941, 942, 0.5), ('sympy/functions/elementary/exponential.py', 944, 944, 0.5), ('sympy/functions/elementary/trigonometric.py', 2049, 2062, 0.5), ('sympy/functions/elementary/trigonometric.py', 2600, 2600, 0.5), ('sympy/functions/elementary/trigonometric.py', 2603, 2603, 0.5), ('sympy/functions/elementary/trigonometric.py', 2607, 2607, 0.5), ('sympy/functions/elementary/trigonometric.py', 2610, 2612, 0.5), ('sympy/functions/elementary/trigonometric.py', 2615, 2616, 0.5), ('sympy/functions/elementary/trigonometric.py', 2619, 2619, 0.5), ('sympy/functions/elementary/trigonometric.py', 2622, 2622, 0.5), ('sympy/functions/elementary/trigonometric.py', 2631, 2631, 0.5), ('sympy/ntheory/factor_.py', 536, 536, 0.5), ('sympy/ntheory/generate.py', 93, 95, 0.5), ('sympy/ntheory/generate.py', 169, 169, 0.5), ('sympy/ntheory/generate.py', 173, 173, 0.5), ('sympy/ntheory/generate.py', 177, 179, 0.5), ('sympy/ntheory/generate.py', 296, 296, 0.5), ('sympy/ntheory/generate.py', 300, 302, 0.5), ('sympy/ntheory/generate.py', 304, 304, 0.5), ('sympy/ntheory/generate.py', 306, 308, 0.5), ('sympy/ntheory/generate.py', 576, 578, 0.5), ('sympy/ntheory/generate.py', 588, 588, 0.5), ('sympy/ntheory/multinomial.py', 90, 92, 0.5), ('sympy/ntheory/multinomial.py', 94, 97, 0.5), ('sympy/ntheory/multinomial.py', 101, 101, 0.5), ('sympy/ntheory/multinomial.py', 113, 116, 0.5), ('sympy/printing/str.py', 163, 163, 0.5), ('sympy/simplify/cse_opts.py', 14, 19, 0.5), ('sympy/simplify/cse_opts.py', 22, 22, 0.5), ('sympy/simplify/radsimp.py', 1096, 1097, 0.5), ('sympy/utilities/iterables.py', 2047, 2049, 0.5), ('sympy/utilities/iterables.py', 2051, 2052, 0.5), ('sympy/core/add.py', 262, 265, 0.4472135954999579), ('sympy/core/add.py', 763, 771, 0.4472135954999579), ('sympy/core/add.py', 791, 798, 0.4472135954999579), ('sympy/core/add.py', 800, 802, 0.4472135954999579), ('sympy/core/add.py', 821, 829, 0.4472135954999579), ('sympy/core/add.py', 871, 872, 0.4472135954999579), ('sympy/core/basic.py', 883, 886, 0.4472135954999579), ('sympy/core/basic.py', 888, 890, 0.4472135954999579), ('sympy/core/basic.py', 917, 918, 0.4472135954999579), ('sympy/core/basic.py', 925, 927, 0.4472135954999579), ('sympy/core/basic.py', 929, 929, 0.4472135954999579), ('sympy/core/evalf.py', 190, 192, 0.4472135954999579), ('sympy/core/evalf.py', 208, 210, 0.4472135954999579), ('sympy/core/evalf.py', 459, 462, 0.4472135954999579), ('sympy/core/evalf.py', 466, 470, 0.4472135954999579), ('sympy/core/evalf.py', 472, 472, 0.4472135954999579), ('sympy/core/evalf.py', 477, 478, 0.4472135954999579), ('sympy/core/evalf.py', 480, 486, 0.4472135954999579), ('sympy/core/evalf.py', 489, 489, 0.4472135954999579), ('sympy/core/evalf.py', 495, 495, 0.4472135954999579), ('sympy/core/evalf.py', 497, 497, 0.4472135954999579), ('sympy/core/evalf.py', 499, 499, 0.4472135954999579), ('sympy/core/evalf.py', 511, 516, 0.4472135954999579), ('sympy/core/evalf.py', 527, 527, 0.4472135954999579), ('sympy/core/evalf.py', 529, 530, 0.4472135954999579), ('sympy/core/evalf.py', 532, 532, 0.4472135954999579), ('sympy/core/evalf.py', 534, 541, 0.4472135954999579), ('sympy/core/evalf.py', 543, 543, 0.4472135954999579), ('sympy/core/evalf.py', 558, 558, 0.4472135954999579), ('sympy/core/evalf.py', 1363, 1367, 0.4472135954999579), ('sympy/core/evalf.py', 1369, 1369, 0.4472135954999579), ('sympy/core/evalf.py', 1371, 1372, 0.4472135954999579), ('sympy/core/evalf.py', 1374, 1375, 0.4472135954999579), ('sympy/core/evalf.py', 1377, 1378, 0.4472135954999579), ('sympy/core/evalf.py', 1380, 1380, 0.4472135954999579), ('sympy/core/evalf.py', 1383, 1385, 0.4472135954999579), ('sympy/core/evalf.py', 1388, 1388, 0.4472135954999579), ('sympy/core/evalf.py', 1396, 1396, 0.4472135954999579), ('sympy/core/evalf.py', 1536, 1540, 0.4472135954999579), ('sympy/core/evalf.py', 1558, 1559, 0.4472135954999579), ('sympy/core/expr.py', 110, 113, 0.4472135954999579), ('sympy/core/expr.py', 382, 383, 0.4472135954999579), ('sympy/core/expr.py', 866, 871, 0.4472135954999579), ('sympy/core/expr.py', 1154, 1164, 0.4472135954999579), ('sympy/core/expr.py', 1857, 1860, 0.4472135954999579), ('sympy/core/expr.py', 1862, 1862, 0.4472135954999579), ('sympy/core/expr.py', 1865, 1867, 0.4472135954999579), ('sympy/core/expr.py', 1873, 1876, 0.4472135954999579), ('sympy/core/expr.py', 1879, 1879, 0.4472135954999579), ('sympy/core/expr.py', 1881, 1881, 0.4472135954999579), ('sympy/core/expr.py', 1884, 1886, 0.4472135954999579), ('sympy/core/expr.py', 1896, 1897, 0.4472135954999579), ('sympy/core/expr.py', 1901, 1905, 0.4472135954999579), ('sympy/core/expr.py', 1939, 1941, 0.4472135954999579), ('sympy/core/expr.py', 2247, 2252, 0.4472135954999579), ('sympy/core/expr.py', 2254, 2254, 0.4472135954999579), ('sympy/core/expr.py', 2570, 2570, 0.4472135954999579), ('sympy/core/exprtools.py', 1261, 1272, 0.4472135954999579), ('sympy/core/function.py', 161, 166, 0.4472135954999579), ('sympy/core/function.py', 171, 171, 0.4472135954999579), ('sympy/core/function.py', 181, 181, 0.4472135954999579), ('sympy/core/function.py', 183, 183, 0.4472135954999579), ('sympy/core/function.py', 185, 185, 0.4472135954999579), ('sympy/core/function.py', 453, 454, 0.4472135954999579), ('sympy/core/function.py', 916, 916, 0.4472135954999579), ('sympy/core/function.py', 919, 920, 0.4472135954999579), ('sympy/core/function.py', 923, 923, 0.4472135954999579), ('sympy/core/function.py', 926, 930, 0.4472135954999579), ('sympy/core/function.py', 932, 932, 0.4472135954999579), ('sympy/core/function.py', 936, 936, 0.4472135954999579), ('sympy/core/function.py', 938, 938, 0.4472135954999579), ('sympy/core/function.py', 940, 940, 0.4472135954999579), ('sympy/core/function.py', 942, 946, 0.4472135954999579), ('sympy/core/function.py', 957, 959, 0.4472135954999579), ('sympy/core/mul.py', 737, 737, 0.4472135954999579), ('sympy/core/mul.py', 859, 870, 0.4472135954999579), ('sympy/core/mul.py', 872, 872, 0.4472135954999579), ('sympy/core/mul.py', 919, 924, 0.4472135954999579), ('sympy/core/mul.py', 926, 928, 0.4472135954999579), ('sympy/core/mul.py', 944, 948, 0.4472135954999579), ('sympy/core/mul.py', 958, 965, 0.4472135954999579), ('sympy/core/mul.py', 967, 968, 0.4472135954999579), ('sympy/core/mul.py', 1248, 1253, 0.4472135954999579), ('sympy/core/mul.py', 1255, 1259, 0.4472135954999579), ('sympy/core/mul.py', 1310, 1313, 0.4472135954999579), ('sympy/core/mul.py', 1989, 1991, 0.4472135954999579), ('sympy/core/numbers.py', 1072, 1076, 0.4472135954999579), ('sympy/core/numbers.py', 1078, 1078, 0.4472135954999579), ('sympy/core/numbers.py', 1080, 1080, 0.4472135954999579), ('sympy/core/numbers.py', 1082, 1082, 0.4472135954999579), ('sympy/core/numbers.py', 1084, 1084, 0.4472135954999579), ('sympy/core/numbers.py', 1086, 1086, 0.4472135954999579), ('sympy/core/numbers.py', 1088, 1088, 0.4472135954999579), ('sympy/core/numbers.py', 1094, 1096, 0.4472135954999579), ('sympy/core/numbers.py', 1098, 1098, 0.4472135954999579), ('sympy/core/numbers.py', 1135, 1136, 0.4472135954999579), ('sympy/core/numbers.py', 1138, 1138, 0.4472135954999579), ('sympy/core/numbers.py', 1140, 1141, 0.4472135954999579), ('sympy/core/numbers.py', 1189, 1189, 0.4472135954999579), ('sympy/core/numbers.py', 1231, 1231, 0.4472135954999579), ('sympy/core/numbers.py', 1266, 1266, 0.4472135954999579), ('sympy/core/numbers.py', 1268, 1268, 0.4472135954999579), ('sympy/core/numbers.py', 1270, 1270, 0.4472135954999579), ('sympy/core/numbers.py', 1347, 1347, 0.4472135954999579), ('sympy/core/numbers.py', 1701, 1703, 0.4472135954999579), ('sympy/core/numbers.py', 2259, 2261, 0.4472135954999579), ('sympy/core/numbers.py', 2615, 2615, 0.4472135954999579), ('sympy/core/numbers.py', 3252, 3252, 0.4472135954999579), ('sympy/core/numbers.py', 3479, 3480, 0.4472135954999579), ('sympy/core/numbers.py', 3483, 3483, 0.4472135954999579), ('sympy/core/operations.py', 326, 326, 0.4472135954999579), ('sympy/core/operations.py', 330, 332, 0.4472135954999579), ('sympy/core/operations.py', 334, 335, 0.4472135954999579), ('sympy/core/operations.py', 337, 338, 0.4472135954999579), ('sympy/core/operations.py', 340, 340, 0.4472135954999579), ('sympy/core/operations.py', 342, 342, 0.4472135954999579), ('sympy/core/operations.py', 351, 352, 0.4472135954999579), ('sympy/core/operations.py', 366, 371, 0.4472135954999579), ('sympy/core/operations.py', 374, 374, 0.4472135954999579), ('sympy/core/operations.py', 397, 400, 0.4472135954999579), ('sympy/core/operations.py', 403, 404, 0.4472135954999579), ('sympy/core/power.py', 416, 419, 0.4472135954999579), ('sympy/core/power.py', 424, 425, 0.4472135954999579), ('sympy/core/power.py', 570, 571, 0.4472135954999579), ('sympy/core/power.py', 733, 734, 0.4472135954999579), ('sympy/core/power.py', 792, 792, 0.4472135954999579), ('sympy/core/power.py', 794, 794, 0.4472135954999579), ('sympy/core/power.py', 801, 801, 0.4472135954999579), ('sympy/core/power.py', 1125, 1126, 0.4472135954999579), ('sympy/core/power.py', 1146, 1146, 0.4472135954999579), ('sympy/core/power.py', 1148, 1149, 0.4472135954999579), ('sympy/core/power.py', 1151, 1152, 0.4472135954999579), ('sympy/core/power.py', 1155, 1155, 0.4472135954999579), ('sympy/core/power.py', 1157, 1157, 0.4472135954999579), ('sympy/core/power.py', 1168, 1168, 0.4472135954999579), ('sympy/core/relational.py', 1040, 1040, 0.4472135954999579), ('sympy/core/relational.py', 1116, 1116, 0.4472135954999579), ('sympy/core/symbol.py', 52, 56, 0.4472135954999579), ('sympy/functions/elementary/complexes.py', 262, 262, 0.4472135954999579), ('sympy/functions/elementary/complexes.py', 367, 367, 0.4472135954999579), ('sympy/functions/elementary/complexes.py', 612, 621, 0.4472135954999579), ('sympy/functions/elementary/complexes.py', 655, 655, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 295, 298, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 319, 319, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 322, 322, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 345, 345, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 639, 642, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 644, 644, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 646, 646, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 682, 682, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 684, 685, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 687, 687, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 694, 694, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 696, 696, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 701, 701, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 712, 712, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 716, 717, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 730, 730, 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 789, 789, 0.4472135954999579), ('sympy/functions/elementary/trigonometric.py', 2598, 2598, 0.4472135954999579), ('sympy/ntheory/factor_.py', 456, 459, 0.4472135954999579), ('sympy/ntheory/factor_.py', 461, 467, 0.4472135954999579), ('sympy/ntheory/factor_.py', 482, 483, 0.4472135954999579), ('sympy/ntheory/factor_.py', 488, 488, 0.4472135954999579), ('sympy/ntheory/factor_.py', 490, 490, 0.4472135954999579), ('sympy/ntheory/factor_.py', 497, 498, 0.4472135954999579), ('sympy/ntheory/generate.py', 746, 746, 0.4472135954999579), ('sympy/ntheory/generate.py', 748, 748, 0.4472135954999579), ('sympy/ntheory/generate.py', 750, 750, 0.4472135954999579), ('sympy/printing/str.py', 814, 814, 0.4472135954999579), ('sympy/simplify/radsimp.py', 1083, 1086, 0.4472135954999579), ('sympy/simplify/simplify.py', 1119, 1119, 0.4472135954999579), ('sympy/core/add.py', 460, 468, 0.4082482904638631), ('sympy/core/add.py', 704, 707, 0.4082482904638631), ('sympy/core/add.py', 713, 714, 0.4082482904638631), ('sympy/core/add.py', 737, 745, 0.4082482904638631), ('sympy/core/add.py', 747, 749, 0.4082482904638631), ('sympy/core/add.py', 831, 833, 0.4082482904638631), ('sympy/core/basic.py', 1150, 1160, 0.4082482904638631), ('sympy/core/basic.py', 1163, 1166, 0.4082482904638631), ('sympy/core/compatibility.py', 242, 244, 0.4082482904638631), ('sympy/core/evalf.py', 141, 143, 0.4082482904638631), ('sympy/core/evalf.py', 145, 148, 0.4082482904638631), ('sympy/core/evalf.py', 562, 563, 0.4082482904638631), ('sympy/core/evalf.py', 568, 568, 0.4082482904638631), ('sympy/core/evalf.py', 571, 575, 0.4082482904638631), ('sympy/core/evalf.py', 577, 578, 0.4082482904638631), ('sympy/core/evalf.py', 580, 580, 0.4082482904638631), ('sympy/core/evalf.py', 589, 589, 0.4082482904638631), ('sympy/core/evalf.py', 592, 592, 0.4082482904638631), ('sympy/core/evalf.py', 595, 595, 0.4082482904638631), ('sympy/core/evalf.py', 601, 604, 0.4082482904638631), ('sympy/core/evalf.py', 606, 607, 0.4082482904638631), ('sympy/core/evalf.py', 623, 627, 0.4082482904638631), ('sympy/core/evalf.py', 630, 633, 0.4082482904638631), ('sympy/core/evalf.py', 635, 635, 0.4082482904638631), ('sympy/core/evalf.py', 638, 638, 0.4082482904638631), ('sympy/core/expr.py', 107, 108, 0.4082482904638631), ('sympy/core/expr.py', 115, 115, 0.4082482904638631), ('sympy/core/expr.py', 262, 264, 0.4082482904638631), ('sympy/core/expr.py', 859, 863, 0.4082482904638631), ('sympy/core/expr.py', 1080, 1081, 0.4082482904638631), ('sympy/core/expr.py', 1084, 1084, 0.4082482904638631), ('sympy/core/expr.py', 1212, 1213, 0.4082482904638631), ('sympy/core/expr.py', 1215, 1216, 0.4082482904638631), ('sympy/core/expr.py', 1229, 1230, 0.4082482904638631), ('sympy/core/expr.py', 1237, 1238, 0.4082482904638631), ('sympy/core/expr.py', 1361, 1364, 0.4082482904638631), ('sympy/core/expr.py', 1481, 1482, 0.4082482904638631), ('sympy/core/expr.py', 1485, 1485, 0.4082482904638631), ('sympy/core/expr.py', 1487, 1487, 0.4082482904638631), ('sympy/core/expr.py', 1495, 1495, 0.4082482904638631), ('sympy/core/expr.py', 1502, 1502, 0.4082482904638631), ('sympy/core/expr.py', 1513, 1513, 0.4082482904638631), ('sympy/core/expr.py', 1515, 1515, 0.4082482904638631), ('sympy/core/expr.py', 1524, 1524, 0.4082482904638631), ('sympy/core/expr.py', 1559, 1563, 0.4082482904638631), ('sympy/core/expr.py', 1566, 1567, 0.4082482904638631), ('sympy/core/expr.py', 1569, 1571, 0.4082482904638631), ('sympy/core/expr.py', 1573, 1573, 0.4082482904638631), ('sympy/core/expr.py', 1581, 1582, 0.4082482904638631), ('sympy/core/expr.py', 2476, 2476, 0.4082482904638631), ('sympy/core/expr.py', 2494, 2494, 0.4082482904638631), ('sympy/core/expr.py', 3480, 3480, 0.4082482904638631), ('sympy/core/function.py', 138, 138, 0.4082482904638631), ('sympy/core/function.py', 860, 862, 0.4082482904638631), ('sympy/core/function.py', 865, 866, 0.4082482904638631), ('sympy/core/function.py', 954, 954, 0.4082482904638631), ('sympy/core/function.py', 962, 962, 0.4082482904638631), ('sympy/core/mul.py', 1341, 1352, 0.4082482904638631), ('sympy/core/mul.py', 1474, 1475, 0.4082482904638631), ('sympy/core/mul.py', 1936, 1936, 0.4082482904638631), ('sympy/core/mul.py', 2082, 2083, 0.4082482904638631), ('sympy/core/mul.py', 2085, 2085, 0.4082482904638631), ('sympy/core/numbers.py', 254, 258, 0.4082482904638631), ('sympy/core/numbers.py', 1194, 1196, 0.4082482904638631), ('sympy/core/numbers.py', 1280, 1280, 0.4082482904638631), ('sympy/core/numbers.py', 1304, 1307, 0.4082482904638631), ('sympy/core/numbers.py', 1452, 1452, 0.4082482904638631), ('sympy/core/numbers.py', 1454, 1455, 0.4082482904638631), ('sympy/core/numbers.py', 1457, 1457, 0.4082482904638631), ('sympy/core/numbers.py', 1686, 1686, 0.4082482904638631), ('sympy/core/numbers.py', 1689, 1689, 0.4082482904638631), ('sympy/core/numbers.py', 1839, 1839, 0.4082482904638631), ('sympy/core/numbers.py', 1914, 1917, 0.4082482904638631), ('sympy/core/numbers.py', 1970, 1970, 0.4082482904638631), ('sympy/core/numbers.py', 1972, 1974, 0.4082482904638631), ('sympy/core/numbers.py', 2035, 2035, 0.4082482904638631), ('sympy/core/numbers.py', 2111, 2111, 0.4082482904638631), ('sympy/core/numbers.py', 2117, 2117, 0.4082482904638631), ('sympy/core/numbers.py', 2290, 2290, 0.4082482904638631), ('sympy/core/numbers.py', 2343, 2344, 0.4082482904638631), ('sympy/core/numbers.py', 2360, 2360, 0.4082482904638631), ('sympy/core/numbers.py', 2363, 2369, 0.4082482904638631), ('sympy/core/numbers.py', 2377, 2378, 0.4082482904638631), ('sympy/core/numbers.py', 2381, 2381, 0.4082482904638631), ('sympy/core/numbers.py', 2383, 2385, 0.4082482904638631), ('sympy/core/numbers.py', 2398, 2398, 0.4082482904638631), ('sympy/core/numbers.py', 2954, 2954, 0.4082482904638631), ('sympy/core/numbers.py', 3117, 3117, 0.4082482904638631), ('sympy/core/power.py', 70, 71, 0.4082482904638631), ('sympy/core/power.py', 73, 73, 0.4082482904638631), ('sympy/core/power.py', 75, 75, 0.4082482904638631), ('sympy/core/power.py', 84, 84, 0.4082482904638631), ('sympy/core/power.py', 87, 87, 0.4082482904638631), ('sympy/core/power.py', 379, 382, 0.4082482904638631), ('sympy/core/power.py', 384, 384, 0.4082482904638631), ('sympy/core/power.py', 386, 386, 0.4082482904638631), ('sympy/core/power.py', 394, 394, 0.4082482904638631), ('sympy/core/power.py', 404, 404, 0.4082482904638631), ('sympy/core/power.py', 409, 409, 0.4082482904638631), ('sympy/core/power.py', 422, 422, 0.4082482904638631), ('sympy/core/power.py', 650, 650, 0.4082482904638631), ('sympy/core/power.py', 657, 657, 0.4082482904638631), ('sympy/core/power.py', 1286, 1287, 0.4082482904638631), ('sympy/core/relational.py', 728, 728, 0.4082482904638631), ('sympy/core/relational.py', 1072, 1075, 0.4082482904638631), ('sympy/core/symbol.py', 423, 423, 0.4082482904638631), ('sympy/functions/elementary/complexes.py', 72, 76, 0.4082482904638631), ('sympy/functions/elementary/complexes.py', 252, 252, 0.4082482904638631), ('sympy/functions/elementary/complexes.py', 258, 258, 0.4082482904638631), ('sympy/functions/elementary/complexes.py', 635, 635, 0.4082482904638631), ('sympy/functions/elementary/trigonometric.py', 2589, 2590, 0.4082482904638631), ('sympy/functions/elementary/trigonometric.py', 2592, 2592, 0.4082482904638631), ('sympy/functions/elementary/trigonometric.py', 2594, 2594, 0.4082482904638631), ('sympy/functions/elementary/trigonometric.py', 2596, 2596, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1125, 1125, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1127, 1127, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1135, 1136, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1140, 1140, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1143, 1143, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1145, 1145, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1158, 1158, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1171, 1171, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1174, 1174, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1176, 1177, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1200, 1203, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1206, 1206, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1213, 1213, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1217, 1217, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1220, 1221, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1449, 1450, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1461, 1469, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1472, 1472, 0.4082482904638631), ('sympy/ntheory/factor_.py', 1474, 1475, 0.4082482904638631), ('sympy/ntheory/multinomial.py', 84, 86, 0.4082482904638631), ('sympy/simplify/simplify.py', 404, 406, 0.4082482904638631), ('sympy/simplify/simplify.py', 1208, 1208, 0.4082482904638631), ('sympy/core/add.py', 296, 297, 0.3779644730092272), ('sympy/core/add.py', 654, 654, 0.3779644730092272), ('sympy/core/add.py', 1033, 1033, 0.3779644730092272), ('sympy/core/basic.py', 674, 676, 0.3779644730092272), ('sympy/core/basic.py', 678, 678, 0.3779644730092272), ('sympy/core/basic.py', 685, 685, 0.3779644730092272), ('sympy/core/basic.py', 1711, 1716, 0.3779644730092272), ('sympy/core/basic.py', 1718, 1719, 0.3779644730092272), ('sympy/core/compatibility.py', 199, 204, 0.3779644730092272), ('sympy/core/compatibility.py', 594, 600, 0.3779644730092272), ('sympy/core/core.py', 83, 94, 0.3779644730092272), ('sympy/core/evalf.py', 38, 38, 0.3779644730092272), ('sympy/core/expr.py', 1345, 1347, 0.3779644730092272), ('sympy/core/expr.py', 2295, 2304, 0.3779644730092272), ('sympy/core/expr.py', 2308, 2308, 0.3779644730092272), ('sympy/core/expr.py', 3546, 3549, 0.3779644730092272), ('sympy/core/expr.py', 3915, 3915, 0.3779644730092272), ('sympy/core/exprtools.py', 26, 26, 0.3779644730092272), ('sympy/core/exprtools.py', 107, 109, 0.3779644730092272), ('sympy/core/exprtools.py', 167, 167, 0.3779644730092272), ('sympy/core/exprtools.py', 242, 245, 0.3779644730092272), ('sympy/core/exprtools.py', 374, 381, 0.3779644730092272), ('sympy/core/exprtools.py', 383, 386, 0.3779644730092272), ('sympy/core/exprtools.py', 388, 389, 0.3779644730092272), ('sympy/core/exprtools.py', 457, 458, 0.3779644730092272), ('sympy/core/facts.py', 519, 521, 0.3779644730092272), ('sympy/core/function.py', 346, 346, 0.3779644730092272), ('sympy/core/function.py', 2910, 2911, 0.3779644730092272), ('sympy/core/mul.py', 386, 390, 0.3779644730092272), ('sympy/core/mul.py', 393, 393, 0.3779644730092272), ('sympy/core/mul.py', 396, 398, 0.3779644730092272), ('sympy/core/mul.py', 547, 550, 0.3779644730092272), ('sympy/core/mul.py', 564, 565, 0.3779644730092272), ('sympy/core/mul.py', 569, 574, 0.3779644730092272), ('sympy/core/mul.py', 595, 597, 0.3779644730092272), ('sympy/core/mul.py', 601, 602, 0.3779644730092272), ('sympy/core/mul.py', 605, 607, 0.3779644730092272), ('sympy/core/mul.py', 609, 610, 0.3779644730092272), ('sympy/core/mul.py', 613, 614, 0.3779644730092272), ('sympy/core/mul.py', 931, 931, 0.3779644730092272), ('sympy/core/mul.py', 935, 937, 0.3779644730092272), ('sympy/core/mul.py', 950, 951, 0.3779644730092272), ('sympy/core/mul.py', 955, 956, 0.3779644730092272), ('sympy/core/mul.py', 1413, 1415, 0.3779644730092272), ('sympy/core/mul.py', 1417, 1423, 0.3779644730092272), ('sympy/core/mul.py', 1528, 1533, 0.3779644730092272), ('sympy/core/mul.py', 1538, 1542, 0.3779644730092272), ('sympy/core/mul.py', 1598, 1601, 0.3779644730092272), ('sympy/core/mul.py', 1603, 1604, 0.3779644730092272), ('sympy/core/mul.py', 1964, 1970, 0.3779644730092272), ('sympy/core/mul.py', 1974, 1974, 0.3779644730092272), ('sympy/core/mul.py', 2058, 2064, 0.3779644730092272), ('sympy/core/numbers.py', 709, 709, 0.3779644730092272), ('sympy/core/numbers.py', 713, 713, 0.3779644730092272), ('sympy/core/numbers.py', 1283, 1283, 0.3779644730092272), ('sympy/core/numbers.py', 1395, 1398, 0.3779644730092272), ('sympy/core/numbers.py', 1444, 1444, 0.3779644730092272), ('sympy/core/numbers.py', 1446, 1447, 0.3779644730092272), ('sympy/core/numbers.py', 1449, 1449, 0.3779644730092272), ('sympy/core/numbers.py', 1740, 1741, 0.3779644730092272), ('sympy/core/numbers.py', 1946, 1947, 0.3779644730092272), ('sympy/core/numbers.py', 2313, 2313, 0.3779644730092272), ('sympy/core/numbers.py', 2315, 2315, 0.3779644730092272), ('sympy/core/numbers.py', 2320, 2320, 0.3779644730092272), ('sympy/core/numbers.py', 2322, 2322, 0.3779644730092272), ('sympy/core/numbers.py', 2327, 2327, 0.3779644730092272), ('sympy/core/numbers.py', 2335, 2335, 0.3779644730092272), ('sympy/core/numbers.py', 2912, 2912, 0.3779644730092272), ('sympy/core/numbers.py', 3993, 3993, 0.3779644730092272), ('sympy/core/power.py', 318, 319, 0.3779644730092272), ('sympy/core/power.py', 321, 321, 0.3779644730092272), ('sympy/core/power.py', 645, 648, 0.3779644730092272), ('sympy/core/power.py', 726, 728, 0.3779644730092272), ('sympy/core/power.py', 730, 731, 0.3779644730092272), ('sympy/core/power.py', 748, 751, 0.3779644730092272), ('sympy/core/power.py', 753, 753, 0.3779644730092272), ('sympy/core/power.py', 1408, 1410, 0.3779644730092272), ('sympy/core/power.py', 1521, 1524, 0.3779644730092272), ('sympy/core/singleton.py', 175, 175, 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 136, 136, 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 361, 361, 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 363, 363, 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 365, 365, 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 763, 766, 0.3779644730092272), ('sympy/functions/elementary/exponential.py', 76, 76, 0.3779644730092272), ('sympy/functions/elementary/integers.py', 23, 26, 0.3779644730092272), ('sympy/functions/elementary/integers.py', 275, 276, 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 232, 237, 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 241, 243, 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 283, 283, 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 286, 287, 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 292, 296, 0.3779644730092272), ('sympy/sets/fancysets.py', 144, 144, 0.3779644730092272), ('sympy/sets/fancysets.py', 146, 147, 0.3779644730092272), ('sympy/core/_print_helpers.py', 28, 29, 0.35355339059327373), ('sympy/core/add.py', 268, 268, 0.35355339059327373), ('sympy/core/add.py', 282, 284, 0.35355339059327373), ('sympy/core/add.py', 306, 308, 0.35355339059327373), ('sympy/core/add.py', 375, 375, 0.35355339059327373), ('sympy/core/add.py', 609, 609, 0.35355339059327373), ('sympy/core/add.py', 672, 674, 0.35355339059327373), ('sympy/core/add.py', 676, 677, 0.35355339059327373), ('sympy/core/add.py', 781, 783, 0.35355339059327373), ('sympy/core/add.py', 785, 785, 0.35355339059327373), ('sympy/core/add.py', 787, 787, 0.35355339059327373), ('sympy/core/add.py', 865, 867, 0.35355339059327373), ('sympy/core/add.py', 869, 869, 0.35355339059327373), ('sympy/core/add.py', 875, 876, 0.35355339059327373), ('sympy/core/add.py', 879, 879, 0.35355339059327373), ('sympy/core/add.py', 1144, 1146, 0.35355339059327373), ('sympy/core/add.py', 1153, 1153, 0.35355339059327373), ('sympy/core/add.py', 1194, 1194, 0.35355339059327373), ('sympy/core/assumptions.py', 454, 454, 0.35355339059327373), ('sympy/core/assumptions.py', 535, 535, 0.35355339059327373), ('sympy/core/assumptions.py', 546, 551, 0.35355339059327373), ('sympy/core/assumptions.py', 553, 554, 0.35355339059327373), ('sympy/core/assumptions.py', 556, 560, 0.35355339059327373), ('sympy/core/assumptions.py', 567, 569, 0.35355339059327373), ('sympy/core/assumptions.py', 571, 572, 0.35355339059327373), ('sympy/core/assumptions.py', 574, 574, 0.35355339059327373), ('sympy/core/assumptions.py', 580, 582, 0.35355339059327373), ('sympy/core/basic.py', 216, 225, 0.35355339059327373), ('sympy/core/basic.py', 1039, 1046, 0.35355339059327373), ('sympy/core/basic.py', 1059, 1059, 0.35355339059327373), ('sympy/core/basic.py', 1062, 1063, 0.35355339059327373), ('sympy/core/core.py', 70, 71, 0.35355339059327373), ('sympy/core/evalf.py', 1298, 1298, 0.35355339059327373), ('sympy/core/expr.py', 199, 200, 0.35355339059327373), ('sympy/core/expr.py', 271, 273, 0.35355339059327373), ('sympy/core/expr.py', 361, 363, 0.35355339059327373), ('sympy/core/expr.py', 1065, 1065, 0.35355339059327373), ('sympy/core/expr.py', 1067, 1069, 0.35355339059327373), ('sympy/core/expr.py', 1075, 1075, 0.35355339059327373), ('sympy/core/expr.py', 1077, 1078, 0.35355339059327373), ('sympy/core/expr.py', 1086, 1086, 0.35355339059327373), ('sympy/core/expr.py', 1088, 1089, 0.35355339059327373), ('sympy/core/expr.py', 1091, 1093, 0.35355339059327373), ('sympy/core/expr.py', 1095, 1095, 0.35355339059327373), ('sympy/core/expr.py', 1097, 1097, 0.35355339059327373), ('sympy/core/expr.py', 1149, 1149, 0.35355339059327373), ('sympy/core/expr.py', 1151, 1151, 0.35355339059327373), ('sympy/core/expr.py', 1166, 1167, 0.35355339059327373), ('sympy/core/expr.py', 1169, 1170, 0.35355339059327373), ('sympy/core/expr.py', 1183, 1183, 0.35355339059327373), ('sympy/core/expr.py', 1186, 1186, 0.35355339059327373), ('sympy/core/expr.py', 1190, 1192, 0.35355339059327373), ('sympy/core/expr.py', 1194, 1194, 0.35355339059327373), ('sympy/core/expr.py', 1196, 1197, 0.35355339059327373), ('sympy/core/expr.py', 1199, 1200, 0.35355339059327373), ('sympy/core/expr.py', 1220, 1221, 0.35355339059327373), ('sympy/core/expr.py', 1223, 1223, 0.35355339059327373), ('sympy/core/expr.py', 1225, 1225, 0.35355339059327373), ('sympy/core/expr.py', 1227, 1227, 0.35355339059327373), ('sympy/core/expr.py', 1232, 1232, 0.35355339059327373), ('sympy/core/expr.py', 1234, 1235, 0.35355339059327373), ('sympy/core/expr.py', 1240, 1240, 0.35355339059327373), ('sympy/core/expr.py', 1242, 1242, 0.35355339059327373), ('sympy/core/expr.py', 1723, 1725, 0.35355339059327373), ('sympy/core/expr.py', 2146, 2146, 0.35355339059327373), ('sympy/core/expr.py', 2241, 2245, 0.35355339059327373), ('sympy/core/expr.py', 2262, 2264, 0.35355339059327373), ('sympy/core/expr.py', 2631, 2631, 0.35355339059327373), ('sympy/core/expr.py', 2634, 2634, 0.35355339059327373), ('sympy/core/expr.py', 2636, 2636, 0.35355339059327373), ('sympy/core/expr.py', 2640, 2640, 0.35355339059327373), ('sympy/core/expr.py', 3609, 3620, 0.35355339059327373), ('sympy/core/exprtools.py', 324, 324, 0.35355339059327373), ('sympy/core/exprtools.py', 326, 326, 0.35355339059327373), ('sympy/core/exprtools.py', 328, 328, 0.35355339059327373), ('sympy/core/exprtools.py', 330, 330, 0.35355339059327373), ('sympy/core/exprtools.py', 332, 332, 0.35355339059327373), ('sympy/core/exprtools.py', 350, 350, 0.35355339059327373), ('sympy/core/exprtools.py', 370, 370, 0.35355339059327373), ('sympy/core/exprtools.py', 400, 402, 0.35355339059327373), ('sympy/core/exprtools.py', 404, 404, 0.35355339059327373), ('sympy/core/exprtools.py', 422, 423, 0.35355339059327373), ('sympy/core/exprtools.py', 447, 449, 0.35355339059327373), ('sympy/core/exprtools.py', 475, 475, 0.35355339059327373), ('sympy/core/exprtools.py', 477, 477, 0.35355339059327373), ('sympy/core/exprtools.py', 479, 479, 0.35355339059327373), ('sympy/core/exprtools.py', 481, 481, 0.35355339059327373), ('sympy/core/exprtools.py', 491, 491, 0.35355339059327373), ('sympy/core/exprtools.py', 504, 504, 0.35355339059327373), ('sympy/core/exprtools.py', 511, 512, 0.35355339059327373), ('sympy/core/exprtools.py', 514, 518, 0.35355339059327373), ('sympy/core/exprtools.py', 561, 561, 0.35355339059327373), ('sympy/core/exprtools.py', 740, 740, 0.35355339059327373), ('sympy/core/exprtools.py', 745, 745, 0.35355339059327373), ('sympy/core/exprtools.py', 747, 747, 0.35355339059327373), ('sympy/core/exprtools.py', 756, 756, 0.35355339059327373), ('sympy/core/exprtools.py', 818, 819, 0.35355339059327373), ('sympy/core/exprtools.py', 823, 824, 0.35355339059327373), ('sympy/core/exprtools.py', 826, 827, 0.35355339059327373), ('sympy/core/exprtools.py', 829, 829, 0.35355339059327373), ('sympy/core/exprtools.py', 833, 834, 0.35355339059327373), ('sympy/core/exprtools.py', 838, 839, 0.35355339059327373), ('sympy/core/exprtools.py', 841, 841, 0.35355339059327373), ('sympy/core/exprtools.py', 843, 843, 0.35355339059327373), ('sympy/core/exprtools.py', 846, 846, 0.35355339059327373), ('sympy/core/exprtools.py', 849, 851, 0.35355339059327373), ('sympy/core/exprtools.py', 860, 860, 0.35355339059327373), ('sympy/core/exprtools.py', 863, 865, 0.35355339059327373), ('sympy/core/exprtools.py', 867, 867, 0.35355339059327373), ('sympy/core/exprtools.py', 869, 869, 0.35355339059327373), ('sympy/core/exprtools.py', 872, 872, 0.35355339059327373), ('sympy/core/exprtools.py', 875, 875, 0.35355339059327373), ('sympy/core/exprtools.py', 886, 888, 0.35355339059327373), ('sympy/core/exprtools.py', 938, 938, 0.35355339059327373), ('sympy/core/exprtools.py', 941, 941, 0.35355339059327373), ('sympy/core/exprtools.py', 946, 946, 0.35355339059327373), ('sympy/core/exprtools.py', 949, 949, 0.35355339059327373), ('sympy/core/exprtools.py', 955, 957, 0.35355339059327373), ('sympy/core/exprtools.py', 959, 960, 0.35355339059327373), ('sympy/core/exprtools.py', 962, 962, 0.35355339059327373), ('sympy/core/exprtools.py', 973, 974, 0.35355339059327373), ('sympy/core/exprtools.py', 976, 978, 0.35355339059327373), ('sympy/core/exprtools.py', 980, 980, 0.35355339059327373), ('sympy/core/exprtools.py', 984, 984, 0.35355339059327373), ('sympy/core/exprtools.py', 1048, 1048, 0.35355339059327373), ('sympy/core/exprtools.py', 1051, 1054, 0.35355339059327373), ('sympy/core/exprtools.py', 1061, 1062, 0.35355339059327373), ('sympy/core/exprtools.py', 1064, 1065, 0.35355339059327373), ('sympy/core/exprtools.py', 1069, 1071, 0.35355339059327373), ('sympy/core/exprtools.py', 1074, 1080, 0.35355339059327373), ('sympy/core/exprtools.py', 1087, 1087, 0.35355339059327373), ('sympy/core/exprtools.py', 1232, 1233, 0.35355339059327373), ('sympy/core/exprtools.py', 1240, 1240, 0.35355339059327373), ('sympy/core/exprtools.py', 1245, 1247, 0.35355339059327373), ('sympy/core/exprtools.py', 1249, 1250, 0.35355339059327373), ('sympy/core/exprtools.py', 1254, 1257, 0.35355339059327373), ('sympy/core/function.py', 529, 532, 0.35355339059327373), ('sympy/core/logic.py', 109, 112, 0.35355339059327373), ('sympy/core/mul.py', 503, 503, 0.35355339059327373), ('sympy/core/mul.py', 892, 898, 0.35355339059327373), ('sympy/core/mul.py', 1587, 1592, 0.35355339059327373), ('sympy/core/numbers.py', 251, 251, 0.35355339059327373), ('sympy/core/numbers.py', 262, 264, 0.35355339059327373), ('sympy/core/numbers.py', 700, 700, 0.35355339059327373), ('sympy/core/numbers.py', 702, 702, 0.35355339059327373), ('sympy/core/numbers.py', 815, 816, 0.35355339059327373), ('sympy/core/numbers.py', 1240, 1240, 0.35355339059327373), ('sympy/core/numbers.py', 1646, 1656, 0.35355339059327373), ('sympy/core/numbers.py', 1833, 1833, 0.35355339059327373), ('sympy/core/numbers.py', 1910, 1911, 0.35355339059327373), ('sympy/core/numbers.py', 1986, 1987, 0.35355339059327373), ('sympy/core/numbers.py', 1989, 1991, 0.35355339059327373), ('sympy/core/numbers.py', 2178, 2183, 0.35355339059327373), ('sympy/core/numbers.py', 2209, 2213, 0.35355339059327373), ('sympy/core/numbers.py', 2735, 2735, 0.35355339059327373), ('sympy/core/numbers.py', 2793, 2793, 0.35355339059327373), ('sympy/core/power.py', 760, 766, 0.35355339059327373), ('sympy/core/power.py', 1413, 1414, 0.35355339059327373), ('sympy/core/relational.py', 696, 698, 0.35355339059327373), ('sympy/core/relational.py', 702, 705, 0.35355339059327373), ('sympy/core/relational.py', 707, 707, 0.35355339059327373), ('sympy/core/relational.py', 717, 717, 0.35355339059327373), ('sympy/core/relational.py', 724, 725, 0.35355339059327373), ('sympy/core/relational.py', 1080, 1080, 0.35355339059327373), ('sympy/core/relational.py', 1228, 1228, 0.35355339059327373), ('sympy/core/relational.py', 1230, 1230, 0.35355339059327373), ('sympy/core/relational.py', 1233, 1233, 0.35355339059327373), ('sympy/core/relational.py', 1235, 1235, 0.35355339059327373), ('sympy/core/relational.py', 1238, 1239, 0.35355339059327373), ('sympy/core/symbol.py', 325, 325, 0.35355339059327373), ('sympy/core/symbol.py', 397, 397, 0.35355339059327373), ('sympy/core/symbol.py', 400, 400, 0.35355339059327373), ('sympy/core/symbol.py', 403, 405, 0.35355339059327373), ('sympy/core/symbol.py', 407, 408, 0.35355339059327373), ('sympy/core/symbol.py', 410, 410, 0.35355339059327373), ('sympy/core/symbol.py', 412, 412, 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 125, 125, 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 129, 129, 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 132, 132, 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 223, 223, 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 255, 255, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 70, 70, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 268, 272, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 274, 274, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 287, 287, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 289, 289, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 291, 291, 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 293, 293, 0.35355339059327373), ('sympy/functions/elementary/trigonometric.py', 3381, 3383, 0.35355339059327373), ('sympy/polys/orderings.py', 44, 44, 0.35355339059327373), ('sympy/polys/orderings.py', 223, 224, 0.35355339059327373), ('sympy/polys/orderings.py', 226, 226, 0.35355339059327373), ('sympy/polys/orderings.py', 229, 229, 0.35355339059327373), ('sympy/polys/orderings.py', 234, 235, 0.35355339059327373), ('sympy/polys/orderings.py', 239, 239, 0.35355339059327373), ('sympy/printing/printer.py', 251, 252, 0.35355339059327373), ('sympy/printing/printer.py', 255, 255, 0.35355339059327373), ('sympy/printing/printer.py', 258, 258, 0.35355339059327373), ('sympy/printing/printer.py', 260, 261, 0.35355339059327373), ('sympy/printing/printer.py', 263, 264, 0.35355339059327373), ('sympy/printing/printer.py', 266, 266, 0.35355339059327373), ('sympy/printing/printer.py', 273, 273, 0.35355339059327373), ('sympy/printing/printer.py', 291, 291, 0.35355339059327373), ('sympy/printing/printer.py', 301, 302, 0.35355339059327373), ('sympy/printing/printer.py', 306, 306, 0.35355339059327373), ('sympy/printing/printer.py', 314, 315, 0.35355339059327373), ('sympy/printing/printer.py', 317, 317, 0.35355339059327373), ('sympy/printing/printer.py', 321, 321, 0.35355339059327373), ('sympy/printing/printer.py', 326, 329, 0.35355339059327373), ('sympy/printing/printer.py', 333, 333, 0.35355339059327373), ('sympy/printing/printer.py', 373, 373, 0.35355339059327373), ('sympy/printing/str.py', 967, 968, 0.35355339059327373), ('sympy/printing/str.py', 970, 970, 0.35355339059327373), ('sympy/simplify/cse_opts.py', 28, 31, 0.35355339059327373), ('sympy/utilities/iterables.py', 809, 817, 0.35355339059327373), ('sympy/core/add.py', 484, 485, 0.3333333333333333), ('sympy/core/add.py', 701, 702, 0.3333333333333333), ('sympy/core/basic.py', 878, 881, 0.3333333333333333), ('sympy/core/basic.py', 901, 903, 0.3333333333333333), ('sympy/core/basic.py', 906, 908, 0.3333333333333333), ('sympy/core/basic.py', 914, 915, 0.3333333333333333), ('sympy/core/basic.py', 931, 931, 0.3333333333333333), ('sympy/core/basic.py', 951, 954, 0.3333333333333333), ('sympy/core/basic.py', 956, 956, 0.3333333333333333), ('sympy/core/basic.py', 1030, 1030, 0.3333333333333333), ('sympy/core/basic.py', 1034, 1037, 0.3333333333333333), ('sympy/core/basic.py', 1065, 1068, 0.3333333333333333), ('sympy/core/basic.py', 1892, 1899, 0.3333333333333333), ('sympy/core/basic.py', 1903, 1904, 0.3333333333333333), ('sympy/core/containers.py', 56, 56, 0.3333333333333333), ('sympy/core/containers.py', 59, 59, 0.3333333333333333), ('sympy/core/containers.py', 146, 146, 0.3333333333333333), ('sympy/core/expr.py', 220, 220, 0.3333333333333333), ('sympy/core/expr.py', 2024, 2024, 0.3333333333333333), ('sympy/core/expr.py', 2027, 2027, 0.3333333333333333), ('sympy/core/expr.py', 2266, 2266, 0.3333333333333333), ('sympy/core/expr.py', 3509, 3510, 0.3333333333333333), ('sympy/core/expr.py', 3904, 3907, 0.3333333333333333), ('sympy/core/expr.py', 3909, 3910, 0.3333333333333333), ('sympy/core/function.py', 91, 93, 0.3333333333333333), ('sympy/core/function.py', 510, 525, 0.3333333333333333), ('sympy/core/function.py', 527, 527, 0.3333333333333333), ('sympy/core/function.py', 534, 534, 0.3333333333333333), ('sympy/core/function.py', 1270, 1273, 0.3333333333333333), ('sympy/core/function.py', 1275, 1277, 0.3333333333333333), ('sympy/core/function.py', 1279, 1279, 0.3333333333333333), ('sympy/core/function.py', 1285, 1285, 0.3333333333333333), ('sympy/core/function.py', 1302, 1302, 0.3333333333333333), ('sympy/core/function.py', 1308, 1309, 0.3333333333333333), ('sympy/core/function.py', 1311, 1312, 0.3333333333333333), ('sympy/core/function.py', 1324, 1324, 0.3333333333333333), ('sympy/core/function.py', 1340, 1340, 0.3333333333333333), ('sympy/core/function.py', 1345, 1346, 0.3333333333333333), ('sympy/core/function.py', 1350, 1353, 0.3333333333333333), ('sympy/core/function.py', 1356, 1356, 0.3333333333333333), ('sympy/core/function.py', 1363, 1364, 0.3333333333333333), ('sympy/core/function.py', 1369, 1369, 0.3333333333333333), ('sympy/core/function.py', 1371, 1371, 0.3333333333333333), ('sympy/core/function.py', 1379, 1379, 0.3333333333333333), ('sympy/core/function.py', 1382, 1382, 0.3333333333333333), ('sympy/core/function.py', 1384, 1385, 0.3333333333333333), ('sympy/core/function.py', 1387, 1389, 0.3333333333333333), ('sympy/core/function.py', 1395, 1400, 0.3333333333333333), ('sympy/core/function.py', 1408, 1408, 0.3333333333333333), ('sympy/core/function.py', 1411, 1411, 0.3333333333333333), ('sympy/core/function.py', 1415, 1415, 0.3333333333333333), ('sympy/core/function.py', 1419, 1419, 0.3333333333333333), ('sympy/core/function.py', 1424, 1424, 0.3333333333333333), ('sympy/core/function.py', 1427, 1427, 0.3333333333333333), ('sympy/core/function.py', 1434, 1434, 0.3333333333333333), ('sympy/core/function.py', 1446, 1448, 0.3333333333333333), ('sympy/core/function.py', 1450, 1451, 0.3333333333333333), ('sympy/core/function.py', 1453, 1453, 0.3333333333333333), ('sympy/core/function.py', 1456, 1456, 0.3333333333333333), ('sympy/core/function.py', 1473, 1474, 0.3333333333333333), ('sympy/core/function.py', 1477, 1477, 0.3333333333333333), ('sympy/core/function.py', 1479, 1479, 0.3333333333333333), ('sympy/core/function.py', 1486, 1486, 0.3333333333333333), ('sympy/core/function.py', 1495, 1495, 0.3333333333333333), ('sympy/core/function.py', 1498, 1500, 0.3333333333333333), ('sympy/core/function.py', 1502, 1502, 0.3333333333333333), ('sympy/core/function.py', 1508, 1508, 0.3333333333333333), ('sympy/core/function.py', 1512, 1512, 0.3333333333333333), ('sympy/core/function.py', 1568, 1569, 0.3333333333333333), ('sympy/core/function.py', 1571, 1573, 0.3333333333333333), ('sympy/core/function.py', 1940, 1940, 0.3333333333333333), ('sympy/core/function.py', 1944, 1948, 0.3333333333333333), ('sympy/core/function.py', 1951, 1951, 0.3333333333333333), ('sympy/core/function.py', 2892, 2893, 0.3333333333333333), ('sympy/core/mul.py', 1467, 1468, 0.3333333333333333), ('sympy/core/numbers.py', 671, 672, 0.3333333333333333), ('sympy/core/numbers.py', 675, 675, 0.3333333333333333), ('sympy/core/numbers.py', 1590, 1591, 0.3333333333333333), ('sympy/core/numbers.py', 1594, 1595, 0.3333333333333333), ('sympy/core/numbers.py', 1625, 1626, 0.3333333333333333), ('sympy/core/numbers.py', 1658, 1661, 0.3333333333333333), ('sympy/core/numbers.py', 1683, 1683, 0.3333333333333333), ('sympy/core/numbers.py', 1764, 1766, 0.3333333333333333), ('sympy/core/numbers.py', 1868, 1871, 0.3333333333333333), ('sympy/core/numbers.py', 2129, 2130, 0.3333333333333333), ('sympy/core/numbers.py', 2185, 2185, 0.3333333333333333), ('sympy/core/numbers.py', 3390, 3397, 0.3333333333333333), ('sympy/core/operations.py', 80, 83, 0.3333333333333333), ('sympy/core/power.py', 511, 512, 0.3333333333333333), ('sympy/core/power.py', 768, 770, 0.3333333333333333), ('sympy/core/power.py', 1245, 1246, 0.3333333333333333), ('sympy/core/relational.py', 1373, 1375, 0.3333333333333333), ('sympy/core/symbol.py', 227, 227, 0.3333333333333333), ('sympy/functions/elementary/complexes.py', 78, 78, 0.3333333333333333), ('sympy/functions/elementary/complexes.py', 82, 85, 0.3333333333333333), ('sympy/functions/elementary/complexes.py', 200, 200, 0.3333333333333333), ('sympy/functions/elementary/complexes.py', 202, 202, 0.3333333333333333), ('sympy/functions/elementary/complexes.py', 205, 208, 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 19, 23, 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 127, 133, 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 143, 143, 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 165, 166, 0.3333333333333333), ('sympy/logic/boolalg.py', 338, 338, 0.3333333333333333), ('sympy/simplify/radsimp.py', 1105, 1105, 0.3333333333333333), ('sympy/simplify/radsimp.py', 1110, 1111, 0.3333333333333333), ('sympy/utilities/iterables.py', 820, 820, 0.3333333333333333), ('sympy/core/add.py', 254, 255, 0.31622776601683794), ('sympy/core/add.py', 589, 592, 0.31622776601683794), ('sympy/core/add.py', 773, 775, 0.31622776601683794), ('sympy/core/add.py', 853, 855, 0.31622776601683794), ('sympy/core/add.py', 857, 859, 0.31622776601683794), ('sympy/core/add.py', 973, 979, 0.31622776601683794), ('sympy/core/basic.py', 138, 142, 0.31622776601683794), ('sympy/core/basic.py', 1403, 1403, 0.31622776601683794), ('sympy/core/basic.py', 1406, 1414, 0.31622776601683794), ('sympy/core/basic.py', 1425, 1425, 0.31622776601683794), ('sympy/core/basic.py', 1452, 1453, 0.31622776601683794), ('sympy/core/basic.py', 1455, 1456, 0.31622776601683794), ('sympy/core/basic.py', 1466, 1466, 0.31622776601683794), ('sympy/core/basic.py', 1469, 1473, 0.31622776601683794), ('sympy/core/basic.py', 1482, 1483, 0.31622776601683794), ('sympy/core/basic.py', 1486, 1486, 0.31622776601683794), ('sympy/core/basic.py', 1488, 1490, 0.31622776601683794), ('sympy/core/basic.py', 1496, 1496, 0.31622776601683794), ('sympy/core/basic.py', 1498, 1499, 0.31622776601683794), ('sympy/core/basic.py', 1849, 1849, 0.31622776601683794), ('sympy/core/compatibility.py', 477, 477, 0.31622776601683794), ('sympy/core/compatibility.py', 486, 487, 0.31622776601683794), ('sympy/core/compatibility.py', 489, 490, 0.31622776601683794), ('sympy/core/compatibility.py', 492, 492, 0.31622776601683794), ('sympy/core/containers.py', 62, 62, 0.31622776601683794), ('sympy/core/expr.py', 92, 92, 0.31622776601683794), ('sympy/core/expr.py', 103, 103, 0.31622776601683794), ('sympy/core/expr.py', 105, 105, 0.31622776601683794), ('sympy/core/expr.py', 117, 118, 0.31622776601683794), ('sympy/core/expr.py', 120, 121, 0.31622776601683794), ('sympy/core/expr.py', 123, 123, 0.31622776601683794), ('sympy/core/expr.py', 874, 875, 0.31622776601683794), ('sympy/core/expr.py', 881, 881, 0.31622776601683794), ('sympy/core/expr.py', 883, 883, 0.31622776601683794), ('sympy/core/expr.py', 885, 885, 0.31622776601683794), ('sympy/core/expr.py', 888, 890, 0.31622776601683794), ('sympy/core/expr.py', 893, 893, 0.31622776601683794), ('sympy/core/expr.py', 895, 896, 0.31622776601683794), ('sympy/core/expr.py', 1001, 1003, 0.31622776601683794), ('sympy/core/expr.py', 3536, 3541, 0.31622776601683794), ('sympy/core/exprtools.py', 95, 95, 0.31622776601683794), ('sympy/core/logic.py', 197, 199, 0.31622776601683794), ('sympy/core/mul.py', 277, 287, 0.31622776601683794), ('sympy/core/mul.py', 709, 709, 0.31622776601683794), ('sympy/core/mul.py', 887, 888, 0.31622776601683794), ('sympy/core/numbers.py', 668, 668, 0.31622776601683794), ('sympy/core/numbers.py', 728, 728, 0.31622776601683794), ('sympy/core/numbers.py', 735, 735, 0.31622776601683794), ('sympy/core/numbers.py', 1414, 1416, 0.31622776601683794), ('sympy/core/numbers.py', 1419, 1419, 0.31622776601683794), ('sympy/core/numbers.py', 1460, 1460, 0.31622776601683794), ('sympy/core/numbers.py', 1462, 1463, 0.31622776601683794), ('sympy/core/numbers.py', 1465, 1465, 0.31622776601683794), ('sympy/core/numbers.py', 1628, 1629, 0.31622776601683794), ('sympy/core/numbers.py', 1631, 1636, 0.31622776601683794), ('sympy/core/numbers.py', 1639, 1639, 0.31622776601683794), ('sympy/core/numbers.py', 1711, 1712, 0.31622776601683794), ('sympy/core/numbers.py', 1714, 1714, 0.31622776601683794), ('sympy/core/numbers.py', 1716, 1716, 0.31622776601683794), ('sympy/core/numbers.py', 1719, 1719, 0.31622776601683794), ('sympy/core/numbers.py', 2081, 2081, 0.31622776601683794), ('sympy/core/numbers.py', 2089, 2090, 0.31622776601683794), ('sympy/core/numbers.py', 2096, 2096, 0.31622776601683794), ('sympy/core/numbers.py', 2098, 2098, 0.31622776601683794), ('sympy/core/numbers.py', 2100, 2100, 0.31622776601683794), ('sympy/core/numbers.py', 2102, 2104, 0.31622776601683794), ('sympy/core/numbers.py', 2198, 2205, 0.31622776601683794), ('sympy/core/numbers.py', 2619, 2619, 0.31622776601683794), ('sympy/core/numbers.py', 3124, 3124, 0.31622776601683794), ('sympy/core/numbers.py', 3399, 3399, 0.31622776601683794), ('sympy/core/power.py', 699, 700, 0.31622776601683794), ('sympy/core/relational.py', 494, 494, 0.31622776601683794), ('sympy/core/relational.py', 502, 507, 0.31622776601683794), ('sympy/core/relational.py', 510, 510, 0.31622776601683794), ('sympy/core/relational.py', 1085, 1085, 0.31622776601683794), ('sympy/core/relational.py', 1345, 1345, 0.31622776601683794), ('sympy/core/relational.py', 1347, 1350, 0.31622776601683794), ('sympy/core/relational.py', 1355, 1357, 0.31622776601683794), ('sympy/core/relational.py', 1362, 1363, 0.31622776601683794), ('sympy/core/relational.py', 1366, 1368, 0.31622776601683794), ('sympy/core/relational.py', 1377, 1379, 0.31622776601683794), ('sympy/core/relational.py', 1382, 1383, 0.31622776601683794), ('sympy/core/relational.py', 1385, 1385, 0.31622776601683794), ('sympy/core/relational.py', 1417, 1417, 0.31622776601683794), ('sympy/core/relational.py', 1419, 1424, 0.31622776601683794), ('sympy/core/symbol.py', 756, 756, 0.31622776601683794), ('sympy/core/sympify.py', 375, 376, 0.31622776601683794), ('sympy/core/sympify.py', 379, 379, 0.31622776601683794), ('sympy/core/sympify.py', 386, 387, 0.31622776601683794), ('sympy/core/sympify.py', 396, 396, 0.31622776601683794), ('sympy/core/sympify.py', 406, 407, 0.31622776601683794), ('sympy/core/sympify.py', 426, 430, 0.31622776601683794), ('sympy/core/sympify.py', 432, 433, 0.31622776601683794), ('sympy/functions/elementary/complexes.py', 753, 755, 0.31622776601683794), ('sympy/functions/elementary/complexes.py', 758, 758, 0.31622776601683794), ('sympy/multipledispatch/core.py', 56, 56, 0.31622776601683794), ('sympy/multipledispatch/core.py', 58, 58, 0.31622776601683794), ('sympy/multipledispatch/core.py', 72, 72, 0.31622776601683794), ('sympy/simplify/cse_opts.py', 44, 47, 0.31622776601683794), ('sympy/simplify/radsimp.py', 1079, 1079, 0.31622776601683794), ('sympy/simplify/radsimp.py', 1081, 1081, 0.31622776601683794), ('sympy/core/add.py', 482, 482, 0.30151134457776363), ('sympy/core/add.py', 579, 580, 0.30151134457776363), ('sympy/core/add.py', 583, 586, 0.30151134457776363), ('sympy/core/basic.py', 20, 22, 0.30151134457776363), ('sympy/core/basic.py', 208, 214, 0.30151134457776363), ('sympy/core/expr.py', 1342, 1343, 0.30151134457776363), ('sympy/core/expr.py', 1352, 1353, 0.30151134457776363), ('sympy/core/expr.py', 1367, 1367, 0.30151134457776363), ('sympy/core/exprtools.py', 66, 67, 0.30151134457776363), ('sympy/core/exprtools.py', 247, 247, 0.30151134457776363), ('sympy/core/function.py', 499, 503, 0.30151134457776363), ('sympy/core/logic.py', 80, 89, 0.30151134457776363), ('sympy/core/logic.py', 192, 195, 0.30151134457776363), ('sympy/core/mul.py', 1244, 1245, 0.30151134457776363), ('sympy/core/numbers.py', 1234, 1235, 0.30151134457776363), ('sympy/core/numbers.py', 1237, 1237, 0.30151134457776363), ('sympy/core/numbers.py', 1381, 1386, 0.30151134457776363), ('sympy/core/numbers.py', 1388, 1388, 0.30151134457776363), ('sympy/core/numbers.py', 1392, 1392, 0.30151134457776363), ('sympy/core/numbers.py', 1705, 1705, 0.30151134457776363), ('sympy/core/numbers.py', 1906, 1906, 0.30151134457776363), ('sympy/core/numbers.py', 2160, 2164, 0.30151134457776363), ('sympy/core/numbers.py', 2285, 2285, 0.30151134457776363), ('sympy/core/numbers.py', 2964, 2964, 0.30151134457776363), ('sympy/core/numbers.py', 3127, 3127, 0.30151134457776363), ('sympy/core/power.py', 635, 637, 0.30151134457776363), ('sympy/core/power.py', 639, 639, 0.30151134457776363), ('sympy/core/power.py', 641, 643, 0.30151134457776363), ('sympy/core/power.py', 741, 741, 0.30151134457776363), ('sympy/core/power.py', 757, 758, 0.30151134457776363), ('sympy/core/symbol.py', 337, 337, 0.30151134457776363), ('sympy/core/symbol.py', 668, 668, 0.30151134457776363), ('sympy/core/symbol.py', 670, 675, 0.30151134457776363), ('sympy/core/symbol.py', 682, 683, 0.30151134457776363), ('sympy/core/symbol.py', 686, 686, 0.30151134457776363), ('sympy/core/symbol.py', 688, 690, 0.30151134457776363), ('sympy/core/symbol.py', 692, 692, 0.30151134457776363), ('sympy/core/symbol.py', 696, 697, 0.30151134457776363), ('sympy/core/symbol.py', 700, 701, 0.30151134457776363), ('sympy/core/symbol.py', 703, 703, 0.30151134457776363), ('sympy/core/symbol.py', 705, 706, 0.30151134457776363), ('sympy/core/symbol.py', 709, 712, 0.30151134457776363), ('sympy/core/symbol.py', 751, 751, 0.30151134457776363), ('sympy/core/sympify.py', 64, 65, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 47, 47, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 121, 121, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 124, 125, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 135, 136, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 140, 140, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 160, 160, 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 162, 162, 0.30151134457776363), ('sympy/logic/boolalg.py', 403, 403, 0.30151134457776363), ('sympy/simplify/simplify.py', 398, 402, 0.30151134457776363), ('sympy/assumptions/wrapper.py', 122, 123, 0.2886751345948129), ('sympy/core/add.py', 451, 453, 0.2886751345948129), ('sympy/core/add.py', 644, 649, 0.2886751345948129), ('sympy/core/add.py', 777, 777, 0.2886751345948129), ('sympy/core/add.py', 861, 861, 0.2886751345948129), ('sympy/core/compatibility.py', 298, 300, 0.2886751345948129), ('sympy/core/compatibility.py', 302, 302, 0.2886751345948129), ('sympy/core/expr.py', 2268, 2269, 0.2886751345948129), ('sympy/core/expr.py', 2271, 2271, 0.2886751345948129), ('sympy/core/expr.py', 2281, 2281, 0.2886751345948129), ('sympy/core/expr.py', 2467, 2468, 0.2886751345948129), ('sympy/core/expr.py', 2470, 2474, 0.2886751345948129), ('sympy/core/expr.py', 3532, 3532, 0.2886751345948129), ('sympy/core/expr.py', 3551, 3551, 0.2886751345948129), ('sympy/core/expr.py', 3563, 3563, 0.2886751345948129), ('sympy/core/expr.py', 3565, 3566, 0.2886751345948129), ('sympy/core/expr.py', 3568, 3569, 0.2886751345948129), ('sympy/core/expr.py', 3573, 3573, 0.2886751345948129), ('sympy/core/expr.py', 3576, 3576, 0.2886751345948129), ('sympy/core/expr.py', 3596, 3596, 0.2886751345948129), ('sympy/core/expr.py', 3598, 3600, 0.2886751345948129), ('sympy/core/expr.py', 3602, 3606, 0.2886751345948129), ('sympy/core/expr.py', 3622, 3622, 0.2886751345948129), ('sympy/core/expr.py', 3641, 3641, 0.2886751345948129), ('sympy/core/exprtools.py', 69, 69, 0.2886751345948129), ('sympy/core/exprtools.py', 73, 75, 0.2886751345948129), ('sympy/core/exprtools.py', 80, 80, 0.2886751345948129), ('sympy/core/exprtools.py', 85, 85, 0.2886751345948129), ('sympy/core/mul.py', 257, 269, 0.2886751345948129), ('sympy/core/mul.py', 884, 885, 0.2886751345948129), ('sympy/core/numbers.py', 762, 762, 0.2886751345948129), ('sympy/core/numbers.py', 767, 767, 0.2886751345948129), ('sympy/core/numbers.py', 1032, 1032, 0.2886751345948129), ('sympy/core/numbers.py', 1040, 1040, 0.2886751345948129), ('sympy/core/numbers.py', 1042, 1042, 0.2886751345948129), ('sympy/core/numbers.py', 1046, 1046, 0.2886751345948129), ('sympy/core/numbers.py', 1213, 1213, 0.2886751345948129), ('sympy/core/numbers.py', 1476, 1476, 0.2886751345948129), ('sympy/core/numbers.py', 1692, 1692, 0.2886751345948129), ('sympy/core/numbers.py', 1754, 1755, 0.2886751345948129), ('sympy/core/numbers.py', 1757, 1757, 0.2886751345948129), ('sympy/core/numbers.py', 1760, 1760, 0.2886751345948129), ('sympy/core/numbers.py', 2074, 2074, 0.2886751345948129), ('sympy/core/numbers.py', 2169, 2171, 0.2886751345948129), ('sympy/core/numbers.py', 2246, 2247, 0.2886751345948129), ('sympy/core/numbers.py', 2250, 2251, 0.2886751345948129), ('sympy/core/numbers.py', 3402, 3402, 0.2886751345948129), ('sympy/core/operations.py', 100, 103, 0.2886751345948129), ('sympy/core/power.py', 374, 376, 0.2886751345948129), ('sympy/core/power.py', 453, 454, 0.2886751345948129), ('sympy/core/power.py', 567, 567, 0.2886751345948129), ('sympy/core/power.py', 573, 573, 0.2886751345948129), ('sympy/core/power.py', 600, 600, 0.2886751345948129), ('sympy/core/power.py', 1497, 1497, 0.2886751345948129), ('sympy/core/power.py', 1499, 1500, 0.2886751345948129), ('sympy/core/power.py', 1512, 1512, 0.2886751345948129), ('sympy/core/power.py', 1515, 1516, 0.2886751345948129), ('sympy/core/power.py', 1518, 1518, 0.2886751345948129), ('sympy/core/power.py', 1529, 1529, 0.2886751345948129), ('sympy/core/symbol.py', 333, 334, 0.2886751345948129), ('sympy/functions/elementary/complexes.py', 751, 751, 0.2886751345948129), ('sympy/functions/elementary/complexes.py', 761, 761, 0.2886751345948129), ('sympy/functions/elementary/trigonometric.py', 3369, 3370, 0.2886751345948129), ('sympy/functions/elementary/trigonometric.py', 3375, 3375, 0.2886751345948129), ('sympy/functions/elementary/trigonometric.py', 3377, 3377, 0.2886751345948129), ('sympy/core/expr.py', 210, 210, 0.2773500981126146), ('sympy/core/expr.py', 1008, 1009, 0.2773500981126146), ('sympy/core/exprtools.py', 240, 240, 0.2773500981126146), ('sympy/core/exprtools.py', 261, 261, 0.2773500981126146), ('sympy/core/exprtools.py', 1222, 1225, 0.2773500981126146), ('sympy/core/exprtools.py', 1227, 1228, 0.2773500981126146), ('sympy/core/exprtools.py', 1230, 1230, 0.2773500981126146), ('sympy/core/logic.py', 168, 169, 0.2773500981126146), ('sympy/core/logic.py', 171, 171, 0.2773500981126146), ('sympy/core/mul.py', 621, 623, 0.2773500981126146), ('sympy/core/mul.py', 625, 627, 0.2773500981126146), ('sympy/core/mul.py', 675, 675, 0.2773500981126146), ('sympy/core/mul.py', 677, 677, 0.2773500981126146), ('sympy/core/mul.py', 679, 679, 0.2773500981126146), ('sympy/core/mul.py', 1510, 1516, 0.2773500981126146), ('sympy/core/numbers.py', 1735, 1738, 0.2773500981126146), ('sympy/core/numbers.py', 1860, 1865, 0.2773500981126146), ('sympy/core/numbers.py', 2126, 2126, 0.2773500981126146), ('sympy/core/power.py', 336, 341, 0.2773500981126146), ('sympy/core/power.py', 515, 516, 0.2773500981126146), ('sympy/core/power.py', 518, 518, 0.2773500981126146), ('sympy/core/power.py', 521, 522, 0.2773500981126146), ('sympy/core/power.py', 524, 524, 0.2773500981126146), ('sympy/core/power.py', 534, 534, 0.2773500981126146), ('sympy/core/power.py', 539, 539, 0.2773500981126146), ('sympy/core/power.py', 542, 542, 0.2773500981126146), ('sympy/core/power.py', 545, 545, 0.2773500981126146), ('sympy/core/power.py', 564, 564, 0.2773500981126146), ('sympy/core/power.py', 609, 609, 0.2773500981126146), ('sympy/core/power.py', 614, 614, 0.2773500981126146), ('sympy/core/power.py', 622, 622, 0.2773500981126146), ('sympy/core/power.py', 711, 711, 0.2773500981126146), ('sympy/core/power.py', 721, 721, 0.2773500981126146), ('sympy/core/power.py', 776, 776, 0.2773500981126146), ('sympy/core/power.py', 783, 783, 0.2773500981126146), ('sympy/core/power.py', 1360, 1360, 0.2773500981126146), ('sympy/core/power.py', 1363, 1364, 0.2773500981126146), ('sympy/core/power.py', 1366, 1367, 0.2773500981126146), ('sympy/core/power.py', 1377, 1377, 0.2773500981126146), ('sympy/core/power.py', 1379, 1379, 0.2773500981126146), ('sympy/core/power.py', 1384, 1386, 0.2773500981126146), ('sympy/core/power.py', 1391, 1391, 0.2773500981126146), ('sympy/core/power.py', 1393, 1393, 0.2773500981126146), ('sympy/core/power.py', 1405, 1406, 0.2773500981126146), ('sympy/functions/elementary/complexes.py', 196, 198, 0.2773500981126146), ('sympy/functions/elementary/miscellaneous.py', 152, 152, 0.2773500981126146), ('sympy/core/add.py', 622, 641, 0.2672612419124244), ('sympy/core/basic.py', 357, 357, 0.2672612419124244), ('sympy/core/basic.py', 1224, 1226, 0.2672612419124244), ('sympy/core/compatibility.py', 197, 197, 0.2672612419124244), ('sympy/core/evalf.py', 1398, 1398, 0.2672612419124244), ('sympy/core/evalf.py', 1403, 1404, 0.2672612419124244), ('sympy/core/evalf.py', 1415, 1415, 0.2672612419124244), ('sympy/core/evalf.py', 1417, 1417, 0.2672612419124244), ('sympy/core/evalf.py', 1490, 1491, 0.2672612419124244), ('sympy/core/evalf.py', 1493, 1493, 0.2672612419124244), ('sympy/core/evalf.py', 1497, 1497, 0.2672612419124244), ('sympy/core/evalf.py', 1504, 1504, 0.2672612419124244), ('sympy/core/evalf.py', 1506, 1509, 0.2672612419124244), ('sympy/core/evalf.py', 1511, 1511, 0.2672612419124244), ('sympy/core/evalf.py', 1513, 1514, 0.2672612419124244), ('sympy/core/evalf.py', 1531, 1534, 0.2672612419124244), ('sympy/core/evalf.py', 1542, 1542, 0.2672612419124244), ('sympy/core/function.py', 89, 89, 0.2672612419124244), ('sympy/core/function.py', 350, 350, 0.2672612419124244), ('sympy/core/mul.py', 175, 176, 0.2672612419124244), ('sympy/core/mul.py', 853, 853, 0.2672612419124244), ('sympy/core/mul.py', 856, 856, 0.2672612419124244), ('sympy/core/mul.py', 1325, 1326, 0.2672612419124244), ('sympy/core/mul.py', 1328, 1331, 0.2672612419124244), ('sympy/core/mul.py', 1411, 1411, 0.2672612419124244), ('sympy/core/numbers.py', 163, 164, 0.2672612419124244), ('sympy/core/numbers.py', 176, 178, 0.2672612419124244), ('sympy/core/numbers.py', 1198, 1198, 0.2672612419124244), ('sympy/core/numbers.py', 1200, 1200, 0.2672612419124244), ('sympy/core/numbers.py', 1203, 1206, 0.2672612419124244), ('sympy/core/operations.py', 105, 109, 0.2672612419124244), ('sympy/core/power.py', 527, 528, 0.2672612419124244), ('sympy/core/power.py', 531, 531, 0.2672612419124244), ('sympy/core/power.py', 626, 627, 0.2672612419124244), ('sympy/core/power.py', 629, 629, 0.2672612419124244), ('sympy/core/power.py', 696, 696, 0.2672612419124244), ('sympy/core/power.py', 703, 704, 0.2672612419124244), ('sympy/core/symbol.py', 350, 350, 0.2672612419124244), ('sympy/functions/elementary/complexes.py', 828, 830, 0.2672612419124244), ('sympy/core/add.py', 657, 661, 0.2581988897471611), ('sympy/core/add.py', 663, 664, 0.2581988897471611), ('sympy/core/add.py', 684, 690, 0.2581988897471611), ('sympy/core/add.py', 692, 693, 0.2581988897471611), ('sympy/core/add.py', 720, 721, 0.2581988897471611), ('sympy/core/add.py', 847, 850, 0.2581988897471611), ('sympy/core/add.py', 1222, 1222, 0.2581988897471611), ('sympy/core/add.py', 1224, 1224, 0.2581988897471611), ('sympy/core/basic.py', 152, 152, 0.2581988897471611), ('sympy/core/compatibility.py', 430, 433, 0.2581988897471611), ('sympy/core/compatibility.py', 435, 436, 0.2581988897471611), ('sympy/core/expr.py', 148, 149, 0.2581988897471611), ('sympy/core/expr.py', 998, 998, 0.2581988897471611), ('sympy/core/expr.py', 2212, 2213, 0.2581988897471611), ('sympy/core/mul.py', 1401, 1401, 0.2581988897471611), ('sympy/core/mul.py', 1462, 1462, 0.2581988897471611), ('sympy/core/mul.py', 1464, 1464, 0.2581988897471611), ('sympy/core/mul.py', 2053, 2053, 0.2581988897471611), ('sympy/core/numbers.py', 1878, 1879, 0.2581988897471611), ('sympy/core/numbers.py', 1962, 1962, 0.2581988897471611), ('sympy/core/numbers.py', 2255, 2256, 0.2581988897471611), ('sympy/core/numbers.py', 3419, 3419, 0.2581988897471611), ('sympy/core/power.py', 581, 581, 0.2581988897471611), ('sympy/core/power.py', 586, 586, 0.2581988897471611), ('sympy/functions/elementary/complexes.py', 530, 532, 0.2581988897471611), ('sympy/simplify/cse_opts.py', 24, 24, 0.2581988897471611), ('sympy/simplify/cse_opts.py', 37, 38, 0.2581988897471611), ('sympy/simplify/cse_opts.py', 49, 49, 0.2581988897471611), ('sympy/simplify/cse_opts.py', 52, 52, 0.2581988897471611), ('sympy/simplify/simplify.py', 396, 396, 0.2581988897471611), ('sympy/simplify/simplify.py', 408, 408, 0.2581988897471611), ('sympy/core/add.py', 177, 190, 0.25), ('sympy/core/add.py', 680, 680, 0.25), ('sympy/core/add.py', 717, 718, 0.25), ('sympy/core/add.py', 751, 754, 0.25), ('sympy/core/add.py', 756, 759, 0.25), ('sympy/core/add.py', 806, 809, 0.25), ('sympy/core/add.py', 835, 838, 0.25), ('sympy/core/add.py', 840, 843, 0.25), ('sympy/core/add.py', 1089, 1091, 0.25), ('sympy/core/basic.py', 354, 355, 0.25), ('sympy/core/decorators.py', 93, 95, 0.25), ('sympy/core/expr.py', 230, 230, 0.25), ('sympy/core/expr.py', 2238, 2238, 0.25), ('sympy/core/function.py', 620, 620, 0.25), ('sympy/core/mul.py', 1295, 1295, 0.25), ('sympy/core/mul.py', 1446, 1452, 0.25), ('sympy/core/numbers.py', 431, 431, 0.25), ('sympy/core/numbers.py', 434, 434, 0.25), ('sympy/core/numbers.py', 436, 439, 0.25), ('sympy/core/numbers.py', 2243, 2243, 0.25), ('sympy/core/numbers.py', 2412, 2412, 0.25), ('sympy/core/operations.py', 425, 426, 0.25), ('sympy/functions/elementary/complexes.py', 68, 68, 0.25), ('sympy/functions/elementary/complexes.py', 70, 70, 0.25), ('sympy/core/add.py', 303, 303, 0.24253562503633297), ('sympy/core/add.py', 313, 313, 0.24253562503633297), ('sympy/core/assumptions.py', 524, 526, 0.24253562503633297), ('sympy/core/basic.py', 334, 334, 0.24253562503633297), ('sympy/core/basic.py', 337, 342, 0.24253562503633297), ('sympy/core/basic.py', 351, 351, 0.24253562503633297), ('sympy/core/core.py', 78, 81, 0.24253562503633297), ('sympy/core/expr.py', 2160, 2160, 0.24253562503633297), ('sympy/core/function.py', 653, 653, 0.24253562503633297), ('sympy/core/mul.py', 830, 830, 0.24253562503633297), ('sympy/core/mul.py', 1471, 1472, 0.24253562503633297), ('sympy/core/numbers.py', 758, 758, 0.24253562503633297), ('sympy/core/numbers.py', 1743, 1743, 0.24253562503633297), ('sympy/core/numbers.py', 1749, 1751, 0.24253562503633297), ('sympy/core/power.py', 272, 274, 0.24253562503633297), ('sympy/core/power.py', 276, 277, 0.24253562503633297), ('sympy/core/power.py', 281, 282, 0.24253562503633297), ('sympy/core/power.py', 286, 286, 0.24253562503633297), ('sympy/core/power.py', 294, 295, 0.24253562503633297), ('sympy/core/power.py', 297, 297, 0.24253562503633297), ('sympy/core/power.py', 305, 305, 0.24253562503633297), ('sympy/core/power.py', 316, 316, 0.24253562503633297), ('sympy/core/power.py', 343, 344, 0.24253562503633297), ('sympy/core/power.py', 354, 354, 0.24253562503633297), ('sympy/functions/elementary/complexes.py', 192, 192, 0.24253562503633297), ('sympy/functions/elementary/complexes.py', 194, 194, 0.24253562503633297), ('sympy/functions/elementary/exponential.py', 204, 204, 0.24253562503633297), ('sympy/functions/elementary/exponential.py', 206, 206, 0.24253562503633297), ('sympy/logic/boolalg.py', 435, 435, 0.24253562503633297), ('sympy/core/add.py', 219, 220, 0.23570226039551587), ('sympy/core/add.py', 224, 226, 0.23570226039551587), ('sympy/core/add.py', 258, 259, 0.23570226039551587), ('sympy/core/add.py', 359, 360, 0.23570226039551587), ('sympy/core/add.py', 449, 449, 0.23570226039551587), ('sympy/core/assumptions.py', 440, 442, 0.23570226039551587), ('sympy/core/assumptions.py', 449, 449, 0.23570226039551587), ('sympy/core/basic.py', 1239, 1239, 0.23570226039551587), ('sympy/core/expr.py', 215, 215, 0.23570226039551587), ('sympy/core/mul.py', 380, 381, 0.23570226039551587), ('sympy/core/mul.py', 512, 514, 0.23570226039551587), ('sympy/core/mul.py', 518, 521, 0.23570226039551587), ('sympy/core/mul.py', 848, 851, 0.23570226039551587), ('sympy/core/mul.py', 1275, 1276, 0.23570226039551587), ('sympy/core/mul.py', 1279, 1280, 0.23570226039551587), ('sympy/core/mul.py', 1285, 1285, 0.23570226039551587), ('sympy/core/mul.py', 1390, 1396, 0.23570226039551587), ('sympy/core/mul.py', 1426, 1427, 0.23570226039551587), ('sympy/core/mul.py', 1435, 1435, 0.23570226039551587), ('sympy/core/mul.py', 1438, 1438, 0.23570226039551587), ('sympy/core/mul.py', 1440, 1441, 0.23570226039551587), ('sympy/core/numbers.py', 1903, 1903, 0.23570226039551587), ('sympy/core/numbers.py', 2236, 2240, 0.23570226039551587), ('sympy/core/numbers.py', 2683, 2683, 0.23570226039551587), ('sympy/core/numbers.py', 2739, 2739, 0.23570226039551587), ('sympy/core/operations.py', 154, 154, 0.23570226039551587), ('sympy/core/operations.py', 157, 158, 0.23570226039551587), ('sympy/core/operations.py', 428, 428, 0.23570226039551587), ('sympy/core/power.py', 358, 358, 0.23570226039551587), ('sympy/core/power.py', 939, 940, 0.23570226039551587), ('sympy/core/power.py', 942, 942, 0.23570226039551587), ('sympy/core/basic.py', 508, 508, 0.22941573387056174), ('sympy/core/basic.py', 1215, 1215, 0.22941573387056174), ('sympy/core/basic.py', 1219, 1220, 0.22941573387056174), ('sympy/core/basic.py', 1228, 1228, 0.22941573387056174), ('sympy/core/basic.py', 1230, 1233, 0.22941573387056174), ('sympy/core/decorators.py', 90, 90, 0.22941573387056174), ('sympy/core/decorators.py', 259, 261, 0.22941573387056174), ('sympy/core/expr.py', 151, 156, 0.22941573387056174), ('sympy/core/expr.py', 205, 205, 0.22941573387056174), ('sympy/core/expr.py', 235, 235, 0.22941573387056174), ('sympy/core/expr.py', 238, 239, 0.22941573387056174), ('sympy/core/expr.py', 1943, 1943, 0.22941573387056174), ('sympy/core/logic.py', 141, 144, 0.22941573387056174), ('sympy/core/logic.py', 146, 148, 0.22941573387056174), ('sympy/core/mul.py', 694, 695, 0.22941573387056174), ('sympy/core/mul.py', 1317, 1320, 0.22941573387056174), ('sympy/core/mul.py', 1362, 1362, 0.22941573387056174), ('sympy/core/mul.py', 1507, 1507, 0.22941573387056174), ('sympy/core/mul.py', 1520, 1520, 0.22941573387056174), ('sympy/core/mul.py', 1523, 1523, 0.22941573387056174), ('sympy/core/mul.py', 1545, 1545, 0.22941573387056174), ('sympy/core/mul.py', 1548, 1548, 0.22941573387056174), ('sympy/core/mul.py', 1572, 1572, 0.22941573387056174), ('sympy/core/sympify.py', 369, 371, 0.22941573387056174), ('sympy/core/add.py', 21, 21, 0.22360679774997896), ('sympy/core/add.py', 193, 193, 0.22360679774997896), ('sympy/core/add.py', 196, 196, 0.22360679774997896), ('sympy/core/add.py', 198, 198, 0.22360679774997896), ('sympy/core/add.py', 200, 200, 0.22360679774997896), ('sympy/core/add.py', 202, 202, 0.22360679774997896), ('sympy/core/add.py', 205, 205, 0.22360679774997896), ('sympy/core/add.py', 231, 231, 0.22360679774997896), ('sympy/core/add.py', 235, 235, 0.22360679774997896), ('sympy/core/add.py', 240, 240, 0.22360679774997896), ('sympy/core/add.py', 244, 244, 0.22360679774997896), ('sympy/core/add.py', 252, 252, 0.22360679774997896), ('sympy/core/add.py', 272, 273, 0.22360679774997896), ('sympy/core/add.py', 288, 288, 0.22360679774997896), ('sympy/core/add.py', 292, 294, 0.22360679774997896), ('sympy/core/add.py', 299, 300, 0.22360679774997896), ('sympy/core/add.py', 315, 315, 0.22360679774997896), ('sympy/core/add.py', 324, 324, 0.22360679774997896), ('sympy/core/add.py', 337, 337, 0.22360679774997896), ('sympy/core/add.py', 356, 356, 0.22360679774997896), ('sympy/core/add.py', 362, 362, 0.22360679774997896), ('sympy/core/add.py', 367, 367, 0.22360679774997896), ('sympy/core/add.py', 370, 370, 0.22360679774997896), ('sympy/core/assumptions.py', 435, 438, 0.22360679774997896), ('sympy/core/basic.py', 1143, 1144, 0.22360679774997896), ('sympy/core/core.py', 97, 99, 0.22360679774997896), ('sympy/core/core.py', 102, 104, 0.22360679774997896), ('sympy/core/expr.py', 195, 196, 0.22360679774997896), ('sympy/core/expr.py', 909, 909, 0.22360679774997896), ('sympy/core/expr.py', 912, 912, 0.22360679774997896), ('sympy/core/expr.py', 2206, 2208, 0.22360679774997896), ('sympy/core/expr.py', 2210, 2210, 0.22360679774997896), ('sympy/core/expr.py', 2215, 2215, 0.22360679774997896), ('sympy/core/expr.py', 3476, 3476, 0.22360679774997896), ('sympy/core/mul.py', 328, 330, 0.22360679774997896), ('sympy/core/mul.py', 344, 344, 0.22360679774997896), ('sympy/core/mul.py', 369, 371, 0.22360679774997896), ('sympy/core/mul.py', 619, 619, 0.22360679774997896), ('sympy/core/mul.py', 846, 846, 0.22360679774997896), ('sympy/core/mul.py', 1381, 1381, 0.22360679774997896), ('sympy/core/mul.py', 1384, 1385, 0.22360679774997896), ('sympy/core/mul.py', 1387, 1388, 0.22360679774997896), ('sympy/core/numbers.py', 1875, 1875, 0.22360679774997896), ('sympy/core/numbers.py', 2003, 2003, 0.22360679774997896), ('sympy/core/numbers.py', 2135, 2137, 0.22360679774997896), ('sympy/core/numbers.py', 2218, 2220, 0.22360679774997896), ('sympy/core/symbol.py', 275, 275, 0.22360679774997896), ('sympy/core/symbol.py', 278, 279, 0.22360679774997896), ('sympy/core/symbol.py', 289, 289, 0.22360679774997896), ('sympy/core/symbol.py', 292, 296, 0.22360679774997896), ('sympy/core/sympify.py', 15, 16, 0.22360679774997896), ('sympy/core/sympify.py', 363, 367, 0.22360679774997896), ('sympy/core/basic.py', 485, 490, 0.2182178902359924), ('sympy/core/basic.py', 493, 493, 0.2182178902359924), ('sympy/core/containers.py', 68, 68, 0.2182178902359924), ('sympy/core/expr.py', 266, 266, 0.2182178902359924), ('sympy/core/facts.py', 530, 534, 0.2182178902359924), ('sympy/core/mul.py', 347, 348, 0.2182178902359924), ('sympy/core/mul.py', 351, 353, 0.2182178902359924), ('sympy/core/numbers.py', 2157, 2158, 0.2182178902359924), ('sympy/core/symbol.py', 242, 244, 0.2182178902359924), ('sympy/core/symbol.py', 247, 247, 0.2182178902359924), ('sympy/core/symbol.py', 308, 308, 0.2182178902359924), ('sympy/core/symbol.py', 320, 321, 0.2182178902359924), ('sympy/core/assumptions.py', 504, 507, 0.21320071635561041), ('sympy/core/assumptions.py', 509, 512, 0.21320071635561041), ('sympy/core/basic.py', 711, 711, 0.21320071635561041), ('sympy/core/basic.py', 1803, 1807, 0.21320071635561041), ('sympy/core/basic.py', 1809, 1810, 0.21320071635561041), ('sympy/core/basic.py', 1812, 1812, 0.21320071635561041), ('sympy/core/basic.py', 1817, 1817, 0.21320071635561041), ('sympy/core/basic.py', 1820, 1820, 0.21320071635561041), ('sympy/core/containers.py', 50, 53, 0.21320071635561041), ('sympy/core/core.py', 76, 76, 0.21320071635561041), ('sympy/core/expr.py', 158, 161, 0.21320071635561041), ('sympy/core/expr.py', 225, 225, 0.21320071635561041), ('sympy/core/expr.py', 455, 455, 0.21320071635561041), ('sympy/core/expr.py', 856, 857, 0.21320071635561041), ('sympy/core/expr.py', 1992, 1992, 0.21320071635561041), ('sympy/core/facts.py', 487, 489, 0.21320071635561041), ('sympy/core/function.py', 289, 289, 0.21320071635561041), ('sympy/core/function.py', 292, 294, 0.21320071635561041), ('sympy/core/function.py', 310, 310, 0.21320071635561041), ('sympy/core/function.py', 312, 313, 0.21320071635561041), ('sympy/core/mul.py', 31, 31, 0.21320071635561041), ('sympy/core/mul.py', 290, 291, 0.21320071635561041), ('sympy/core/mul.py', 293, 293, 0.21320071635561041), ('sympy/core/mul.py', 295, 295, 0.21320071635561041), ('sympy/core/mul.py', 298, 298, 0.21320071635561041), ('sympy/core/mul.py', 301, 301, 0.21320071635561041), ('sympy/core/mul.py', 304, 304, 0.21320071635561041), ('sympy/core/mul.py', 306, 306, 0.21320071635561041), ('sympy/core/mul.py', 309, 309, 0.21320071635561041), ('sympy/core/mul.py', 322, 322, 0.21320071635561041), ('sympy/core/mul.py', 324, 324, 0.21320071635561041), ('sympy/core/mul.py', 358, 358, 0.21320071635561041), ('sympy/core/mul.py', 362, 362, 0.21320071635561041), ('sympy/core/mul.py', 373, 373, 0.21320071635561041), ('sympy/core/mul.py', 376, 376, 0.21320071635561041), ('sympy/core/mul.py', 403, 403, 0.21320071635561041), ('sympy/core/mul.py', 455, 467, 0.21320071635561041), ('sympy/core/mul.py', 470, 470, 0.21320071635561041), ('sympy/core/mul.py', 473, 473, 0.21320071635561041), ('sympy/core/mul.py', 497, 501, 0.21320071635561041), ('sympy/core/mul.py', 508, 509, 0.21320071635561041), ('sympy/core/mul.py', 523, 524, 0.21320071635561041), ('sympy/core/mul.py', 527, 527, 0.21320071635561041), ('sympy/core/mul.py', 533, 533, 0.21320071635561041), ('sympy/core/mul.py', 537, 537, 0.21320071635561041), ('sympy/core/mul.py', 539, 539, 0.21320071635561041), ('sympy/core/mul.py', 541, 541, 0.21320071635561041), ('sympy/core/mul.py', 543, 543, 0.21320071635561041), ('sympy/core/mul.py', 617, 617, 0.21320071635561041), ('sympy/core/mul.py', 641, 641, 0.21320071635561041), ('sympy/core/mul.py', 660, 660, 0.21320071635561041), ('sympy/core/mul.py', 672, 672, 0.21320071635561041), ('sympy/core/mul.py', 687, 688, 0.21320071635561041), ('sympy/core/mul.py', 691, 691, 0.21320071635561041), ('sympy/core/mul.py', 698, 699, 0.21320071635561041), ('sympy/core/mul.py', 704, 704, 0.21320071635561041), ('sympy/core/numbers.py', 2031, 2031, 0.21320071635561041), ('sympy/core/numbers.py', 2642, 2642, 0.21320071635561041), ('sympy/core/operations.py', 85, 88, 0.21320071635561041), ('sympy/core/operations.py', 90, 90, 0.21320071635561041), ('sympy/core/operations.py', 92, 92, 0.21320071635561041), ('sympy/core/assumptions.py', 515, 521, 0.20851441405707477), ('sympy/core/assumptions.py', 529, 529, 0.20851441405707477), ('sympy/core/basic.py', 368, 368, 0.20851441405707477), ('sympy/core/basic.py', 2030, 2031, 0.20851441405707477), ('sympy/core/decorators.py', 131, 132, 0.20851441405707477), ('sympy/core/decorators.py', 136, 136, 0.20851441405707477), ('sympy/core/decorators.py', 264, 264, 0.20851441405707477), ('sympy/core/decorators.py', 266, 266, 0.20851441405707477), ('sympy/core/facts.py', 512, 513, 0.20851441405707477), ('sympy/core/facts.py', 524, 525, 0.20851441405707477), ('sympy/core/function.py', 284, 287, 0.20851441405707477), ('sympy/core/operations.py', 48, 48, 0.20851441405707477), ('sympy/core/operations.py', 52, 53, 0.20851441405707477), ('sympy/core/operations.py', 56, 59, 0.20851441405707477), ('sympy/core/operations.py', 63, 63, 0.20851441405707477), ('sympy/core/operations.py', 71, 73, 0.20851441405707477), ('sympy/core/operations.py', 78, 78, 0.20851441405707477), ('sympy/core/assumptions.py', 445, 445, 0.20412414523193154), ('sympy/core/assumptions.py', 461, 466, 0.20412414523193154), ('sympy/core/assumptions.py', 496, 497, 0.20412414523193154), ('sympy/core/assumptions.py', 501, 501, 0.20412414523193154), ('sympy/core/basic.py', 2010, 2011, 0.20412414523193154), ('sympy/core/basic.py', 2014, 2015, 0.20412414523193154), ('sympy/core/basic.py', 2018, 2019, 0.20412414523193154), ('sympy/core/basic.py', 2024, 2025, 0.20412414523193154), ('sympy/core/basic.py', 2058, 2058, 0.20412414523193154), ('sympy/core/basic.py', 2061, 2061, 0.20412414523193154), ('sympy/core/facts.py', 493, 494, 0.20412414523193154), ('sympy/core/facts.py', 508, 510, 0.20412414523193154), ('sympy/core/facts.py', 515, 516, 0.20412414523193154), ('sympy/core/facts.py', 527, 527, 0.20412414523193154), ('sympy/core/function.py', 472, 476, 0.20412414523193154), ('sympy/core/function.py', 496, 497, 0.20412414523193154), ('sympy/core/assumptions.py', 433, 433, 0.2), ('sympy/core/facts.py', 480, 480, 0.2), ('sympy/core/basic.py', 546, 547, 0.19611613513818404), ('sympy/core/basic.py', 557, 558, 0.19611613513818404), ('sympy/core/compatibility.py', 581, 588, 0.19611613513818404), ('sympy/core/compatibility.py', 590, 590, 0.19611613513818404), ('sympy/core/compatibility.py', 592, 592, 0.19611613513818404), ('sympy/core/expr.py', 128, 132, 0.19611613513818404), ('sympy/core/expr.py', 141, 141, 0.19611613513818404), ('sympy/core/function.py', 248, 248, 0.19611613513818404), ('sympy/core/function.py', 251, 251, 0.19611613513818404), ('sympy/core/function.py', 272, 273, 0.19611613513818404), ('sympy/core/function.py', 275, 276, 0.19611613513818404), ('sympy/core/function.py', 279, 279, 0.19611613513818404), ('sympy/core/function.py', 281, 281, 0.19611613513818404), ('sympy/core/function.py', 456, 457, 0.19611613513818404), ('sympy/core/function.py', 480, 480, 0.19611613513818404), ('sympy/core/numbers.py', 808, 808, 0.19611613513818404), ('sympy/core/numbers.py', 2961, 2961, 0.19611613513818404), ('sympy/core/symbol.py', 235, 236, 0.19611613513818404), ('sympy/core/symbol.py', 271, 272, 0.19611613513818404), ('sympy/logic/boolalg.py', 335, 335, 0.19611613513818404), ('sympy/sets/sets.py', 80, 81, 0.19611613513818404), ('sympy/sets/sets.py', 84, 87, 0.19611613513818404), ('sympy/sets/sets.py', 686, 689, 0.19611613513818404), ('sympy/sets/sets.py', 693, 693, 0.19611613513818404), ('sympy/sets/sets.py', 1775, 1777, 0.19611613513818404), ('sympy/sets/sets.py', 1779, 1779, 0.19611613513818404), ('sympy/sets/sets.py', 1785, 1787, 0.19611613513818404), ('sympy/sets/sets.py', 1790, 1791, 0.19611613513818404), ('sympy/sets/sets.py', 1795, 1799, 0.19611613513818404), ('sympy/sets/sets.py', 1875, 1876, 0.19611613513818404), ('conftest.py', 59, 60, 0.19245008972987526), ('conftest.py', 64, 64, 0.19245008972987526), ('conftest.py', 68, 68, 0.19245008972987526), ('sympy/core/basic.py', 113, 115, 0.19245008972987526), ('sympy/core/basic.py', 117, 118, 0.19245008972987526), ('sympy/core/basic.py', 743, 743, 0.19245008972987526), ('sympy/core/compatibility.py', 607, 608, 0.19245008972987526), ('sympy/core/expr.py', 144, 146, 0.19245008972987526), ('sympy/core/expr.py', 163, 163, 0.19245008972987526), ('sympy/core/numbers.py', 2282, 2282, 0.19245008972987526), ('sympy/core/sympify.py', 345, 348, 0.19245008972987526), ('sympy/core/sympify.py', 354, 354, 0.19245008972987526), ('sympy/core/sympify.py', 356, 357, 0.19245008972987526), ('sympy/core/sympify.py', 359, 361, 0.19245008972987526), ('sympy/core/sympify.py', 505, 505, 0.19245008972987526)]
2024-04-05 04:16:53 SBFL result (methods): [('sympy/core/add.py', 'Add', 'flatten', 1.0), ('sympy/core/add.py', 'Add', '_eval_is_irrational', 1.0), ('sympy/core/add.py', 'Add', 'primitive', 1.0), ('sympy/core/basic.py', 'Basic', 'compare', 1.0), ('sympy/core/evalf.py', '', 'evalf_add', 1.0), ('sympy/core/evalf.py', '', 'evalf_mul', 1.0), ('sympy/core/evalf.py', '', 'evalf_atan', 1.0), ('sympy/core/expr.py', 'Expr', '__rpow__', 1.0), ('sympy/core/expr.py', 'Expr', '__rtruediv__', 1.0), ('sympy/core/expr.py', 'Expr', '_eval_is_positive', 1.0), ('sympy/core/expr.py', 'Expr', 'as_independent', 1.0), ('sympy/core/expr.py', 'Expr', 'extract_multiplicatively', 1.0), ('sympy/core/expr.py', 'Expr', 'could_extract_minus_sign', 1.0), ('sympy/core/expr.py', 'Expr', '_expand_hint', 1.0), ('sympy/core/mul.py', 'Mul', 'as_coeff_mul', 1.0), ('sympy/core/mul.py', 'Mul', '_eval_expand_mul', 1.0), ('sympy/core/mul.py', 'Mul', '_eval_real_imag', 1.0), ('sympy/core/mul.py', 'Mul', '_eval_herm_antiherm', 1.0), ('sympy/core/mul.py', 'Mul', '_eval_is_odd', 1.0), ('sympy/core/mul.py', 'Mul', '_eval_is_even', 1.0), ('sympy/core/numbers.py', 'Number', '__add__', 1.0), ('sympy/core/numbers.py', 'Rational', '__mod__', 1.0), ('sympy/core/numbers.py', 'Rational', '__gt__', 1.0), ('sympy/core/numbers.py', 'Integer', '_eval_power', 1.0), ('sympy/core/numbers.py', 'NegativeOne', '_eval_power', 1.0), ('sympy/core/numbers.py', 'Infinity', '__add__', 1.0), ('sympy/core/numbers.py', 'Infinity', '__mul__', 1.0), ('sympy/core/numbers.py', 'Infinity', '__truediv__', 1.0), ('sympy/core/numbers.py', 'NegativeInfinity', '__truediv__', 1.0), ('sympy/core/numbers.py', 'ImaginaryUnit', '_eval_power', 1.0), ('sympy/core/power.py', 'Pow', '_eval_is_zero', 1.0), ('sympy/core/power.py', 'Pow', 'as_numer_denom', 1.0), ('sympy/functions/elementary/complexes.py', 'sign', 'eval', 1.0), ('sympy/functions/elementary/complexes.py', 'Abs', 'fdiff', 1.0), ('sympy/functions/elementary/complexes.py', 'Abs', 'eval', 1.0), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_power', 1.0), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_nseries', 1.0), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_derivative', 1.0), ('sympy/functions/elementary/exponential.py', 'exp', 'eval', 1.0), ('sympy/functions/elementary/exponential.py', 'log', 'eval', 1.0), ('sympy/functions/elementary/exponential.py', 'log', 'as_real_imag', 1.0), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_algebraic', 1.0), ('sympy/functions/elementary/hyperbolic.py', 'acosh', 'eval', 1.0), ('sympy/functions/elementary/trigonometric.py', 'InverseTrigonometricFunction', '_asin_table', 1.0), ('sympy/functions/elementary/trigonometric.py', 'acos', '_eval_is_rational', 1.0), ('sympy/functions/elementary/trigonometric.py', 'acos', 'eval', 1.0), ('sympy/functions/elementary/trigonometric.py', 'acos', '_eval_is_extended_real', 1.0), ('sympy/functions/elementary/trigonometric.py', 'acos', '_eval_is_nonnegative', 1.0), ('sympy/functions/elementary/trigonometric.py', 'acos', '_eval_conjugate', 1.0), ('sympy/functions/elementary/trigonometric.py', 'atan', '_eval_is_real', 1.0), ('sympy/ntheory/factor_.py', '', 'multiplicity', 1.0), ('sympy/ntheory/factor_.py', '', '_factorint_small', 1.0), ('sympy/ntheory/generate.py', 'Sieve', 'extend_to_no', 1.0), ('sympy/ntheory/generate.py', 'Sieve', 'primerange', 1.0), ('sympy/ntheory/generate.py', 'Sieve', '__getitem__', 1.0), ('sympy/ntheory/generate.py', '', 'nextprime', 1.0), ('sympy/ntheory/generate.py', '', 'primerange', 1.0), ('sympy/parsing/sympy_parser.py', '', 'auto_symbol', 1.0), ('sympy/polys/euclidtools.py', '', 'dup_zz_heu_gcd', 1.0), ('sympy/polys/factortools.py', '', 'dup_zz_cyclotomic_factor', 1.0), ('sympy/printing/str.py', 'StrPrinter', '_print_Fraction', 1.0), ('sympy/printing/str.py', 'StrPrinter', '_print_mpq', 1.0), ('sympy/sets/sets.py', 'Interval', '__new__', 1.0), ('sympy/simplify/cse_opts.py', '', 'sub_pre', 1.0), ('sympy/simplify/simplify.py', '', 'logcombine', 1.0), ('sympy/core/add.py', '', '_unevaluated_Add', 0.7071067811865475), ('sympy/core/add.py', 'Add', 'getO', 0.7071067811865475), ('sympy/core/basic.py', 'Basic', 'match', 0.7071067811865475), ('sympy/core/basic.py', 'Atom', 'xreplace', 0.7071067811865475), ('sympy/core/evalf.py', '', 'scaled_zero', 0.7071067811865475), ('sympy/core/evalf.py', '', 'complex_accuracy', 0.7071067811865475), ('sympy/core/evalf.py', '', 'add_terms', 0.7071067811865475), ('sympy/core/evalf.py', '', 'evalf_pow', 0.7071067811865475), ('sympy/core/evalf.py', '', 'evalf', 0.7071067811865475), ('sympy/core/evalf.py', 'EvalfMixin', '_evalf', 0.7071067811865475), ('sympy/core/evalf.py', 'EvalfMixin', '_to_mpmath', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'sort_key', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', '_from_mpmath', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', '_eval_is_extended_positive_negative', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'getO', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'coeff', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'as_expr', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'as_powers_dict', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'primitive', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'apart', 0.7071067811865475), ('sympy/core/expr.py', 'Expr', 'invert', 0.7071067811865475), ('sympy/core/exprtools.py', 'Factors', '__init__', 0.7071067811865475), ('sympy/core/function.py', '', 'arity', 0.7071067811865475), ('sympy/core/function.py', 'Function', '_eval_evalf', 0.7071067811865475), ('sympy/core/function.py', '', '_mexpand', 0.7071067811865475), ('sympy/core/function.py', '', 'expand_power_exp', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', '_eval_evalf', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', 'as_powers_dict', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', '_eval_is_finite', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', '_eval_is_integer', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', '_eval_is_imaginary', 0.7071067811865475), ('sympy/core/mul.py', 'Mul', '_eval_is_irrational', 0.7071067811865475), ('sympy/core/mul.py', '', '_keep_coeff', 0.7071067811865475), ('sympy/core/numbers.py', '', 'igcdex', 0.7071067811865475), ('sympy/core/numbers.py', 'Number', '__mul__', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '__new__', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '_eval_is_integer', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '_eval_is_negative', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '__add__', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '__eq__', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '__ne__', 0.7071067811865475), ('sympy/core/numbers.py', 'Float', '_Frel', 0.7071067811865475), ('sympy/core/numbers.py', 'NegativeInfinity', '_eval_evalf', 0.7071067811865475), ('sympy/core/numbers.py', 'NegativeInfinity', 'evalf', 0.7071067811865475), ('sympy/core/numbers.py', 'NegativeInfinity', '__sub__', 0.7071067811865475), ('sympy/core/numbers.py', 'NegativeInfinity', '__mul__', 0.7071067811865475), ('sympy/core/numbers.py', 'NegativeInfinity', '__neg__', 0.7071067811865475), ('sympy/core/numbers.py', 'ImaginaryUnit', '__abs__', 0.7071067811865475), ('sympy/core/power.py', '', '_integer_nthroot_python', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '__new__', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '_eval_is_integer', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '_eval_expand_power_exp', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '_eval_expand_power_base', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '_eval_expand_multinomial', 0.7071067811865475), ('sympy/core/power.py', 'Pow', 'as_real_imag', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '_eval_evalf', 0.7071067811865475), ('sympy/core/power.py', 'Pow', '_eval_is_polynomial', 0.7071067811865475), ('sympy/core/symbol.py', 'Dummy', 'sort_key', 0.7071067811865475), ('sympy/core/sympify.py', '', 'sympify', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__new__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '_new_check', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__bool__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__eq__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__neg__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__add__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__radd__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__sub__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__mul__', 0.7071067811865475), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__truediv__', 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 're', 'eval', 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 're', 'as_real_imag', 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 'im', 'as_real_imag', 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_zero', 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_even', 0.7071067811865475), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_odd', 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_rational', 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_complex', 0.7071067811865475), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_extended_positive', 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 'atan', '_eval_is_rational', 0.7071067811865475), ('sympy/functions/elementary/trigonometric.py', 'atan', '_eval_is_zero', 0.7071067811865475), ('sympy/logic/boolalg.py', 'BooleanFalse', '__hash__', 0.7071067811865475), ('sympy/ntheory/factor_.py', '', 'perfect_power', 0.7071067811865475), ('sympy/ntheory/factor_.py', '', 'factorint', 0.7071067811865475), ('sympy/ntheory/multinomial.py', '', 'binomial_coefficients', 0.7071067811865475), ('sympy/ntheory/multinomial.py', '', 'multinomial_coefficients', 0.7071067811865475), ('sympy/ntheory/primetest.py', '', 'isprime', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'lambda_notation', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'factorial_notation', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'convert_xor', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'repeated_decimals', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'auto_number', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'stringify_expr', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'eval_expr', 0.7071067811865475), ('sympy/parsing/sympy_parser.py', '', 'parse_expr', 0.7071067811865475), ('sympy/polys/constructor.py', '', '_construct_simple', 0.7071067811865475), ('sympy/polys/constructor.py', '', '_construct_composite', 0.7071067811865475), ('sympy/polys/constructor.py', '', 'construct_domain', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_add_term', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_mul_term', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_mul_term', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_mul_ground', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_quo_ground', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_abs', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_neg', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_neg', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_add', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_sub', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_sub', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_sub_mul', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_mul', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_mul', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_sqr', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_pow', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_pow', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_prem', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_prem', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_rr_div', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_rr_div', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_div', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_quo', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_div', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dmp_quo', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_max_norm', 0.7071067811865475), ('sympy/polys/densearith.py', '', 'dup_l1_norm', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dup_degree', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_degree', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dup_strip', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_strip', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dup_convert', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_zero_p', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_zero', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_ground', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_zeros', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dmp_from_dict', 0.7071067811865475), ('sympy/polys/densebasic.py', '', 'dup_terms_gcd', 0.7071067811865475), ('sympy/polys/densetools.py', '', 'dup_diff', 0.7071067811865475), ('sympy/polys/densetools.py', '', 'dup_eval', 0.7071067811865475), ('sympy/polys/densetools.py', '', 'dup_trunc', 0.7071067811865475), ('sympy/polys/densetools.py', '', 'dup_content', 0.7071067811865475), ('sympy/polys/densetools.py', '', 'dup_extract', 0.7071067811865475), ('sympy/polys/densetools.py', '', 'dup_clear_denoms', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'tp', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'convert_from', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'convert', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'unify_with_symbols', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'unify', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'poly_ring', 0.7071067811865475), ('sympy/polys/domains/domain.py', 'Domain', 'abs', 0.7071067811865475), ('sympy/polys/domains/field.py', 'Field', 'gcd', 0.7071067811865475), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'from_QQ', 0.7071067811865475), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'gcdex', 0.7071067811865475), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'lcm', 0.7071067811865475), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'sqrt', 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 'PolynomialRing', '__init__', 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 'PolynomialRing', 'new', 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 'PolynomialRing', 'zero', 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 'PolynomialRing', 'one', 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 'PolynomialRing', '__eq__', 0.7071067811865475), ('sympy/polys/domains/polynomialring.py', 'PolynomialRing', 'to_sympy', 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'get_ring', 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'to_sympy', 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'from_sympy', 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'from_ZZ', 0.7071067811865475), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'quo', 0.7071067811865475), ('sympy/polys/domains/ring.py', 'Ring', 'exquo', 0.7071067811865475), ('sympy/polys/domains/ring.py', 'Ring', 'invert', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dup_inner_subresultants', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dup_prs_resultant', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dup_resultant', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dmp_inner_subresultants', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dmp_prs_resultant', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dmp_resultant', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', '_dup_rr_trivial_gcd', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', '_dup_zz_gcd_interpolate', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dup_inner_gcd', 0.7071067811865475), ('sympy/polys/euclidtools.py', '', 'dup_gcd', 0.7071067811865475), ('sympy/polys/factortools.py', '', 'dup_trial_division', 0.7071067811865475), ('sympy/polys/factortools.py', '', 'dup_zz_hensel_step', 0.7071067811865475), ('sympy/polys/factortools.py', '', 'dup_zz_hensel_lift', 0.7071067811865475), ('sympy/polys/factortools.py', '', '_test_pl', 0.7071067811865475), ('sympy/polys/factortools.py', '', 'dup_zz_zassenhaus', 0.7071067811865475), ('sympy/polys/factortools.py', '', 'dup_zz_factor', 0.7071067811865475), ('sympy/polys/factortools.py', '', 'dup_factor_list', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_int', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_degree', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_strip', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_trunc', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_from_int_poly', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_to_int_poly', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_neg', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_sub_ground', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_mul_ground', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_quo_ground', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_add', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_sub', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_mul', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_sqr', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_sub_mul', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_div', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_rem', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_quo', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_lshift', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_frobenius_monomial_base', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_frobenius_map', 0.7071067811865475), ('sympy/polys/galoistools.py', '', '_gf_pow_pnm1d2', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_pow_mod', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_gcd', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_gcdex', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_monic', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_diff', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_random', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_sqf_p', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_ddf_zassenhaus', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_edf_zassenhaus', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_zassenhaus', 0.7071067811865475), ('sympy/polys/galoistools.py', '', 'gf_factor_sqf', 0.7071067811865475), ('sympy/polys/monomials.py', '', 'monomial_mul', 0.7071067811865475), ('sympy/polys/monomials.py', '', 'monomial_min', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', '__init__', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', '_build', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', '_vars', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'mul', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'pow', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'mulpow', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'ldiv', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'div', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'lcm', 0.7071067811865475), ('sympy/polys/monomials.py', 'MonomialOps', 'gcd', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_choose_factor', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_separate_sq', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_minpoly_op_algebraic_element', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_muly', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_minpoly_pow', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_minpoly_add', 0.7071067811865475), ('sympy/polys/numberfields.py', '', '_minpoly_compose', 0.7071067811865475), ('sympy/polys/numberfields.py', '', 'minimal_polynomial', 0.7071067811865475), ('sympy/polys/orderings.py', 'MonomialOrder', '__hash__', 0.7071067811865475), ('sympy/polys/polyclasses.py', 'DMP', 'per', 0.7071067811865475), ('sympy/polys/polyclasses.py', 'DMP', 'convert', 0.7071067811865475), ('sympy/polys/polyclasses.py', 'DMP', 'resultant', 0.7071067811865475), ('sympy/polys/polyconfig.py', '', 'query', 0.7071067811865475), ('sympy/polys/polyerrors.py', 'PolificationFailed', '__init__', 0.7071067811865475), ('sympy/polys/polyoptions.py', 'Options', '__setattr__', 0.7071067811865475), ('sympy/polys/polyoptions.py', 'Order', 'preprocess', 0.7071067811865475), ('sympy/polys/polyoptions.py', 'Composite', 'default', 0.7071067811865475), ('sympy/polys/polyoptions.py', '', 'allowed_flags', 0.7071067811865475), ('sympy/polys/polytools.py', 'Poly', '_unify', 0.7071067811865475), ('sympy/polys/polytools.py', 'Poly', 'as_expr', 0.7071067811865475), ('sympy/polys/polytools.py', 'Poly', '_gen_to_level', 0.7071067811865475), ('sympy/polys/polytools.py', 'Poly', 'resultant', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'poly_from_expr', 0.7071067811865475), ('sympy/polys/polytools.py', '', '_poly_from_expr', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'parallel_poly_from_expr', 0.7071067811865475), ('sympy/polys/polytools.py', '', '_parallel_poly_from_expr', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'degree', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'resultant', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'gcd', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'lcm', 0.7071067811865475), ('sympy/polys/polytools.py', '', 'cancel', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_sort_gens', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_unify_gens', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_sort_factors', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_parallel_dict_from_expr_if_gens', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_parallel_dict_from_expr_no_gens', 0.7071067811865475), ('sympy/polys/polyutils.py', '', 'parallel_dict_from_expr', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_parallel_dict_from_expr', 0.7071067811865475), ('sympy/polys/polyutils.py', '', 'dict_from_expr', 0.7071067811865475), ('sympy/polys/polyutils.py', '', '_dict_from_expr', 0.7071067811865475), ('sympy/polys/ring_series.py', '', '_invert_monoms', 0.7071067811865475), ('sympy/polys/ring_series.py', '', '_giant_steps', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_is_puiseux', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_mul', 0.7071067811865475), ('sympy/polys/ring_series.py', '', '_has_constant_term', 0.7071067811865475), ('sympy/polys/ring_series.py', '', '_get_constant_term', 0.7071067811865475), ('sympy/polys/ring_series.py', '', '_series_inversion1', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_series_inversion', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_series_from_list', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_integrate', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_exp', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_newton', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_hadamard_exp', 0.7071067811865475), ('sympy/polys/ring_series.py', '', 'rs_compose_add', 0.7071067811865475), ('sympy/polys/rings.py', '', 'ring', 0.7071067811865475), ('sympy/polys/rings.py', '', '_parse_symbols', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', '__new__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', '_gens', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', '__hash__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', '__eq__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', '__ne__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'monomial_basis', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'zero', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'one', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'domain_new', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'ground_new', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'term_new', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'ring_new', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'from_dict', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyRing', 'index', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'new', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__hash__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'copy', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'as_expr', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'as_expr_dict', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'strip_zero', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__eq__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__ne__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'is_monomial', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__neg__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__add__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__sub__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__rsub__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__mul__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__pow__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '__truediv__', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'degree', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'leading_expv', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', '_get_coeff', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'LC', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'itercoeffs', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'itermonoms', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'iterterms', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'listcoeffs', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'listmonoms', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'content', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'primitive', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'quo_ground', 0.7071067811865475), ('sympy/polys/rings.py', 'PolyElement', 'diff', 0.7071067811865475), ('sympy/polys/sqfreetools.py', '', 'dup_sqf_part', 0.7071067811865475), ('sympy/simplify/radsimp.py', '', 'collect', 0.7071067811865475), ('sympy/simplify/radsimp.py', '', '_split_gcd', 0.7071067811865475), ('sympy/simplify/simplify.py', '', '_is_sum_surds', 0.7071067811865475), ('sympy/utilities/iterables.py', '', 'subsets', 0.7071067811865475), ('sympy/core/add.py', 'Add', '_eval_is_imaginary', 0.5773502691896258), ('sympy/core/add.py', 'Add', '_eval_is_zero', 0.5773502691896258), ('sympy/core/cache.py', '', '__cacheit', 0.5773502691896258), ('sympy/core/evalf.py', '', 'fastlog', 0.5773502691896258), ('sympy/core/evalf.py', '', '_create_evalf_table', 0.5773502691896258), ('sympy/core/expr.py', 'Expr', 'args_cnc', 0.5773502691896258), ('sympy/core/expr.py', 'ExprBuilder', '__init__', 0.5773502691896258), ('sympy/core/exprtools.py', '', '_monotonic_sign', 0.5773502691896258), ('sympy/core/function.py', '', 'expand_mul', 0.5773502691896258), ('sympy/core/mul.py', '', '_unevaluated_Mul', 0.5773502691896258), ('sympy/core/mul.py', 'Mul', '__neg__', 0.5773502691896258), ('sympy/core/mul.py', 'Mul', 'flatten', 0.5773502691896258), ('sympy/core/mul.py', 'Mul', '_eval_power', 0.5773502691896258), ('sympy/core/mul.py', 'Mul', 'as_two_terms', 0.5773502691896258), ('sympy/core/mul.py', 'Mul', '_eval_is_rational', 0.5773502691896258), ('sympy/core/numbers.py', 'Number', 'as_coeff_Mul', 0.5773502691896258), ('sympy/core/numbers.py', 'Float', '__neg__', 0.5773502691896258), ('sympy/core/numbers.py', 'Float', '_eval_power', 0.5773502691896258), ('sympy/core/numbers.py', 'Float', '__abs__', 0.5773502691896258), ('sympy/core/numbers.py', 'Rational', '__eq__', 0.5773502691896258), ('sympy/core/numbers.py', 'Rational', 'as_content_primitive', 0.5773502691896258), ('sympy/core/numbers.py', 'Infinity', '_eval_evalf', 0.5773502691896258), ('sympy/core/numbers.py', 'Infinity', 'evalf', 0.5773502691896258), ('sympy/core/numbers.py', 'NaN', '__eq__', 0.5773502691896258), ('sympy/core/power.py', 'Pow', '_eval_is_extended_real', 0.5773502691896258), ('sympy/core/power.py', 'Pow', '_eval_conjugate', 0.5773502691896258), ('sympy/core/power.py', 'Pow', '_eval_is_rational', 0.5773502691896258), ('sympy/external/pythonmpq.py', 'PythonMPQ', '_new', 0.5773502691896258), ('sympy/external/pythonmpq.py', 'PythonMPQ', '_cmp', 0.5773502691896258), ('sympy/external/pythonmpq.py', 'PythonMPQ', '__lt__', 0.5773502691896258), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_integer', 0.5773502691896258), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_extended_real', 0.5773502691896258), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_zero', 0.5773502691896258), ('sympy/ntheory/factor_.py', '', 'trailing', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'poly_LC', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'poly_TC', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'dmp_degree_in', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'dup_from_dict', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'dup_to_dict', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'dmp_to_dict', 0.5773502691896258), ('sympy/polys/densebasic.py', '', '_rec_list_terms', 0.5773502691896258), ('sympy/polys/densebasic.py', '', 'dmp_list_terms', 0.5773502691896258), ('sympy/polys/densetools.py', '', 'dup_primitive', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', '__hash__', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', 'new', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', '__call__', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', 'of_type', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', '__eq__', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', '__ne__', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', 'is_one', 0.5773502691896258), ('sympy/polys/domains/domain.py', 'Domain', 'is_negative', 0.5773502691896258), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'to_sympy', 0.5773502691896258), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'from_sympy', 0.5773502691896258), ('sympy/polys/domains/integerring.py', 'IntegerRing', 'gcd', 0.5773502691896258), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'numer', 0.5773502691896258), ('sympy/polys/domains/rationalfield.py', 'RationalField', 'denom', 0.5773502691896258), ('sympy/polys/factortools.py', '', 'dmp_factor_list', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', '__init__', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', 'unify', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', 'to_sympy_dict', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', 'from_dict', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', 'terms', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', 'degree', 0.5773502691896258), ('sympy/polys/polyclasses.py', 'DMP', 'factor_list', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Option', 'default', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Option', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'OptionType', '__init__', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Options', '__init__', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Options', 'clone', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Expand', 'default', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Gens', 'default', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Gens', 'preprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Sort', 'default', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Domain', 'preprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Domain', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Split', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Gaussian', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Extension', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Modulus', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Auto', 'postprocess', 0.5773502691896258), ('sympy/polys/polyoptions.py', 'Series', 'default', 0.5773502691896258), ('sympy/polys/polyoptions.py', '', 'build_options', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', '__new__', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', 'new', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', 'expr', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', '_from_dict', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', '_from_expr', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', 'per', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', 'terms', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', 'degree', 0.5773502691896258), ('sympy/polys/polytools.py', 'Poly', 'factor_list', 0.5773502691896258), ('sympy/polys/polyutils.py', '', '_not_a_coeff', 0.5773502691896258), ('sympy/polys/polyutils.py', '', '_dict_from_expr_if_gens', 0.5773502691896258), ('sympy/polys/polyutils.py', '', '_dict_from_expr_no_gens', 0.5773502691896258), ('sympy/polys/polyutils.py', '', 'expr_from_dict', 0.5773502691896258), ('sympy/simplify/radsimp.py', '', 'denom', 0.5773502691896258), ('sympy/simplify/simplify.py', '', 'bottom_up', 0.5773502691896258), ('sympy/core/assumptions.py', 'ManagedProperties', '__init__', 0.5), ('sympy/core/basic.py', 'Basic', 'is_comparable', 0.5), ('sympy/core/expr.py', 'Expr', 'as_terms', 0.5), ('sympy/core/expr.py', 'Expr', 'is_polynomial', 0.5), ('sympy/core/mul.py', 'Mul', 'as_real_imag', 0.5), ('sympy/core/numbers.py', 'Number', '_eval_conjugate', 0.5), ('sympy/core/numbers.py', 'Rational', '__add__', 0.5), ('sympy/core/numbers.py', 'Rational', '_Rrel', 0.5), ('sympy/core/numbers.py', 'Rational', '__lt__', 0.5), ('sympy/core/numbers.py', 'NaN', '__hash__', 0.5), ('sympy/core/power.py', 'Pow', '_eval_is_extended_negative', 0.5), ('sympy/core/power.py', 'Pow', '_eval_subs', 0.5), ('sympy/core/relational.py', '', 'is_ge', 0.5), ('sympy/functions/elementary/complexes.py', 'im', 'eval', 0.5), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_extended_positive', 0.5), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_rational', 0.5), ('sympy/functions/elementary/exponential.py', 'ExpBase', 'as_numer_denom', 0.5), ('sympy/functions/elementary/exponential.py', 'log', '_eval_is_finite', 0.5), ('sympy/functions/elementary/trigonometric.py', 'InverseTrigonometricFunction', '_atan_table', 0.5), ('sympy/functions/elementary/trigonometric.py', 'atan', 'eval', 0.5), ('sympy/ntheory/generate.py', 'Sieve', 'extend', 0.5), ('sympy/ntheory/generate.py', 'Sieve', 'search', 0.5), ('sympy/simplify/radsimp.py', '', 'fraction', 0.5), ('sympy/utilities/iterables.py', '', 'has_dups', 0.5), ('sympy/core/add.py', 'Add', '_eval_is_extended_positive', 0.4472135954999579), ('sympy/core/add.py', 'Add', '_eval_is_extended_nonnegative', 0.4472135954999579), ('sympy/core/add.py', 'Add', '_eval_is_extended_negative', 0.4472135954999579), ('sympy/core/basic.py', 'Basic', 'subs', 0.4472135954999579), ('sympy/core/evalf.py', '', 'iszero', 0.4472135954999579), ('sympy/core/evalf.py', 'EvalfMixin', 'evalf', 0.4472135954999579), ('sympy/core/expr.py', 'Expr', '__lt__', 0.4472135954999579), ('sympy/core/expr.py', 'Expr', 'as_ordered_terms', 0.4472135954999579), ('sympy/core/expr.py', 'Expr', 'as_real_imag', 0.4472135954999579), ('sympy/core/exprtools.py', '', 'factor_terms', 0.4472135954999579), ('sympy/core/function.py', 'FunctionClass', '__init__', 0.4472135954999579), ('sympy/core/function.py', 'Function', '__new__', 0.4472135954999579), ('sympy/core/function.py', 'UndefinedFunction', '__new__', 0.4472135954999579), ('sympy/core/function.py', 'UndefinedFunction', '__eq__', 0.4472135954999579), ('sympy/core/mul.py', 'Mul', 'class_key', 0.4472135954999579), ('sympy/core/mul.py', 'Mul', '_expandsums', 0.4472135954999579), ('sympy/core/mul.py', 'Mul', 'as_base_exp', 0.4472135954999579), ('sympy/core/mul.py', 'Mul', '_eval_is_algebraic', 0.4472135954999579), ('sympy/core/mul.py', 'Mul', 'as_ordered_factors', 0.4472135954999579), ('sympy/core/numbers.py', 'Float', 'num', 0.4472135954999579), ('sympy/core/numbers.py', 'Float', '_eval_is_extended_negative', 0.4472135954999579), ('sympy/core/numbers.py', 'Integer', '__lt__', 0.4472135954999579), ('sympy/core/numbers.py', 'Zero', '__abs__', 0.4472135954999579), ('sympy/core/numbers.py', 'NaN', '_as_mpf_val', 0.4472135954999579), ('sympy/core/numbers.py', 'Exp1', '_eval_power', 0.4472135954999579), ('sympy/core/operations.py', 'AssocOp', '_has_matcher', 0.4472135954999579), ('sympy/core/operations.py', 'AssocOp', '_eval_evalf', 0.4472135954999579), ('sympy/core/power.py', 'Pow', '_eval_power', 0.4472135954999579), ('sympy/core/power.py', 'Pow', '_eval_is_imaginary', 0.4472135954999579), ('sympy/core/relational.py', 'StrictLessThan', '_eval_fuzzy_relation', 0.4472135954999579), ('sympy/core/relational.py', '', 'is_lt', 0.4472135954999579), ('sympy/core/symbol.py', '', '_filter_assumptions', 0.4472135954999579), ('sympy/functions/elementary/complexes.py', 'im', '_eval_is_complex', 0.4472135954999579), ('sympy/functions/elementary/complexes.py', 'Abs', '_eval_is_real', 0.4472135954999579), ('sympy/functions/elementary/exponential.py', 'log', 'as_base_exp', 0.4472135954999579), ('sympy/core/add.py', 'Add', '_eval_power', 0.4082482904638631), ('sympy/core/basic.py', 'Basic', '_xreplace', 0.4082482904638631), ('sympy/core/basic.py', 'Basic', 'has', 0.4082482904638631), ('sympy/core/compatibility.py', '', 'is_sequence', 0.4082482904638631), ('sympy/core/evalf.py', '', 'pure_complex', 0.4082482904638631), ('sympy/core/expr.py', 'Expr', '__truediv__', 0.4082482904638631), ('sympy/core/expr.py', 'Expr', '_eval_is_negative', 0.4082482904638631), ('sympy/core/expr.py', 'Expr', '_parse_order', 0.4082482904638631), ('sympy/core/expr.py', 'Expr', 'extract_branch_factor', 0.4082482904638631), ('sympy/core/expr.py', 'Expr', 'fps', 0.4082482904638631), ('sympy/core/function.py', 'AppliedUndef', '__new__', 0.4082482904638631), ('sympy/core/function.py', 'UndefinedFunction', '__hash__', 0.4082482904638631), ('sympy/core/function.py', 'UndefinedFunction', '__ne__', 0.4082482904638631), ('sympy/core/mul.py', 'Mul', '_eval_is_antihermitian', 0.4082482904638631), ('sympy/core/mul.py', 'Mul', '_eval_conjugate', 0.4082482904638631), ('sympy/core/mul.py', '', 'expand_2arg', 0.4082482904638631), ('sympy/core/numbers.py', '', 'igcd', 0.4082482904638631), ('sympy/core/numbers.py', 'Float', '_new', 0.4082482904638631), ('sympy/core/numbers.py', 'Float', '_eval_is_zero', 0.4082482904638631), ('sympy/core/numbers.py', 'Float', '__mul__', 0.4082482904638631), ('sympy/core/numbers.py', 'Float', '__ge__', 0.4082482904638631), ('sympy/core/numbers.py', 'Rational', '_eval_is_positive', 0.4082482904638631), ('sympy/core/numbers.py', 'Rational', '_eval_is_zero', 0.4082482904638631), ('sympy/core/numbers.py', 'Rational', '__abs__', 0.4082482904638631), ('sympy/core/numbers.py', 'Rational', 'factors', 0.4082482904638631), ('sympy/core/numbers.py', 'Rational', 'as_coeff_Add', 0.4082482904638631), ('sympy/core/numbers.py', 'Integer', '__int__', 0.4082482904638631), ('sympy/core/numbers.py', 'Integer', 'ceiling', 0.4082482904638631), ('sympy/core/numbers.py', 'Integer', '_eval_is_odd', 0.4082482904638631), ('sympy/core/numbers.py', 'Infinity', '_as_mpf_val', 0.4082482904638631), ('sympy/core/numbers.py', 'NegativeInfinity', '_as_mpf_val', 0.4082482904638631), ('sympy/core/power.py', '', 'integer_nthroot', 0.4082482904638631), ('sympy/core/relational.py', '_Inequality', '_eval_relation', 0.4082482904638631), ('sympy/core/relational.py', '', '_n2', 0.4082482904638631), ('sympy/core/symbol.py', 'Dummy', '_hashable_content', 0.4082482904638631), ('sympy/functions/elementary/complexes.py', 'im', '_eval_is_algebraic', 0.4082482904638631), ('sympy/functions/elementary/complexes.py', 'im', '_eval_is_finite', 0.4082482904638631), ('sympy/ntheory/factor_.py', '', 'factorrat', 0.4082482904638631), ('sympy/simplify/simplify.py', '', 'signsimp', 0.4082482904638631), ('sympy/core/basic.py', 'Basic', 'func', 0.3779644730092272), ('sympy/core/basic.py', 'Basic', '_eval_derivative_n_times', 0.3779644730092272), ('sympy/core/basic.py', 'Basic', 'rewrite', 0.3779644730092272), ('sympy/core/compatibility.py', '', 'iterable', 0.3779644730092272), ('sympy/core/compatibility.py', '', 'ordered', 0.3779644730092272), ('sympy/core/core.py', 'BasicMeta', '__cmp__', 0.3779644730092272), ('sympy/core/evalf.py', '', 'bitcount', 0.3779644730092272), ('sympy/core/expr.py', 'Expr', 'expand', 0.3779644730092272), ('sympy/core/exprtools.py', '', '_isnumber', 0.3779644730092272), ('sympy/core/exprtools.py', '', 'decompose_power', 0.3779644730092272), ('sympy/core/exprtools.py', 'Factors', 'as_expr', 0.3779644730092272), ('sympy/core/facts.py', 'FactKB', 'deduce_all_facts', 0.3779644730092272), ('sympy/core/function.py', 'Application', 'eval', 0.3779644730092272), ('sympy/core/function.py', '', 'expand_log', 0.3779644730092272), ('sympy/core/mul.py', 'Mul', '_eval_pos_neg', 0.3779644730092272), ('sympy/core/mul.py', 'Mul', '_eval_subs', 0.3779644730092272), ('sympy/core/mul.py', 'Mul', 'as_content_primitive', 0.3779644730092272), ('sympy/core/numbers.py', 'Number', 'class_key', 0.3779644730092272), ('sympy/core/numbers.py', 'Number', 'sort_key', 0.3779644730092272), ('sympy/core/numbers.py', 'Float', '__bool__', 0.3779644730092272), ('sympy/core/numbers.py', 'Float', '__gt__', 0.3779644730092272), ('sympy/core/numbers.py', 'Rational', '__mul__', 0.3779644730092272), ('sympy/core/numbers.py', 'Infinity', '__neg__', 0.3779644730092272), ('sympy/core/power.py', 'Pow', '_eval_is_odd', 0.3779644730092272), ('sympy/core/power.py', 'Pow', '_eval_is_algebraic', 0.3779644730092272), ('sympy/core/power.py', 'Pow', 'matches', 0.3779644730092272), ('sympy/core/singleton.py', 'Singleton', '__init__', 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 're', '_eval_is_complex', 0.3779644730092272), ('sympy/functions/elementary/complexes.py', 'arg', '_eval_derivative', 0.3779644730092272), ('sympy/functions/elementary/exponential.py', 'ExpBase', 'as_base_exp', 0.3779644730092272), ('sympy/functions/elementary/integers.py', 'RoundFunction', 'eval', 0.3779644730092272), ('sympy/functions/elementary/integers.py', 'ceiling', '_eval_number', 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 'Dispatcher', '__call__', 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 'Dispatcher', 'dispatch', 0.3779644730092272), ('sympy/multipledispatch/dispatcher.py', 'Dispatcher', 'dispatch_iter', 0.3779644730092272), ('sympy/sets/fancysets.py', 'Naturals0', '_contains', 0.3779644730092272), ('sympy/core/_print_helpers.py', 'Printable', '__str__', 0.35355339059327373), ('sympy/core/add.py', 'Add', 'class_key', 0.35355339059327373), ('sympy/core/add.py', 'Add', '_eval_subs', 0.35355339059327373), ('sympy/core/add.py', 'Add', 'as_content_primitive', 0.35355339059327373), ('sympy/core/assumptions.py', '', 'make_property', 0.35355339059327373), ('sympy/core/basic.py', 'Basic', '_subs', 0.35355339059327373), ('sympy/core/core.py', 'BasicMeta', '__init__', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', '__abs__', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', '__complex__', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', 'as_coefficient', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', 'as_content_primitive', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', '_eval_is_rational_function', 0.35355339059327373), ('sympy/core/expr.py', 'Expr', 'is_rational_function', 0.35355339059327373), ('sympy/core/exprtools.py', 'Factors', 'is_zero', 0.35355339059327373), ('sympy/core/exprtools.py', 'Factors', 'mul', 0.35355339059327373), ('sympy/core/exprtools.py', 'Factors', 'normal', 0.35355339059327373), ('sympy/core/exprtools.py', 'Factors', 'gcd', 0.35355339059327373), ('sympy/core/exprtools.py', 'Term', '__init__', 0.35355339059327373), ('sympy/core/exprtools.py', 'Term', 'mul', 0.35355339059327373), ('sympy/core/exprtools.py', 'Term', 'gcd', 0.35355339059327373), ('sympy/core/exprtools.py', '', '_gcd_terms', 0.35355339059327373), ('sympy/core/exprtools.py', '', 'gcd_terms', 0.35355339059327373), ('sympy/core/function.py', 'Function', 'class_key', 0.35355339059327373), ('sympy/core/logic.py', '', 'fuzzy_bool', 0.35355339059327373), ('sympy/core/mul.py', 'Mul', '_eval_is_composite', 0.35355339059327373), ('sympy/core/numbers.py', 'Number', '_eval_subs', 0.35355339059327373), ('sympy/core/numbers.py', 'Number', 'as_coeff_mul', 0.35355339059327373), ('sympy/core/numbers.py', 'Float', '_as_mpf_op', 0.35355339059327373), ('sympy/core/numbers.py', 'Rational', '__new__', 0.35355339059327373), ('sympy/core/numbers.py', 'Rational', '_as_mpf_val', 0.35355339059327373), ('sympy/core/numbers.py', 'Rational', 'gcd', 0.35355339059327373), ('sympy/core/numbers.py', 'Integer', '__sub__', 0.35355339059327373), ('sympy/core/numbers.py', 'Integer', '__rmul__', 0.35355339059327373), ('sympy/core/numbers.py', 'NegativeOne', '__abs__', 0.35355339059327373), ('sympy/core/numbers.py', 'Half', '__abs__', 0.35355339059327373), ('sympy/core/power.py', 'Pow', '_eval_is_finite', 0.35355339059327373), ('sympy/core/relational.py', '_Inequality', '__new__', 0.35355339059327373), ('sympy/core/relational.py', '', '_eval_is_ge', 0.35355339059327373), ('sympy/core/symbol.py', 'Symbol', 'sort_key', 0.35355339059327373), ('sympy/core/symbol.py', 'Dummy', '__new__', 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 're', '_eval_is_algebraic', 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 're', '_eval_is_zero', 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 're', '_eval_is_finite', 0.35355339059327373), ('sympy/functions/elementary/complexes.py', 'im', '_eval_is_zero', 0.35355339059327373), ('sympy/functions/elementary/exponential.py', 'ExpBase', 'exp', 0.35355339059327373), ('sympy/functions/elementary/trigonometric.py', 'atan2', 'eval', 0.35355339059327373), ('sympy/polys/orderings.py', 'LexOrder', '__call__', 0.35355339059327373), ('sympy/polys/orderings.py', '', 'monomial_key', 0.35355339059327373), ('sympy/printing/printer.py', 'Printer', '_get_initial_settings', 0.35355339059327373), ('sympy/printing/printer.py', 'Printer', '__init__', 0.35355339059327373), ('sympy/printing/printer.py', 'Printer', 'doprint', 0.35355339059327373), ('sympy/printing/printer.py', 'Printer', '_print', 0.35355339059327373), ('sympy/printing/printer.py', '_PrintFunction', '__call__', 0.35355339059327373), ('sympy/utilities/iterables.py', '', 'sift', 0.35355339059327373), ('sympy/core/basic.py', 'Basic', '_eval_subs', 0.3333333333333333), ('sympy/core/basic.py', '', '_aresame', 0.3333333333333333), ('sympy/core/basic.py', '', '_atomic', 0.3333333333333333), ('sympy/core/containers.py', 'Tuple', '__getitem__', 0.3333333333333333), ('sympy/core/expr.py', 'Expr', '__rsub__', 0.3333333333333333), ('sympy/core/expr.py', 'Expr', 'as_coeff_mul', 0.3333333333333333), ('sympy/core/expr.py', 'AtomicExpr', '_eval_derivative_n_times', 0.3333333333333333), ('sympy/core/expr.py', 'AtomicExpr', '_eval_is_polynomial', 0.3333333333333333), ('sympy/core/expr.py', 'AtomicExpr', '_eval_is_rational_function', 0.3333333333333333), ('sympy/core/function.py', '', '_coeff_isneg', 0.3333333333333333), ('sympy/core/function.py', 'Derivative', '__new__', 0.3333333333333333), ('sympy/core/function.py', 'Derivative', '_sort_variable_count', 0.3333333333333333), ('sympy/core/function.py', '', '_derivative_dispatch', 0.3333333333333333), ('sympy/core/numbers.py', 'Number', '_as_mpf_op', 0.3333333333333333), ('sympy/core/numbers.py', 'Number', '__float__', 0.3333333333333333), ('sympy/core/numbers.py', 'Rational', '_hashable_content', 0.3333333333333333), ('sympy/core/numbers.py', 'Rational', '__rtruediv__', 0.3333333333333333), ('sympy/core/numbers.py', 'Integer', '__abs__', 0.3333333333333333), ('sympy/core/numbers.py', 'NumberSymbol', '__eq__', 0.3333333333333333), ('sympy/core/operations.py', 'AssocOp', '__new__', 0.3333333333333333), ('sympy/core/power.py', 'Pow', '_eval_is_even', 0.3333333333333333), ('sympy/core/relational.py', '', 'is_eq', 0.3333333333333333), ('sympy/core/symbol.py', 'Symbol', '_diff_wrt', 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 'ExprCondPair', '__new__', 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 'Piecewise', '__new__', 0.3333333333333333), ('sympy/functions/elementary/piecewise.py', 'Piecewise', 'eval', 0.3333333333333333), ('sympy/logic/boolalg.py', 'BooleanTrue', '__hash__', 0.3333333333333333), ('sympy/core/add.py', 'Add', 'as_numer_denom', 0.31622776601683794), ('sympy/core/add.py', 'Add', 'as_real_imag', 0.31622776601683794), ('sympy/core/basic.py', 'Basic', '__hash__', 0.31622776601683794), ('sympy/core/basic.py', 'Basic', 'replace', 0.31622776601683794), ('sympy/core/basic.py', 'Basic', 'find', 0.31622776601683794), ('sympy/core/basic.py', 'Atom', 'sort_key', 0.31622776601683794), ('sympy/core/compatibility.py', '', '_node_count', 0.31622776601683794), ('sympy/core/compatibility.py', '', '_nodes', 0.31622776601683794), ('sympy/core/containers.py', 'Tuple', '__len__', 0.31622776601683794), ('sympy/core/expr.py', 'Expr', '_eval_conjugate', 0.31622776601683794), ('sympy/core/logic.py', '', 'fuzzy_or', 0.31622776601683794), ('sympy/core/numbers.py', 'Number', '_eval_evalf', 0.31622776601683794), ('sympy/core/numbers.py', 'Number', '__sub__', 0.31622776601683794), ('sympy/core/numbers.py', 'Float', '__lt__', 0.31622776601683794), ('sympy/core/numbers.py', 'Rational', '__sub__', 0.31622776601683794), ('sympy/core/numbers.py', 'Integer', '__new__', 0.31622776601683794), ('sympy/core/numbers.py', 'Integer', '__mul__', 0.31622776601683794), ('sympy/core/numbers.py', 'Zero', '__neg__', 0.31622776601683794), ('sympy/core/numbers.py', 'NegativeInfinity', '__hash__', 0.31622776601683794), ('sympy/core/power.py', 'Pow', '_eval_is_complex', 0.31622776601683794), ('sympy/core/relational.py', 'Equality', '__new__', 0.31622776601683794), ('sympy/core/symbol.py', '', 'symbols', 0.31622776601683794), ('sympy/functions/elementary/complexes.py', 'arg', 'eval', 0.31622776601683794), ('sympy/multipledispatch/core.py', '', 'dispatch', 0.31622776601683794), ('sympy/simplify/cse_opts.py', '', 'sub_post', 0.31622776601683794), ('sympy/core/basic.py', '', 'as_Basic', 0.30151134457776363), ('sympy/core/function.py', 'Function', '_should_evalf', 0.30151134457776363), ('sympy/core/logic.py', '', '_fuzzy_group', 0.30151134457776363), ('sympy/core/mul.py', 'Mul', 'as_numer_denom', 0.30151134457776363), ('sympy/core/numbers.py', 'Float', '_as_mpf_val', 0.30151134457776363), ('sympy/core/numbers.py', 'Rational', '__ne__', 0.30151134457776363), ('sympy/core/numbers.py', 'Integer', '__add__', 0.30151134457776363), ('sympy/core/numbers.py', 'Integer', '__index__', 0.30151134457776363), ('sympy/core/numbers.py', 'Infinity', '__eq__', 0.30151134457776363), ('sympy/core/numbers.py', 'NegativeInfinity', '__eq__', 0.30151134457776363), ('sympy/core/symbol.py', 'Symbol', 'as_real_imag', 0.30151134457776363), ('sympy/core/sympify.py', '', '_is_numpy_instance', 0.30151134457776363), ('sympy/functions/elementary/piecewise.py', 'ExprCondPair', 'cond', 0.30151134457776363), ('sympy/logic/boolalg.py', 'BooleanFalse', '__bool__', 0.30151134457776363), ('sympy/assumptions/wrapper.py', 'AssumptionsWrapper', '__new__', 0.2886751345948129), ('sympy/core/add.py', 'Add', 'as_coeff_Add', 0.2886751345948129), ('sympy/core/add.py', 'Add', '_eval_is_infinite', 0.2886751345948129), ('sympy/core/compatibility.py', '', 'as_int', 0.2886751345948129), ('sympy/core/expr.py', 'Expr', 'integrate', 0.2886751345948129), ('sympy/core/numbers.py', 'Number', '__truediv__', 0.2886751345948129), ('sympy/core/numbers.py', 'Float', '_hashable_content', 0.2886751345948129), ('sympy/core/numbers.py', 'Float', '__hash__', 0.2886751345948129), ('sympy/core/numbers.py', 'Rational', '__neg__', 0.2886751345948129), ('sympy/core/numbers.py', 'Rational', '__truediv__', 0.2886751345948129), ('sympy/core/numbers.py', 'Integer', '_as_mpf_val', 0.2886751345948129), ('sympy/core/numbers.py', 'Integer', '__radd__', 0.2886751345948129), ('sympy/core/numbers.py', 'Integer', '__gt__', 0.2886751345948129), ('sympy/core/numbers.py', 'NumberSymbol', '__ne__', 0.2886751345948129), ('sympy/core/operations.py', 'AssocOp', '_from_args', 0.2886751345948129), ('sympy/core/expr.py', 'Expr', '__radd__', 0.2773500981126146), ('sympy/core/expr.py', 'Expr', 'conjugate', 0.2773500981126146), ('sympy/core/logic.py', '', 'fuzzy_not', 0.2773500981126146), ('sympy/core/numbers.py', 'Integer', '__neg__', 0.2773500981126146), ('sympy/core/power.py', 'Pow', '_eval_is_negative', 0.2773500981126146), ('sympy/core/power.py', 'Pow', '_eval_is_positive', 0.2773500981126146), ('sympy/core/power.py', 'Pow', '_eval_is_extended_positive', 0.2773500981126146), ('sympy/core/power.py', 'Pow', '_eval_is_prime', 0.2773500981126146), ('sympy/core/power.py', 'Pow', '_eval_is_composite', 0.2773500981126146), ('sympy/core/basic.py', 'Basic', '__eq__', 0.2672612419124244), ('sympy/core/basic.py', 'Basic', '_has', 0.2672612419124244), ('sympy/core/function.py', 'Application', 'func', 0.2672612419124244), ('sympy/core/mul.py', 'Mul', 'as_coeff_Mul', 0.2672612419124244), ('sympy/core/mul.py', 'Mul', '_eval_is_zero', 0.2672612419124244), ('sympy/core/numbers.py', '', 'mpf_norm', 0.2672612419124244), ('sympy/core/symbol.py', 'Symbol', 'free_symbols', 0.2672612419124244), ('sympy/functions/elementary/complexes.py', 'conjugate', '_eval_adjoint', 0.2672612419124244), ('sympy/core/add.py', 'Add', '_eval_is_odd', 0.2581988897471611), ('sympy/core/add.py', 'Add', '__neg__', 0.2581988897471611), ('sympy/core/basic.py', 'Basic', '_hashable_content', 0.2581988897471611), ('sympy/core/compatibility.py', '', 'default_sort_key', 0.2581988897471611), ('sympy/core/expr.py', 'Expr', '__eq__', 0.2581988897471611), ('sympy/core/expr.py', 'Expr', '_eval_power', 0.2581988897471611), ('sympy/core/numbers.py', 'Rational', '__hash__', 0.2581988897471611), ('sympy/core/numbers.py', 'NumberSymbol', '__hash__', 0.2581988897471611), ('sympy/core/add.py', 'Add', '_eval_is_extended_nonpositive', 0.25), ('sympy/core/decorators.py', '', '__sympifyit', 0.25), ('sympy/core/expr.py', 'Expr', '__rmul__', 0.25), ('sympy/core/function.py', 'Function', '_eval_is_commutative', 0.25), ('sympy/core/mul.py', 'Mul', '_eval_is_infinite', 0.25), ('sympy/core/numbers.py', '', 'ilcm', 0.25), ('sympy/core/numbers.py', 'Integer', '__ne__', 0.25), ('sympy/core/numbers.py', 'Integer', 'as_numer_denom', 0.25), ('sympy/core/operations.py', 'AssocOp', 'make_args', 0.25), ('sympy/core/expr.py', 'Expr', 'as_numer_denom', 0.24253562503633297), ('sympy/core/function.py', 'Function', 'as_base_exp', 0.24253562503633297), ('sympy/core/power.py', 'Pow', 'base', 0.24253562503633297), ('sympy/functions/elementary/exponential.py', 'ExpMeta', '__instancecheck__', 0.24253562503633297), ('sympy/core/assumptions.py', 'StdFactKB', 'generator', 0.23570226039551587), ('sympy/core/expr.py', 'Expr', '__sub__', 0.23570226039551587), ('sympy/core/mul.py', 'Mul', '_eval_is_complex', 0.23570226039551587), ('sympy/core/mul.py', 'Mul', '_eval_is_hermitian', 0.23570226039551587), ('sympy/core/numbers.py', 'Integer', '__eq__', 0.23570226039551587), ('sympy/core/numbers.py', 'One', '__neg__', 0.23570226039551587), ('sympy/core/numbers.py', 'NegativeOne', '__neg__', 0.23570226039551587), ('sympy/core/operations.py', 'AssocOp', '_new_rawargs', 0.23570226039551587), ('sympy/core/power.py', 'Pow', 'exp', 0.23570226039551587), ('sympy/core/power.py', 'Pow', '_eval_adjoint', 0.23570226039551587), ('sympy/core/basic.py', 'Basic', 'free_symbols', 0.22941573387056174), ('sympy/core/basic.py', 'Basic', '_has_matcher', 0.22941573387056174), ('sympy/core/decorators.py', '_SympifyWrapper', 'make_wrapped', 0.22941573387056174), ('sympy/core/expr.py', 'Expr', '__add__', 0.22941573387056174), ('sympy/core/expr.py', 'Expr', '_pow', 0.22941573387056174), ('sympy/core/expr.py', 'Expr', '__pow__', 0.22941573387056174), ('sympy/core/logic.py', '', 'fuzzy_and', 0.22941573387056174), ('sympy/core/mul.py', 'Mul', '_eval_is_extended_positive', 0.22941573387056174), ('sympy/core/mul.py', 'Mul', '_eval_is_extended_negative', 0.22941573387056174), ('sympy/core/add.py', '', '_addsort', 0.22360679774997896), ('sympy/core/assumptions.py', 'StdFactKB', 'copy', 0.22360679774997896), ('sympy/core/core.py', 'BasicMeta', '__lt__', 0.22360679774997896), ('sympy/core/core.py', 'BasicMeta', '__gt__', 0.22360679774997896), ('sympy/core/expr.py', 'Expr', '__neg__', 0.22360679774997896), ('sympy/core/expr.py', 'Expr', '_eval_is_extended_positive', 0.22360679774997896), ('sympy/core/expr.py', 'Expr', '_eval_is_extended_negative', 0.22360679774997896), ('sympy/core/mul.py', 'Mul', '_eval_is_extended_real', 0.22360679774997896), ('sympy/core/numbers.py', 'Rational', 'as_numer_denom', 0.22360679774997896), ('sympy/core/numbers.py', 'Integer', '__divmod__', 0.22360679774997896), ('sympy/core/numbers.py', 'Integer', '__mod__', 0.22360679774997896), ('sympy/core/symbol.py', 'Symbol', '__new_stage2__', 0.22360679774997896), ('sympy/core/sympify.py', 'SympifyError', '__init__', 0.22360679774997896), ('sympy/core/basic.py', 'Basic', 'atoms', 0.2182178902359924), ('sympy/core/containers.py', 'Tuple', '__iter__', 0.2182178902359924), ('sympy/core/symbol.py', 'Symbol', '_sanitize', 0.2182178902359924), ('sympy/core/symbol.py', 'Symbol', '_hashable_content', 0.2182178902359924), ('sympy/core/symbol.py', 'Symbol', 'assumptions0', 0.2182178902359924), ('sympy/core/assumptions.py', '', '_ask', 0.21320071635561041), ('sympy/core/basic.py', 'Basic', 'args', 0.21320071635561041), ('sympy/core/basic.py', 'Basic', '_exec_constructor_postprocessors', 0.21320071635561041), ('sympy/core/containers.py', 'Tuple', '__new__', 0.21320071635561041), ('sympy/core/expr.py', 'Expr', '__mul__', 0.21320071635561041), ('sympy/core/expr.py', 'Expr', 'is_number', 0.21320071635561041), ('sympy/core/expr.py', 'Expr', 'as_base_exp', 0.21320071635561041), ('sympy/core/facts.py', 'FactKB', '_tell', 0.21320071635561041), ('sympy/core/function.py', 'Application', '__new__', 0.21320071635561041), ('sympy/core/mul.py', '', '_mulsort', 0.21320071635561041), ('sympy/core/numbers.py', 'Rational', 'as_coeff_Mul', 0.21320071635561041), ('sympy/core/numbers.py', 'Zero', '__bool__', 0.21320071635561041), ('sympy/core/basic.py', 'Basic', '__ne__', 0.20851441405707477), ('sympy/core/basic.py', 'preorder_traversal', 'skip', 0.20851441405707477), ('sympy/core/decorators.py', '', 'call_highest_priority', 0.20851441405707477), ('sympy/core/assumptions.py', '', 'as_property', 0.20412414523193154), ('sympy/core/basic.py', 'preorder_traversal', '_preorder_traversal', 0.20412414523193154), ('sympy/core/basic.py', '', '_make_find_query', 0.20412414523193154), ('sympy/core/assumptions.py', 'StdFactKB', '__init__', 0.2), ('sympy/core/facts.py', 'FactKB', '__init__', 0.2), ('sympy/core/basic.py', 'Basic', 'as_dummy', 0.19611613513818404), ('sympy/core/expr.py', 'Expr', '__hash__', 0.19611613513818404), ('sympy/core/expr.py', 'Expr', '_hashable_content', 0.19611613513818404), ('sympy/core/function.py', 'FunctionClass', 'nargs', 0.19611613513818404), ('sympy/core/numbers.py', 'Number', '__hash__', 0.19611613513818404), ('sympy/core/numbers.py', 'Infinity', '__hash__', 0.19611613513818404), ('sympy/core/symbol.py', 'Symbol', '__new__', 0.19611613513818404), ('sympy/logic/boolalg.py', 'BooleanTrue', '__bool__', 0.19611613513818404), ('sympy/sets/sets.py', 'Set', '_infimum_key', 0.19611613513818404), ('sympy/sets/sets.py', 'Set', '__contains__', 0.19611613513818404), ('sympy/sets/sets.py', 'FiniteSet', '__new__', 0.19611613513818404), ('sympy/sets/sets.py', 'FiniteSet', '_contains', 0.19611613513818404), ('conftest.py', '', 'pytest_runtest_setup', 0.19245008972987526), ('sympy/core/basic.py', 'Basic', '__new__', 0.19245008972987526), ('sympy/core/basic.py', 'Basic', '_sorted_args', 0.19245008972987526), ('sympy/core/numbers.py', 'Integer', '__hash__', 0.19245008972987526), ('sympy/core/sympify.py', '', '_sympify', 0.19245008972987526)]
2024-04-05 04:16:53 
========== Conversation Round 0 ==========
2024-04-05 04:16:53 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>Bug: maximum recusion depth error when checking is_zero of cosh expression\n'
             'The following code causes a `RecursionError: maximum recursion depth exceeded while calling a Python object` error when checked if it is zero:\n'
             '```\n'
             'expr =sympify("cosh(acos(-i + acosh(-g + i)))")\n'
             'expr.is_zero\n'
             '```\n'
             '</issue>'},
 {'role': 'user',
  'content': 'An external analysis tool has been deployed to identify the suspicious code to be fixed. You can choose to use the results from this tool, if '
             'you think they are useful.The tool output is as follows:\n'
             'Top-5 suspicious methods:\n'
             'Suspicious method #1:\n'
             '<file>sympy/core/add.py</file> <class>Add</class> <func>flatten</func>\n'
             '\n'
             'Suspicious method #2:\n'
             '<file>sympy/core/add.py</file> <class>Add</class> <func>_eval_is_irrational</func>\n'
             '\n'
             'Suspicious method #3:\n'
             '<file>sympy/core/add.py</file> <class>Add</class> <func>primitive</func>\n'
             '\n'
             'Suspicious method #4:\n'
             '<file>sympy/core/basic.py</file> <class>Basic</class> <func>compare</func>\n'
             '\n'
             'Suspicious method #5:\n'
             '<file>sympy/core/evalf.py</file> <func>evalf_add</func>\n'
             '\n'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '}]
2024-04-05 04:17:06 Model API request cost info: input_tokens=563, output_tokens=281, cost=0.014060
2024-04-05 04:17:06 Raw model response: ChatCompletionMessage(content='To better understand the context of the issue and identify potential sources of the recursion error, I will use the following search API calls:\n\n1. `search_method_in_file("flatten", "sympy/core/add.py")` - Since `Add.flatten` is marked as suspicious, examining its implementation might reveal how it handles expressions that could lead to recursion issues.\n\n2. `search_method_in_file("_eval_is_irrational", "sympy/core/add.py")` - The `_eval_is_irrational` method might be involved in evaluating expressions that could trigger the recursion error, especially since irrational checks might involve complex operations.\n\n3. `search_method_in_file("primitive", "sympy/core/add.py")` - Understanding how `Add.primitive` works could provide insights into how expressions are simplified or manipulated, potentially leading to recursion.\n\n4. `search_method_in_file("compare", "sympy/core/basic.py")` - The `Basic.compare` method might be involved in recursion if it\'s used in a way that doesn\'t properly handle complex expressions.\n\n5. `search_method_in_file("evalf_add", "sympy/core/evalf.py")` - Since `evalf_add` is related to the evaluation of addition operations, it\'s crucial to see how it handles expressions like the one in the issue, which might contribute to the recursion depth error.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:17:06 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 04:17:12 Model API request cost info: input_tokens=601, output_tokens=115, cost=0.009460
2024-04-05 04:17:12 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [\n        "search_method_in_file(\\"flatten\\", \\"sympy/core/add.py\\")",\n        "search_method_in_file(\\"_eval_is_irrational\\", \\"sympy/core/add.py\\")",\n        "search_method_in_file(\\"primitive\\", \\"sympy/core/add.py\\")",\n        "search_method_in_file(\\"compare\\", \\"sympy/core/basic.py\\")",\n        "search_method_in_file(\\"evalf_add\\", \\"sympy/core/evalf.py\\")"\n    ],\n    "bug_locations": []\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:17:12 Raw issue json produced. Writing issue json into file.
2024-04-05 04:17:12 Extracted a valid json. Congratulations!
2024-04-05 04:17:12 Refactored invocation argument parsing failed on 'search_method_in_file("flatten", "sympy/core/add.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e49d46050>
2024-04-05 04:17:12 Result of dispatch_intent: ('Found 1 methods with name `flatten` in file sympy/core/add.py.\nSearch result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>flatten</func> <code>    def flatten(cls, seq):\n        """\n        Takes the sequence "seq" of nested Adds and returns a flatten list.\n\n        Returns: (commutative_part, noncommutative_part, order_symbols)\n\n        Applies associativity, all terms are commutable with respect to\n        addition.\n\n        NB: the removal of 0 is already handled by AssocOp.__new__\n\n        See also\n        ========\n\n        sympy.core.mul.Mul.flatten\n\n        """\n        from sympy.calculus.util import AccumBounds\n        from sympy.matrices.expressions import MatrixExpr\n        from sympy.tensor.tensor import TensExpr\n        rv = None\n        if len(seq) == 2:\n            a, b = seq\n            if b.is_Rational:\n                a, b = b, a\n            if a.is_Rational:\n                if b.is_Mul:\n                    rv = [a, b], [], None\n            if rv:\n                if all(s.is_commutative for s in rv[0]):\n                    return rv\n                return [], rv[0], None\n\n        terms = {}      # term -> coeff\n                        # e.g. x**2 -> 5   for ... + 5*x**2 + ...\n\n        coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0\n                        # e.g. 3 + ...\n        order_factors = []\n\n        extra = []\n\n        for o in seq:\n\n            # O(x)\n            if o.is_Order:\n                if o.expr.is_zero:\n                    continue\n                for o1 in order_factors:\n                    if o1.contains(o):\n                        o = None\n                        break\n                if o is None:\n                    continue\n                order_factors = [o] + [\n                    o1 for o1 in order_factors if not o.contains(o1)]\n                continue\n\n            # 3 or NaN\n            elif o.is_Number:\n                if (o is S.NaN or coeff is S.ComplexInfinity and\n                        o.is_finite is False) and not extra:\n                    # we know for sure the result will be nan\n                    return [S.NaN], [], None\n                if coeff.is_Number or isinstance(coeff, AccumBounds):\n                    coeff += o\n                    if coeff is S.NaN and not extra:\n                        # we know for sure the result will be nan\n                        return [S.NaN], [], None\n                continue\n\n            elif isinstance(o, AccumBounds):\n                coeff = o.__add__(coeff)\n                continue\n\n            elif isinstance(o, MatrixExpr):\n                # can\'t add 0 to Matrix so make sure coeff is not 0\n                extra.append(o)\n                continue\n\n            elif isinstance(o, TensExpr):\n                coeff = o.__add__(coeff) if coeff else o\n                continue\n\n            elif o is S.ComplexInfinity:\n                if coeff.is_finite is False and not extra:\n                    # we know for sure the result will be nan\n                    return [S.NaN], [], None\n                coeff = S.ComplexInfinity\n                continue\n\n            # Add([...])\n            elif o.is_Add:\n                # NB: here we assume Add is always commutative\n                seq.extend(o.args)  # TODO zerocopy?\n                continue\n\n            # Mul([...])\n            elif o.is_Mul:\n                c, s = o.as_coeff_Mul()\n\n            # check for unevaluated Pow, e.g. 2**3 or 2**(-1/2)\n            elif o.is_Pow:\n                b, e = o.as_base_exp()\n                if b.is_Number and (e.is_Integer or\n                                   (e.is_Rational and e.is_negative)):\n                    seq.append(b**e)\n                    continue\n                c, s = S.One, o\n\n            else:\n                # everything else\n                c = S.One\n                s = o\n\n            # now we have:\n            # o = c*s, where\n            #\n            # c is a Number\n            # s is an expression with number factor extracted\n            # let\'s collect terms with the same s, so e.g.\n            # 2*x**2 + 3*x**2  ->  5*x**2\n            if s in terms:\n                terms[s] += c\n                if terms[s] is S.NaN and not extra:\n                    # we know for sure the result will be nan\n                    return [S.NaN], [], None\n            else:\n                terms[s] = c\n\n        # now let\'s construct new args:\n        # [2*x**2, x**3, 7*x**4, pi, ...]\n        newseq = []\n        noncommutative = False\n        for s, c in terms.items():\n            # 0*s\n            if c.is_zero:\n                continue\n            # 1*s\n            elif c is S.One:\n                newseq.append(s)\n            # c*s\n            else:\n                if s.is_Mul:\n                    # Mul, already keeps its arguments in perfect order.\n                    # so we can simply put c in slot0 and go the fast way.\n                    cs = s._new_rawargs(*((c,) + s.args))\n                    newseq.append(cs)\n                elif s.is_Add:\n                    # we just re-create the unevaluated Mul\n                    newseq.append(Mul(c, s, evaluate=False))\n                else:\n                    # alternatively we have to call all Mul\'s machinery (slow)\n                    newseq.append(Mul(c, s))\n\n            noncommutative = noncommutative or not s.is_commutative\n\n        # oo, -oo\n        if coeff is S.Infinity:\n            newseq = [f for f in newseq if not (f.is_extended_nonnegative or f.is_real)]\n\n        elif coeff is S.NegativeInfinity:\n            newseq = [f for f in newseq if not (f.is_extended_nonpositive or f.is_real)]\n\n        if coeff is S.ComplexInfinity:\n            # zoo might be\n            #   infinite_real + finite_im\n            #   finite_real + infinite_im\n            #   infinite_real + infinite_im\n            # addition of a finite real or imaginary number won\'t be able to\n            # change the zoo nature; adding an infinite qualtity would result\n            # in a NaN condition if it had sign opposite of the infinite\n            # portion of zoo, e.g., infinite_real - infinite_real.\n            newseq = [c for c in newseq if not (c.is_finite and\n                                                c.is_extended_real is not None)]\n\n        # process O(x)\n        if order_factors:\n            newseq2 = []\n            for t in newseq:\n                for o in order_factors:\n                    # x + O(x) -> O(x)\n                    if o.contains(t):\n                        t = None\n                        break\n                # x + O(x**2) -> x + O(x**2)\n                if t is not None:\n                    newseq2.append(t)\n            newseq = newseq2 + order_factors\n            # 1 + O(1) -> O(1)\n            for o in order_factors:\n                if o.contains(coeff):\n                    coeff = S.Zero\n                    break\n\n        # order args canonically\n        _addsort(newseq)\n\n        # current code expects coeff to be first\n        if coeff is not S.Zero:\n            newseq.insert(0, coeff)\n\n        if extra:\n            newseq += extra\n            noncommutative = True\n\n        # we are done\n        if noncommutative:\n            return [], newseq, None\n        else:\n            return newseq, [], None\n</code>\n\n', 'Found 1 methods with name `flatten` in file sympy/core/add.py.\n', True)
2024-04-05 04:17:12 Refactored invocation argument parsing failed on 'search_method_in_file("_eval_is_irrational", "sympy/core/add.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e49d46410>
2024-04-05 04:17:12 Result of dispatch_intent: ('Found 1 methods with name `_eval_is_irrational` in file sympy/core/add.py.\nSearch result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>_eval_is_irrational</func> <code>    def _eval_is_irrational(self):\n        for t in self.args:\n            a = t.is_irrational\n            if a:\n                others = list(self.args)\n                others.remove(t)\n                if all(x.is_rational is True for x in others):\n                    return True\n                return None\n            if a is None:\n                return\n        return False\n</code>\n\n', 'Found 1 methods with name `_eval_is_irrational` in file sympy/core/add.py.\n', True)
2024-04-05 04:17:12 Refactored invocation argument parsing failed on 'search_method_in_file("primitive", "sympy/core/add.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e49d46dd0>
2024-04-05 04:17:12 Result of dispatch_intent: ('Found 1 methods with name `primitive` in file sympy/core/add.py.\nSearch result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>primitive</func> <code>    def primitive(self):\n        """\n        Return ``(R, self/R)`` where ``R``` is the Rational GCD of ``self```.\n\n        ``R`` is collected only from the leading coefficient of each term.\n\n        Examples\n        ========\n\n        >>> from sympy.abc import x, y\n\n        >>> (2*x + 4*y).primitive()\n        (2, x + 2*y)\n\n        >>> (2*x/3 + 4*y/9).primitive()\n        (2/9, 3*x + 2*y)\n\n        >>> (2*x/3 + 4.2*y).primitive()\n        (1/3, 2*x + 12.6*y)\n\n        No subprocessing of term factors is performed:\n\n        >>> ((2 + 2*x)*x + 2).primitive()\n        (1, x*(2*x + 2) + 2)\n\n        Recursive processing can be done with the ``as_content_primitive()``\n        method:\n\n        >>> ((2 + 2*x)*x + 2).as_content_primitive()\n        (2, x*(x + 1) + 1)\n\n        See also: primitive() function in polytools.py\n\n        """\n\n        terms = []\n        inf = False\n        for a in self.args:\n            c, m = a.as_coeff_Mul()\n            if not c.is_Rational:\n                c = S.One\n                m = a\n            inf = inf or m is S.ComplexInfinity\n            terms.append((c.p, c.q, m))\n\n        if not inf:\n            ngcd = reduce(igcd, [t[0] for t in terms], 0)\n            dlcm = reduce(ilcm, [t[1] for t in terms], 1)\n        else:\n            ngcd = reduce(igcd, [t[0] for t in terms if t[1]], 0)\n            dlcm = reduce(ilcm, [t[1] for t in terms if t[1]], 1)\n\n        if ngcd == dlcm == 1:\n            return S.One, self\n        if not inf:\n            for i, (p, q, term) in enumerate(terms):\n                terms[i] = _keep_coeff(Rational((p//ngcd)*(dlcm//q)), term)\n        else:\n            for i, (p, q, term) in enumerate(terms):\n                if q:\n                    terms[i] = _keep_coeff(Rational((p//ngcd)*(dlcm//q)), term)\n                else:\n                    terms[i] = _keep_coeff(Rational(p, q), term)\n\n        # we don\'t need a complete re-flattening since no new terms will join\n        # so we just use the same sort as is used in Add.flatten. When the\n        # coefficient changes, the ordering of terms may change, e.g.\n        #     (3*x, 6*y) -> (2*y, x)\n        #\n        # We do need to make sure that term[0] stays in position 0, however.\n        #\n        if terms[0].is_Number or terms[0] is S.ComplexInfinity:\n            c = terms.pop(0)\n        else:\n            c = None\n        _addsort(terms)\n        if c:\n            terms.insert(0, c)\n        return Rational(ngcd, dlcm), self._new_rawargs(*terms)\n</code>\n\n', 'Found 1 methods with name `primitive` in file sympy/core/add.py.\n', True)
2024-04-05 04:17:12 Refactored invocation argument parsing failed on 'search_method_in_file("compare", "sympy/core/basic.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e49d46c50>
2024-04-05 04:17:12 Result of dispatch_intent: ('Found 1 methods with name `compare` in file sympy/core/basic.py.\nSearch result 1: <file>sympy/core/basic.py</file> <class>Basic</class> <func>compare</func> <code>    def compare(self, other):\n        """\n        Return -1, 0, 1 if the object is smaller, equal, or greater than other.\n\n        Not in the mathematical sense. If the object is of a different type\n        from the "other" then their classes are ordered according to\n        the sorted_classes list.\n\n        Examples\n        ========\n\n        >>> from sympy.abc import x, y\n        >>> x.compare(y)\n        -1\n        >>> x.compare(x)\n        0\n        >>> y.compare(x)\n        1\n\n        """\n        # all redefinitions of __cmp__ method should start with the\n        # following lines:\n        if self is other:\n            return 0\n        n1 = self.__class__\n        n2 = other.__class__\n        c = (n1 > n2) - (n1 < n2)\n        if c:\n            return c\n        #\n        st = self._hashable_content()\n        ot = other._hashable_content()\n        c = (len(st) > len(ot)) - (len(st) < len(ot))\n        if c:\n            return c\n        for l, r in zip(st, ot):\n            l = Basic(*l) if isinstance(l, frozenset) else l\n            r = Basic(*r) if isinstance(r, frozenset) else r\n            if isinstance(l, Basic):\n                c = l.compare(r)\n            else:\n                c = (l > r) - (l < r)\n            if c:\n                return c\n        return 0\n</code>\n\n', 'Found 1 methods with name `compare` in file sympy/core/basic.py.\n', True)
2024-04-05 04:17:12 Refactored invocation argument parsing failed on 'search_method_in_file("evalf_add", "sympy/core/evalf.py")': malformed node or string on line 1: <ast.Name object at 0x7f0e49d468c0>
2024-04-05 04:17:12 Result of dispatch_intent: ('Found 1 methods with name `evalf_add` in file sympy/core/evalf.py.\nSearch result 1: <file>sympy/core/evalf.py</file> <func>evalf_add</func> <code>def evalf_add(v, prec, options):\n    res = pure_complex(v)\n    if res:\n        h, c = res\n        re, _, re_acc, _ = evalf(h, prec, options)\n        im, _, im_acc, _ = evalf(c, prec, options)\n        return re, im, re_acc, im_acc\n\n    oldmaxprec = options.get(\'maxprec\', DEFAULT_MAXPREC)\n\n    i = 0\n    target_prec = prec\n    while 1:\n        options[\'maxprec\'] = min(oldmaxprec, 2*prec)\n\n        terms = [evalf(arg, prec + 10, options) for arg in v.args]\n        re, re_acc = add_terms(\n            [a[0::2] for a in terms if a[0]], prec, target_prec)\n        im, im_acc = add_terms(\n            [a[1::2] for a in terms if a[1]], prec, target_prec)\n        acc = complex_accuracy((re, im, re_acc, im_acc))\n        if acc >= target_prec:\n            if options.get(\'verbose\'):\n                print("ADD: wanted", target_prec, "accurate bits, got", re_acc, im_acc)\n            break\n        else:\n            if (prec - target_prec) > options[\'maxprec\']:\n                break\n\n            prec = prec + max(10 + 2**i, target_prec - acc)\n            i += 1\n            if options.get(\'verbose\'):\n                print("ADD: restarting with prec", prec)\n\n    options[\'maxprec\'] = oldmaxprec\n    if iszero(re, scaled=True):\n        re = scaled_zero(re)\n    if iszero(im, scaled=True):\n        im = scaled_zero(im)\n    return re, im, re_acc, im_acc\n</code>\n\n', 'Found 1 methods with name `evalf_add` in file sympy/core/evalf.py.\n', True)
2024-04-05 04:17:46 Model API request cost info: input_tokens=4325, output_tokens=690, cost=0.063950
2024-04-05 04:17:46 Raw model response: ChatCompletionMessage(content="Analyzing the collected context from the search results, we can start to understand how the `sympy` library handles expressions and where the recursion error might be stemming from in the issue described. The issue involves a `RecursionError` when checking if a `cosh` expression is zero, specifically with an expression involving `acos`, `acosh`, and complex numbers.\n\n### Analysis of Search Results\n\n1. **`Add.flatten` Method (sympy/core/add.py)**:\n   - This method is responsible for flattening nested `Add` operations into a single list, applying associativity, and handling the commutative property of addition. It deals with various types of objects, including numbers, orders, matrices, tensors, and more complex expressions.\n   - The method has several checks and balances to handle different types of inputs and simplify expressions. However, there's nothing immediately apparent in the method that would directly cause a recursion error unless the input expression itself leads to a deeply nested structure that `flatten` struggles to simplify.\n\n2. **`_eval_is_irrational` Method (sympy/core/add.py)**:\n   - This method checks if an expression is irrational by iterating through its arguments. If any argument is irrational and the rest are rational, it returns `True`.\n   - Given the nature of the issue, it's less likely that this method is the direct cause of the recursion error, as it doesn't inherently involve deep recursion unless called in a deeply nested context.\n\n3. **`primitive` Method (sympy/core/add.py)**:\n   - The `primitive` method returns the Rational GCD of the expression, essentially trying to simplify the expression by extracting common factors.\n   - Like `flatten`, this method could potentially contribute to recursion issues if the expression leads to complex simplification scenarios, but it's not an obvious source of recursion errors on its own.\n\n4. **`compare` Method (sympy/core/basic.py)**:\n   - This method compares objects not in a mathematical sense but based on their type and content. It's used for ordering and equality checks.\n   - It's unlikely that this method is directly related to the recursion error unless it's being used in a way that causes a comparison loop, which seems improbable based on the method's description.\n\n5. **`evalf_add` Function (sympy/core/evalf.py)**:\n   - This function evaluates the addition of terms with floating-point precision. It handles complex numbers and attempts to achieve a target precision.\n   - While this function deals with evaluation and could potentially be involved in complex expressions, it doesn't seem to inherently cause recursion errors unless the evaluation of terms itself leads to recursion.\n\n### Conclusion\n\nThe recursion error might not be directly attributable to a single method or function based on the provided context. Instead, it could be the result of how these methods interact with a particularly complex expression like the one in the issue. The expression involves trigonometric and inverse trigonometric functions with complex numbers, which might lead to deeply nested or complex evaluations that exceed the maximum recursion depth.\n\nGiven the complexity of the issue, a deeper dive into how expressions are evaluated and simplified, especially in the context of trigonometric functions and complex numbers, might be necessary. Additionally, examining the call stack when the recursion error occurs could provide more direct insights into which methods or functions are contributing to the issue.", role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:17:46 
========== Conversation Round 1 ==========
2024-04-05 04:17:46 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>Bug: maximum recusion depth error when checking is_zero of cosh expression\n'
             'The following code causes a `RecursionError: maximum recursion depth exceeded while calling a Python object` error when checked if it is zero:\n'
             '```\n'
             'expr =sympify("cosh(acos(-i + acosh(-g + i)))")\n'
             'expr.is_zero\n'
             '```\n'
             '</issue>'},
 {'role': 'user',
  'content': 'An external analysis tool has been deployed to identify the suspicious code to be fixed. You can choose to use the results from this tool, if '
             'you think they are useful.The tool output is as follows:\n'
             'Top-5 suspicious methods:\n'
             'Suspicious method #1:\n'
             '<file>sympy/core/add.py</file> <class>Add</class> <func>flatten</func>\n'
             '\n'
             'Suspicious method #2:\n'
             '<file>sympy/core/add.py</file> <class>Add</class> <func>_eval_is_irrational</func>\n'
             '\n'
             'Suspicious method #3:\n'
             '<file>sympy/core/add.py</file> <class>Add</class> <func>primitive</func>\n'
             '\n'
             'Suspicious method #4:\n'
             '<file>sympy/core/basic.py</file> <class>Basic</class> <func>compare</func>\n'
             '\n'
             'Suspicious method #5:\n'
             '<file>sympy/core/evalf.py</file> <func>evalf_add</func>\n'
             '\n'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '},
 {'role': 'assistant',
  'content': 'To better understand the context of the issue and identify potential sources of the recursion error, I will use the following search API calls:\n'
             '\n'
             '1. `search_method_in_file("flatten", "sympy/core/add.py")` - Since `Add.flatten` is marked as suspicious, examining its implementation might '
             'reveal how it handles expressions that could lead to recursion issues.\n'
             '\n'
             '2. `search_method_in_file("_eval_is_irrational", "sympy/core/add.py")` - The `_eval_is_irrational` method might be involved in evaluating '
             'expressions that could trigger the recursion error, especially since irrational checks might involve complex operations.\n'
             '\n'
             '3. `search_method_in_file("primitive", "sympy/core/add.py")` - Understanding how `Add.primitive` works could provide insights into how '
             'expressions are simplified or manipulated, potentially leading to recursion.\n'
             '\n'
             '4. `search_method_in_file("compare", "sympy/core/basic.py")` - The `Basic.compare` method might be involved in recursion if it\'s used in a way '
             "that doesn't properly handle complex expressions.\n"
             '\n'
             '5. `search_method_in_file("evalf_add", "sympy/core/evalf.py")` - Since `evalf_add` is related to the evaluation of addition operations, it\'s '
             'crucial to see how it handles expressions like the one in the issue, which might contribute to the recursion depth error.'},
 {'role': 'user',
  'content': 'Result of search_method_in_file("flatten", "sympy/core/add.py"):\n'
             'Found 1 methods with name `flatten` in file sympy/core/add.py.\n'
             'Search result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>flatten</func> <code>    def flatten(cls, seq):\n'
             '        """\n'
             '        Takes the sequence "seq" of nested Adds and returns a flatten list.\n'
             '\n'
             '        Returns: (commutative_part, noncommutative_part, order_symbols)\n'
             '\n'
             '        Applies associativity, all terms are commutable with respect to\n'
             '        addition.\n'
             '\n'
             '        NB: the removal of 0 is already handled by AssocOp.__new__\n'
             '\n'
             '        See also\n'
             '        ========\n'
             '\n'
             '        sympy.core.mul.Mul.flatten\n'
             '\n'
             '        """\n'
             '        from sympy.calculus.util import AccumBounds\n'
             '        from sympy.matrices.expressions import MatrixExpr\n'
             '        from sympy.tensor.tensor import TensExpr\n'
             '        rv = None\n'
             '        if len(seq) == 2:\n'
             '            a, b = seq\n'
             '            if b.is_Rational:\n'
             '                a, b = b, a\n'
             '            if a.is_Rational:\n'
             '                if b.is_Mul:\n'
             '                    rv = [a, b], [], None\n'
             '            if rv:\n'
             '                if all(s.is_commutative for s in rv[0]):\n'
             '                    return rv\n'
             '                return [], rv[0], None\n'
             '\n'
             '        terms = {}      # term -> coeff\n'
             '                        # e.g. x**2 -> 5   for ... + 5*x**2 + ...\n'
             '\n'
             '        coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0\n'
             '                        # e.g. 3 + ...\n'
             '        order_factors = []\n'
             '\n'
             '        extra = []\n'
             '\n'
             '        for o in seq:\n'
             '\n'
             '            # O(x)\n'
             '            if o.is_Order:\n'
             '                if o.expr.is_zero:\n'
             '                    continue\n'
             '                for o1 in order_factors:\n'
             '                    if o1.contains(o):\n'
             '                        o = None\n'
             '                        break\n'
             '                if o is None:\n'
             '                    continue\n'
             '                order_factors = [o] + [\n'
             '                    o1 for o1 in order_factors if not o.contains(o1)]\n'
             '                continue\n'
             '\n'
             '            # 3 or NaN\n'
             '            elif o.is_Number:\n'
             '                if (o is S.NaN or coeff is S.ComplexInfinity and\n'
             '                        o.is_finite is False) and not extra:\n'
             '                    # we know for sure the result will be nan\n'
             '                    return [S.NaN], [], None\n'
             '                if coeff.is_Number or isinstance(coeff, AccumBounds):\n'
             '                    coeff += o\n'
             '                    if coeff is S.NaN and not extra:\n'
             '                        # we know for sure the result will be nan\n'
             '                        return [S.NaN], [], None\n'
             '                continue\n'
             '\n'
             '            elif isinstance(o, AccumBounds):\n'
             '                coeff = o.__add__(coeff)\n'
             '                continue\n'
             '\n'
             '            elif isinstance(o, MatrixExpr):\n'
             "                # can't add 0 to Matrix so make sure coeff is not 0\n"
             '                extra.append(o)\n'
             '                continue\n'
             '\n'
             '            elif isinstance(o, TensExpr):\n'
             '                coeff = o.__add__(coeff) if coeff else o\n'
             '                continue\n'
             '\n'
             '            elif o is S.ComplexInfinity:\n'
             '                if coeff.is_finite is False and not extra:\n'
             '                    # we know for sure the result will be nan\n'
             '                    return [S.NaN], [], None\n'
             '                coeff = S.ComplexInfinity\n'
             '                continue\n'
             '\n'
             '            # Add([...])\n'
             '            elif o.is_Add:\n'
             '                # NB: here we assume Add is always commutative\n'
             '                seq.extend(o.args)  # TODO zerocopy?\n'
             '                continue\n'
             '\n'
             '            # Mul([...])\n'
             '            elif o.is_Mul:\n'
             '                c, s = o.as_coeff_Mul()\n'
             '\n'
             '            # check for unevaluated Pow, e.g. 2**3 or 2**(-1/2)\n'
             '            elif o.is_Pow:\n'
             '                b, e = o.as_base_exp()\n'
             '                if b.is_Number and (e.is_Integer or\n'
             '                                   (e.is_Rational and e.is_negative)):\n'
             '                    seq.append(b**e)\n'
             '                    continue\n'
             '                c, s = S.One, o\n'
             '\n'
             '            else:\n'
             '                # everything else\n'
             '                c = S.One\n'
             '                s = o\n'
             '\n'
             '            # now we have:\n'
             '            # o = c*s, where\n'
             '            #\n'
             '            # c is a Number\n'
             '            # s is an expression with number factor extracted\n'
             "            # let's collect terms with the same s, so e.g.\n"
             '            # 2*x**2 + 3*x**2  ->  5*x**2\n'
             '            if s in terms:\n'
             '                terms[s] += c\n'
             '                if terms[s] is S.NaN and not extra:\n'
             '                    # we know for sure the result will be nan\n'
             '                    return [S.NaN], [], None\n'
             '            else:\n'
             '                terms[s] = c\n'
             '\n'
             "        # now let's construct new args:\n"
             '        # [2*x**2, x**3, 7*x**4, pi, ...]\n'
             '        newseq = []\n'
             '        noncommutative = False\n'
             '        for s, c in terms.items():\n'
             '            # 0*s\n'
             '            if c.is_zero:\n'
             '                continue\n'
             '            # 1*s\n'
             '            elif c is S.One:\n'
             '                newseq.append(s)\n'
             '            # c*s\n'
             '            else:\n'
             '                if s.is_Mul:\n'
             '                    # Mul, already keeps its arguments in perfect order.\n'
             '                    # so we can simply put c in slot0 and go the fast way.\n'
             '                    cs = s._new_rawargs(*((c,) + s.args))\n'
             '                    newseq.append(cs)\n'
             '                elif s.is_Add:\n'
             '                    # we just re-create the unevaluated Mul\n'
             '                    newseq.append(Mul(c, s, evaluate=False))\n'
             '                else:\n'
             "                    # alternatively we have to call all Mul's machinery (slow)\n"
             '                    newseq.append(Mul(c, s))\n'
             '\n'
             '            noncommutative = noncommutative or not s.is_commutative\n'
             '\n'
             '        # oo, -oo\n'
             '        if coeff is S.Infinity:\n'
             '            newseq = [f for f in newseq if not (f.is_extended_nonnegative or f.is_real)]\n'
             '\n'
             '        elif coeff is S.NegativeInfinity:\n'
             '            newseq = [f for f in newseq if not (f.is_extended_nonpositive or f.is_real)]\n'
             '\n'
             '        if coeff is S.ComplexInfinity:\n'
             '            # zoo might be\n'
             '            #   infinite_real + finite_im\n'
             '            #   finite_real + infinite_im\n'
             '            #   infinite_real + infinite_im\n'
             "            # addition of a finite real or imaginary number won't be able to\n"
             '            # change the zoo nature; adding an infinite qualtity would result\n'
             '            # in a NaN condition if it had sign opposite of the infinite\n'
             '            # portion of zoo, e.g., infinite_real - infinite_real.\n'
             '            newseq = [c for c in newseq if not (c.is_finite and\n'
             '                                                c.is_extended_real is not None)]\n'
             '\n'
             '        # process O(x)\n'
             '        if order_factors:\n'
             '            newseq2 = []\n'
             '            for t in newseq:\n'
             '                for o in order_factors:\n'
             '                    # x + O(x) -> O(x)\n'
             '                    if o.contains(t):\n'
             '                        t = None\n'
             '                        break\n'
             '                # x + O(x**2) -> x + O(x**2)\n'
             '                if t is not None:\n'
             '                    newseq2.append(t)\n'
             '            newseq = newseq2 + order_factors\n'
             '            # 1 + O(1) -> O(1)\n'
             '            for o in order_factors:\n'
             '                if o.contains(coeff):\n'
             '                    coeff = S.Zero\n'
             '                    break\n'
             '\n'
             '        # order args canonically\n'
             '        _addsort(newseq)\n'
             '\n'
             '        # current code expects coeff to be first\n'
             '        if coeff is not S.Zero:\n'
             '            newseq.insert(0, coeff)\n'
             '\n'
             '        if extra:\n'
             '            newseq += extra\n'
             '            noncommutative = True\n'
             '\n'
             '        # we are done\n'
             '        if noncommutative:\n'
             '            return [], newseq, None\n'
             '        else:\n'
             '            return newseq, [], None\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_file("_eval_is_irrational", "sympy/core/add.py"):\n'
             'Found 1 methods with name `_eval_is_irrational` in file sympy/core/add.py.\n'
             'Search result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>_eval_is_irrational</func> <code>    def _eval_is_irrational(self):\n'
             '        for t in self.args:\n'
             '            a = t.is_irrational\n'
             '            if a:\n'
             '                others = list(self.args)\n'
             '                others.remove(t)\n'
             '                if all(x.is_rational is True for x in others):\n'
             '                    return True\n'
             '                return None\n'
             '            if a is None:\n'
             '                return\n'
             '        return False\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_file("primitive", "sympy/core/add.py"):\n'
             'Found 1 methods with name `primitive` in file sympy/core/add.py.\n'
             'Search result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>primitive</func> <code>    def primitive(self):\n'
             '        """\n'
             '        Return ``(R, self/R)`` where ``R``` is the Rational GCD of ``self```.\n'
             '\n'
             '        ``R`` is collected only from the leading coefficient of each term.\n'
             '\n'
             '        Examples\n'
             '        ========\n'
             '\n'
             '        >>> from sympy.abc import x, y\n'
             '\n'
             '        >>> (2*x + 4*y).primitive()\n'
             '        (2, x + 2*y)\n'
             '\n'
             '        >>> (2*x/3 + 4*y/9).primitive()\n'
             '        (2/9, 3*x + 2*y)\n'
             '\n'
             '        >>> (2*x/3 + 4.2*y).primitive()\n'
             '        (1/3, 2*x + 12.6*y)\n'
             '\n'
             '        No subprocessing of term factors is performed:\n'
             '\n'
             '        >>> ((2 + 2*x)*x + 2).primitive()\n'
             '        (1, x*(2*x + 2) + 2)\n'
             '\n'
             '        Recursive processing can be done with the ``as_content_primitive()``\n'
             '        method:\n'
             '\n'
             '        >>> ((2 + 2*x)*x + 2).as_content_primitive()\n'
             '        (2, x*(x + 1) + 1)\n'
             '\n'
             '        See also: primitive() function in polytools.py\n'
             '\n'
             '        """\n'
             '\n'
             '        terms = []\n'
             '        inf = False\n'
             '        for a in self.args:\n'
             '            c, m = a.as_coeff_Mul()\n'
             '            if not c.is_Rational:\n'
             '                c = S.One\n'
             '                m = a\n'
             '            inf = inf or m is S.ComplexInfinity\n'
             '            terms.append((c.p, c.q, m))\n'
             '\n'
             '        if not inf:\n'
             '            ngcd = reduce(igcd, [t[0] for t in terms], 0)\n'
             '            dlcm = reduce(ilcm, [t[1] for t in terms], 1)\n'
             '        else:\n'
             '            ngcd = reduce(igcd, [t[0] for t in terms if t[1]], 0)\n'
             '            dlcm = reduce(ilcm, [t[1] for t in terms if t[1]], 1)\n'
             '\n'
             '        if ngcd == dlcm == 1:\n'
             '            return S.One, self\n'
             '        if not inf:\n'
             '            for i, (p, q, term) in enumerate(terms):\n'
             '                terms[i] = _keep_coeff(Rational((p//ngcd)*(dlcm//q)), term)\n'
             '        else:\n'
             '            for i, (p, q, term) in enumerate(terms):\n'
             '                if q:\n'
             '                    terms[i] = _keep_coeff(Rational((p//ngcd)*(dlcm//q)), term)\n'
             '                else:\n'
             '                    terms[i] = _keep_coeff(Rational(p, q), term)\n'
             '\n'
             "        # we don't need a complete re-flattening since no new terms will join\n"
             '        # so we just use the same sort as is used in Add.flatten. When the\n'
             '        # coefficient changes, the ordering of terms may change, e.g.\n'
             '        #     (3*x, 6*y) -> (2*y, x)\n'
             '        #\n'
             '        # We do need to make sure that term[0] stays in position 0, however.\n'
             '        #\n'
             '        if terms[0].is_Number or terms[0] is S.ComplexInfinity:\n'
             '            c = terms.pop(0)\n'
             '        else:\n'
             '            c = None\n'
             '        _addsort(terms)\n'
             '        if c:\n'
             '            terms.insert(0, c)\n'
             '        return Rational(ngcd, dlcm), self._new_rawargs(*terms)\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_file("compare", "sympy/core/basic.py"):\n'
             'Found 1 methods with name `compare` in file sympy/core/basic.py.\n'
             'Search result 1: <file>sympy/core/basic.py</file> <class>Basic</class> <func>compare</func> <code>    def compare(self, other):\n'
             '        """\n'
             '        Return -1, 0, 1 if the object is smaller, equal, or greater than other.\n'
             '\n'
             '        Not in the mathematical sense. If the object is of a different type\n'
             '        from the "other" then their classes are ordered according to\n'
             '        the sorted_classes list.\n'
             '\n'
             '        Examples\n'
             '        ========\n'
             '\n'
             '        >>> from sympy.abc import x, y\n'
             '        >>> x.compare(y)\n'
             '        -1\n'
             '        >>> x.compare(x)\n'
             '        0\n'
             '        >>> y.compare(x)\n'
             '        1\n'
             '\n'
             '        """\n'
             '        # all redefinitions of __cmp__ method should start with the\n'
             '        # following lines:\n'
             '        if self is other:\n'
             '            return 0\n'
             '        n1 = self.__class__\n'
             '        n2 = other.__class__\n'
             '        c = (n1 > n2) - (n1 < n2)\n'
             '        if c:\n'
             '            return c\n'
             '        #\n'
             '        st = self._hashable_content()\n'
             '        ot = other._hashable_content()\n'
             '        c = (len(st) > len(ot)) - (len(st) < len(ot))\n'
             '        if c:\n'
             '            return c\n'
             '        for l, r in zip(st, ot):\n'
             '            l = Basic(*l) if isinstance(l, frozenset) else l\n'
             '            r = Basic(*r) if isinstance(r, frozenset) else r\n'
             '            if isinstance(l, Basic):\n'
             '                c = l.compare(r)\n'
             '            else:\n'
             '                c = (l > r) - (l < r)\n'
             '            if c:\n'
             '                return c\n'
             '        return 0\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_file("evalf_add", "sympy/core/evalf.py"):\n'
             'Found 1 methods with name `evalf_add` in file sympy/core/evalf.py.\n'
             'Search result 1: <file>sympy/core/evalf.py</file> <func>evalf_add</func> <code>def evalf_add(v, prec, options):\n'
             '    res = pure_complex(v)\n'
             '    if res:\n'
             '        h, c = res\n'
             '        re, _, re_acc, _ = evalf(h, prec, options)\n'
             '        im, _, im_acc, _ = evalf(c, prec, options)\n'
             '        return re, im, re_acc, im_acc\n'
             '\n'
             "    oldmaxprec = options.get('maxprec', DEFAULT_MAXPREC)\n"
             '\n'
             '    i = 0\n'
             '    target_prec = prec\n'
             '    while 1:\n'
             "        options['maxprec'] = min(oldmaxprec, 2*prec)\n"
             '\n'
             '        terms = [evalf(arg, prec + 10, options) for arg in v.args]\n'
             '        re, re_acc = add_terms(\n'
             '            [a[0::2] for a in terms if a[0]], prec, target_prec)\n'
             '        im, im_acc = add_terms(\n'
             '            [a[1::2] for a in terms if a[1]], prec, target_prec)\n'
             '        acc = complex_accuracy((re, im, re_acc, im_acc))\n'
             '        if acc >= target_prec:\n'
             "            if options.get('verbose'):\n"
             '                print("ADD: wanted", target_prec, "accurate bits, got", re_acc, im_acc)\n'
             '            break\n'
             '        else:\n'
             "            if (prec - target_prec) > options['maxprec']:\n"
             '                break\n'
             '\n'
             '            prec = prec + max(10 + 2**i, target_prec - acc)\n'
             '            i += 1\n'
             "            if options.get('verbose'):\n"
             '                print("ADD: restarting with prec", prec)\n'
             '\n'
             "    options['maxprec'] = oldmaxprec\n"
             '    if iszero(re, scaled=True):\n'
             '        re = scaled_zero(re)\n'
             '    if iszero(im, scaled=True):\n'
             '        im = scaled_zero(im)\n'
             '    return re, im, re_acc, im_acc\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'},
 {'role': 'user', 'content': "Let's analyze collected context first"},
 {'role': 'assistant',
  'content': 'Analyzing the collected context from the search results, we can start to understand how the `sympy` library handles expressions and where the '
             'recursion error might be stemming from in the issue described. The issue involves a `RecursionError` when checking if a `cosh` expression is '
             'zero, specifically with an expression involving `acos`, `acosh`, and complex numbers.\n'
             '\n'
             '### Analysis of Search Results\n'
             '\n'
             '1. **`Add.flatten` Method (sympy/core/add.py)**:\n'
             '   - This method is responsible for flattening nested `Add` operations into a single list, applying associativity, and handling the commutative '
             'property of addition. It deals with various types of objects, including numbers, orders, matrices, tensors, and more complex expressions.\n'
             "   - The method has several checks and balances to handle different types of inputs and simplify expressions. However, there's nothing "
             'immediately apparent in the method that would directly cause a recursion error unless the input expression itself leads to a deeply nested '
             'structure that `flatten` struggles to simplify.\n'
             '\n'
             '2. **`_eval_is_irrational` Method (sympy/core/add.py)**:\n'
             '   - This method checks if an expression is irrational by iterating through its arguments. If any argument is irrational and the rest are '
             'rational, it returns `True`.\n'
             "   - Given the nature of the issue, it's less likely that this method is the direct cause of the recursion error, as it doesn't inherently "
             'involve deep recursion unless called in a deeply nested context.\n'
             '\n'
             '3. **`primitive` Method (sympy/core/add.py)**:\n'
             '   - The `primitive` method returns the Rational GCD of the expression, essentially trying to simplify the expression by extracting common '
             'factors.\n'
             '   - Like `flatten`, this method could potentially contribute to recursion issues if the expression leads to complex simplification scenarios, '
             "but it's not an obvious source of recursion errors on its own.\n"
             '\n'
             '4. **`compare` Method (sympy/core/basic.py)**:\n'
             "   - This method compares objects not in a mathematical sense but based on their type and content. It's used for ordering and equality checks.\n"
             "   - It's unlikely that this method is directly related to the recursion error unless it's being used in a way that causes a comparison loop, "
             "which seems improbable based on the method's description.\n"
             '\n'
             '5. **`evalf_add` Function (sympy/core/evalf.py)**:\n'
             '   - This function evaluates the addition of terms with floating-point precision. It handles complex numbers and attempts to achieve a target '
             'precision.\n'
             "   - While this function deals with evaluation and could potentially be involved in complex expressions, it doesn't seem to inherently cause "
             'recursion errors unless the evaluation of terms itself leads to recursion.\n'
             '\n'
             '### Conclusion\n'
             '\n'
             'The recursion error might not be directly attributable to a single method or function based on the provided context. Instead, it could be the '
             'result of how these methods interact with a particularly complex expression like the one in the issue. The expression involves trigonometric and '
             'inverse trigonometric functions with complex numbers, which might lead to deeply nested or complex evaluations that exceed the maximum recursion '
             'depth.\n'
             '\n'
             'Given the complexity of the issue, a deeper dive into how expressions are evaluated and simplified, especially in the context of trigonometric '
             'functions and complex numbers, might be necessary. Additionally, examining the call stack when the recursion error occurs could provide more '
             'direct insights into which methods or functions are contributing to the issue.'},
 {'role': 'user',
  'content': 'Based on your analysis, answer below questions:  - do we need more context: construct search API calls to get more context of the project. '
             "(leave it empty if you don't need more context)  - where are bug locations: buggy files and methods. (leave it empty if you don't have enough "
             'information)'}]
2024-04-05 04:17:52 Model API request cost info: input_tokens=5088, output_tokens=104, cost=0.054000
2024-04-05 04:17:52 Raw model response: ChatCompletionMessage(content='- do we need more context: \n\n- where are bug locations: \n  - Buggy file and method #1: `sympy/core/add.py`, method `flatten`\n  - Buggy file and method #2: Potentially, the issue may not be localized to a single method but could be an interaction issue between methods when handling complex expressions involving trigonometric functions and complex numbers. However, `flatten` in `sympy/core/add.py` is the primary suspect based on the analysis.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:17:52 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 04:17:54 Model API request cost info: input_tokens=424, output_tokens=34, cost=0.005260
2024-04-05 04:17:54 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [],\n    "bug_locations":[{"file": "sympy/core/add.py", "class": "", "method": "flatten"}]\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:17:54 Raw issue json produced. Writing issue json into file.
2024-04-05 04:17:54 Extracted a valid json. Congratulations!
2024-04-05 04:17:54 Result of dispatch_intent: ('Found 1 methods with name `flatten` in file sympy/core/add.py.\nSearch result 1: <file>sympy/core/add.py</file> <class>Add</class> <func>flatten</func> <code>    def flatten(cls, seq):\n        """\n        Takes the sequence "seq" of nested Adds and returns a flatten list.\n\n        Returns: (commutative_part, noncommutative_part, order_symbols)\n\n        Applies associativity, all terms are commutable with respect to\n        addition.\n\n        NB: the removal of 0 is already handled by AssocOp.__new__\n\n        See also\n        ========\n\n        sympy.core.mul.Mul.flatten\n\n        """\n        from sympy.calculus.util import AccumBounds\n        from sympy.matrices.expressions import MatrixExpr\n        from sympy.tensor.tensor import TensExpr\n        rv = None\n        if len(seq) == 2:\n            a, b = seq\n            if b.is_Rational:\n                a, b = b, a\n            if a.is_Rational:\n                if b.is_Mul:\n                    rv = [a, b], [], None\n            if rv:\n                if all(s.is_commutative for s in rv[0]):\n                    return rv\n                return [], rv[0], None\n\n        terms = {}      # term -> coeff\n                        # e.g. x**2 -> 5   for ... + 5*x**2 + ...\n\n        coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0\n                        # e.g. 3 + ...\n        order_factors = []\n\n        extra = []\n\n        for o in seq:\n\n            # O(x)\n            if o.is_Order:\n                if o.expr.is_zero:\n                    continue\n                for o1 in order_factors:\n                    if o1.contains(o):\n                        o = None\n                        break\n                if o is None:\n                    continue\n                order_factors = [o] + [\n                    o1 for o1 in order_factors if not o.contains(o1)]\n                continue\n\n            # 3 or NaN\n            elif o.is_Number:\n                if (o is S.NaN or coeff is S.ComplexInfinity and\n                        o.is_finite is False) and not extra:\n                    # we know for sure the result will be nan\n                    return [S.NaN], [], None\n                if coeff.is_Number or isinstance(coeff, AccumBounds):\n                    coeff += o\n                    if coeff is S.NaN and not extra:\n                        # we know for sure the result will be nan\n                        return [S.NaN], [], None\n                continue\n\n            elif isinstance(o, AccumBounds):\n                coeff = o.__add__(coeff)\n                continue\n\n            elif isinstance(o, MatrixExpr):\n                # can\'t add 0 to Matrix so make sure coeff is not 0\n                extra.append(o)\n                continue\n\n            elif isinstance(o, TensExpr):\n                coeff = o.__add__(coeff) if coeff else o\n                continue\n\n            elif o is S.ComplexInfinity:\n                if coeff.is_finite is False and not extra:\n                    # we know for sure the result will be nan\n                    return [S.NaN], [], None\n                coeff = S.ComplexInfinity\n                continue\n\n            # Add([...])\n            elif o.is_Add:\n                # NB: here we assume Add is always commutative\n                seq.extend(o.args)  # TODO zerocopy?\n                continue\n\n            # Mul([...])\n            elif o.is_Mul:\n                c, s = o.as_coeff_Mul()\n\n            # check for unevaluated Pow, e.g. 2**3 or 2**(-1/2)\n            elif o.is_Pow:\n                b, e = o.as_base_exp()\n                if b.is_Number and (e.is_Integer or\n                                   (e.is_Rational and e.is_negative)):\n                    seq.append(b**e)\n                    continue\n                c, s = S.One, o\n\n            else:\n                # everything else\n                c = S.One\n                s = o\n\n            # now we have:\n            # o = c*s, where\n            #\n            # c is a Number\n            # s is an expression with number factor extracted\n            # let\'s collect terms with the same s, so e.g.\n            # 2*x**2 + 3*x**2  ->  5*x**2\n            if s in terms:\n                terms[s] += c\n                if terms[s] is S.NaN and not extra:\n                    # we know for sure the result will be nan\n                    return [S.NaN], [], None\n            else:\n                terms[s] = c\n\n        # now let\'s construct new args:\n        # [2*x**2, x**3, 7*x**4, pi, ...]\n        newseq = []\n        noncommutative = False\n        for s, c in terms.items():\n            # 0*s\n            if c.is_zero:\n                continue\n            # 1*s\n            elif c is S.One:\n                newseq.append(s)\n            # c*s\n            else:\n                if s.is_Mul:\n                    # Mul, already keeps its arguments in perfect order.\n                    # so we can simply put c in slot0 and go the fast way.\n                    cs = s._new_rawargs(*((c,) + s.args))\n                    newseq.append(cs)\n                elif s.is_Add:\n                    # we just re-create the unevaluated Mul\n                    newseq.append(Mul(c, s, evaluate=False))\n                else:\n                    # alternatively we have to call all Mul\'s machinery (slow)\n                    newseq.append(Mul(c, s))\n\n            noncommutative = noncommutative or not s.is_commutative\n\n        # oo, -oo\n        if coeff is S.Infinity:\n            newseq = [f for f in newseq if not (f.is_extended_nonnegative or f.is_real)]\n\n        elif coeff is S.NegativeInfinity:\n            newseq = [f for f in newseq if not (f.is_extended_nonpositive or f.is_real)]\n\n        if coeff is S.ComplexInfinity:\n            # zoo might be\n            #   infinite_real + finite_im\n            #   finite_real + infinite_im\n            #   infinite_real + infinite_im\n            # addition of a finite real or imaginary number won\'t be able to\n            # change the zoo nature; adding an infinite qualtity would result\n            # in a NaN condition if it had sign opposite of the infinite\n            # portion of zoo, e.g., infinite_real - infinite_real.\n            newseq = [c for c in newseq if not (c.is_finite and\n                                                c.is_extended_real is not None)]\n\n        # process O(x)\n        if order_factors:\n            newseq2 = []\n            for t in newseq:\n                for o in order_factors:\n                    # x + O(x) -> O(x)\n                    if o.contains(t):\n                        t = None\n                        break\n                # x + O(x**2) -> x + O(x**2)\n                if t is not None:\n                    newseq2.append(t)\n            newseq = newseq2 + order_factors\n            # 1 + O(1) -> O(1)\n            for o in order_factors:\n                if o.contains(coeff):\n                    coeff = S.Zero\n                    break\n\n        # order args canonically\n        _addsort(newseq)\n\n        # current code expects coeff to be first\n        if coeff is not S.Zero:\n            newseq.insert(0, coeff)\n\n        if extra:\n            newseq += extra\n            noncommutative = True\n\n        # we are done\n        if noncommutative:\n            return [], newseq, None\n        else:\n            return newseq, [], None\n</code>\n\n', 'Found 1 methods with name `flatten` in file sympy/core/add.py.\n', True)
2024-04-05 04:17:54 Gathered enough information. Invoking write_patch.
2024-04-05 04:17:54 Trying to write a patch. Try 1 of 3.
2024-04-05 04:18:15 Model API request cost info: input_tokens=7012, output_tokens=525, cost=0.085870
2024-04-05 04:18:15 Raw model response: ChatCompletionMessage(content='Given the complexity of the issue and the provided context, the recursion error seems to stem from the handling of deeply nested or complex expressions within the `flatten` method of `Add` class. However, without a specific pinpoint to the cause of the recursion error in the provided code snippet, a general approach to mitigate such issues can involve adding a recursion depth check or a more efficient handling mechanism for complex expressions.\n\nSince the exact cause of the recursion error is not directly identifiable from the provided context, I\'ll propose a hypothetical patch that aims to introduce a recursion depth check mechanism to the `flatten` method. This is more of a conceptual patch and might require adjustments to fit into the actual codebase correctly.\n\n# modification 1\n```python\n<file>sympy/core/add.py</file>\n<original>def flatten(cls, seq):\n    ...\n    for o in seq:\n        ...\n        elif o.is_Add:\n            # NB: here we assume Add is always commutative\n            seq.extend(o.args)  # TODO zerocopy?\n            continue\n        ...\n</original>\n<patched>def flatten(cls, seq, depth=0, max_depth=100):\n    if depth > max_depth:\n        raise RecursionError("Maximum recursion depth exceeded in Add.flatten")\n    ...\n    for o in seq:\n        ...\n        elif o.is_Add:\n            # NB: here we assume Add is always commutative\n            seq.extend(o.args)  # TODO zerocopy?\n            # Increase depth due to recursive structure\n            return cls.flatten(seq, depth=depth+1, max_depth=max_depth)\n        ...\n</patched>\n```\n\nNote: This patch introduces a `depth` parameter to track the recursion depth and a `max_depth` parameter to define the maximum allowed recursion depth. When the `flatten` method encounters a nested `Add` expression, it increases the `depth` by 1. If the `depth` exceeds `max_depth`, a `RecursionError` is explicitly raised with a clear message. This approach aims to prevent the Python interpreter\'s stack from overflowing by catching excessively deep recursion early. \n\nHowever, it\'s important to note that this is a conceptual solution. The actual implementation may require a more nuanced approach to handle the specific cause of the recursion error, and it might involve changes in other parts of the codebase to support the modified method signature with the `depth` parameter. Additionally, setting an appropriate value for `max_depth` would require understanding the typical depths of expression nesting encountered in practical use cases to avoid prematurely limiting valid expressions.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:18:15 Raw patch produced in try 1. Writing patch into file.
2024-04-05 04:18:15 Trying to write a patch. Try 2 of 3.
2024-04-05 04:18:29 Model API request cost info: input_tokens=7569, output_tokens=298, cost=0.084630
2024-04-05 04:18:29 Raw model response: ChatCompletionMessage(content="Given the constraints and the nature of the issue, it appears that a direct patch to address the recursion error without a specific line or condition causing the error is challenging. The recursion error in the `flatten` method likely stems from the handling of deeply nested expressions, but without a clear culprit or a problematic pattern identified in the provided code snippet, proposing a direct and applicable patch is not straightforward.\n\nIn real-world scenarios, addressing such recursion errors might involve:\n\n1. **Refactoring to Reduce Recursion**: Identifying parts of the code that can be refactored to use iterative approaches rather than recursion.\n2. **Optimization**: Implementing optimizations for specific cases that are known to cause deep recursion, possibly by detecting patterns that can be simplified earlier in the process.\n3. **Limiting Expression Complexity**: Introducing limits on the complexity of expressions that can be processed, with clear error messages when those limits are exceeded.\n\nWithout the ability to modify the original request based on the constraints provided, and in the absence of a specific problematic code pattern, it's recommended to conduct a deeper analysis of the recursion paths that lead to the error. This would involve debugging tools or logging to trace the recursion depth and the types of expressions being processed at various depths.\n\nFor educational purposes, a conceptual approach to mitigate recursion depth issues could involve adding checks or optimizations as mentioned, but without a specific actionable change that aligns with the original program's structure, providing a concrete patch is not feasible in this context.", role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:18:29 Raw patch produced in try 2. Writing patch into file.
2024-04-05 04:18:29 Trying to write a patch. Try 3 of 3.
2024-04-05 04:18:44 Model API request cost info: input_tokens=7895, output_tokens=340, cost=0.089150
2024-04-05 04:18:44 Raw model response: ChatCompletionMessage(content="Given the limitations and the nature of the feedback, it seems that a direct and specific patch cannot be accurately provided without more precise information or without identifying a specific line or block of code that directly causes the recursion error within the `flatten` method of the `Add` class in the `sympy` library.\n\nIn real-world scenarios, addressing such recursion errors often requires a detailed analysis of the call stack and the specific conditions under which the error occurs. Since the provided context does not pinpoint a specific problematic section that directly causes the recursion error, and given the constraints of this interaction, it's challenging to propose a specific code patch that would resolve the issue.\n\nTo address recursion errors like the one described, developers typically need to:\n\n1. Analyze the call stack at the point of failure to identify the exact sequence of calls leading to the recursion limit being exceeded.\n2. Identify patterns or specific operations within the recursive method that could lead to excessive depth, such as unnecessary nesting or inefficient handling of certain types of expressions.\n3. Implement checks to prevent excessive recursion depth, potentially by optimizing the algorithm to reduce recursion or by introducing iterative approaches where applicable.\n\nWithout the ability to directly analyze the call stack or the specific conditions leading to the recursion error, and in the absence of a clear indication of which part of the `flatten` method or its interactions with other parts of the codebase cause the issue, providing a specific and applicable patch is not feasible in this context.\n\nFor anyone facing similar recursion issues in their projects, it's recommended to use debugging tools to trace the execution path and identify where the recursion depth becomes problematic. From there, targeted optimizations or refactorings can be implemented to address the issue.", role='assistant', function_call=None, tool_calls=None)
2024-04-05 04:18:44 Raw patch produced in try 3. Writing patch into file.
2024-04-05 04:18:44 Result of dispatch_intent: ('Failed to write a valid patch.', 'The tool returned the patch written by another agent.', True)
2024-04-05 04:18:44 Invoked write_patch. Ending workflow.
2024-04-05 04:18:44 Task sympy__sympy-21627 completed successfully.
