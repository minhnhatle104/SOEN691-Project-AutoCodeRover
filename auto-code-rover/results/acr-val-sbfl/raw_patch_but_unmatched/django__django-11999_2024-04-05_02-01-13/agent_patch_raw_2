Given the constraints of our interaction and the inability to directly access or modify the Django codebase, along with the lack of specific details about the changes in Django 2.2+ that impact the ability to override `get_FIELD_display`, I'm unable to provide a precise patch that would directly address the issue as described.

The issue of not being able to override `get_FIELD_display` in Django 2.2+ likely stems from internal changes to Django's model or field handling system that are not easily resolved without a deep understanding of those changes. Typically, such issues would require a detailed review of the Django release notes, source code, and possibly discussions within the Django development community to identify the exact cause and develop an appropriate solution.

Without the ability to perform such an analysis or access the specific parts of the Django codebase where relevant changes occurred, any attempt to provide a patch would be speculative and might not accurately address the problem.

For developers facing similar issues, the recommended approach would include:

1. **Reviewing Django's Release Notes**: Specifically, for version 2.2, to identify any changes related to model fields, dynamic method generation, or inheritance that could impact method overriding.

2. **Consulting Django's Documentation**: For guidance on best practices for overriding methods in model classes, especially in newer versions of Django.

3. **Engaging with the Django Community**: Through forums, mailing lists, or issue trackers, to seek advice from other developers who may have encountered and solved similar issues.

4. **Inspecting the Django Source Code**: Particularly the implementation of model fields and the mechanism for generating and binding dynamic methods like `get_FIELD_display`, to understand any changes that might prevent method overriding.

If you have access to specific details about the implementation or the changes introduced in Django 2.2+, I recommend reaching out directly to Django support channels or consulting with a Django expert who can provide more targeted assistance based on those details.