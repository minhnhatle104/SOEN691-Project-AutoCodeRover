# modification 1
```python
<file>src/_pytest/outcomes.py</file>
<original>def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
    """Skip an executing test with the given message.

    This function should be called only during testing (setup, call or teardown) or
    during collection by using the ``allow_module_level`` flag.  This function can
    be called in doctests as well.

    :param bool allow_module_level:
        Allows this function to be called at module level, skipping the rest
        of the module. Defaults to False.

    .. note::
        It is better to use the :ref:`pytest.mark.skipif ref` marker when
        possible to declare a test to be skipped under certain conditions
        like mismatching platforms or dependencies.
        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
        to skip a doctest statically.
    """
    __tracebackhide__ = True
    raise Skipped(msg=msg, allow_module_level=allow_module_level)
</original>
<patched>def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
    """Skip an executing test with the given message.

    This function should be called only during testing (setup, call or teardown) or
    during collection by using the ``allow_module_level`` flag.  This function can
    be called in doctests as well.

    :param bool allow_module_level:
        Allows this function to be called at module level, skipping the rest
        of the module. Defaults to False.

    .. note::
        It is better to use the :ref:`pytest.mark.skipif ref` marker when
        possible to declare a test to be skipped under certain conditions
        like mismatching platforms or dependencies.
        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
        to skip a doctest statically.

        For skipping entire modules, consider using the `skip_module` function
        for a more straightforward approach, especially when dealing with syntax
        or features specific to newer Python versions that are not compatible
        with the current runtime environment.
    """
    __tracebackhide__ = True
    if allow_module_level:
        try:
            from _pytest.mark import MarkDecorator
            global pytestmark
            pytestmark = MarkDecorator.mark.skip(reason=msg)
        except ImportError:
            raise ImportError("Failed to import MarkDecorator for module-level skipping.")
    else:
        raise Skipped(msg=msg, allow_module_level=allow_module_level)
</patched>
```

# modification 2
```python
<file>src/_pytest/outcomes.py</file>
<original></original>
<patched>def skip_module(reason: str):
    """
    Skip an entire module with the given reason.

    This function simplifies the process of skipping entire modules, especially
    useful when certain syntax or features are only available in newer Python versions.

    :param str reason: The reason for skipping the module.
    """
    skip(msg=reason, allow_module_level=True)
</patched>
```

This patch introduces a new function `skip_module` for easier module-level skipping and updates the documentation and implementation of the existing `skip` function to better handle module-level skipping and guide users towards the new `skip_module` function for such cases.