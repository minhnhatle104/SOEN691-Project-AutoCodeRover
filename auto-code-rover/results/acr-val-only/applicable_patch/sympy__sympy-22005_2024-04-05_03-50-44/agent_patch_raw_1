Based on the issue description and the context provided, here is a patch that addresses the detection of infinite solution requests in the `sympy` library. This patch specifically modifies the `_solve_reduced_system` function to correctly handle cases where the system should not be solved as univariate due to having more than one generator. Additionally, it includes the update to the test cases to ensure this behavior is correctly handled.

# modification 1
```python
<file>sympy/solvers/polysys.py</file>
<original>
univariate = list(filter(_is_univariate, basis))
if len(univariate) == 1:
    f = univariate.pop()
else:
    raise NotImplementedError(filldedent('''
        only zero-dimensional systems supported (finite number of solutions)
    '''))
</original>
<patched>
univariate = list(filter(_is_univariate, basis))
if len(univariate) == 1 and len(gens) == 1:
    f = univariate.pop()
else:
    raise NotImplementedError(filldedent('''
        only zero-dimensional systems supported (finite number of solutions)
    '''))
</patched>
```

# modification 2
```python
<file>sympy/solvers/tests/test_polysys.py</file>
<original>
def test_solve_poly_system():
    assert solve_poly_system([x - 1], x) == [(S.One,)]
</original>
<patched>
def test_solve_poly_system():
    assert solve_poly_system([x - 1], x) == [(S.One,)]
    raises(NotImplementedError, lambda: solve_poly_system(
        Poly(x - 1, x, y), (x, y)))
    raises(NotImplementedError, lambda: solve_poly_system(
        Poly(y - 1, x, y), (x, y)))
</patched>
```

These modifications ensure that the `solve_poly_system` function in `sympy` correctly raises a `NotImplementedError` when attempting to solve systems that are not zero-dimensional with more than one generator, addressing the issue described. The update to the test cases verifies this behavior, ensuring that similar issues will be caught in future developments.