diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1999f1dae..97f52afb7 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -2170,12 +2170,19 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
                 # Take the best scores across every fold and the average of
                 # all coefficients corresponding to the best scores.
                 best_indices = np.argmax(scores, axis=1)
-                if self.multi_class == 'ovr':
+                # Check the shape of coefs_paths to determine the correct indexing method
+                coefs_paths_shape = coefs_paths.shape
+                if self.multi_class == 'ovr' or len(coefs_paths_shape) == 4:
+                    # Original logic for 'ovr' or when coefs_paths has 4 dimensions
                     w = np.mean([coefs_paths[i, best_indices[i], :]
                                  for i in range(len(folds))], axis=0)
-                else:
-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]
+                elif len(coefs_paths_shape) == 3:
+                    # Adjusted logic for scenarios where coefs_paths has 3 dimensions
+                    w = np.mean([coefs_paths[best_indices[i], i, :]
                                  for i in range(len(folds))], axis=0)
+                else:
+                    # Fallback or error handling for unexpected coefs_paths dimensions
+                    raise ValueError("Unexpected shape of coefs_paths encountered.")
 
                 best_indices_C = best_indices % len(self.Cs_)
                 self.C_.append(np.mean(self.Cs_[best_indices_C]))
