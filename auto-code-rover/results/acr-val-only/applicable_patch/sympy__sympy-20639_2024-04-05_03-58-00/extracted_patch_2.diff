diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index df7452ee87..a9502f650c 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1951,17 +1951,20 @@ def _print_Pow(self, power):
         from sympy.simplify.simplify import fraction
         b, e = power.as_base_exp()
         if power.is_commutative:
-            if e is S.NegativeOne:
-                return prettyForm("1")/self._print(b)
+            # Check if the exponent is a fraction where the numerator is 1 and the denominator is an atomic non-integer
+            # This includes cases like 1/E
             n, d = fraction(e)
-            if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:
-                return self._print_nth_root(b, e)
+            if n is S.One and d.is_Atom and not d.is_Integer:
+                # Use the root notation settings to decide how to print
+                if self._settings['root_notation']:
+                    return self._print_nth_root(b, e)
+                else:
+                    # Fallback to default power printing if root notation is disabled
+                    return self._print(b)**self._print(e)
             if e.is_Rational and e < 0:
                 return prettyForm("1")/self._print(Pow(b, -e, evaluate=False))
-
         if b.is_Relational:
             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))
-
         return self._print(b)**self._print(e)
 
     def _print_UnevaluatedExpr(self, expr):
