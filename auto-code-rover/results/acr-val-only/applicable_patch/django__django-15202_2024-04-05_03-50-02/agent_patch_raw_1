# modification 1
```python
<file>django/utils/http.py</file>
<original>if (('[' in netloc and ']' not in netloc) or
                (']' in netloc and '[' not in netloc)):
            raise ValueError("Invalid IPv6 URL")</original>
<patched>from django.core.exceptions import ValidationError
if (('[' in netloc and ']' not in netloc) or
        (']' in netloc and '[' not in netloc)):
    raise ValidationError("Invalid IPv6 URL")</patched>
```

# modification 2
```python
<file>django/core/validators.py</file>
<original>except ValueError:  # for example, "Invalid IPv6 URL"
                    raise ValidationError(self.message, code=self.code, params={'value': value})</original>
<patched># This section remains unchanged, but is referenced for context.
# The modification in django/utils/http.py ensures that a ValidationError is raised instead of ValueError,
# which is then appropriately handled here.</patched>
```

The primary modification involves changing the `ValueError` raised in `django/utils/http.py` within the `_urlsplit` function to a `ValidationError`. This ensures that when a URL with an invalid IPv6 format is encountered, it raises a `ValidationError` which is consistent with the form validation errors in Django. This change makes the error handling more consistent across the framework and avoids the issue where a `ValueError` bubbles up instead of being caught and converted into a more appropriate `ValidationError`.

The second modification is more of a contextual note rather than a change. It references the handling of `ValueError` in `django/core/validators.py` within the `URLValidator` class. By ensuring that `_urlsplit` raises a `ValidationError`, we maintain the integrity of the existing validation logic in `URLValidator`, which is designed to catch and handle `ValidationError`s. This approach keeps the changes minimal and leverages the existing error handling infrastructure in Django forms.