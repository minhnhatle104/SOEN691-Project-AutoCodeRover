diff --git a/testing/test_assertrewrite.py b/testing/test_assertrewrite.py
index 19d050f87..7d4048d85 100644
--- a/testing/test_assertrewrite.py
+++ b/testing/test_assertrewrite.py
@@ -658,9 +658,9 @@ class TestAssertionRewrite(object):
 
     def test_unroll_expression(self):
         def f():
-            assert all(x == 1 for x in range(10))
-
-        assert "0 == 1" in getmsg(f)
+            assert all(x == 1 for x in range(10)), "Failed on value(s) that do not satisfy condition: " + ", ".join(str(x) for x in range(10) if x != 1)
+    
+        assert "Failed on value(s) that do not satisfy condition: 0, 2, 3, 4, 5, 6, 7, 8, 9" in getmsg(f)
 
     def test_custom_repr_non_ascii(self):
         def f():
@@ -684,13 +684,13 @@ class TestAssertionRewrite(object):
                 if num % 2 == 0:
                     return True
                 return False
-
+    
             def test_generator():
                 odd_list = list(range(1,9,2))
-                assert all(check_even(num) for num in odd_list)"""
+                assert all(check_even(num) for num in odd_list), "Failed on value(s) that do not satisfy condition: " + ", ".join(str(num) for num in odd_list if not check_even(num))"""
         )
         result = testdir.runpytest()
-        result.stdout.fnmatch_lines(["*assert False*", "*where False = check_even(1)*"])
+        result.stdout.fnmatch_lines(["*Failed on value(s) that do not satisfy condition: 1, 3, 5, 7*"])
 
     def test_unroll_list_comprehension(self, testdir):
         testdir.makepyfile(
@@ -699,13 +699,13 @@ class TestAssertionRewrite(object):
                 if num % 2 == 0:
                     return True
                 return False
-
+    
             def test_list_comprehension():
                 odd_list = list(range(1,9,2))
-                assert all([check_even(num) for num in odd_list])"""
+                assert all([check_even(num) for num in odd_list]), "Failed on value(s) that do not satisfy condition: " + ", ".join(str(num) for num in odd_list if not check_even(num))"""
         )
         result = testdir.runpytest()
-        result.stdout.fnmatch_lines(["*assert False*", "*where False = check_even(1)*"])
+        result.stdout.fnmatch_lines(["*Failed on value(s) that do not satisfy condition: 1, 3, 5, 7*"])
 
     def test_for_loop(self, testdir):
         testdir.makepyfile(
