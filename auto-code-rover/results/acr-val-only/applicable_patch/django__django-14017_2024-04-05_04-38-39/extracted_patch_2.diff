diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..55627dce07 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1154,6 +1154,11 @@ class Exists(Subquery):
     def __init__(self, queryset, negated=False, **kwargs):
         self.negated = negated
         super().__init__(queryset, **kwargs)
+    
+    # Ensure Exists can be on the left side of & operation with Q objects.
+    def __rand__(self, other):
+        # Directly return other.__and__(self) to delegate to Q's __and__.
+        return other.__and__(self)
 
     def __invert__(self):
         clone = self.copy()
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..9b31c52c4c 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -40,8 +40,13 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
-        if not isinstance(other, Q):
-            raise TypeError(other)
+        from django.db.models.expressions import Exists
+        if not isinstance(other, (Q, Exists)):
+            raise TypeError(f"Cannot combine 'Q' with '{type(other)}'")
+        # Special handling to integrate Exists objects directly into Q objects.
+        if isinstance(other, Exists):
+            # Convert Exists object into a Q object for proper combination.
+            other = Q(_exists=other)
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
