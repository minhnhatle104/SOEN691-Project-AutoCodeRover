diff --git a/django/forms/models.py b/django/forms/models.py
index 89cb000271..91434b419d 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -656,27 +656,29 @@ class BaseModelFormSet(BaseFormSet):
     unique_fields = set()
 
     def __init__(
-        self,
-        data=None,
-        files=None,
-        auto_id="id_%s",
-        prefix=None,
-        queryset=None,
-        *,
-        initial=None,
-        **kwargs,
-    ):
-        self.queryset = queryset
-        self.initial_extra = initial
-        super().__init__(
-            **{
-                "data": data,
-                "files": files,
-                "auto_id": auto_id,
-                "prefix": prefix,
-                **kwargs,
-            }
-        )
+            self,
+            data=None,
+            files=None,
+            auto_id="id_%s",
+            prefix=None,
+            queryset=None,
+            *,
+            initial=None,
+            **kwargs,
+        ):
+            self.queryset = queryset
+            self.initial_extra = initial
+            # Remove 'empty_permitted' from kwargs if present before passing to super
+            kwargs.pop('empty_permitted', None)
+            super().__init__(
+                **{
+                    "data": data,
+                    "files": files,
+                    "auto_id": auto_id,
+                    "prefix": prefix,
+                    **kwargs,
+                }
+            )
 
     def initial_form_count(self):
         """Return the number of forms that are required in this FormSet."""
@@ -699,38 +701,40 @@ class BaseModelFormSet(BaseFormSet):
         return field.to_python
 
     def _construct_form(self, i, **kwargs):
-        pk_required = i < self.initial_form_count()
-        if pk_required:
-            if self.is_bound:
-                pk_key = "%s-%s" % (self.add_prefix(i), self.model._meta.pk.name)
-                try:
-                    pk = self.data[pk_key]
-                except KeyError:
-                    # The primary key is missing. The user may have tampered
-                    # with POST data.
-                    pass
-                else:
-                    to_python = self._get_to_python(self.model._meta.pk)
+            pk_required = i < self.initial_form_count()
+            if pk_required:
+                if self.is_bound:
+                    pk_key = "%s-%s" % (self.add_prefix(i), self.model._meta.pk.name)
                     try:
-                        pk = to_python(pk)
-                    except ValidationError:
-                        # The primary key exists but is an invalid value. The
-                        # user may have tampered with POST data.
+                        pk = self.data[pk_key]
+                    except KeyError:
+                        # The primary key is missing. The user may have tampered
+                        # with POST data.
                         pass
                     else:
-                        kwargs["instance"] = self._existing_object(pk)
-            else:
-                kwargs["instance"] = self.get_queryset()[i]
-        elif self.initial_extra:
-            # Set initial values for extra forms
-            try:
-                kwargs["initial"] = self.initial_extra[i - self.initial_form_count()]
-            except IndexError:
-                pass
-        form = super()._construct_form(i, **kwargs)
-        if pk_required:
-            form.fields[self.model._meta.pk.name].required = True
-        return form
+                        to_python = self._get_to_python(self.model._meta.pk)
+                        try:
+                            pk = to_python(pk)
+                        except ValidationError:
+                            # The primary key exists but is an invalid value. The
+                            # user may have tampered with POST data.
+                            pass
+                        else:
+                            kwargs["instance"] = self._existing_object(pk)
+                else:
+                    kwargs["instance"] = self.get_queryset()[i]
+            elif self.initial_extra:
+                # Set initial values for extra forms
+                try:
+                    kwargs["initial"] = self.initial_extra[i - self.initial_form_count()]
+                except IndexError:
+                    pass
+            # Ensure 'empty_permitted' is not passed to individual form constructors
+            kwargs.pop('empty_permitted', None)
+            form = super()._construct_form(i, **kwargs)
+            if pk_required:
+                form.fields[self.model._meta.pk.name].required = True
+            return form
 
     def get_queryset(self):
         if not hasattr(self, "_queryset"):
