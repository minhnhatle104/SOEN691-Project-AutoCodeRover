diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 6019daf787..11f1ac464b 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -166,14 +166,20 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
         return cls._new(iterable, shape, **kwargs)
 
     @classmethod
-    def _new(cls, iterable, shape, **kwargs):
-        shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
-        flat_list = flatten(flat_list)
+    def _new(cls, iterable, shape=None, **kwargs):
+        if iterable == [] and shape in [None, (), []]:
+            shape = (0,)
+            flat_list = []
+        else:
+            if shape is None:
+                shape = ()
+            shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
+            flat_list = flatten(flat_list)
         self = object.__new__(cls)
-        self._shape = shape
+        self._shape = shape if shape != (0,) else ()
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else len(flat_list)
+        self._loop_size = functools.reduce(lambda x, y: x*y, shape, 1) if shape else 0
         return self
 
     def __setitem__(self, index, value):
