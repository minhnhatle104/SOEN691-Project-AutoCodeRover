diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 379a2917aa..b843eef516 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1973,6 +1973,9 @@ def __div__(self, other):
 
     @call_highest_priority('__rmatmul__')
     def __matmul__(self, other):
+        # Check if 'other' is a matrix-like object by checking for 'shape' attribute
+        if not hasattr(other, 'shape') or len(getattr(other, 'shape', ())) != 2:
+            raise ValueError("Only matrix-like objects can be multiplied using '@'. Use '*' for scalar multiplication.")
         return self.__mul__(other)
 
     @call_highest_priority('__rmul__')
diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index 92627132e9..2955a4b83b 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -112,6 +112,10 @@ def __mul__(self, other):
     @_sympifyit('other', NotImplemented)
     @call_highest_priority('__rmul__')
     def __matmul__(self, other):
+        from sympy.core.compatibility import Iterable
+        # Ensure 'other' is not a scalar by checking it's not an instance of Iterable
+        if isinstance(other, (int, float, complex)) or not isinstance(other, Iterable):
+            raise ValueError("Scalar operands are not allowed with '@', use '*' instead.")
         return MatMul(self, other).doit()
 
     @_sympifyit('other', NotImplemented)
