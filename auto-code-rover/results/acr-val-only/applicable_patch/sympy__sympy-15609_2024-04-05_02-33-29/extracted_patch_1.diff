diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 901918674a..d95062f034 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -545,13 +545,14 @@ def _print_UnevaluatedExpr(self, expr):
         return self._print(expr.args[0])
 
     def _print_Sum(self, expr):
+        # This modification ensures that the indices in the summation are correctly escaped to prevent LaTeX errors
         if len(expr.limits) == 1:
             tex = r"\sum_{%s=%s}^{%s} " % \
-                tuple([ self._print(i) for i in expr.limits[0] ])
+                tuple([ self._print(i).replace("_", "\_") for i in expr.limits[0] ])
         else:
             def _format_ineq(l):
                 return r"%s \leq %s \leq %s" % \
-                    tuple([self._print(s) for s in (l[1], l[0], l[2])])
+                    tuple([self._print(s).replace("_", "\_") for s in (l[1], l[0], l[2])])
 
             tex = r"\sum_{\substack{%s}} " % \
                 str.join('\\\\', [ _format_ineq(l) for l in expr.limits ])
@@ -1437,8 +1438,11 @@ def _print_MatrixBase(self, expr):
                            = _print_MatrixBase
 
     def _print_MatrixElement(self, expr):
+        # Ensure subscript indices are properly formatted to avoid double subscript errors
+        i_index = self._print(expr.i).replace("_", "\_")
+        j_index = self._print(expr.j).replace("_", "\_")
         return self.parenthesize(expr.parent, PRECEDENCE["Atom"], strict=True) \
-            + '_{%s, %s}' % (expr.i, expr.j)
+            + '_{%s, %s}' % (i_index, j_index)
 
     def _print_MatrixSlice(self, expr):
         def latexslice(x):
