diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..0fa2fdbee6 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -400,20 +400,23 @@ class BaseDatabaseSchemaEditor:
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
 
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
-        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
-        meta_index_names = {constraint.name for constraint in model._meta.indexes}
+        meta_constraint_names = {constraint.name for constraint in model._meta.constraints if 'unique' in constraint_kwargs and constraint.unique}
+        meta_index_names = {constraint.name for constraint in model._meta.indexes if 'index' in constraint_kwargs and not constraint.unique}
         columns = [model._meta.get_field(field).column for field in fields]
+        # Adjust the exclusion set based on the type of constraint being deleted
+        exclude_set = meta_constraint_names | meta_index_names if 'unique' in constraint_kwargs else meta_index_names
         constraint_names = self._constraint_names(
-            model, columns, exclude=meta_constraint_names | meta_index_names,
+            model, columns, exclude=exclude_set,
             **constraint_kwargs
         )
-        if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
+        # Check for the presence of multiple constraints, which is now considered valid
+        if not constraint_names:
+            raise ValueError("No matching constraints found for %s(%s)" % (
                 model._meta.db_table,
                 ", ".join(columns),
             ))
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+        for constraint_name in constraint_names:
+            self.execute(self._delete_constraint_sql(sql, model, constraint_name))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
