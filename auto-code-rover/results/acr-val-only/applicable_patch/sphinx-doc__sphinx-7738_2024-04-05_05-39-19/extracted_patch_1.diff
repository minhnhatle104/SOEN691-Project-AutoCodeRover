diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index c0905e523..b96f84532 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -281,8 +281,11 @@ class Documenter:
         return self.env.app.registry.documenters
 
     def add_line(self, line: str, source: str, *lineno: int) -> None:
-        """Append one line of generated reST to the output."""
+        """Append one line of generated reST to the output, ensuring trailing underscores are not overescaped."""
         if line.strip():  # not a blank line
+            # Check if line ends with a backslash followed by an underscore and adjust accordingly
+            if line.endswith('\\_'):
+                line = line[:-2] + '_'
             self.directive.result.append(self.indent + line, source, *lineno)
         else:
             self.directive.result.append('', source, *lineno)
@@ -382,15 +385,17 @@ class Documenter:
         return None
 
     def format_name(self) -> str:
-        """Format the name of *self.object*.
+        """Format the name of *self.object*, ensuring trailing underscores are handled correctly.
 
         This normally should be something that can be parsed by the generated
         directive, but doesn't need to be (Sphinx will display it unparsed
         then).
         """
-        # normally the name doesn't contain the module (except for module
-        # directives of course)
-        return '.'.join(self.objpath) or self.modname
+        # Handle trailing underscores correctly
+        formatted_name = '.'.join(self.objpath) or self.modname
+        if formatted_name.endswith('_'):
+            formatted_name = formatted_name.rstrip('_') + '_'
+        return formatted_name
 
     def format_signature(self, **kwargs: Any) -> str:
         """Format the signature (arguments and return annotation) of the object.
