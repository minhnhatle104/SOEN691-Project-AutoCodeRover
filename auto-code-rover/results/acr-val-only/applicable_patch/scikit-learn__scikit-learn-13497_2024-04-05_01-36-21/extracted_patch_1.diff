diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..e021d8bb7 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -247,19 +247,24 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)
     n_samples, n_features = X.shape
 
-    if discrete_features == 'auto':
+    if isinstance(discrete_features, str) and discrete_features == 'auto':
         discrete_features = issparse(X)
+    elif not isinstance(discrete_features, (np.ndarray, list, bool)):
+        raise ValueError("discrete_features must be 'auto', a boolean, a list of indices, or a boolean mask array.")
 
     if isinstance(discrete_features, bool):
-        discrete_mask = np.empty(n_features, dtype=bool)
-        discrete_mask.fill(discrete_features)
-    else:
+        discrete_mask = np.full(n_features, fill_value=discrete_features, dtype=bool)
+    elif isinstance(discrete_features, (list, np.ndarray)):
         discrete_features = np.asarray(discrete_features)
-        if discrete_features.dtype != 'bool':
+        if discrete_features.dtype == bool and discrete_features.size == n_features:
+            discrete_mask = discrete_features
+        elif np.issubdtype(discrete_features.dtype, np.integer):
             discrete_mask = np.zeros(n_features, dtype=bool)
             discrete_mask[discrete_features] = True
         else:
-            discrete_mask = discrete_features
+            raise ValueError("discrete_features as an array must be either a boolean mask of length n_features or an array of integers representing indices of discrete features.")
+    else:
+        raise ValueError("discrete_features must be a boolean, an array of integers, or a boolean mask.")
 
     continuous_mask = ~discrete_mask
     if np.any(continuous_mask) and issparse(X):
