diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..aea470697 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -249,6 +249,18 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
 
     if discrete_features == 'auto':
         discrete_features = issparse(X)
+    else:
+        # Ensure discrete_features is either a boolean or a valid array-like of indices/mask without assuming its type
+        if not isinstance(discrete_features, (bool, np.ndarray, list)):
+            raise TypeError("discrete_features must be 'auto', a boolean, or an array-like of indices or mask.")
+        if isinstance(discrete_features, (list, np.ndarray)):
+            discrete_features = np.asarray(discrete_features)
+            if discrete_features.ndim > 1:
+                raise ValueError("discrete_features array must be one-dimensional.")
+            if discrete_features.dtype == bool and discrete_features.size != n_features:
+                raise ValueError("Boolean mask for discrete_features must have the same length as the number of features.")
+            if discrete_features.dtype != bool and not np.issubdtype(discrete_features.dtype, np.integer):
+                raise ValueError("Indices for discrete_features must be integers.")
 
     if isinstance(discrete_features, bool):
         discrete_mask = np.empty(n_features, dtype=bool)
