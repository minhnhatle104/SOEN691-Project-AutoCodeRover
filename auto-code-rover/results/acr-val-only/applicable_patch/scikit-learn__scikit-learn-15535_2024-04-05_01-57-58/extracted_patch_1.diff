diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py
index 4bddae35c..cde24dda3 100644
--- a/sklearn/metrics/cluster/_supervised.py
+++ b/sklearn/metrics/cluster/_supervised.py
@@ -216,7 +216,7 @@ def adjusted_rand_score(labels_true, labels_pred):
     adjusted_mutual_info_score: Adjusted Mutual Information
 
     """
-    labels_true, labels_pred = check_clusterings(labels_true, labels_pred)
+    labels_true, labels_pred = check_clusterings(np.asarray(labels_true), np.asarray(labels_pred))
     n_samples = labels_true.shape[0]
     n_classes = np.unique(labels_true).shape[0]
     n_clusters = np.unique(labels_pred).shape[0]
@@ -616,6 +616,13 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):
     normalized_mutual_info_score: Normalized Mutual Information
     """
     if contingency is None:
+        # Convert labels to a numeric format if they are not already.
+        if not np.issubdtype(labels_true.dtype, np.number) or not np.issubdtype(labels_pred.dtype, np.number):
+            from sklearn.preprocessing import LabelEncoder
+            le_true = LabelEncoder()
+            labels_true = le_true.fit_transform(labels_true)
+            le_pred = LabelEncoder()
+            labels_pred = le_pred.fit_transform(labels_pred)
         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)
         contingency = contingency_matrix(labels_true, labels_pred, sparse=True)
     else:
