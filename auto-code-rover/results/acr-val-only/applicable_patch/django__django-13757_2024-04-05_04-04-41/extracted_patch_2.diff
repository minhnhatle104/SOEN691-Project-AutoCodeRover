diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index 29c6ff0926..754d661c23 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -367,12 +367,16 @@ class KeyTransformIsNull(lookups.IsNull):
     # key__isnull=False is the same as has_key='key'
     def as_oracle(self, compiler, connection):
         if not self.rhs:
-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
+            # Use JSON_QUERY to avoid matching keys with null values
+            # JSON_QUERY returns null if the key does not exist or the value is JSON null, allowing differentiation
+            return "COALESCE(JSON_QUERY(%s, '$.%s'), 'KEY_DOES_NOT_EXIST') = 'KEY_DOES_NOT_EXIST'" % (self.lhs.lhs, self.lhs.key_name), []
         return super().as_sql(compiler, connection)
 
     def as_sqlite(self, compiler, connection):
         if not self.rhs:
-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)
+            # Adjust the logic to explicitly check for the absence of the key
+            # SQLite JSON functions return null if the key does not exist, which can be distinguished from a key with a null value
+            return "JSON_TYPE(%s, '$.%s') IS NULL" % (self.lhs.lhs, self.lhs.key_name), []
         return super().as_sql(compiler, connection)
 
 
