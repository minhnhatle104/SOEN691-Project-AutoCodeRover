diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0c64748ccd..61ca181c62 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1663,7 +1663,12 @@ class FilePathField(Field):
 
     def __init__(self, verbose_name=None, name=None, path='', match=None,
                  recursive=False, allow_files=True, allow_folders=False, **kwargs):
-        self.path, self.match, self.recursive = path, match, recursive
+        # Allow 'path' to be a callable as well as a string
+        if callable(path):
+            self.path = path()
+        else:
+            self.path = path
+        self.match, self.recursive = match, recursive
         self.allow_files, self.allow_folders = allow_files, allow_folders
         kwargs.setdefault('max_length', 100)
         super().__init__(verbose_name, name, **kwargs)
@@ -1687,8 +1692,16 @@ class FilePathField(Field):
 
     def deconstruct(self):
         name, path, args, kwargs = super().deconstruct()
-        if self.path != '':
-            kwargs['path'] = self.path
+        # Handle callable 'path' by storing its fully qualified name if possible
+        if callable(self.path):
+            from django.utils.module_loading import import_string
+            try:
+                kwargs['path'] = f"{self.path.__module__}.{self.path.__name__}"
+            except AttributeError:
+                raise ValueError("Cannot serialize callable 'path' that does not have __name__ attribute")
+        else:
+            if self.path != '':
+                kwargs['path'] = self.path
         if self.match is not None:
             kwargs['match'] = self.match
         if self.recursive is not False:
