Given the context and the issue described, it seems the problem might not be directly in the implementations of `doit`, `refine`, or the summation methods themselves, but rather in how the sum of the elements of an identity matrix is being calculated and expected. The issue describes an expectation that the sum of all elements in an identity matrix should be 'n', but the result is 0. This could be due to a misunderstanding of how the sum is being calculated or an incorrect implementation of the summation logic for this specific case.

However, without a clear bug in the provided method implementations and based on the description and context given, a hypothetical patch could involve ensuring that the sum of elements in an identity matrix is correctly calculated. Since the direct cause is not pinpointed, I'll provide a conceptual patch that could be applied to the summation process to check for identity matrices and sum their elements correctly.

# modification 1
```python
<file>sympy/concrete/summations.py</file>
<original>if i not in f.free_symbols:
    return f*(b - a + 1)</original>
<patched># Check if the function represents an identity matrix element and sum accordingly
if i not in f.free_symbols:
    if isinstance(f, MatrixElement) and f.args[0].is_Identity:
        return Sum(1, (i, 0, f.args[0].shape[0]-1)).doit()
    else:
        return f*(b - a + 1)</patched>
```

Note: This patch is conceptual and assumes the existence of an `is_Identity` property to check if a matrix is an identity matrix, and `MatrixElement` to represent an element of a matrix. The actual implementation might require additional checks or methods to accurately determine if `f` represents an element of an identity matrix and to sum its elements correctly. The SymPy library's actual structure and available properties/methods might not directly support this patch without further modification or addition of the assumed properties/methods.