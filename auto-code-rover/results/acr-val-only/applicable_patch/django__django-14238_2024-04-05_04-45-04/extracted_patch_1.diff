diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..d7f2183d37 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2518,13 +2518,15 @@ class AutoFieldMeta(type):
 
     @property
     def _subclasses(self):
-        return (BigAutoField, SmallAutoField)
+        # Including AutoField itself to ensure it's recognized as a valid base class
+        return (AutoField, BigAutoField, SmallAutoField)
 
     def __instancecheck__(self, instance):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        # Adjusting the check to also consider subclasses of the subclasses
+        return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/django/db/models/options.py b/django/db/models/options.py
index 4028e05b99..b73d5963b7 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -242,10 +242,12 @@ class Options:
                 f"not be imported."
             )
             raise ImproperlyConfigured(msg) from e
-        if not issubclass(pk_class, AutoField):
+        # Importing AutoFieldMeta to use for subclass check
+        from django.db.models.fields import AutoFieldMeta
+        if not AutoFieldMeta.__subclasscheck__(pk_class):
             raise ValueError(
                 f"Primary key '{pk_class_path}' referred by {source} must "
-                f"subclass AutoField."
+                f"be a subclass of AutoField or its recognized subclasses."
             )
         return pk_class
 
