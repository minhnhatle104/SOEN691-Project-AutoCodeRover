Based on the context and the issue described, it seems the problem lies in how Sphinx's autodoc extension determines whether an inherited member is documented, particularly when it comes to members that are only annotated in the superclass. The `filter_members` method in `sphinx/ext/autodoc/__init__.py` is a key area of interest, as it includes logic for filtering members that are considered undocumented unless the `:undoc-members:` option is used. 

Given the information, a potential patch could involve ensuring that annotated-only members in superclasses are correctly recognized as documented. This could be achieved by adjusting the logic within `filter_members` to treat members with annotations as documented, even if they do not have explicit docstrings.

# modification 1
```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>elif name in self.get_attr(cls, '__annotations__', {}):
                        return False</original>
<patched>elif name in self.get_attr(cls, '__annotations__', {}):
                        # Treat members with annotations as documented
                        has_doc = True
                        return False</patched>
```

This modification adjusts the `filter_members` method to treat members that are found in the `__annotations__` dictionary of a class as having documentation. This change is based on the assumption that the presence of an annotation implies a form of documentation for the member, which aligns with the expected behavior described in the issue.

Please note, this patch is conceptual and based on the analysis of the provided code snippets and the described issue. Further testing and validation would be required to ensure that this change correctly addresses the issue without introducing unintended side effects.