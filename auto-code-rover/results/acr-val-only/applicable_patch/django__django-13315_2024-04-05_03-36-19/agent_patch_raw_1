# modification 1
```python
<file>django/forms/models.py</file>
<original>def apply_limit_choices_to_to_formfield(formfield):
    """Apply limit_choices_to to the formfield's queryset if needed."""
    if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
        limit_choices_to = formfield.get_limit_choices_to()
        if limit_choices_to is not None:
            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)</original>
<patched>def apply_limit_choices_to_to_formfield(formfield):
    """Apply limit_choices_to to the formfield's queryset if needed, ensuring no duplicates."""
    if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
        limit_choices_to = formfield.get_limit_choices_to()
        if limit_choices_to is not None:
            # Apply distinct() to prevent duplicates when joins are involved
            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()</patched>
```

This modification addresses the issue by ensuring that the queryset used for the formfield does not contain duplicates. By applying the `distinct()` method to the queryset after filtering with `limit_choices_to`, we ensure that each option appears only once, even if the underlying query involves joins that would otherwise introduce duplicates. This change is made in the `apply_limit_choices_to_to_formfield` function within `django/forms/models.py`, which is a central location where `limit_choices_to` is applied to formfields' querysets.