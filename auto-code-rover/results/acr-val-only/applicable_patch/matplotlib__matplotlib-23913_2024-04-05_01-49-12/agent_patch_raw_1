# modification 1
```python
<file>lib/matplotlib/legend.py</file>
<original>def __init__(
        self, parent, handles, labels,
        loc=None,
        ...
        alignment="center",       # control the alignment within the legend box
        *,
        ncol=1  # synonym for ncols (backward compatibility)
    ):</original>
<patched>def __init__(
        self, parent, handles, labels,
        loc=None,
        ...
        alignment="center",       # control the alignment within the legend box
        draggable=False,          # make legend draggable
        *,
        ncol=1  # synonym for ncols (backward compatibility)
    ):</patched>
```

# modification 2
```python
<file>lib/matplotlib/legend.py</file>
<original>self.set_title(title, prop=title_prop_fp)
        self._draggable = None</original>
<patched>self.set_title(title, prop=title_prop_fp)
        self._draggable = None
        if draggable:
            self.set_draggable(True)</patched>
```

# modification 3
```python
<file>lib/matplotlib/legend.py</file>
<original>def set_draggable(self, state, use_blit=False, update='loc'):
        pass</original>
<patched>def set_draggable(self, state, use_blit=False, update='loc'):
        """
        Make the legend draggable or not. If draggable, the legend can be moved around the plot with the mouse.
        Parameters
        ----------
        state : bool
            Enable or disable the draggable state of the legend.
        use_blit : bool, optional
            Use blitting for faster drawing (default is False).
        update : str, optional
            Update mode, can be 'loc' or 'bbox' (default is 'loc').
        """
        from matplotlib.offsetbox import DraggableLegend
        if state:
            if self._draggable is None:
                self._draggable = DraggableLegend(self, use_blit, update)
        else:
            if self._draggable is not None:
                self._draggable.disconnect()
            self._draggable = None</patched>
```

**Explanation**: 
- **Modification 1** adds a new parameter `draggable` to the `__init__` method of the `Legend` class. This allows users to specify whether the legend should be draggable at the time of its creation.
- **Modification 2** utilizes the `draggable` parameter within the `__init__` method. If `draggable` is set to `True`, it calls `self.set_draggable(True)` to make the legend draggable immediately after its creation.
- **Modification 3** provides a possible implementation for the `set_draggable` method within the `Legend` class. This method was previously not implemented (as indicated by `pass`). The patched version includes a basic implementation that leverages a hypothetical `DraggableLegend` class (similar to `DraggableAnnotation` found in `_AnnotationBase`). This class would manage the draggable state of the legend, allowing it to be moved around the plot with the mouse. Note that the actual implementation of `DraggableLegend` is not provided here and would need to be developed based on the existing `DraggableAnnotation` class or a similar mechanism.