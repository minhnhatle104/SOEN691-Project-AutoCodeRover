# modification 1
```python
<file>django/db/migrations/recorder.py</file>
<original>    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
</original>
<patched>    def ensure_schema(self):
        """Ensure the table exists and has the correct schema, respecting db router allow_migrate rules."""
        from django.db import router
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Check if we're allowed to migrate
        if not router.allow_migrate(self.connection.alias, self.Migration):
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
</patched>
```

This patch introduces a check using Django's `router.allow_migrate` method before attempting to create the migration table in the `ensure_schema` method of the `MigrationRecorder` class. This respects the custom database router's `allow_migrate` rules, preventing the creation of the migration table in databases where migrations are not allowed.