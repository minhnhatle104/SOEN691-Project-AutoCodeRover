Given the analysis and the context provided, let's propose a hypothetical patch to address the DPI doubling issue when unpickling figures on M1 Macs. This patch aims to ensure that the DPI is correctly handled during the figure's resizing and state restoration processes, particularly in the MacOSX backend.

### Modification 1: Adjusting DPI Handling in `resize` Method

```python
<file>lib/matplotlib/backends/backend_macosx.py</file>
<original>
def resize(self, width, height):
    # Size from macOS is logical pixels, dpi is physical.
    scale = self.figure.dpi / self.device_pixel_ratio
    width /= scale
    height /= scale
    self.figure.set_size_inches(width, height, forward=False)
    ResizeEvent("resize_event", self)._process()
    self.draw_idle()
</original>
<patched>
def resize(self, width, height):
    # Size from macOS is logical pixels, dpi is physical.
    # Ensure device_pixel_ratio is considered correctly to prevent DPI doubling.
    if hasattr(self, 'device_pixel_ratio') and self.device_pixel_ratio > 0:
        scale = self.figure.dpi / self.device_pixel_ratio
    else:
        scale = 1
    width /= scale
    height /= scale
    self.figure.set_size_inches(width / self.figure.dpi, height / self.figure.dpi, forward=False)
    ResizeEvent("resize_event", self)._process()
    self.draw_idle()
</patched>
```

### Modification 2: Ensuring DPI Consistency in `__setstate__` Method

```python
<file>lib/matplotlib/figure.py</file>
<original>
def __setstate__(self, state):
    version = state.pop('__mpl_version__')
    restore_to_pylab = state.pop('_restore_to_pylab', False)

    if version != mpl.__version__:
        _api.warn_external(
            f"This figure was saved with matplotlib version {version} and "
            f"is unlikely to function correctly.")

    self.__dict__ = state

    # re-initialise some of the unstored state information
    FigureCanvasBase(self)  # Set self.canvas.

    if restore_to_pylab:
        # lazy import to avoid circularity
        import matplotlib.pyplot as plt
        import matplotlib._pylab_helpers as pylab_helpers
        allnums = plt.get_fignums()
        num = max(allnums) + 1 if allnums else 1
        mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)
        pylab_helpers.Gcf._set_new_active_manager(mgr)
        plt.draw_if_interactive()

    self.stale = True
</original>
<patched>
def __setstate__(self, state):
    version = state.pop('__mpl_version__')
    restore_to_pylab = state.pop('_restore_to_pylab', False)

    if version != mpl.__version__:
        _api.warn_external(
            f"This figure was saved with matplotlib version {version} and "
            f"is unlikely to function correctly.")

    original_dpi = state.get('dpi', 100)  # Assuming 100 as a default DPI if not specified
    self.__dict__ = state

    # Ensure DPI is not inadvertently changed during state restoration
    self.dpi = original_dpi

    # re-initialise some of the unstored state information
    FigureCanvasBase(self)  # Set self.canvas.

    if restore_to_pylab:
        # lazy import to avoid circularity
        import matplotlib.pyplot as plt
        import matplotlib._pylab_helpers as pylab_helpers
        allnums = plt.get_fignums()
        num = max(allnums) + 1 if allnums else 1
        mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)
        pylab_helpers.Gcf._set_new_active_manager(mgr)
        plt.draw_if_interactive()

    self.stale = True
</patched>
```

These modifications aim to address potential issues in DPI handling during figure resizing and state restoration, particularly focusing on ensuring that DPI values are correctly managed and applied, preventing inadvertent doubling. It's important to note that these patches are hypothetical and would need to be tested thoroughly in the context of the Matplotlib codebase and specifically on M1 Macs to ensure they resolve the issue without introducing new problems.