2024-04-05 02:21:34 ========== Running task django__django-16379 (relative counter in this run: 110/300) ==========
2024-04-05 02:21:35 Running command: source /home/haifeng/miniconda3/etc/profile.d/conda.sh ; conda activate setup_django__django__4.2 ; python -m pip install -e . ; conda deactivate
2024-04-05 02:21:36 Running command: source /home/haifeng/miniconda3/etc/profile.d/conda.sh ; conda activate setup_django__django__4.2 ; python -m pip install xmlrunner coverage pytest pytest-cov ; conda deactivate
2024-04-05 02:22:52 
========== Conversation Round 0 ==========
2024-04-05 02:22:52 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>FileBasedCache has_key is susceptible to race conditions\n'
             'Description\n'
             '(last modified by Marti Raudsepp)\n'
             "I received the exception from Django's cache framework:\n"
             "FileNotFoundError: [Errno 2] No such file or directory: '/app/var/cache/d729e4cf4ba88cba5a0f48e0396ec48a.djcache'\n"
             '[...]\n'
             'File "django/core/cache/backends/base.py", line 229, in get_or_set\n'
             'self.add(key, default, timeout=timeout, version=version)\n'
             'File "django/core/cache/backends/filebased.py", line 26, in add\n'
             'if self.has_key(key, version):\n'
             'File "django/core/cache/backends/filebased.py", line 94, in has_key\n'
             'with open(fname, "rb") as f:\n'
             'The code is:\n'
             'def has_key(self, key, version=None):\n'
             'fname = self._key_to_file(key, version)\n'
             'if os.path.exists(fname):\n'
             'with open(fname, "rb") as f:\n'
             'return not self._is_expired(f)\n'
             'return False\n'
             "Between the exists() check and open(), it's possible for the file to be deleted. In fact, the _is_expired() method itself deletes the file if it "
             "finds it to be expired. So if many threads race to read an expired cache at once, it's not that unlikely to hit this window.\n"
             '</issue>'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '}]
2024-04-05 02:22:55 Model API request cost info: input_tokens=563, output_tokens=33, cost=0.006620
2024-04-05 02:22:55 Raw model response: ChatCompletionMessage(content='search_class("FileBasedCache")\nsearch_method_in_class("has_key", "FileBasedCache")\nsearch_method_in_class("_is_expired", "FileBasedCache")', role='assistant', function_call=None, tool_calls=None)
2024-04-05 02:22:55 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 02:22:59 Model API request cost info: input_tokens=353, output_tokens=59, cost=0.005300
2024-04-05 02:22:59 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [\n        "search_class(\\"FileBasedCache\\")",\n        "search_method_in_class(\\"has_key\\", \\"FileBasedCache\\")",\n        "search_method_in_class(\\"_is_expired\\", \\"FileBasedCache\\")"\n    ],\n    "bug_locations": []\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 02:22:59 Raw issue json produced. Writing issue json into file.
2024-04-05 02:22:59 Extracted a valid json. Congratulations!
2024-04-05 02:22:59 Refactored invocation argument parsing failed on 'search_class("FileBasedCache")': malformed node or string on line 1: <ast.Name object at 0x7f32c9c1c7f0>
2024-04-05 02:22:59 Result of dispatch_intent: ('Found 1 classes with name FileBasedCache in the codebase.\nSearch result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <code>class FileBasedCache(BaseCache):\n    cache_suffix = ".djcache"\n    pickle_protocol = pickle.HIGHEST_PROTOCOL\n    def __init__(self, dir, params):\n    def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n    def get(self, key, default=None, version=None):\n    def _write_content(self, file, timeout, value):\n    def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n    def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n    def delete(self, key, version=None):\n    def _delete(self, fname):\n    def has_key(self, key, version=None):\n    def _cull(self):\n    def _createdir(self):\n    def _key_to_file(self, key, version=None):\n    def clear(self):\n    def _is_expired(self, f):\n    def _list_cache_files(self):\n</code>\n\n', 'The tool returned information about class `FileBasedCache`.', True)
2024-04-05 02:22:59 Refactored invocation argument parsing failed on 'search_method_in_class("has_key", "FileBasedCache")': malformed node or string on line 1: <ast.Name object at 0x7f32c9e9e7d0>
2024-04-05 02:22:59 Result of dispatch_intent: ('Found 1 methods with name has_key in class FileBasedCache.\nSearch result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <func>has_key</func> <code>    def has_key(self, key, version=None):\n        fname = self._key_to_file(key, version)\n        if os.path.exists(fname):\n            with open(fname, "rb") as f:\n                return not self._is_expired(f)\n        return False\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name has_key in class FileBasedCache.\n', True)
2024-04-05 02:22:59 Refactored invocation argument parsing failed on 'search_method_in_class("_is_expired", "FileBasedCache")': malformed node or string on line 1: <ast.Name object at 0x7f32c974c280>
2024-04-05 02:22:59 Result of dispatch_intent: ('Found 1 methods with name _is_expired in class FileBasedCache.\nSearch result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <func>_is_expired</func> <code>    def _is_expired(self, f):\n        """\n        Take an open cache file `f` and delete it if it\'s expired.\n        """\n        try:\n            exp = pickle.load(f)\n        except EOFError:\n            exp = 0  # An empty file is considered expired.\n        if exp is not None and exp < time.time():\n            f.close()  # On Windows a file has to be closed before deleting\n            self._delete(f.name)\n            return True\n        return False\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name _is_expired in class FileBasedCache.\n', True)
2024-04-05 02:23:21 Model API request cost info: input_tokens=1174, output_tokens=592, cost=0.029500
2024-04-05 02:23:21 Raw model response: ChatCompletionMessage(content='Based on the collected context from the search results, we can analyze the issue and the relevant parts of the Django `FileBasedCache` implementation to understand the problem and propose a solution.\n\n### Issue Analysis\nThe issue arises from a race condition in the `has_key` method of the `FileBasedCache` class. The race condition occurs between checking if a cache file exists using `os.path.exists(fname)` and attempting to open the file with `open(fname, "rb")`. If the file is deleted (for example, by another thread or process) after the existence check but before the file is opened, a `FileNotFoundError` is raised. This is particularly likely to happen if the file is found to be expired in the `_is_expired` method, which deletes the file.\n\n### Relevant Code Snippets\n1. **`has_key` Method**\n   ```python\n   def has_key(self, key, version=None):\n       fname = self._key_to_file(key, version)\n       if os.path.exists(fname):\n           with open(fname, "rb") as f:\n               return not self._is_expired(f)\n       return False\n   ```\n   This method checks if a cache key exists and is not expired. The race condition occurs here.\n\n2. **`_is_expired` Method**\n   ```python\n   def _is_expired(self, f):\n       """\n       Take an open cache file `f` and delete it if it\'s expired.\n       """\n       try:\n           exp = pickle.load(f)\n       except EOFError:\n           exp = 0  # An empty file is considered expired.\n       if exp is not None and exp < time.time():\n           f.close()  # On Windows a file has to be closed before deleting\n           self._delete(f.name)\n           return True\n       return False\n   ```\n   This method checks if the cache file is expired and deletes it if so. It\'s called from within `has_key`.\n\n### Solution Proposal\nTo solve this race condition, we can modify the `has_key` method to handle the `FileNotFoundError` gracefully. Instead of checking if the file exists before opening it, we can directly attempt to open the file and catch the `FileNotFoundError`. If the exception is caught, we can safely assume the file does not exist or was deleted, and thus return `False`.\n\n### Proposed Patch\n```python\ndef has_key(self, key, version=None):\n    fname = self._key_to_file(key, version)\n    try:\n        with open(fname, "rb") as f:\n            return not self._is_expired(f)\n    except FileNotFoundError:\n        return False\n```\n\nThis approach eliminates the race condition by removing the gap between checking for the file\'s existence and opening the file. It also simplifies the logic by handling the non-existence of the file through exception handling, which is a common Pythonic pattern for dealing with such scenarios.', role='assistant', function_call=None, tool_calls=None)
2024-04-05 02:23:21 
========== Conversation Round 1 ==========
2024-04-05 02:23:21 [32mCurrent message thread:[0m
[{'role': 'system',
  'content': 'You are a software developer maintaining a large project.\n'
             'You are working on an issue submitted to your project.\n'
             'The issue contains a description marked between <issue> and </issue>.\n'
             'Your task is to invoke a few search API calls to gather buggy information, then write patches to solve the issues.\n'},
 {'role': 'user',
  'content': '<issue>FileBasedCache has_key is susceptible to race conditions\n'
             'Description\n'
             '(last modified by Marti Raudsepp)\n'
             "I received the exception from Django's cache framework:\n"
             "FileNotFoundError: [Errno 2] No such file or directory: '/app/var/cache/d729e4cf4ba88cba5a0f48e0396ec48a.djcache'\n"
             '[...]\n'
             'File "django/core/cache/backends/base.py", line 229, in get_or_set\n'
             'self.add(key, default, timeout=timeout, version=version)\n'
             'File "django/core/cache/backends/filebased.py", line 26, in add\n'
             'if self.has_key(key, version):\n'
             'File "django/core/cache/backends/filebased.py", line 94, in has_key\n'
             'with open(fname, "rb") as f:\n'
             'The code is:\n'
             'def has_key(self, key, version=None):\n'
             'fname = self._key_to_file(key, version)\n'
             'if os.path.exists(fname):\n'
             'with open(fname, "rb") as f:\n'
             'return not self._is_expired(f)\n'
             'return False\n'
             "Between the exists() check and open(), it's possible for the file to be deleted. In fact, the _is_expired() method itself deletes the file if it "
             "finds it to be expired. So if many threads race to read an expired cache at once, it's not that unlikely to hit this window.\n"
             '</issue>'},
 {'role': 'user',
  'content': 'Based on the files, classes, methods, code statements from the issue that related to the bug, you can use below search APIs to get more context '
             'of the project.\n'
             '        search_class(class_name: str): Search for a class in the codebase.\n'
             '        search_method_in_file(method_name: str, file_path: str): Search for a method in a given file.\n'
             '        search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n'
             '        search_method(method_name: str): Search for a method in the entire codebase.\n'
             '        search_code(code_str: str): Search for a code snippet in the entire codebase.\n'
             '        search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n'
             '        Note that you can use multiple search APIs in one round.\n'
             '        Now analyze the issue and select necessary APIs to get more context of the project, each API call must have concrete arguments as '
             'inputs.\n'
             '        '},
 {'role': 'assistant',
  'content': 'search_class("FileBasedCache")\nsearch_method_in_class("has_key", "FileBasedCache")\nsearch_method_in_class("_is_expired", "FileBasedCache")'},
 {'role': 'user',
  'content': 'Result of search_class("FileBasedCache"):\n'
             'Found 1 classes with name FileBasedCache in the codebase.\n'
             'Search result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <code>class FileBasedCache(BaseCache):\n'
             '    cache_suffix = ".djcache"\n'
             '    pickle_protocol = pickle.HIGHEST_PROTOCOL\n'
             '    def __init__(self, dir, params):\n'
             '    def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n'
             '    def get(self, key, default=None, version=None):\n'
             '    def _write_content(self, file, timeout, value):\n'
             '    def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n'
             '    def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n'
             '    def delete(self, key, version=None):\n'
             '    def _delete(self, fname):\n'
             '    def has_key(self, key, version=None):\n'
             '    def _cull(self):\n'
             '    def _createdir(self):\n'
             '    def _key_to_file(self, key, version=None):\n'
             '    def clear(self):\n'
             '    def _is_expired(self, f):\n'
             '    def _list_cache_files(self):\n'
             '</code>\n'
             '\n'
             '\n'
             '\n'
             'Result of search_method_in_class("has_key", "FileBasedCache"):\n'
             'Found 1 methods with name has_key in class FileBasedCache.\n'
             'Search result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <func>has_key</func> <code>    def '
             'has_key(self, key, version=None):\n'
             '        fname = self._key_to_file(key, version)\n'
             '        if os.path.exists(fname):\n'
             '            with open(fname, "rb") as f:\n'
             '                return not self._is_expired(f)\n'
             '        return False\n'
             '</code>\n'
             '\n'
             'Other results are in these files:\n'
             '\n'
             '\n'
             'Result of search_method_in_class("_is_expired", "FileBasedCache"):\n'
             'Found 1 methods with name _is_expired in class FileBasedCache.\n'
             'Search result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <func>_is_expired</func> <code>    def '
             '_is_expired(self, f):\n'
             '        """\n'
             "        Take an open cache file `f` and delete it if it's expired.\n"
             '        """\n'
             '        try:\n'
             '            exp = pickle.load(f)\n'
             '        except EOFError:\n'
             '            exp = 0  # An empty file is considered expired.\n'
             '        if exp is not None and exp < time.time():\n'
             '            f.close()  # On Windows a file has to be closed before deleting\n'
             '            self._delete(f.name)\n'
             '            return True\n'
             '        return False\n'
             '</code>\n'
             '\n'
             'Other results are in these files:\n'
             '\n'
             '\n'},
 {'role': 'user', 'content': "Let's analyze collected context first"},
 {'role': 'assistant',
  'content': 'Based on the collected context from the search results, we can analyze the issue and the relevant parts of the Django `FileBasedCache` '
             'implementation to understand the problem and propose a solution.\n'
             '\n'
             '### Issue Analysis\n'
             'The issue arises from a race condition in the `has_key` method of the `FileBasedCache` class. The race condition occurs between checking if a '
             'cache file exists using `os.path.exists(fname)` and attempting to open the file with `open(fname, "rb")`. If the file is deleted (for example, '
             'by another thread or process) after the existence check but before the file is opened, a `FileNotFoundError` is raised. This is particularly '
             'likely to happen if the file is found to be expired in the `_is_expired` method, which deletes the file.\n'
             '\n'
             '### Relevant Code Snippets\n'
             '1. **`has_key` Method**\n'
             '   ```python\n'
             '   def has_key(self, key, version=None):\n'
             '       fname = self._key_to_file(key, version)\n'
             '       if os.path.exists(fname):\n'
             '           with open(fname, "rb") as f:\n'
             '               return not self._is_expired(f)\n'
             '       return False\n'
             '   ```\n'
             '   This method checks if a cache key exists and is not expired. The race condition occurs here.\n'
             '\n'
             '2. **`_is_expired` Method**\n'
             '   ```python\n'
             '   def _is_expired(self, f):\n'
             '       """\n'
             "       Take an open cache file `f` and delete it if it's expired.\n"
             '       """\n'
             '       try:\n'
             '           exp = pickle.load(f)\n'
             '       except EOFError:\n'
             '           exp = 0  # An empty file is considered expired.\n'
             '       if exp is not None and exp < time.time():\n'
             '           f.close()  # On Windows a file has to be closed before deleting\n'
             '           self._delete(f.name)\n'
             '           return True\n'
             '       return False\n'
             '   ```\n'
             "   This method checks if the cache file is expired and deletes it if so. It's called from within `has_key`.\n"
             '\n'
             '### Solution Proposal\n'
             'To solve this race condition, we can modify the `has_key` method to handle the `FileNotFoundError` gracefully. Instead of checking if the file '
             'exists before opening it, we can directly attempt to open the file and catch the `FileNotFoundError`. If the exception is caught, we can safely '
             'assume the file does not exist or was deleted, and thus return `False`.\n'
             '\n'
             '### Proposed Patch\n'
             '```python\n'
             'def has_key(self, key, version=None):\n'
             '    fname = self._key_to_file(key, version)\n'
             '    try:\n'
             '        with open(fname, "rb") as f:\n'
             '            return not self._is_expired(f)\n'
             '    except FileNotFoundError:\n'
             '        return False\n'
             '```\n'
             '\n'
             "This approach eliminates the race condition by removing the gap between checking for the file's existence and opening the file. It also "
             'simplifies the logic by handling the non-existence of the file through exception handling, which is a common Pythonic pattern for dealing with '
             'such scenarios.'},
 {'role': 'user',
  'content': 'Based on your analysis, answer below questions:  - do we need more context: construct search API calls to get more context of the project. '
             "(leave it empty if you don't need more context)  - where are bug locations: buggy files and methods. (leave it empty if you don't have enough "
             'information)'}]
2024-04-05 02:23:24 Model API request cost info: input_tokens=1839, output_tokens=51, cost=0.019920
2024-04-05 02:23:24 Raw model response: ChatCompletionMessage(content='- do we need more context: \n\n- where are bug locations: \n  - **Buggy File**: `django/core/cache/backends/filebased.py`\n  - **Buggy Method**: `has_key` in the `FileBasedCache` class', role='assistant', function_call=None, tool_calls=None)
2024-04-05 02:23:24 Trying to select search APIs in json. Try 1 of 5.
2024-04-05 02:23:26 Model API request cost info: input_tokens=371, output_tokens=41, cost=0.004940
2024-04-05 02:23:26 Raw model response: ChatCompletionMessage(content='{\n    "API_calls": [],\n    "bug_locations":[{"file": "django/core/cache/backends/filebased.py", "class": "FileBasedCache", "method": "has_key"}]\n}', role='assistant', function_call=None, tool_calls=None)
2024-04-05 02:23:26 Raw issue json produced. Writing issue json into file.
2024-04-05 02:23:26 Extracted a valid json. Congratulations!
2024-04-05 02:23:26 Result of dispatch_intent: ('Found 1 methods with name has_key in class FileBasedCache.\nSearch result 1: <file>django/core/cache/backends/filebased.py</file> <class>FileBasedCache</class> <func>has_key</func> <code>    def has_key(self, key, version=None):\n        fname = self._key_to_file(key, version)\n        if os.path.exists(fname):\n            with open(fname, "rb") as f:\n                return not self._is_expired(f)\n        return False\n</code>\n\nOther results are in these files:\n', 'Found 1 methods with name has_key in class FileBasedCache.\n', True)
2024-04-05 02:23:26 Gathered enough information. Invoking write_patch.
2024-04-05 02:23:26 Trying to write a patch. Try 1 of 3.
2024-04-05 02:23:33 Model API request cost info: input_tokens=2191, output_tokens=145, cost=0.026260
2024-04-05 02:23:33 Raw model response: ChatCompletionMessage(content='# modification 1\n```python\n<file>django/core/cache/backends/filebased.py</file>\n<original>    def has_key(self, key, version=None):\n        fname = self._key_to_file(key, version)\n        if os.path.exists(fname):\n            with open(fname, "rb") as f:\n                return not self._is_expired(f)\n        return False\n</original>\n<patched>    def has_key(self, key, version=None):\n        fname = self._key_to_file(key, version)\n        try:\n            with open(fname, "rb") as f:\n                return not self._is_expired(f)\n        except FileNotFoundError:\n            return False\n</patched>\n```', role='assistant', function_call=None, tool_calls=None)
2024-04-05 02:23:33 Raw patch produced in try 1. Writing patch into file.
2024-04-05 02:23:33 [Validation] Applied patch. Going to run test suite.
2024-04-05 02:23:33 Running command: source /home/haifeng/miniconda3/etc/profile.d/conda.sh ; conda activate setup_django__django__4.2 ; ./tests/runtests.py --verbosity 2 cache.tests ; conda deactivate
2024-04-05 02:23:47 [Run test-suite] Result of parsing test log: True
2024-04-05 02:23:47 [Run test-suite] Eval status: {'test_add (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_add_fail_on_pickleerror (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_binary_string (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_read_for_model_instance (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_versioning_add (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_versioning_delete (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_versioning_get_set (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_versioning_get_set_many (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_versioning_has_key (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_versioning_incr_decr (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cache_write_unpicklable_object (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_clear (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_close (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cull (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_cull_delete_when_store_empty (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_custom_key_func (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_data_types (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_decr (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_decr_version (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_default_far_future_timeout (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_default_never_expiring_timeout (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'If None is cached, get() returns it instead of the default.': 'PASSED', 'test_delete (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_delete_many (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_delete_many_no_keys (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_delete_nonexistent (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_expiration (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_float_timeout (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'Passing in None into timeout results in a value that is cached forever': 'PASSED', 'test_get_many (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_get_or_set (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_get_or_set_callable (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_get_or_set_racing (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_get_or_set_version (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_has_key (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_in (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_incr (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_incr_version (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_invalid_key_characters (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_invalid_key_length (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_invalid_with_version_key_length (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_location_multiple_servers (cache.tests.PyLibMCCacheTests)': 'SKIPPED', "Follow memcached's convention where a timeout greater than 30 days is": 'PASSED', 'test_memcached_deletes_key_on_failed_set (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'Nonexistent cache keys return as None/default.': 'PASSED', 'test_prefix (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_pylibmc_client_servers (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_pylibmc_options (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_set_fail_on_pickleerror (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_set_many (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_set_many_empty_data (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_set_many_expiration (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'set_many() returns an empty list when all keys are inserted.': 'PASSED', 'test_set_many_returns_failing_keys (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_simple (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_touch (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_unicode (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'test_zero_cull (cache.tests.PyLibMCCacheTests)': 'SKIPPED', 'Passing in zero into timeout results in a value that is not cached': 'PASSED', 'test_add (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_add_fail_on_pickleerror (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_binary_string (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_read_for_model_instance (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_versioning_add (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_versioning_delete (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_versioning_get_set (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_versioning_get_set_many (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_versioning_has_key (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_versioning_incr_decr (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cache_write_unpicklable_object (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_clear (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_close (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cull (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_cull_delete_when_store_empty (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_custom_key_func (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_data_types (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_decr (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_decr_version (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_default_far_future_timeout (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_default_never_expiring_timeout (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_delete (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_delete_many (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_delete_many_no_keys (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_delete_nonexistent (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_expiration (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_float_timeout (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_get_many (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_get_or_set (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_get_or_set_callable (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_get_or_set_racing (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_get_or_set_version (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_has_key (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_in (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_incr (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_incr_version (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_invalid_key_characters (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_invalid_key_length (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_invalid_with_version_key_length (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_location_multiple_servers (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_memcached_deletes_key_on_failed_set (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_prefix (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_pymemcache_highest_pickle_version (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_pymemcache_options (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_set_fail_on_pickleerror (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_set_many (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_set_many_empty_data (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_set_many_expiration (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_set_many_returns_failing_keys (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_simple (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_touch (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_unicode (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_zero_cull (cache.tests.PyMemcacheCacheTests)': 'SKIPPED', 'test_add (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_add_fail_on_pickleerror (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_binary_string (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_client_class (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_read_for_model_instance (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_versioning_add (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_versioning_delete (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_versioning_get_set (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_versioning_get_set_many (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_versioning_has_key (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_versioning_incr_decr (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cache_write_unpicklable_object (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_clear (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_close (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cull (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_cull_delete_when_store_empty (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_custom_key_func (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_data_types (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_decr (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_decr_version (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_delete (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_delete_many (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_delete_many_no_keys (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_delete_nonexistent (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_expiration (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_float_timeout (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_backend_timeout_method (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_client (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_connection_pool (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_connection_pool_index (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_many (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_or_set (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_or_set_callable (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_or_set_racing (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_get_or_set_version (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_has_key (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_in (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_incr (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_incr_version (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_invalid_key_characters (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_invalid_key_length (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_invalid_with_version_key_length (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_prefix (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_redis_pool_options (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_serializer_dumps (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_set_fail_on_pickleerror (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_set_many (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_set_many_empty_data (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_set_many_expiration (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_simple (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_touch (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_unicode (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_zero_cull (cache.tests.RedisCacheTests)': 'SKIPPED', 'test_close (cache.tests.CacheClosingTests)': 'PASSED', 'test_close_only_initialized (cache.tests.CacheClosingTests)': 'PASSED', 'test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)': 'PASSED', 'test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)': 'PASSED', 'test_all (cache.tests.CacheHandlerTest)': 'PASSED', 'test_nonexistent_alias (cache.tests.CacheHandlerTest)': 'PASSED', 'test_nonexistent_backend (cache.tests.CacheHandlerTest)': 'PASSED', 'Requesting the same alias from separate threads should yield separate': 'PASSED', 'Attempting to retrieve the same alias should yield the same instance.': 'PASSED', 'test_get_cache_key (cache.tests.TestWithTemplateResponse)': 'PASSED', 'test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)': 'PASSED', 'test_patch_vary_headers (cache.tests.TestWithTemplateResponse)': 'PASSED', 'Memory caches that have the TIMEOUT parameter set to `None` in the': 'PASSED', 'Memory caches that have the TIMEOUT parameter set to `None` will set': 'PASSED', 'Caches that have the TIMEOUT parameter undefined in the default': 'PASSED', 'Memory caches that have the TIMEOUT parameter unset will set cache': 'PASSED', 'The default expiration time of a cache key is 5 minutes.': 'PASSED', 'test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)': 'PASSED', 'test_head_caches_correctly (cache.tests.CacheHEADTest)': 'PASSED', 'test_head_with_cached_get (cache.tests.CacheHEADTest)': 'PASSED', 'get_cache_key keys differ by fully-qualified URL instead of path': 'PASSED', 'test_get_cache_key (cache.tests.CacheUtils)': 'PASSED', 'test_get_cache_key_with_query (cache.tests.CacheUtils)': 'PASSED', 'test_learn_cache_key (cache.tests.CacheUtils)': 'PASSED', 'test_patch_cache_control (cache.tests.CacheUtils)': 'PASSED', 'test_patch_vary_headers (cache.tests.CacheUtils)': 'PASSED', 'test_get_cache_key (cache.tests.PrefixedCacheUtils)': 'PASSED', 'test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)': 'PASSED', 'test_learn_cache_key (cache.tests.PrefixedCacheUtils)': 'PASSED', 'test_patch_cache_control (cache.tests.PrefixedCacheUtils)': 'PASSED', 'test_patch_vary_headers (cache.tests.PrefixedCacheUtils)': 'PASSED', 'test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)': 'PASSED', 'test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)': 'PASSED', 'test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)': 'PASSED', 'test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)': 'PASSED', 'test_middleware (cache.tests.PrefixedCacheI18nTest)': 'PASSED', 'test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)': 'PASSED', 'test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)': 'PASSED', 'test_cache_key_i18n_translation (cache.tests.CacheI18nTest)': 'PASSED', 'test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)': 'PASSED', 'test_cache_key_no_i18n (cache.tests.CacheI18nTest)': 'PASSED', 'test_middleware (cache.tests.CacheI18nTest)': 'PASSED', 'test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)': 'PASSED', "Add doesn't do anything in dummy cache backend": 'PASSED', 'clear does nothing for the dummy cache backend': 'PASSED', 'All data types are ignored equally by the dummy cache': 'PASSED', "Dummy cache values can't be decremented": 'PASSED', "Dummy cache versions can't be decremented": 'PASSED', 'Cache deletion is transparently ignored on the dummy cache backend': 'PASSED', 'delete_many does nothing for the dummy cache backend': 'PASSED', 'test_delete_many_invalid_key (cache.tests.DummyCacheTests)': 'PASSED', 'Expiration has no effect on the dummy cache': 'PASSED', 'get_many returns nothing for the dummy cache backend': 'PASSED', 'test_get_many_invalid_key (cache.tests.DummyCacheTests)': 'PASSED', 'test_get_or_set (cache.tests.DummyCacheTests)': 'PASSED', 'test_get_or_set_callable (cache.tests.DummyCacheTests)': 'PASSED', "The has_key method doesn't ever return True for the dummy cache backend": 'PASSED', "The in operator doesn't ever return True for the dummy cache backend": 'PASSED', "Dummy cache values can't be incremented": 'PASSED', "Dummy cache versions can't be incremented": 'PASSED', "Nonexistent keys aren't found in the dummy cache backend": 'PASSED', 'set_many does nothing for the dummy cache backend': 'PASSED', 'test_set_many_invalid_key (cache.tests.DummyCacheTests)': 'PASSED', 'Dummy cache backend ignores cache set calls': 'PASSED', "Dummy cache can't do touch().": 'PASSED', 'Unicode values are ignored by the dummy cache': 'PASSED', 'test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)': 'PASSED', 'test_cache_page_timeout (cache.tests.CacheMiddlewareTest)': 'PASSED', "Responses with 'Cache-Control: private' are not cached.": 'PASSED', 'The constructor is correctly distinguishing between usage of': 'PASSED', 'test_fetch_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)': 'PASSED', 'test_middleware (cache.tests.CacheMiddlewareTest)': 'PASSED', 'The cache instance is different for each thread.': 'PASSED', 'Django must prevent caching of responses that set a user-specific (and': 'PASSED', 'test_update_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)': 'PASSED', 'test_view_decorator (cache.tests.CacheMiddlewareTest)': 'PASSED', 'test_add (cache.tests.LocMemCacheTests)': 'PASSED', 'test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)': 'PASSED', 'test_binary_string (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_versioning_add (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_versioning_delete (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_versioning_get_set (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_versioning_has_key (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)': 'PASSED', 'test_clear (cache.tests.LocMemCacheTests)': 'PASSED', 'test_close (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cull (cache.tests.LocMemCacheTests)': 'PASSED', 'test_cull_delete_when_store_empty (cache.tests.LocMemCacheTests)': 'PASSED', 'test_custom_key_func (cache.tests.LocMemCacheTests)': 'PASSED', 'test_data_types (cache.tests.LocMemCacheTests)': 'PASSED', 'test_decr (cache.tests.LocMemCacheTests)': 'PASSED', 'test_decr_version (cache.tests.LocMemCacheTests)': 'PASSED', 'test_delete (cache.tests.LocMemCacheTests)': 'PASSED', 'test_delete_many (cache.tests.LocMemCacheTests)': 'PASSED', 'test_delete_many_no_keys (cache.tests.LocMemCacheTests)': 'PASSED', 'test_delete_nonexistent (cache.tests.LocMemCacheTests)': 'PASSED', 'test_expiration (cache.tests.LocMemCacheTests)': 'PASSED', 'test_float_timeout (cache.tests.LocMemCacheTests)': 'PASSED', 'test_get_many (cache.tests.LocMemCacheTests)': 'PASSED', 'test_get_or_set (cache.tests.LocMemCacheTests)': 'PASSED', 'test_get_or_set_callable (cache.tests.LocMemCacheTests)': 'PASSED', 'test_get_or_set_racing (cache.tests.LocMemCacheTests)': 'PASSED', 'test_get_or_set_version (cache.tests.LocMemCacheTests)': 'PASSED', 'test_has_key (cache.tests.LocMemCacheTests)': 'PASSED', 'test_in (cache.tests.LocMemCacheTests)': 'PASSED', 'test_incr (cache.tests.LocMemCacheTests)': 'PASSED', 'incr/decr does not modify expiry time (matches memcached behavior)': 'PASSED', 'test_incr_version (cache.tests.LocMemCacheTests)': 'PASSED', 'test_invalid_key_characters (cache.tests.LocMemCacheTests)': 'PASSED', 'test_invalid_key_length (cache.tests.LocMemCacheTests)': 'PASSED', 'test_invalid_with_version_key_length (cache.tests.LocMemCacheTests)': 'PASSED', '#20613/#18541 -- Ensures pickling is done outside of the lock.': 'PASSED', 'get() moves cache keys.': 'PASSED', 'incr() moves cache keys.': 'PASSED', 'set() moves cache keys.': 'PASSED', 'Multiple locmem caches are isolated': 'PASSED', 'test_prefix (cache.tests.LocMemCacheTests)': 'PASSED', 'test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)': 'PASSED', 'test_set_many (cache.tests.LocMemCacheTests)': 'PASSED', 'test_set_many_empty_data (cache.tests.LocMemCacheTests)': 'PASSED', 'test_set_many_expiration (cache.tests.LocMemCacheTests)': 'PASSED', 'test_simple (cache.tests.LocMemCacheTests)': 'PASSED', 'test_touch (cache.tests.LocMemCacheTests)': 'PASSED', 'test_unicode (cache.tests.LocMemCacheTests)': 'PASSED', 'test_zero_cull (cache.tests.LocMemCacheTests)': 'PASSED', 'test_add (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_binary_string (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_dir_permissions (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_versioning_add (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_versioning_delete (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_clear (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_close (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cull (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_cull_delete_when_store_empty (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_custom_key_func (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_data_types (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_decr (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_decr_version (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_delete (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_delete_many (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_delete_many_no_keys (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_delete_nonexistent (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_expiration (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_float_timeout (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_ignores_enoent (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_many (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_or_set (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_or_set_callable (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_or_set_racing (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_get_or_set_version (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_has_key (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_has_key_race_handling (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_in (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_incr (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_incr_version (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_invalid_key_characters (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_invalid_key_length (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_invalid_with_version_key_length (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_prefix (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_set_many (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_set_many_empty_data (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_set_many_expiration (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_simple (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_touch (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_unicode (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_zero_cull (cache.tests.FileBasedCacheTests)': 'PASSED', 'test_add (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_add_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_binary_string (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_dir_permissions (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_read_for_model_instance (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_versioning_add (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_versioning_delete (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_versioning_get_set (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_versioning_get_set_many (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_versioning_has_key (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_versioning_incr_decr (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cache_write_unpicklable_object (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_clear (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_close (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cull (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_cull_delete_when_store_empty (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_custom_key_func (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_data_types (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_decr (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_decr_version (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_delete (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_delete_many (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_delete_many_no_keys (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_delete_nonexistent (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_empty_cache_file_considered_expired (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_expiration (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_float_timeout (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_ignores_enoent (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_many (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_or_set (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_or_set_callable (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_or_set_racing (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_get_or_set_version (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_has_key (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_has_key_race_handling (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_ignores_non_cache_files (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_in (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_incr (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_incr_version (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_invalid_key_characters (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_invalid_key_length (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_invalid_with_version_key_length (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_prefix (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_set_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_set_many (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_set_many_empty_data (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_set_many_expiration (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_simple (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_touch (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_unicode (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_zero_cull (cache.tests.FileBasedCachePathLibTests)': 'PASSED', 'test_add (cache.tests.DBCacheTests)': 'PASSED', 'test_add_fail_on_pickleerror (cache.tests.DBCacheTests)': 'PASSED', 'test_binary_string (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_read_for_model_instance (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_versioning_add (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_versioning_delete (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_versioning_get_set (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_versioning_get_set_many (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_versioning_has_key (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_versioning_incr_decr (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)': 'PASSED', 'test_cache_write_unpicklable_object (cache.tests.DBCacheTests)': 'PASSED', 'test_clear (cache.tests.DBCacheTests)': 'PASSED', 'test_close (cache.tests.DBCacheTests)': 'PASSED', 'test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)': 'PASSED', 'Delete and recreate cache table with legacy behavior (explicitly': 'PASSED', 'test_cull (cache.tests.DBCacheTests)': 'PASSED', 'test_cull_delete_when_store_empty (cache.tests.DBCacheTests)': 'PASSED', 'test_cull_queries (cache.tests.DBCacheTests)': 'PASSED', 'test_custom_key_func (cache.tests.DBCacheTests)': 'PASSED', 'test_data_types (cache.tests.DBCacheTests)': 'PASSED', 'test_decr (cache.tests.DBCacheTests)': 'PASSED', 'test_decr_version (cache.tests.DBCacheTests)': 'PASSED', 'test_delete (cache.tests.DBCacheTests)': 'PASSED', 'The rowcount attribute should not be checked on a closed cursor.': 'PASSED', 'test_delete_many (cache.tests.DBCacheTests)': 'PASSED', 'test_delete_many_no_keys (cache.tests.DBCacheTests)': 'PASSED', 'test_delete_many_num_queries (cache.tests.DBCacheTests)': 'PASSED', 'test_delete_nonexistent (cache.tests.DBCacheTests)': 'PASSED', 'test_expiration (cache.tests.DBCacheTests)': 'PASSED', 'test_float_timeout (cache.tests.DBCacheTests)': 'PASSED', 'test_get_many (cache.tests.DBCacheTests)': 'PASSED', 'test_get_many_num_queries (cache.tests.DBCacheTests)': 'PASSED', 'test_get_or_set (cache.tests.DBCacheTests)': 'PASSED', 'test_get_or_set_callable (cache.tests.DBCacheTests)': 'PASSED', 'test_get_or_set_racing (cache.tests.DBCacheTests)': 'PASSED', 'test_get_or_set_version (cache.tests.DBCacheTests)': 'PASSED', 'test_has_key (cache.tests.DBCacheTests)': 'PASSED', 'test_has_key_query_columns_quoted (cache.tests.DBCacheTests)': 'PASSED', 'test_in (cache.tests.DBCacheTests)': 'PASSED', 'test_incr (cache.tests.DBCacheTests)': 'PASSED', 'test_incr_version (cache.tests.DBCacheTests)': 'PASSED', 'test_invalid_key_characters (cache.tests.DBCacheTests)': 'PASSED', 'test_invalid_key_length (cache.tests.DBCacheTests)': 'PASSED', 'test_invalid_with_version_key_length (cache.tests.DBCacheTests)': 'PASSED', 'test_prefix (cache.tests.DBCacheTests)': 'PASSED', 'test_second_call_doesnt_crash (cache.tests.DBCacheTests)': 'PASSED', 'test_set_fail_on_pickleerror (cache.tests.DBCacheTests)': 'PASSED', 'test_set_many (cache.tests.DBCacheTests)': 'PASSED', 'test_set_many_empty_data (cache.tests.DBCacheTests)': 'PASSED', 'test_set_many_expiration (cache.tests.DBCacheTests)': 'PASSED', 'test_simple (cache.tests.DBCacheTests)': 'PASSED', 'test_touch (cache.tests.DBCacheTests)': 'PASSED', 'test_unicode (cache.tests.DBCacheTests)': 'PASSED', 'test_zero_cull (cache.tests.DBCacheTests)': 'PASSED', 'test_add (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_binary_string (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_clear (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_close (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cull (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cull_delete_when_store_empty (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_cull_queries (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_data_types (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_decr (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_decr_version (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_delete (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_delete_many (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_delete_many_no_keys (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_delete_nonexistent (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_expiration (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_get_many (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_has_key (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_has_key_query_columns_quoted (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_in (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_incr (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_incr_version (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_invalid_with_version_key_length (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_prefix (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_set_many (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_set_many_empty_data (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_simple (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_touch (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_unicode (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED', 'test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)': 'PASSED'}
2024-04-05 02:23:47 [Run test-suite] Eval result: {'FAIL_TO_PASS': {'success': ['test_has_key_race_handling (cache.tests.FileBasedCachePathLibTests)', 'test_has_key_race_handling (cache.tests.FileBasedCacheTests)'], 'failure': []}, 'PASS_TO_PASS': {'success': ['#20613/#18541 -- Ensures pickling is done outside of the lock.', "Add doesn't do anything in dummy cache backend", 'All data types are ignored equally by the dummy cache', 'Attempting to retrieve the same alias should yield the same instance.', 'Cache deletion is transparently ignored on the dummy cache backend', 'Caches that have the TIMEOUT parameter undefined in the default', 'Delete and recreate cache table with legacy behavior (explicitly', 'Django must prevent caching of responses that set a user-specific (and', 'Dummy cache backend ignores cache set calls', "Dummy cache can't do touch().", "Dummy cache values can't be decremented", "Dummy cache values can't be incremented", "Dummy cache versions can't be decremented", "Dummy cache versions can't be incremented", 'Expiration has no effect on the dummy cache', "Follow memcached's convention where a timeout greater than 30 days is", 'If None is cached, get() returns it instead of the default.', 'Memory caches that have the TIMEOUT parameter set to `None` in the', 'Memory caches that have the TIMEOUT parameter set to `None` will set', 'Memory caches that have the TIMEOUT parameter unset will set cache', 'Multiple locmem caches are isolated', 'Nonexistent cache keys return as None/default.', "Nonexistent keys aren't found in the dummy cache backend", 'Passing in None into timeout results in a value that is cached forever', 'Passing in zero into timeout results in a value that is not cached', 'Requesting the same alias from separate threads should yield separate', "Responses with 'Cache-Control: private' are not cached.", 'The cache instance is different for each thread.', 'The constructor is correctly distinguishing between usage of', 'The default expiration time of a cache key is 5 minutes.', "The has_key method doesn't ever return True for the dummy cache backend", "The in operator doesn't ever return True for the dummy cache backend", 'The rowcount attribute should not be checked on a closed cursor.', 'Unicode values are ignored by the dummy cache', 'clear does nothing for the dummy cache backend', 'delete_many does nothing for the dummy cache backend', 'get() moves cache keys.', 'get_cache_key keys differ by fully-qualified URL instead of path', 'get_many returns nothing for the dummy cache backend', 'incr() moves cache keys.', 'incr/decr does not modify expiry time (matches memcached behavior)', 'set() moves cache keys.', 'set_many does nothing for the dummy cache backend', 'set_many() returns an empty list when all keys are inserted.', 'test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)', 'test_add (cache.tests.DBCacheTests)', 'test_add (cache.tests.DBCacheWithTimeZoneTests)', 'test_add (cache.tests.FileBasedCachePathLibTests)', 'test_add (cache.tests.FileBasedCacheTests)', 'test_add (cache.tests.LocMemCacheTests)', 'test_add_fail_on_pickleerror (cache.tests.DBCacheTests)', 'test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)', 'test_add_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)', 'test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)', 'test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)', 'test_all (cache.tests.CacheHandlerTest)', 'test_binary_string (cache.tests.DBCacheTests)', 'test_binary_string (cache.tests.DBCacheWithTimeZoneTests)', 'test_binary_string (cache.tests.FileBasedCachePathLibTests)', 'test_binary_string (cache.tests.FileBasedCacheTests)', 'test_binary_string (cache.tests.LocMemCacheTests)', 'test_cache_dir_permissions (cache.tests.FileBasedCachePathLibTests)', 'test_cache_dir_permissions (cache.tests.FileBasedCacheTests)', 'test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)', 'test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)', 'test_cache_key_i18n_translation (cache.tests.CacheI18nTest)', 'test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)', 'test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)', 'test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)', 'test_cache_key_no_i18n (cache.tests.CacheI18nTest)', 'test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)', 'test_cache_page_timeout (cache.tests.CacheMiddlewareTest)', 'test_cache_read_for_model_instance (cache.tests.DBCacheTests)', 'test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_read_for_model_instance (cache.tests.FileBasedCachePathLibTests)', 'test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)', 'test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)', 'test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)', 'test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)', 'test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)', 'test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)', 'test_cache_versioning_add (cache.tests.DBCacheTests)', 'test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_versioning_add (cache.tests.FileBasedCachePathLibTests)', 'test_cache_versioning_add (cache.tests.FileBasedCacheTests)', 'test_cache_versioning_add (cache.tests.LocMemCacheTests)', 'test_cache_versioning_delete (cache.tests.DBCacheTests)', 'test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_versioning_delete (cache.tests.FileBasedCachePathLibTests)', 'test_cache_versioning_delete (cache.tests.FileBasedCacheTests)', 'test_cache_versioning_delete (cache.tests.LocMemCacheTests)', 'test_cache_versioning_get_set (cache.tests.DBCacheTests)', 'test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_versioning_get_set (cache.tests.FileBasedCachePathLibTests)', 'test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)', 'test_cache_versioning_get_set (cache.tests.LocMemCacheTests)', 'test_cache_versioning_get_set_many (cache.tests.DBCacheTests)', 'test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_versioning_get_set_many (cache.tests.FileBasedCachePathLibTests)', 'test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)', 'test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)', 'test_cache_versioning_has_key (cache.tests.DBCacheTests)', 'test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_versioning_has_key (cache.tests.FileBasedCachePathLibTests)', 'test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)', 'test_cache_versioning_has_key (cache.tests.LocMemCacheTests)', 'test_cache_versioning_incr_decr (cache.tests.DBCacheTests)', 'test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_versioning_incr_decr (cache.tests.FileBasedCachePathLibTests)', 'test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)', 'test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)', 'test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)', 'test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)', 'test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)', 'test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)', 'test_cache_write_unpicklable_object (cache.tests.DBCacheTests)', 'test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)', 'test_cache_write_unpicklable_object (cache.tests.FileBasedCachePathLibTests)', 'test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)', 'test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)', 'test_clear (cache.tests.DBCacheTests)', 'test_clear (cache.tests.DBCacheWithTimeZoneTests)', 'test_clear (cache.tests.FileBasedCachePathLibTests)', 'test_clear (cache.tests.FileBasedCacheTests)', 'test_clear (cache.tests.LocMemCacheTests)', 'test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCachePathLibTests)', 'test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)', 'test_close (cache.tests.CacheClosingTests)', 'test_close (cache.tests.DBCacheTests)', 'test_close (cache.tests.DBCacheWithTimeZoneTests)', 'test_close (cache.tests.FileBasedCachePathLibTests)', 'test_close (cache.tests.FileBasedCacheTests)', 'test_close (cache.tests.LocMemCacheTests)', 'test_close_only_initialized (cache.tests.CacheClosingTests)', 'test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)', 'test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)', 'test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)', 'test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCachePathLibTests)', 'test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)', 'test_cull (cache.tests.DBCacheTests)', 'test_cull (cache.tests.DBCacheWithTimeZoneTests)', 'test_cull (cache.tests.FileBasedCachePathLibTests)', 'test_cull (cache.tests.FileBasedCacheTests)', 'test_cull (cache.tests.LocMemCacheTests)', 'test_cull_delete_when_store_empty (cache.tests.DBCacheTests)', 'test_cull_delete_when_store_empty (cache.tests.DBCacheWithTimeZoneTests)', 'test_cull_delete_when_store_empty (cache.tests.FileBasedCachePathLibTests)', 'test_cull_delete_when_store_empty (cache.tests.FileBasedCacheTests)', 'test_cull_delete_when_store_empty (cache.tests.LocMemCacheTests)', 'test_cull_queries (cache.tests.DBCacheTests)', 'test_cull_queries (cache.tests.DBCacheWithTimeZoneTests)', 'test_custom_key_func (cache.tests.DBCacheTests)', 'test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)', 'test_custom_key_func (cache.tests.FileBasedCachePathLibTests)', 'test_custom_key_func (cache.tests.FileBasedCacheTests)', 'test_custom_key_func (cache.tests.LocMemCacheTests)', 'test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)', 'test_data_types (cache.tests.DBCacheTests)', 'test_data_types (cache.tests.DBCacheWithTimeZoneTests)', 'test_data_types (cache.tests.FileBasedCachePathLibTests)', 'test_data_types (cache.tests.FileBasedCacheTests)', 'test_data_types (cache.tests.LocMemCacheTests)', 'test_decr (cache.tests.DBCacheTests)', 'test_decr (cache.tests.DBCacheWithTimeZoneTests)', 'test_decr (cache.tests.FileBasedCachePathLibTests)', 'test_decr (cache.tests.FileBasedCacheTests)', 'test_decr (cache.tests.LocMemCacheTests)', 'test_decr_version (cache.tests.DBCacheTests)', 'test_decr_version (cache.tests.DBCacheWithTimeZoneTests)', 'test_decr_version (cache.tests.FileBasedCachePathLibTests)', 'test_decr_version (cache.tests.FileBasedCacheTests)', 'test_decr_version (cache.tests.LocMemCacheTests)', 'test_delete (cache.tests.DBCacheTests)', 'test_delete (cache.tests.DBCacheWithTimeZoneTests)', 'test_delete (cache.tests.FileBasedCachePathLibTests)', 'test_delete (cache.tests.FileBasedCacheTests)', 'test_delete (cache.tests.LocMemCacheTests)', 'test_delete_many (cache.tests.DBCacheTests)', 'test_delete_many (cache.tests.DBCacheWithTimeZoneTests)', 'test_delete_many (cache.tests.FileBasedCachePathLibTests)', 'test_delete_many (cache.tests.FileBasedCacheTests)', 'test_delete_many (cache.tests.LocMemCacheTests)', 'test_delete_many_invalid_key (cache.tests.DummyCacheTests)', 'test_delete_many_no_keys (cache.tests.DBCacheTests)', 'test_delete_many_no_keys (cache.tests.DBCacheWithTimeZoneTests)', 'test_delete_many_no_keys (cache.tests.FileBasedCachePathLibTests)', 'test_delete_many_no_keys (cache.tests.FileBasedCacheTests)', 'test_delete_many_no_keys (cache.tests.LocMemCacheTests)', 'test_delete_many_num_queries (cache.tests.DBCacheTests)', 'test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)', 'test_delete_nonexistent (cache.tests.DBCacheTests)', 'test_delete_nonexistent (cache.tests.DBCacheWithTimeZoneTests)', 'test_delete_nonexistent (cache.tests.FileBasedCachePathLibTests)', 'test_delete_nonexistent (cache.tests.FileBasedCacheTests)', 'test_delete_nonexistent (cache.tests.LocMemCacheTests)', 'test_empty_cache_file_considered_expired (cache.tests.FileBasedCachePathLibTests)', 'test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)', 'test_expiration (cache.tests.DBCacheTests)', 'test_expiration (cache.tests.DBCacheWithTimeZoneTests)', 'test_expiration (cache.tests.FileBasedCachePathLibTests)', 'test_expiration (cache.tests.FileBasedCacheTests)', 'test_expiration (cache.tests.LocMemCacheTests)', 'test_fetch_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)', 'test_float_timeout (cache.tests.DBCacheTests)', 'test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)', 'test_float_timeout (cache.tests.FileBasedCachePathLibTests)', 'test_float_timeout (cache.tests.FileBasedCacheTests)', 'test_float_timeout (cache.tests.LocMemCacheTests)', 'test_get_cache_key (cache.tests.CacheUtils)', 'test_get_cache_key (cache.tests.PrefixedCacheUtils)', 'test_get_cache_key (cache.tests.TestWithTemplateResponse)', 'test_get_cache_key_with_query (cache.tests.CacheUtils)', 'test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)', 'test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)', 'test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCachePathLibTests)', 'test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)', 'test_get_ignores_enoent (cache.tests.FileBasedCachePathLibTests)', 'test_get_ignores_enoent (cache.tests.FileBasedCacheTests)', 'test_get_many (cache.tests.DBCacheTests)', 'test_get_many (cache.tests.DBCacheWithTimeZoneTests)', 'test_get_many (cache.tests.FileBasedCachePathLibTests)', 'test_get_many (cache.tests.FileBasedCacheTests)', 'test_get_many (cache.tests.LocMemCacheTests)', 'test_get_many_invalid_key (cache.tests.DummyCacheTests)', 'test_get_many_num_queries (cache.tests.DBCacheTests)', 'test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)', 'test_get_or_set (cache.tests.DBCacheTests)', 'test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)', 'test_get_or_set (cache.tests.DummyCacheTests)', 'test_get_or_set (cache.tests.FileBasedCachePathLibTests)', 'test_get_or_set (cache.tests.FileBasedCacheTests)', 'test_get_or_set (cache.tests.LocMemCacheTests)', 'test_get_or_set_callable (cache.tests.DBCacheTests)', 'test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)', 'test_get_or_set_callable (cache.tests.DummyCacheTests)', 'test_get_or_set_callable (cache.tests.FileBasedCachePathLibTests)', 'test_get_or_set_callable (cache.tests.FileBasedCacheTests)', 'test_get_or_set_callable (cache.tests.LocMemCacheTests)', 'test_get_or_set_racing (cache.tests.DBCacheTests)', 'test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)', 'test_get_or_set_racing (cache.tests.FileBasedCachePathLibTests)', 'test_get_or_set_racing (cache.tests.FileBasedCacheTests)', 'test_get_or_set_racing (cache.tests.LocMemCacheTests)', 'test_get_or_set_version (cache.tests.DBCacheTests)', 'test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)', 'test_get_or_set_version (cache.tests.FileBasedCachePathLibTests)', 'test_get_or_set_version (cache.tests.FileBasedCacheTests)', 'test_get_or_set_version (cache.tests.LocMemCacheTests)', 'test_has_key (cache.tests.DBCacheTests)', 'test_has_key (cache.tests.DBCacheWithTimeZoneTests)', 'test_has_key (cache.tests.FileBasedCachePathLibTests)', 'test_has_key (cache.tests.FileBasedCacheTests)', 'test_has_key (cache.tests.LocMemCacheTests)', 'test_has_key_query_columns_quoted (cache.tests.DBCacheTests)', 'test_has_key_query_columns_quoted (cache.tests.DBCacheWithTimeZoneTests)', 'test_head_caches_correctly (cache.tests.CacheHEADTest)', 'test_head_with_cached_get (cache.tests.CacheHEADTest)', 'test_ignores_non_cache_files (cache.tests.FileBasedCachePathLibTests)', 'test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)', 'test_in (cache.tests.DBCacheTests)', 'test_in (cache.tests.DBCacheWithTimeZoneTests)', 'test_in (cache.tests.FileBasedCachePathLibTests)', 'test_in (cache.tests.FileBasedCacheTests)', 'test_in (cache.tests.LocMemCacheTests)', 'test_incr (cache.tests.DBCacheTests)', 'test_incr (cache.tests.DBCacheWithTimeZoneTests)', 'test_incr (cache.tests.FileBasedCachePathLibTests)', 'test_incr (cache.tests.FileBasedCacheTests)', 'test_incr (cache.tests.LocMemCacheTests)', 'test_incr_version (cache.tests.DBCacheTests)', 'test_incr_version (cache.tests.DBCacheWithTimeZoneTests)', 'test_incr_version (cache.tests.FileBasedCachePathLibTests)', 'test_incr_version (cache.tests.FileBasedCacheTests)', 'test_incr_version (cache.tests.LocMemCacheTests)', 'test_invalid_key_characters (cache.tests.DBCacheTests)', 'test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)', 'test_invalid_key_characters (cache.tests.FileBasedCachePathLibTests)', 'test_invalid_key_characters (cache.tests.FileBasedCacheTests)', 'test_invalid_key_characters (cache.tests.LocMemCacheTests)', 'test_invalid_key_length (cache.tests.DBCacheTests)', 'test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)', 'test_invalid_key_length (cache.tests.FileBasedCachePathLibTests)', 'test_invalid_key_length (cache.tests.FileBasedCacheTests)', 'test_invalid_key_length (cache.tests.LocMemCacheTests)', 'test_invalid_with_version_key_length (cache.tests.DBCacheTests)', 'test_invalid_with_version_key_length (cache.tests.DBCacheWithTimeZoneTests)', 'test_invalid_with_version_key_length (cache.tests.FileBasedCachePathLibTests)', 'test_invalid_with_version_key_length (cache.tests.FileBasedCacheTests)', 'test_invalid_with_version_key_length (cache.tests.LocMemCacheTests)', 'test_learn_cache_key (cache.tests.CacheUtils)', 'test_learn_cache_key (cache.tests.PrefixedCacheUtils)', 'test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)', 'test_middleware (cache.tests.CacheI18nTest)', 'test_middleware (cache.tests.CacheMiddlewareTest)', 'test_middleware (cache.tests.PrefixedCacheI18nTest)', 'test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)', 'test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)', 'test_nonexistent_alias (cache.tests.CacheHandlerTest)', 'test_nonexistent_backend (cache.tests.CacheHandlerTest)', 'test_patch_cache_control (cache.tests.CacheUtils)', 'test_patch_cache_control (cache.tests.PrefixedCacheUtils)', 'test_patch_vary_headers (cache.tests.CacheUtils)', 'test_patch_vary_headers (cache.tests.PrefixedCacheUtils)', 'test_patch_vary_headers (cache.tests.TestWithTemplateResponse)', 'test_prefix (cache.tests.DBCacheTests)', 'test_prefix (cache.tests.DBCacheWithTimeZoneTests)', 'test_prefix (cache.tests.FileBasedCachePathLibTests)', 'test_prefix (cache.tests.FileBasedCacheTests)', 'test_prefix (cache.tests.LocMemCacheTests)', 'test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)', 'test_second_call_doesnt_crash (cache.tests.DBCacheTests)', 'test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)', 'test_set_fail_on_pickleerror (cache.tests.DBCacheTests)', 'test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)', 'test_set_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)', 'test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)', 'test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)', 'test_set_many (cache.tests.DBCacheTests)', 'test_set_many (cache.tests.DBCacheWithTimeZoneTests)', 'test_set_many (cache.tests.FileBasedCachePathLibTests)', 'test_set_many (cache.tests.FileBasedCacheTests)', 'test_set_many (cache.tests.LocMemCacheTests)', 'test_set_many_empty_data (cache.tests.DBCacheTests)', 'test_set_many_empty_data (cache.tests.DBCacheWithTimeZoneTests)', 'test_set_many_empty_data (cache.tests.FileBasedCachePathLibTests)', 'test_set_many_empty_data (cache.tests.FileBasedCacheTests)', 'test_set_many_empty_data (cache.tests.LocMemCacheTests)', 'test_set_many_expiration (cache.tests.DBCacheTests)', 'test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)', 'test_set_many_expiration (cache.tests.FileBasedCachePathLibTests)', 'test_set_many_expiration (cache.tests.FileBasedCacheTests)', 'test_set_many_expiration (cache.tests.LocMemCacheTests)', 'test_set_many_invalid_key (cache.tests.DummyCacheTests)', 'test_simple (cache.tests.DBCacheTests)', 'test_simple (cache.tests.DBCacheWithTimeZoneTests)', 'test_simple (cache.tests.FileBasedCachePathLibTests)', 'test_simple (cache.tests.FileBasedCacheTests)', 'test_simple (cache.tests.LocMemCacheTests)', 'test_touch (cache.tests.DBCacheTests)', 'test_touch (cache.tests.DBCacheWithTimeZoneTests)', 'test_touch (cache.tests.FileBasedCachePathLibTests)', 'test_touch (cache.tests.FileBasedCacheTests)', 'test_touch (cache.tests.LocMemCacheTests)', 'test_unicode (cache.tests.DBCacheTests)', 'test_unicode (cache.tests.DBCacheWithTimeZoneTests)', 'test_unicode (cache.tests.FileBasedCachePathLibTests)', 'test_unicode (cache.tests.FileBasedCacheTests)', 'test_unicode (cache.tests.LocMemCacheTests)', 'test_update_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)', 'test_view_decorator (cache.tests.CacheMiddlewareTest)', 'test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)', 'test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)', 'test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)', 'test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)', 'test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)', 'test_zero_cull (cache.tests.DBCacheTests)', 'test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)', 'test_zero_cull (cache.tests.FileBasedCachePathLibTests)', 'test_zero_cull (cache.tests.FileBasedCacheTests)', 'test_zero_cull (cache.tests.LocMemCacheTests)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}
2024-04-05 02:23:47 [Run test-suite] Resolution status: ResolvedStatus.FULL
2024-04-05 02:23:47 [Run test-suite] Returning True since all resolved.
2024-04-05 02:23:47 [Validation] Finishing. Result is True. Message: .
2024-04-05 02:23:47 Result of dispatch_intent: ('Written a patch that resolves the issue. Congratulations!', 'The tool returned the patch written by another agent.', True)
2024-04-05 02:23:47 Invoked write_patch. Ending workflow.
2024-04-05 02:23:47 Task django__django-16379 completed successfully.
