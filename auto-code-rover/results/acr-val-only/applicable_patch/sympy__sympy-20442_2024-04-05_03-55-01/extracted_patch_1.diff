diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index b03ed4cd88..a3057d313e 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -102,11 +102,25 @@ def get_total_scale_factor(expr):
         return expr
 
     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
+    # Check if the target_units is a subset of the expression's units
+    # This helps in handling cases where conversion does not directly apply but the units are related
     if depmat is None:
-        return expr
+        if all(unit in expr.free_symbols for unit in target_units.free_symbols):
+            return expr
+        else:
+            raise ValueError(f"Cannot convert {expr} to {target_units}. Incompatible units.")
 
+    # Improved handling of the final conversion to ensure correct application of units
     expr_scale_factor = get_total_scale_factor(expr)
-    return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))
+    try:
+        converted_expr = expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))
+        # Validate the converted expression to ensure it does not introduce unexpected units
+        if not converted_expr.has(Quantity):
+            return converted_expr
+        else:
+            raise ValueError("Conversion resulted in an expression with unexpected units.")
+    except ZeroDivisionError:
+        raise ValueError("Conversion failed due to division by zero in unit scaling factors.")
 
 
 def quantity_simplify(expr):
