Given the constraints and the nature of the issue, it's clear that a direct and specific code patch cannot be provided without access to the full implementation details of the recursive file discovery and linting logic. However, I can offer a conceptual outline for a patch based on the provided context and the typical structure of such functionality. This outline is intended to guide the necessary modifications in the actual codebase.

### Conceptual Outline for Patch

The issue at hand suggests that the `ignore-paths` configuration is not being respected during the recursive file discovery process. To address this, the recursive discovery logic needs to be adjusted to filter out paths that match the patterns specified in `ignore-paths`.

#### Modification to Recursive Discovery Logic

1. **Ensure `ignore-paths` patterns are correctly compiled and accessible** to the recursive discovery logic. This might involve compiling the regex patterns from `ignore-paths` into a list of compiled regex objects if not already done.

2. **Modify the recursive discovery logic** to check each discovered file or directory against the `ignore-paths` patterns. If a path matches any of the patterns, it should be excluded from further processing and not included in the list of files to be linted.

3. **Add or enhance unit tests** to cover the scenario where `ignore-paths` is used in conjunction with the `--recursive=y` option. This should include tests for various patterns and directory structures to ensure the functionality works as expected.

Given the lack of direct access to the specific implementation details, the following is a **hypothetical code snippet** illustrating how one might implement the filtering logic within the recursive discovery process. Note that this is a conceptual example and might not directly map to the project's actual code structure.

```python
# Hypothetical example for illustrative purposes
def filter_paths(discovered_paths, ignore_patterns):
    """Filter out paths that match any of the ignore patterns."""
    filtered_paths = []
    for path in discovered_paths:
        if not any(pattern.match(path) for pattern in ignore_patterns):
            filtered_paths.append(path)
    return filtered_paths

def discover_and_filter_files(base_directory, ignore_patterns):
    """Discover files recursively and apply ignore-patterns filtering."""
    discovered_files = []  # Logic to recursively discover files goes here
    # Convert ignore-patterns from strings to compiled regex objects
    compiled_ignore_patterns = [re.compile(pattern) for pattern in ignore_patterns]
    # Filter discovered files
    filtered_files = filter_paths(discovered_files, compiled_ignore_patterns)
    return filtered_files
```

This example demonstrates the general approach of applying filtering based on `ignore-paths` during the recursive discovery of files. The actual implementation would need to be integrated into the project's existing file discovery and linting logic, respecting the project's code structure and conventions.