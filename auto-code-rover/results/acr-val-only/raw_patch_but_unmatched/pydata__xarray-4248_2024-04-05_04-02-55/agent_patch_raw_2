Given the constraints and the hypothetical nature of the solution without direct access to the actual implementation details of `formatting.dataset_repr` and `formatting_html.dataset_repr`, I'll provide a conceptual approach to how one might think about integrating units into the dataset's representation. Since the exact implementation cannot be provided without more specific details about the functions' current implementations, consider this as a guideline for the kind of changes that could be made if one were to access the actual code.

# Conceptual modification for `formatting.dataset_repr`
```python
<file>xarray/core/formatting.py</file>
<original>
# Hypothetical original code snippet where the dataset's string representation is generated.
</original>
<patched>
# Conceptual patched code that includes units in the dataset's string representation.
# This assumes that units are stored in the attributes of data variables and coordinates.
def dataset_repr(dataset):
    summary = []
    for name, variable in dataset.variables.items():
        dims = ", ".join(variable.dims)
        data_type = variable.dtype
        # Attempt to retrieve units from the variable's attributes.
        unit_str = f", in {variable.attrs.get('units', 'unknown units')}" if 'units' in variable.attrs else ""
        summary.append(f"{name}{unit_str} ({dims}) {data_type}")
    return "\\n".join(summary)
</patched>
```

# Conceptual modification for `formatting_html.dataset_repr`
```python
<file>xarray/core/formatting_html.py</file>
<original>
# Hypothetical original code snippet where the dataset's HTML representation is generated.
</original>
<patched>
# Conceptual patched code that includes units in the dataset's HTML representation.
# This assumes that units are stored in the attributes of data variables and coordinates.
def dataset_repr(dataset):
    rows = []
    for name, variable in dataset.variables.items():
        dims = ", ".join(variable.dims)
        data_type = variable.dtype
        # Attempt to retrieve units from the variable's attributes.
        unit_str = f", in {variable.attrs.get('units', 'unknown units')}" if 'units' in variable.attrs else ""
        rows.append(f"<tr><th>{escape(name)}</th><td>{escape(dims)}</td><td>{escape(str(data_type))}</td><td>{escape(unit_str)}</td></tr>")
    header = "<tr><th>Name</th><th>Dimensions</th><th>Data Type</th><th>Units</th></tr>"
    return f"<table>{header}{''.join(rows)}</table>"
</patched>
```

These modifications are conceptual and aim to illustrate the approach to including units in the dataset overview. The actual implementation would require modifying the specific functions responsible for generating the dataset's string and HTML representations, taking into account the current structure and logic of those functions. Additionally, it assumes that units are stored in the attributes of data variables and coordinates, which is a common but not universal practice.