Given the nature of the issue and without direct access to the actual source code or specific details about the implementation of the assertion rewriting logic in the project, I'll provide a hypothetical patch based on common practices in handling byte string comparisons in Python. This patch aims to address the issue by improving the clarity of the assertion failure message when comparing byte strings.

Please note, the actual implementation might differ significantly, and this patch is intended as a conceptual guide to how one might begin to address the reported issue.

# modification 1
```python
<file>src/_pytest/assertion/util.py</file>
<original>
def _diff_text(left: str, right: str, verbose: int = 0) -> str:
    # Existing implementation that generates diff for text comparisons
</original>
<patched>
def _diff_text(left: str, right: str, verbose: int = 0) -> str:
    # Check if we're dealing with byte strings and decode them for clearer diff output
    if isinstance(left, bytes) and isinstance(right, bytes):
        try:
            left = left.decode('utf-8')
            right = right.decode('utf-8')
        except UnicodeDecodeError:
            # Fallback to a representation that shows byte literals if decoding fails
            left = repr(left)
            right = repr(right)
    # Continue with the existing implementation for generating text diffs
</patched>
```

# modification 2
```python
<file>src/_pytest/assertion/rewrite.py</file>
<original>
# Hypothetical location where byte string comparisons are specifically handled
if isinstance(left, bytes) and isinstance(right, bytes):
    # Logic that handles the comparison and possibly contributes to the confusing output
</original>
<patched>
# Improved handling for byte string comparisons to enhance clarity in assertion messages
if isinstance(left, bytes) and isinstance(right, bytes):
    # Convert bytes to a more readable format or use a different approach to generate a clearer diff
    left_repr = ' '.join([f"\\x{b:02x}" for b in left])
    right_repr = ' '.join([f"\\x{b:02x}" for b in right])
    # Use the modified representations in the assertion failure message
</patched>
```

This hypothetical patch aims to improve the readability of assertion failure messages involving byte strings by either attempting to decode them (if they are valid UTF-8) or by providing a clearer hexadecimal representation. This approach should help address the confusion around seeing ASCII ordinal values in the diff output. 

Remember, the effectiveness and applicability of this patch depend on the actual implementation details of the assertion rewriting and comparison logic within the project. Further adjustments may be necessary to align with the project's coding standards and architecture.