{
    "task_id": "django__django-16820",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/django__django/setup_django__django__5.0",
        "env_name": "setup_django__django__5.0",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "./tests/runtests.py --verbosity 2 migrations.test_autodetector migrations.test_optimizer"
    },
    "task_info": {
        "instance_id": "django__django-16820",
        "base_commit": "c61219a7ae051d2baab53f041e00592011fc550c",
        "hints_text": "",
        "created_at": "2023-05-02T06:32:13Z",
        "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2266,10 +2266,9 @@ def test_same_app_circular_fk_dependency_with_unique_together_and_indexes(self):\n             changes,\n             \"eggs\",\n             0,\n-            [\"CreateModel\", \"CreateModel\", \"AddIndex\", \"AlterUniqueTogether\"],\n+            [\"CreateModel\", \"CreateModel\"],\n         )\n         self.assertNotIn(\"unique_together\", changes[\"eggs\"][0].operations[0].options)\n-        self.assertNotIn(\"unique_together\", changes[\"eggs\"][0].operations[1].options)\n         self.assertMigrationDependencies(changes, \"eggs\", 0, [])\n \n     def test_alter_db_table_add(self):\n@@ -2565,6 +2564,9 @@ def test(from_state, to_state, msg):\n \n     def test_create_model_with_indexes(self):\n         \"\"\"Test creation of new model with indexes already defined.\"\"\"\n+        added_index = models.Index(\n+            fields=[\"name\"], name=\"create_model_with_indexes_idx\"\n+        )\n         author = ModelState(\n             \"otherapp\",\n             \"Author\",\n@@ -2573,25 +2575,25 @@ def test_create_model_with_indexes(self):\n                 (\"name\", models.CharField(max_length=200)),\n             ],\n             {\n-                \"indexes\": [\n-                    models.Index(fields=[\"name\"], name=\"create_model_with_indexes_idx\")\n-                ]\n+                \"indexes\": [added_index],\n             },\n         )\n         changes = self.get_changes([], [author])\n-        added_index = models.Index(\n-            fields=[\"name\"], name=\"create_model_with_indexes_idx\"\n-        )\n         # Right number of migrations?\n         self.assertEqual(len(changes[\"otherapp\"]), 1)\n         # Right number of actions?\n         migration = changes[\"otherapp\"][0]\n-        self.assertEqual(len(migration.operations), 2)\n+        self.assertEqual(len(migration.operations), 1)\n         # Right actions order?\n-        self.assertOperationTypes(changes, \"otherapp\", 0, [\"CreateModel\", \"AddIndex\"])\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\"CreateModel\"])\n         self.assertOperationAttributes(changes, \"otherapp\", 0, 0, name=\"Author\")\n         self.assertOperationAttributes(\n-            changes, \"otherapp\", 0, 1, model_name=\"author\", index=added_index\n+            changes,\n+            \"otherapp\",\n+            0,\n+            0,\n+            name=\"Author\",\n+            options={\"indexes\": [added_index]},\n         )\n \n     def test_add_indexes(self):\n@@ -4043,62 +4045,69 @@ def test_add_model_order_with_respect_to_unique_together(self):\n             },\n         )\n \n-    def test_add_model_order_with_respect_to_index_constraint(self):\n-        tests = [\n-            (\n-                \"AddIndex\",\n-                {\n-                    \"indexes\": [\n-                        models.Index(fields=[\"_order\"], name=\"book_order_idx\"),\n-                    ]\n-                },\n-            ),\n-            (\n-                \"AddConstraint\",\n-                {\n-                    \"constraints\": [\n-                        models.CheckConstraint(\n-                            check=models.Q(_order__gt=1),\n-                            name=\"book_order_gt_1\",\n-                        ),\n-                    ]\n-                },\n-            ),\n-        ]\n-        for operation, extra_option in tests:\n-            with self.subTest(operation=operation):\n-                after = ModelState(\n-                    \"testapp\",\n-                    \"Author\",\n-                    [\n-                        (\"id\", models.AutoField(primary_key=True)),\n-                        (\"name\", models.CharField(max_length=200)),\n-                        (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n-                    ],\n-                    options={\n-                        \"order_with_respect_to\": \"book\",\n-                        **extra_option,\n-                    },\n-                )\n-                changes = self.get_changes([], [self.book, after])\n-                self.assertNumberMigrations(changes, \"testapp\", 1)\n-                self.assertOperationTypes(\n-                    changes,\n-                    \"testapp\",\n-                    0,\n-                    [\n-                        \"CreateModel\",\n-                        operation,\n-                    ],\n-                )\n-                self.assertOperationAttributes(\n-                    changes,\n-                    \"testapp\",\n-                    0,\n-                    0,\n-                    name=\"Author\",\n-                    options={\"order_with_respect_to\": \"book\"},\n-                )\n+    def test_add_model_order_with_respect_to_constraint(self):\n+        after = ModelState(\n+            \"testapp\",\n+            \"Author\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=200)),\n+                (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n+            ],\n+            options={\n+                \"order_with_respect_to\": \"book\",\n+                \"constraints\": [\n+                    models.CheckConstraint(\n+                        check=models.Q(_order__gt=1), name=\"book_order_gt_1\"\n+                    ),\n+                ],\n+            },\n+        )\n+        changes = self.get_changes([], [self.book, after])\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            [\"CreateModel\", \"AddConstraint\"],\n+        )\n+        self.assertOperationAttributes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            0,\n+            name=\"Author\",\n+            options={\"order_with_respect_to\": \"book\"},\n+        )\n+\n+    def test_add_model_order_with_respect_to_index(self):\n+        after = ModelState(\n+            \"testapp\",\n+            \"Author\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=200)),\n+                (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n+            ],\n+            options={\n+                \"order_with_respect_to\": \"book\",\n+                \"indexes\": [models.Index(fields=[\"_order\"], name=\"book_order_idx\")],\n+            },\n+        )\n+        changes = self.get_changes([], [self.book, after])\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"CreateModel\"])\n+        self.assertOperationAttributes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            0,\n+            name=\"Author\",\n+            options={\n+                \"order_with_respect_to\": \"book\",\n+                \"indexes\": [models.Index(fields=[\"_order\"], name=\"book_order_idx\")],\n+            },\n+        )\n \n     def test_set_alter_order_with_respect_to_index_constraint_unique_together(self):\n         tests = [\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1172,3 +1172,181 @@ def test_add_remove_index(self):\n             ],\n             [],\n         )\n+\n+    def test_create_model_add_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [models.Index(fields=[\"age\"], name=\"idx_pony_age\")],\n+                    },\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"weight\"], name=\"idx_pony_weight\"),\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [\n+                            models.Index(fields=[\"age\"], name=\"idx_pony_age\"),\n+                            models.Index(fields=[\"weight\"], name=\"idx_pony_weight\"),\n+                        ],\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [\n+                            models.Index(fields=[\"age\"], name=\"idx_pony_age\"),\n+                            models.Index(fields=[\"weight\"], name=\"idx_pony_weight\"),\n+                        ],\n+                    },\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_age\"),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [\n+                            models.Index(fields=[\"weight\"], name=\"idx_pony_weight\"),\n+                        ],\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_remove_index_together_rename_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"index_together\": [(\"age\", \"weight\")],\n+                    },\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"idx_pony_age_weight\", old_fields=(\"age\", \"weight\")\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [\n+                            models.Index(\n+                                fields=[\"age\", \"weight\"], name=\"idx_pony_age_weight\"\n+                            ),\n+                        ],\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_index_together_rename_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                        (\"height\", models.IntegerField()),\n+                        (\"rank\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"index_together\": [(\"age\", \"weight\"), (\"height\", \"rank\")],\n+                    },\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"idx_pony_age_weight\", old_fields=(\"age\", \"weight\")\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                        (\"height\", models.IntegerField()),\n+                        (\"rank\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"index_together\": {(\"height\", \"rank\")},\n+                        \"indexes\": [\n+                            models.Index(\n+                                fields=[\"age\", \"weight\"], name=\"idx_pony_age_weight\"\n+                            ),\n+                        ],\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_rename_index_no_old_fields(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [models.Index(fields=[\"age\"], name=\"idx_pony_age\")],\n+                    },\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"idx_pony_age_new\", old_name=\"idx_pony_age\"\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    name=\"Pony\",\n+                    fields=[\n+                        (\"weight\", models.IntegerField()),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\n+                        \"indexes\": [models.Index(fields=[\"age\"], name=\"idx_pony_age\")],\n+                    },\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"idx_pony_age_new\", old_name=\"idx_pony_age\"\n+                ),\n+            ],\n+        )\n",
        "repo": "django/django",
        "problem_statement": "Squashing migrations with Meta.index_together -> indexes transition should remove deprecation warnings.\nDescription\n\t\nSquashing migrations with Meta.index_together -> Meta.indexes transition should remove deprecation warnings. As far as I'm aware, it's a 4.2 release blocker because you cannot get rid of the index_together deprecation warnings without rewriting migrations, see comment.\n",
        "version": "5.0",
        "FAIL_TO_PASS": [
            "#22275 - A migration with circular FK dependency does not try",
            "Test creation of new model with indexes already defined.",
            "test_add_model_order_with_respect_to_index (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_index)",
            "test_create_model_add_index (migrations.test_optimizer.OptimizerTests.test_create_model_add_index)",
            "test_create_model_index_together_rename_index (migrations.test_optimizer.OptimizerTests.test_create_model_index_together_rename_index)",
            "test_create_model_remove_index (migrations.test_optimizer.OptimizerTests.test_create_model_remove_index)",
            "test_create_model_remove_index_together_rename_index (migrations.test_optimizer.OptimizerTests.test_create_model_remove_index_together_rename_index)"
        ],
        "PASS_TO_PASS": [
            "#22030 - Adding a field with a default should work.",
            "#22300 - Adding an FK in the same \"spot\" as a deleted CharField should",
            "#22435 - Adding a ManyToManyField should not prompt for a default.",
            "#22951 -- Uninstantiated classes with deconstruct are correctly returned",
            "#23100 - ForeignKeys correctly depend on other apps' models.",
            "#23315 - The dependency resolver knows to put all CreateModel",
            "#23322 - The dependency resolver knows to explicitly resolve",
            "#23405 - Adding a NOT NULL and blank `CharField` or `TextField`",
            "#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`",
            "#23415 - The autodetector must correctly deal with custom FK on",
            "#23415 - The autodetector must correctly deal with custom FK on proxy",
            "#23609 - Tests autodetection of nullable to non-nullable alterations.",
            "#23938 - Changing a ManyToManyField into a concrete field",
            "#23938 - Changing a concrete field into a ManyToManyField",
            "#24537 - The order of fields in a model does not influence",
            "A CreateModel that inherits from another isn't reordered to avoid",
            "A dependency to an app with existing migrations uses the",
            "A dependency to an app with no migrations uses __first__.",
            "A migration with a FK between two models of the same app",
            "A migration with a FK between two models of the same app does",
            "A model with a m2m field that specifies a \"through\" model cannot be",
            "A relation used as the primary key is kept as part of CreateModel.",
            "AddField optimizes into CreateModel if it's a FK to a model that's",
            "AddField should NOT optimize into CreateModel if it's an M2M using a",
            "AddField should optimize into CreateModel.",
            "Added fields will be created before using them in index_together.",
            "Added fields will be created before using them in unique_together.",
            "Adding a m2m with a through model and the models that use it should be",
            "AlterField should optimize into AddField.",
            "AlterField should optimize into CreateModel.",
            "Alter_db_table doesn't generate a migration if no changes have been made.",
            "Bases of other models come first.",
            "Bases of proxies come first.",
            "Changing a model's options should make a change.",
            "Changing a proxy model's options should also make a change.",
            "Changing the model managers adds a new operation.",
            "CreateModel and DeleteModel should collapse into nothing.",
            "CreateModel order remains unchanged if the later AddField operation",
            "CreateModel reordering behavior doesn't result in an infinite loop if",
            "CreateModel should absorb RenameModels.",
            "Empty index_together shouldn't generate a migration.",
            "Empty unique_together shouldn't generate a migration.",
            "FK dependencies still work on proxy models.",
            "Field instances are handled correctly by nested deconstruction.",
            "Fields are altered after deleting some index_together.",
            "Fields are altered after deleting some unique_together.",
            "Fields are renamed before updating index_together.",
            "Fields are renamed before updating unique_together.",
            "ForeignKeys are altered _before_ the model they used to",
            "Having a ForeignKey automatically adds a dependency.",
            "Having a circular ForeignKey dependency automatically",
            "If two models with a ForeignKey from one to the other are removed at the",
            "Inheriting models doesn't move *_ptr fields into AddField operations.",
            "Model name is case-insensitive. Changing case doesn't lead to any",
            "Nested deconstruction descends into dict values.",
            "Nested deconstruction descends into lists.",
            "Nested deconstruction descends into tuples.",
            "Nested deconstruction is applied recursively to the args/kwargs of",
            "RemoveField should absorb AlterField",
            "RemoveField should cancel AddField",
            "RemoveField should optimize into CreateModel.",
            "Removed fields will be removed after updating index_together.",
            "Removed fields will be removed after updating unique_together.",
            "Removing a ManyToManyField and the \"through\" model in the same change",
            "Removing a base field takes place before adding a new inherited model",
            "Removing a model that contains a ManyToManyField and the \"through\" model",
            "Removing an FK and the model it targets in the same change must remove",
            "Removing order_with_respect_to when removing the FK too does",
            "RenameField is used if a field is renamed and db_column equal to the",
            "RenameField should optimize into AddField",
            "RenameField should optimize into CreateModel.",
            "RenameField should optimize to the other side of AlterField,",
            "RenameModels should absorb themselves.",
            "Setting order_with_respect_to adds a field.",
            "Setting order_with_respect_to when adding the FK too does",
            "Setting order_with_respect_to when adding the whole model",
            "Swappable models get their CreateModel first.",
            "Test change detection of new constraints.",
            "Test change detection of new indexes.",
            "Test change detection of removed constraints.",
            "Test change detection of removed indexes.",
            "Test change detection of reordering of fields in indexes.",
            "Test creation of new model with constraints already defined.",
            "Tests auto-naming of migrations for graph matching.",
            "Tests autodetection of new fields.",
            "Tests autodetection of new models.",
            "Tests autodetection of removed fields.",
            "Tests autodetection of renamed fields.",
            "Tests autodetection of renamed models that are used in M2M relations as",
            "Tests autodetection of renamed models while simultaneously renaming one",
            "Tests autodetection of renamed models.",
            "Tests custom naming of migrations for graph matching.",
            "Tests deletion of old models.",
            "Tests detection for adding db_table in model's options.",
            "Tests detection for changing db_table in model's options'.",
            "Tests detection for removing db_table in model's options.",
            "Tests unique_together and field removal detection & ordering",
            "Tests unique_together detection.",
            "Tests when model and db_table changes, autodetector must create two",
            "Tests when model changes but db_table stays as-is, autodetector must not",
            "The autodetector correctly deals with managed models.",
            "The autodetector correctly deals with proxy models.",
            "The migration to rename a model pointed to by a foreign key in another",
            "The optimizer does nothing on a single operation,",
            "Trim does not remove dependencies but does remove unwanted apps.",
            "Two instances which deconstruct to the same value aren't considered a",
            "We should be able to optimize away create/delete through a create or",
            "field-level through checking is working. This should manage to collapse",
            "index_together doesn't generate a migration if no changes have been",
            "index_together triggers on ordering changes.",
            "test_add_constraints_with_new_model (migrations.test_autodetector.AutodetectorTests.test_add_constraints_with_new_model)",
            "test_add_custom_fk_with_hardcoded_to (migrations.test_autodetector.AutodetectorTests.test_add_custom_fk_with_hardcoded_to)",
            "test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_add_asking_for_default)",
            "test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_add_not_asking_for_null_addition)",
            "test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_not_asking_for_default)",
            "test_add_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_add_index_together)",
            "test_add_index_with_new_model (migrations.test_autodetector.AutodetectorTests.test_add_index_with_new_model)",
            "test_add_model_order_with_respect_to_constraint (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_constraint)",
            "test_add_model_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_add_model_order_with_respect_to_index_together)",
            "test_add_model_order_with_respect_to_unique_together (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_unique_together)",
            "test_add_remove_index (migrations.test_optimizer.OptimizerTests.test_add_remove_index)",
            "test_alter_alter_field (migrations.test_optimizer.OptimizerTests.test_alter_alter_field)",
            "test_alter_alter_index_model (migrations.test_optimizer.OptimizerTests.test_alter_alter_index_model)",
            "test_alter_alter_owrt_model (migrations.test_optimizer.OptimizerTests.test_alter_alter_owrt_model)",
            "test_alter_alter_table_model (migrations.test_optimizer.OptimizerTests.test_alter_alter_table_model)",
            "test_alter_alter_unique_model (migrations.test_optimizer.OptimizerTests.test_alter_alter_unique_model)",
            "test_alter_db_table_comment_add (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_add)",
            "test_alter_db_table_comment_change (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_change)",
            "test_alter_db_table_comment_no_changes (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_no_changes)",
            "test_alter_db_table_comment_remove (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_remove)",
            "test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests.test_alter_field_to_fk_dependency_other_app)",
            "test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests.test_alter_many_to_many)",
            "test_alter_regex_string_to_compiled_regex (migrations.test_autodetector.AutodetectorTests.test_alter_regex_string_to_compiled_regex)",
            "test_alter_unique_together_fk_to_m2m (migrations.test_autodetector.AutodetectorTests.test_alter_unique_together_fk_to_m2m)",
            "test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests.test_arrange_for_graph_with_multiple_initial)",
            "test_auto (migrations.test_autodetector.MigrationSuggestNameTests.test_auto)",
            "test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests.test_bases_first_mixed_case_app_label)",
            "test_create_alter_index_delete_model (migrations.test_optimizer.OptimizerTests.test_create_alter_index_delete_model)",
            "test_create_alter_index_field (migrations.test_optimizer.OptimizerTests.test_create_alter_index_field)",
            "test_create_alter_model_managers (migrations.test_optimizer.OptimizerTests.test_create_alter_model_managers)",
            "test_create_alter_model_options (migrations.test_optimizer.OptimizerTests.test_create_alter_model_options)",
            "test_create_alter_owrt_delete_model (migrations.test_optimizer.OptimizerTests.test_create_alter_owrt_delete_model)",
            "test_create_alter_owrt_field (migrations.test_optimizer.OptimizerTests.test_create_alter_owrt_field)",
            "test_create_alter_unique_delete_model (migrations.test_optimizer.OptimizerTests.test_create_alter_unique_delete_model)",
            "test_create_alter_unique_field (migrations.test_optimizer.OptimizerTests.test_create_alter_unique_field)",
            "test_create_model_and_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_create_model_and_index_together)",
            "test_create_model_and_remove_model_options (migrations.test_optimizer.OptimizerTests.test_create_model_and_remove_model_options)",
            "test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests.test_create_model_and_unique_together)",
            "test_create_model_rename_index_no_old_fields (migrations.test_optimizer.OptimizerTests.test_create_model_rename_index_no_old_fields)",
            "test_create_with_through_model_separate_apps (migrations.test_autodetector.AutodetectorTests.test_create_with_through_model_separate_apps)",
            "test_default_related_name_option (migrations.test_autodetector.AutodetectorTests.test_default_related_name_option)",
            "test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests.test_different_regex_does_alter)",
            "test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests.test_identical_regex_doesnt_alter)",
            "test_index_together_remove_fk (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_index_together_remove_fk)",
            "test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests.test_managed_to_unmanaged)",
            "test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests.test_many_operations_suffix)",
            "test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests.test_mti_inheritance_model_removal)",
            "test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests.test_no_operations)",
            "test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests.test_no_operations_initial)",
            "test_none_app_label (migrations.test_optimizer.OptimizerTests.test_none_app_label)",
            "test_none_name (migrations.test_autodetector.MigrationSuggestNameTests.test_none_name)",
            "test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests.test_none_name_with_initial_true)",
            "test_operation_with_invalid_chars_in_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests.test_operation_with_invalid_chars_in_suggested_name)",
            "test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests.test_operation_with_no_suggested_name)",
            "test_optimize_elidable_operation (migrations.test_optimizer.OptimizerTests.test_optimize_elidable_operation)",
            "test_parse_number (migrations.test_autodetector.AutodetectorTests.test_parse_number)",
            "test_partly_alter_index_together_decrease (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_partly_alter_index_together_decrease)",
            "test_partly_alter_index_together_increase (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_partly_alter_index_together_increase)",
            "test_partly_alter_unique_together_decrease (migrations.test_autodetector.AutodetectorTests.test_partly_alter_unique_together_decrease)",
            "test_partly_alter_unique_together_increase (migrations.test_autodetector.AutodetectorTests.test_partly_alter_unique_together_increase)",
            "test_proxy_non_model_parent (migrations.test_autodetector.AutodetectorTests.test_proxy_non_model_parent)",
            "test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests.test_proxy_to_mti_with_fk_to_proxy)",
            "test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests.test_proxy_to_mti_with_fk_to_proxy_proxy)",
            "test_remove_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_remove_index_together)",
            "test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests.test_rename_field_foreign_key_to_field)",
            "test_rename_field_with_renamed_model (migrations.test_autodetector.AutodetectorTests.test_rename_field_with_renamed_model)",
            "test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests.test_rename_foreign_object_fields)",
            "test_rename_index (migrations.test_optimizer.OptimizerTests.test_rename_index)",
            "test_rename_index_together_to_index (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index)",
            "test_rename_index_together_to_index_extra_options (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index_extra_options)",
            "test_rename_index_together_to_index_order_fields (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index_order_fields)",
            "test_rename_indexes (migrations.test_autodetector.AutodetectorTests.test_rename_indexes)",
            "test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests.test_rename_referenced_primary_key)",
            "test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests.test_rename_related_field_preserved_db_column)",
            "test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests.test_renamed_referenced_m2m_model_case)",
            "test_set_alter_order_with_respect_to_index_constraint_unique_together (migrations.test_autodetector.AutodetectorTests.test_set_alter_order_with_respect_to_index_constraint_unique_together)",
            "test_set_alter_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_set_alter_order_with_respect_to_index_together)",
            "test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests.test_single_operation)",
            "test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests.test_single_operation_long_name)",
            "test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests.test_supports_functools_partial)",
            "test_swappable (migrations.test_autodetector.AutodetectorTests.test_swappable)",
            "test_swappable_changed (migrations.test_autodetector.AutodetectorTests.test_swappable_changed)",
            "test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests.test_swappable_circular_multi_mti)",
            "test_swappable_lowercase (migrations.test_autodetector.AutodetectorTests.test_swappable_lowercase)",
            "test_swappable_many_to_many_model_case (migrations.test_autodetector.AutodetectorTests.test_swappable_many_to_many_model_case)",
            "test_swapping_fields_names (migrations.test_optimizer.OptimizerTests.test_swapping_fields_names)",
            "test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests.test_two_create_models)",
            "test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests.test_two_create_models_with_initial_true)",
            "test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests.test_two_operations)",
            "test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests.test_unmanaged_delete)",
            "test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests.test_unmanaged_to_managed)",
            "unique_together also triggers on ordering changes.",
            "unique_together doesn't generate a migration if no"
        ],
        "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
        "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -303,6 +303,71 @@ def reduce(self, operation, app_label):\n                         managers=self.managers,\n                     ),\n                 ]\n+        elif (\n+            isinstance(operation, IndexOperation)\n+            and self.name_lower == operation.model_name_lower\n+        ):\n+            if isinstance(operation, AddIndex):\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=self.fields,\n+                        options={\n+                            **self.options,\n+                            \"indexes\": [\n+                                *self.options.get(\"indexes\", []),\n+                                operation.index,\n+                            ],\n+                        },\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n+            elif isinstance(operation, RemoveIndex):\n+                options_indexes = [\n+                    index\n+                    for index in self.options.get(\"indexes\", [])\n+                    if index.name != operation.name\n+                ]\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=self.fields,\n+                        options={\n+                            **self.options,\n+                            \"indexes\": options_indexes,\n+                        },\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n+            elif isinstance(operation, RenameIndex) and operation.old_fields:\n+                options_index_together = {\n+                    fields\n+                    for fields in self.options.get(\"index_together\", [])\n+                    if fields != operation.old_fields\n+                }\n+                if options_index_together:\n+                    self.options[\"index_together\"] = options_index_together\n+                else:\n+                    self.options.pop(\"index_together\", None)\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=self.fields,\n+                        options={\n+                            **self.options,\n+                            \"indexes\": [\n+                                *self.options.get(\"indexes\", []),\n+                                models.Index(\n+                                    fields=operation.old_fields, name=operation.new_name\n+                                ),\n+                            ],\n+                        },\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n         return super().reduce(operation, app_label)\n \n \n",
        "pr_link": "https://github.com/django/django/pull/16820"
    }
}