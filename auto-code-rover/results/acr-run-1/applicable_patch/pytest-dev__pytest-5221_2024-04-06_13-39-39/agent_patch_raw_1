To address the issue of displaying fixture scopes with `pytest --fixtures`, we need to make modifications in at least two locations based on the retrieved context: the fixture definition to ensure the scope is accessible and displayed, and the command-line argument parsing to include this information when the `--fixtures` argument is used.

### Modification 1: Enhance Fixture Definition Display

First, we'll modify the `FixtureDef` class to include a method that returns a string representation of the fixture, including its scope. This is a foundational step to make the scope information readily available.

```python
<file>src/_pytest/fixtures.py</file>
<original>def __repr__(self):
</original>
<patched>def __repr__(self):
    return f"{self.func.__name__} (scope='{self.scope}')"</patched>
```

### Modification 2: Update Command-Line Argument Parsing to Display Fixture Scopes

Next, we need to ensure that when the `--fixtures` argument is used, the enhanced string representation of fixtures, including their scopes, is utilized. This might involve modifying the part of the code that handles the `--fixtures` argument to ensure it calls the updated `__repr__` method of `FixtureDef` or directly accesses the `scope` attribute of fixtures. Since the specific location and method to modify for this are not directly provided, a hypothetical patch is outlined below based on the typical structure of such functionality.

```python
<file>src/_pytest/config/argparsing.py</file>
<original>...</original>
<patched># Hypothetical patch, assuming there's a method that handles the --fixtures argument
def display_fixtures(self):
    # Assuming there's a collection or method to get all registered fixtures
    for fixture in self.get_all_fixtures():
        print(fixture)  # This will now include the scope in the output due to the modified __repr__ in FixtureDef
</patched>
```

### Note
The second modification is speculative and assumes a structure for how `pytest` might handle displaying fixtures based on the `--fixtures` argument. The actual implementation would require identifying the correct location in the codebase where fixtures are listed in response to the `--fixtures` command-line argument, and ensuring that the updated `__repr__` method or direct access to the `scope` attribute is used to include scope information in the output.

These modifications aim to address the issue by ensuring that the scope of each fixture is included in its string representation and that this enhanced representation is used when fixtures are displayed with the `--fixtures` argument.