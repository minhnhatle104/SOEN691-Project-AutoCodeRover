# modification 1
```python
<file>django/contrib/auth/tokens.py</file>
<original>    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
        invalidates the token.

        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)</original>
<patched>    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        3. Including the user's email ensures the token is invalidated if the
           email is changed.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
        invalidates the token.

        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
        # Check if the user model has an email field and include it in the hash if present.
        user_email = getattr(user, 'email', '')
        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + user_email</patched>
```

This modification addresses the issue by including the user's email in the hash value generated by `_make_hash_value` in the `PasswordResetTokenGenerator` class. It ensures that if the user's email changes, any previously generated password reset tokens will be invalidated, as the hash value will no longer match. The patch also gracefully handles cases where the user model might not have an email field by using `getattr` to safely attempt to access the `email` attribute, defaulting to an empty string if it's not present.