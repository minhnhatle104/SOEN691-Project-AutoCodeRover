Based on the analysis and the provided code, the issue seems to stem from the handling of the `imported_members` parameter in the `get_members` function, specifically, the condition that determines whether a member is considered imported and should be skipped. The original condition `if imported or getattr(value, '__module__', None) == obj.__name__:` does not correctly filter out imported members when `imported_members` is set to `False`. This is because `obj.__name__` should actually be compared to the module name of `obj`, not its `__name__` attribute, which typically represents the name of the object itself, not its module.

Here's a proposed patch to address this issue:

# modification 1
```python
<file>sphinx/ext/autosummary/generate.py</file>
<original>if imported or getattr(value, '__module__', None) == obj.__name__:</original>
<patched>if imported or getattr(value, '__module__', None) == getattr(obj, '__module__', None):</patched>
```

This modification ensures that the comparison is made against the module name of the `obj` (the object being documented), which should correctly identify imported members based on whether their module matches the module of the object being documented. This change should ensure that when `imported_members` is `False`, members that are imported from other modules are correctly excluded from the documentation generated by `autosummary`.