# modification 1
```python
<file>django/forms/formsets.py</file>
<original>self._non_form_errors = self.error_class()</original>
<patched>self._non_form_errors = self.error_class(error_class='nonform')</patched>
```

# modification 2
```python
<file>django/forms/utils.py</file>
<original>return format_html(
    '&lt;ul class="{}"&gt;{}</ul>',
    self.error_class,
    format_html_join('', '&lt;li&gt;{}&lt;/li&gt;', ((e,) for e in self))
)</original>
<patched>return format_html(
    '&lt;ul class="{}"&gt;{}</ul>',
    self.error_class if hasattr(self, 'error_class') and self.error_class else 'errorlist',
    format_html_join('', '&lt;li&gt;{}&lt;/li&gt;', ((e,) for e in self))
)</patched>
```

These modifications aim to address the issue by adding a `nonform` CSS class for non-form errors in `FormSets`. The first modification ensures that when `ErrorList` instances are created for non-form errors in `FormSets`, they are initialized with an `error_class` of `'nonform'`. The second modification adjusts the rendering of `ErrorList` to use the provided `error_class` if it exists, defaulting to `'errorlist'` otherwise. This ensures that non-form errors are appropriately styled with the `nonform` CSS class, allowing developers to distinguish between form field errors, non-field errors, and non-form errors when rendering error messages.