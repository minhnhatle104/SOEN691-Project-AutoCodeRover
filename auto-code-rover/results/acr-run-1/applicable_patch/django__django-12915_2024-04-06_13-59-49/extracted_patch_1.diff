diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py
index 711d8864ad..abf12130c0 100644
--- a/django/contrib/staticfiles/handlers.py
+++ b/django/contrib/staticfiles/handlers.py
@@ -69,6 +69,20 @@ class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):
         return super().__call__(environ, start_response)
 
 
+from urllib.parse import urlparse
+from django.core.handlers.asgi import ASGIHandler
+
+class StaticFilesHandlerMixin:
+    handles_files = True
+
+    def get_base_url(self):
+        # Implementation of getting base URL
+        pass
+
+    def _should_handle(self, path):
+        # Implementation to decide if the path should be handled
+        pass
+
 class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):
     """
     ASGI application which wraps another and intercepts requests for static
@@ -82,7 +96,16 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):
         # Only even look at HTTP requests
         if scope['type'] == 'http' and self._should_handle(scope['path']):
             # Serve static content
-            # (the one thing super() doesn't do is __call__, apparently)
-            return await super().__call__(scope, receive, send)
+            return await self.get_response_async(scope, receive, send)
         # Hand off to the main app
         return await self.application(scope, receive, send)
+
+    async def get_response_async(self, scope, receive, send):
+        # Implementation for async response
+        path = scope['path']
+        if self._should_handle(path):
+            response = await self.serve(scope, receive, send)
+            await send(response)
+        else:
+            await send({'type': 'http.response.start', 'status': 404})
+            await send({'type': 'http.response.body', 'body': b'File not found'})
