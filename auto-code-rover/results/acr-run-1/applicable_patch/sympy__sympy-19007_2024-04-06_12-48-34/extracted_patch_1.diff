diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index b821c42845..830fbb5ce5 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -233,17 +233,27 @@ def transpose(self):
         return self._eval_transpose()
 
     def _entry(self, i, j, **kwargs):
+        from sympy import Integer
         # Find row entry
-        for row_block, numrows in enumerate(self.rowblocksizes):
-            if (i < numrows) != False:
+        row_block = None
+        col_block = None
+        for rb, numrows in enumerate(self.rowblocksizes):
+            if isinstance(i, Integer) and i < numrows:
+                row_block = rb
+                break
+            elif not isinstance(i, Integer):
+                row_block = rb  # Assume symbolic index could belong to any block
                 break
             else:
                 i -= numrows
-        for col_block, numcols in enumerate(self.colblocksizes):
-            if (j < numcols) != False:
+        for cb, numcols in enumerate(self.colblocksizes):
+            if j < numcols:
+                col_block = cb
                 break
             else:
                 j -= numcols
+        if row_block is None or col_block is None:
+            raise IndexError("BlockMatrix index out of range")
         return self.blocks[row_block, col_block][i, j]
 
     @property
