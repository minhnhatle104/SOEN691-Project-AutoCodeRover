# modification 1
```python
<file>django/dispatch/dispatcher.py</file>
<original>            except Exception as err:
                responses.append((receiver, err))</original>
<patched>            except Exception as err:
                # Import logging library
                import logging
                # Create or get a logger instance
                logger = logging.getLogger(__name__)
                # Log the exception with appropriate message
                logger.exception(f"Exception raised by receiver {receiver}: {err}")
                responses.append((receiver, err))</patched>
```

This patch adds logging for exceptions caught in the `send_robust` method of the `Signal` class. It uses Python's built-in `logging` library to log exceptions at the exception level, which is appropriate for capturing unexpected errors. The logger is named after the module's `__name__`, ensuring that the logs are easily identifiable as coming from the Django dispatch system. The log message includes the receiver that raised the exception and the exception message itself, providing context that can help in debugging issues related to signal handling.