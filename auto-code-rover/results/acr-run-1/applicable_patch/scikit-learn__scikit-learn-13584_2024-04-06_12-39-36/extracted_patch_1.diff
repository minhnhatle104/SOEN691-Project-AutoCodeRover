diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index be664d5b5..c9abab02f 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -1931,7 +1931,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
                  max_iter=100, class_weight=None, n_jobs=None, verbose=0,
                  refit=True, intercept_scaling=1., multi_class='warn',
                  random_state=None, l1_ratios=None):
-        self.Cs = Cs
+        self.Cs = np.array(Cs).tolist() if isinstance(Cs, np.ndarray) else Cs
         self.fit_intercept = fit_intercept
         self.cv = cv
         self.dual = dual
@@ -2070,18 +2070,18 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
 
         fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,
                                **_joblib_parallel_args(prefer=prefer))(
-            path_func(X, y, train, test, pos_class=label, Cs=self.Cs,
-                      fit_intercept=self.fit_intercept, penalty=self.penalty,
-                      dual=self.dual, solver=solver, tol=self.tol,
-                      max_iter=self.max_iter, verbose=self.verbose,
-                      class_weight=class_weight, scoring=self.scoring,
-                      multi_class=multi_class,
-                      intercept_scaling=self.intercept_scaling,
-                      random_state=self.random_state,
-                      max_squared_sum=max_squared_sum,
-                      sample_weight=sample_weight,
-                      l1_ratio=l1_ratio
-                      )
+            path_func(X, y, train, test, pos_class=label, Cs=np.array(self.Cs).tolist(),
+                                  fit_intercept=self.fit_intercept, penalty=self.penalty,
+                                  dual=self.dual, solver=solver, tol=self.tol,
+                                  max_iter=self.max_iter, verbose=self.verbose,
+                                  class_weight=class_weight, scoring=self.scoring,
+                                  multi_class=multi_class,
+                                  intercept_scaling=self.intercept_scaling,
+                                  random_state=self.random_state,
+                                  max_squared_sum=max_squared_sum,
+                                  sample_weight=sample_weight,
+                                  l1_ratio=l1_ratio
+                                  )
             for label in iter_encoded_labels
             for train, test in folds
             for l1_ratio in l1_ratios_)
