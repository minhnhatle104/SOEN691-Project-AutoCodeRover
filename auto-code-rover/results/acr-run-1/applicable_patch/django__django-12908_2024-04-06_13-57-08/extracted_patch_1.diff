diff --git a/django/db/models/query.py b/django/db/models/query.py
index e0eeccefa6..28cdc73397 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -996,12 +996,16 @@ class QuerySet:
         clone.query.combinator_all = all
         return clone
 
-    def union(self, *other_qs, all=False):
+    def union(self, *other_qs, all=False, _preserve_distinct_fields=False):
         # If the query is an EmptyQuerySet, combine all nonempty querysets.
         if isinstance(self, EmptyQuerySet):
             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
-            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
-        return self._combinator_query('union', *other_qs, all=all)
+            combined = qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
+        else:
+            combined = self._combinator_query('union', *other_qs, all=all)
+        if _preserve_distinct_fields:
+            combined.query.add_distinct_fields(*self.query.distinct_fields)
+        return combined
 
     def intersection(self, *other_qs):
         # If any query is an EmptyQuerySet, return it.
@@ -1142,6 +1146,8 @@ class QuerySet:
             "Cannot create distinct fields once a slice has been taken."
         obj = self._chain()
         obj.query.add_distinct_fields(*field_names)
+        # Mark the queryset to preserve distinct fields after union
+        obj._preserve_distinct_fields = True
         return obj
 
     def extra(self, select=None, where=None, params=None, tables=None,
