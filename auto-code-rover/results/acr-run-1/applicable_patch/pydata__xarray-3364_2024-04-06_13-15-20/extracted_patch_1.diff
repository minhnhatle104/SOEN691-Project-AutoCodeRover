diff --git a/xarray/core/concat.py b/xarray/core/concat.py
index ecae2566..9a0d49c5 100644
--- a/xarray/core/concat.py
+++ b/xarray/core/concat.py
@@ -16,6 +16,7 @@ def concat(
     positions=None,
     fill_value=dtypes.NA,
     join="outer",
+    ignore_missing_vars=False,
 ):
     """Concatenate xarray objects along a new or existing dimension.
 
@@ -102,9 +103,8 @@ def concat(
     merge
     auto_combine
     """
-    # TODO: add ignore_index arguments copied from pandas.concat
-    # TODO: support concatenating scalar coordinates even if the concatenated
-    # dimension already exists
+    # Added support for ignoring missing variables during concatenation
+        # This allows for a more flexible concatenation process, similar to pd.concat's behavior
     from .dataset import Dataset
     from .dataarray import DataArray
 
@@ -120,15 +120,17 @@ def concat(
         )
 
     if isinstance(first_obj, DataArray):
-        f = _dataarray_concat
+        def f(*args, **kwargs):
+            return _dataarray_concat(*args, **kwargs, ignore_missing_vars=ignore_missing_vars)
     elif isinstance(first_obj, Dataset):
-        f = _dataset_concat
+        def f(*args, **kwargs):
+            return _dataset_concat(*args, **kwargs, ignore_missing_vars=ignore_missing_vars)
     else:
         raise TypeError(
             "can only concatenate xarray Dataset and DataArray "
             "objects, got %s" % type(first_obj)
         )
-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing_vars)
 
 
 def _calc_concat_dim_coord(dim):
