diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..4a5a1a6a8 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -123,24 +123,37 @@ def exit(msg: str, returncode: Optional[int] = None) -> "NoReturn":
 @_with_exception(Skipped)
 def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
     """Skip an executing test with the given message.
-
-    This function should be called only during testing (setup, call or teardown) or
-    during collection by using the ``allow_module_level`` flag.  This function can
-    be called in doctests as well.
-
-    :param bool allow_module_level:
-        Allows this function to be called at module level, skipping the rest
-        of the module. Defaults to False.
-
-    .. note::
-        It is better to use the :ref:`pytest.mark.skipif ref` marker when
-        possible to declare a test to be skipped under certain conditions
-        like mismatching platforms or dependencies.
-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
-        to skip a doctest statically.
-    """
+    
+        This function should be called only during testing (setup, call or teardown) or
+        during collection by using the ``allow_module_level`` flag.  This function can
+        be called in doctests as well.
+    
+        :param bool allow_module_level:
+            Allows this function to be called at module level, skipping the rest
+            of the module. Defaults to False.
+    
+        .. note::
+            While it is generally recommended to use the :ref:`pytest.mark.skipif ref` marker to declare a test to be skipped under certain conditions,
+            such as mismatching platforms or dependencies, there are scenarios where skipping at the module level is necessary, especially when dealing with version-specific features.
+            In such cases, using `skip` with `allow_module_level=True` is the appropriate approach. This method allows for more dynamic control over test execution, such as skipping entire modules based on runtime conditions like Python version checks.
+            
+            For skipping doctests statically, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
+            <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_).
+            
+            To simplify module-level skipping, consider using the proposed `skip_module` function, which is a wrapper around `skip` with `allow_module_level=True`, providing a more intuitive API for this common use case.
+        """
     __tracebackhide__ = True
+    def skip_module(reason: str):
+        """
+        Skip an entire module with the given reason.
+    
+        This is a convenience function that wraps the `skip` function with `allow_module_level=True`,
+        making it easier to skip entire modules based on runtime conditions, such as Python version incompatibility.
+    
+        :param str reason: The reason for skipping the module.
+        """
+        skip(msg=reason, allow_module_level=True)
+    
     raise Skipped(msg=msg, allow_module_level=allow_module_level)
 
 
