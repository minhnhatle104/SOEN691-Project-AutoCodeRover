# modification 1
```python
<file>sympy/functions/combinatorial/numbers.py</file>
<original>    def eval(cls, n, k_sym=None, symbols=None):
        if n.is_Integer and n.is_nonnegative:
            if k_sym is None:
                return Integer(cls._bell(int(n)))
            elif symbols is None:
                return cls._bell_poly(int(n)).subs(_sym, k_sym)
            else:
                r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)
                return r</original>
<patched>    def eval(cls, n, k_sym=None, symbols=None):
        if n.is_Infinity:
            return S.Infinity
        if n.is_Integer and n.is_nonnegative:
            if k_sym is None:
                return Integer(cls._bell(int(n)))
            elif symbols is None:
                return cls._bell_poly(int(n)).subs(_sym, k_sym)
            else:
                r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)
                return r</patched>
```

This patch adds a condition to the `eval` method of the `bell` class to check if the input `n` is infinity (`oo`). If `n` is infinity, the method now returns `S.Infinity`, ensuring that `bell(n).limit(n, oo)` evaluates to infinity as expected. This change addresses the issue where `bell(n).limit(n, oo)` was previously returning `bell(oo)` unevaluated.