{
    "task_id": "django__django-11133",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/django__django/setup_django__django__3.0",
        "env_name": "setup_django__django__3.0",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "./tests/runtests.py --verbosity 2 httpwrappers.tests"
    },
    "task_info": {
        "instance_id": "django__django-11133",
        "base_commit": "879cc3da6249e920b8d54518a0ae06de835d7373",
        "hints_text": "I guess HttpResponseBase.make_bytes \u200bcould be adapted to deal with memoryview objects by casting them to bytes. In all cases simply wrapping the memoryview in bytes works as a workaround HttpResponse(bytes(model.binary_field)).\nThe fact make_bytes would still use force_bytes if da56e1bac6449daef9aeab8d076d2594d9fd5b44 didn't refactor it and that d680a3f4477056c69629b0421db4bb254b8c69d0 added memoryview support to force_bytes strengthen my assumption that make_bytes should be adjusted as well.\nI'll try to work on this.",
        "created_at": "2019-03-27T06:48:09Z",
        "test_patch": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,6 +366,10 @@ def test_non_string_content(self):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
        "repo": "django/django",
        "problem_statement": "HttpResponse doesn't handle memoryview objects\nDescription\n\t\nI am trying to write a BinaryField retrieved from the database into a HttpResponse. When the database is Sqlite this works correctly, but Postgresql returns the contents of the field as a memoryview object and it seems like current Django doesn't like this combination:\nfrom django.http import HttpResponse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n# String content\nresponse = HttpResponse(\"My Content\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nresponse.content\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n# Out: b'My Content'\n# This is correct\n# Bytes content\nresponse = HttpResponse(b\"My Content\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \nresponse.content\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n# Out: b'My Content'\n# This is also correct\n# memoryview content\nresponse = HttpResponse(memoryview(b\"My Content\"))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \nresponse.content\n# Out: b'<memory at 0x7fcc47ab2648>'\n# This is not correct, I am expecting b'My Content'\n",
        "version": "3.0",
        "FAIL_TO_PASS": [
            "test_memoryview_content (httpwrappers.tests.HttpResponseTests)"
        ],
        "PASS_TO_PASS": [
            "#13572 - QueryDict with a non-default encoding",
            "A copy of a QueryDict is mutable.",
            "Make sure HttpResponseRedirect works with lazy strings.",
            "Regression test for #8278: QueryDict.update(QueryDict)",
            "Semicolons and commas are decoded.",
            "Semicolons and commas are encoded.",
            "Test QueryDict with one key/value pair",
            "Test QueryDict with two key/value pairs with same keys.",
            "test_basic_mutable_operations (httpwrappers.tests.QueryDictTests)",
            "test_cookie_edgecases (httpwrappers.tests.CookieTests)",
            "test_create_with_no_args (httpwrappers.tests.QueryDictTests)",
            "test_dict_behavior (httpwrappers.tests.HttpResponseTests)",
            "test_duplicates_in_fromkeys_iterable (httpwrappers.tests.QueryDictTests)",
            "test_file_interface (httpwrappers.tests.HttpResponseTests)",
            "test_fromkeys_empty_iterable (httpwrappers.tests.QueryDictTests)",
            "test_fromkeys_is_immutable_by_default (httpwrappers.tests.QueryDictTests)",
            "test_fromkeys_mutable_override (httpwrappers.tests.QueryDictTests)",
            "test_fromkeys_noniterable (httpwrappers.tests.QueryDictTests)",
            "test_fromkeys_with_nondefault_encoding (httpwrappers.tests.QueryDictTests)",
            "test_fromkeys_with_nonempty_value (httpwrappers.tests.QueryDictTests)",
            "test_headers_type (httpwrappers.tests.HttpResponseTests)",
            "test_httponly_after_load (httpwrappers.tests.CookieTests)",
            "test_immutability (httpwrappers.tests.QueryDictTests)",
            "test_immutable_basic_operations (httpwrappers.tests.QueryDictTests)",
            "test_immutable_get_with_default (httpwrappers.tests.QueryDictTests)",
            "test_invalid_cookies (httpwrappers.tests.CookieTests)",
            "test_invalid_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_iter_content (httpwrappers.tests.HttpResponseTests)",
            "test_iterator_isnt_rewound (httpwrappers.tests.HttpResponseTests)",
            "test_json_response_custom_encoder (httpwrappers.tests.JsonResponseTests)",
            "test_json_response_list (httpwrappers.tests.JsonResponseTests)",
            "test_json_response_non_ascii (httpwrappers.tests.JsonResponseTests)",
            "test_json_response_passing_arguments_to_json_dumps (httpwrappers.tests.JsonResponseTests)",
            "test_json_response_raises_type_error_with_default_setting (httpwrappers.tests.JsonResponseTests)",
            "test_json_response_text (httpwrappers.tests.JsonResponseTests)",
            "test_json_response_uuid (httpwrappers.tests.JsonResponseTests)",
            "test_lazy_content (httpwrappers.tests.HttpResponseTests)",
            "test_load_dict (httpwrappers.tests.CookieTests)",
            "test_long_line (httpwrappers.tests.HttpResponseTests)",
            "test_missing_key (httpwrappers.tests.QueryDictTests)",
            "test_mutable_delete (httpwrappers.tests.QueryDictTests)",
            "test_newlines_in_headers (httpwrappers.tests.HttpResponseTests)",
            "test_non_string_content (httpwrappers.tests.HttpResponseTests)",
            "test_nonstandard_keys (httpwrappers.tests.CookieTests)",
            "test_not_allowed (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_not_allowed_repr (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_not_allowed_repr_no_content_type (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_not_modified (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_not_modified_repr (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_pickle (httpwrappers.tests.CookieTests)",
            "test_pickle (httpwrappers.tests.QueryDictTests)",
            "test_python_cookies (httpwrappers.tests.CookieTests)",
            "test_querydict_fromkeys (httpwrappers.tests.QueryDictTests)",
            "test_redirect (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests)",
            "test_repeated_nonstandard_keys (httpwrappers.tests.CookieTests)",
            "test_response (httpwrappers.tests.FileCloseTests)",
            "test_samesite (httpwrappers.tests.CookieTests)",
            "test_stream_interface (httpwrappers.tests.HttpResponseTests)",
            "test_streaming_response (httpwrappers.tests.FileCloseTests)",
            "test_streaming_response (httpwrappers.tests.StreamingHttpResponseTests)",
            "test_unsafe_redirect (httpwrappers.tests.HttpResponseTests)",
            "test_urlencode (httpwrappers.tests.QueryDictTests)",
            "test_urlencode_int (httpwrappers.tests.QueryDictTests)"
        ],
        "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
        "patch": "diff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -229,7 +229,7 @@ def make_bytes(self, value):\n         # Handle string types -- we can't rely on force_bytes here because:\n         # - Python attempts str conversion first\n         # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n+        if isinstance(value, (bytes, memoryview)):\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n",
        "pr_link": "https://github.com/django/django/pull/11133"
    }
}