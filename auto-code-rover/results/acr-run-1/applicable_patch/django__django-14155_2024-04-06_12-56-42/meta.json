{
    "task_id": "django__django-14155",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/django__django/setup_django__django__4.0",
        "env_name": "setup_django__django__4.0",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "./tests/runtests.py --verbosity 2 urlpatterns_reverse.tests"
    },
    "task_info": {
        "instance_id": "django__django-14155",
        "base_commit": "2f13c476abe4ba787b6cb71131818341911f43cc",
        "hints_text": "",
        "created_at": "2021-03-19T15:44:25Z",
        "test_patch": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1141,10 +1141,30 @@ def test_repr(self):\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n-            \"args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], \"\n-            \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n+            \"args=('42', '37'), kwargs={}, url_name='no-kwargs', app_names=[], \"\n+            \"namespaces=[], route='^no_kwargs/([0-9]+)/([0-9]+)/$')\",\n         )\n \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n+\n \n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n",
        "repo": "django/django",
        "problem_statement": "ResolverMatch.__repr__() doesn't handle functools.partial() nicely.\nDescription\n\t \n\t\t(last modified by Nick Pope)\n\t \nWhen a partial function is passed as the view, the __repr__ shows the func argument as functools.partial which isn't very helpful, especially as it doesn't reveal the underlying function or arguments provided.\nBecause a partial function also has arguments provided up front, we need to handle those specially so that they are accessible in __repr__.\nISTM that we can simply unwrap functools.partial objects in ResolverMatch.__init__().\n",
        "version": "4.0",
        "FAIL_TO_PASS": [
            "test_repr (urlpatterns_reverse.tests.ResolverMatchTests)",
            "test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests)",
            "test_resolver_match_on_request (urlpatterns_reverse.tests.ResolverMatchTests)"
        ],
        "PASS_TO_PASS": [
            "A Resolver404 is raised if resolving doesn't meet the basic",
            "A default application namespace can be used for lookup.",
            "A default application namespace is sensitive to the current app.",
            "A nested current_app should be split in individual namespaces (#24904).",
            "An application namespace without a default is sensitive to the current",
            "Dynamic URL objects can be found using a namespace.",
            "Dynamic URL objects can return a (pattern, app_name) 2-tuple, and",
            "If the urls.py doesn't specify handlers, the defaults are used",
            "Names deployed via dynamic URL objects that require namespaces can't",
            "Namespace defaults to app_name when including a (pattern, app_name)",
            "Namespace prefixes can capture variables.",
            "Namespaces can be applied to include()'d urlpatterns that set an",
            "Namespaces can be applied to include()'d urlpatterns.",
            "Namespaces can be embedded.",
            "Namespaces can be installed anywhere in the URL pattern tree.",
            "Namespaces can be nested.",
            "Nonexistent namespaces raise errors.",
            "Normal lookups work as expected.",
            "Normal lookups work on names included from other patterns.",
            "Overriding request.urlconf with None will fall back to the default",
            "Test repr of URLResolver, especially when urlconf_name is a list",
            "Test reversing an URL from the *default* URLconf from inside",
            "Test reversing an URL from the *overridden* URLconf from inside",
            "The URLconf is reset after each request.",
            "The list of URLs that come back from a Resolver404 exception contains",
            "URL pattern name arguments don't need to be unique. The last registered",
            "URLResolver should raise an exception when no urlpatterns exist.",
            "URLResolver._populate() can be called concurrently, but not more",
            "Using include() with namespaces when there is a regex variable in front",
            "Verifies lazy object returned by reverse_lazy is coerced to",
            "current_app shouldn't be used unless it matches the whole path.",
            "test_attributeerror_not_hidden (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_build_absolute_uri (urlpatterns_reverse.tests.ReverseLazyTest)",
            "test_callable_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)",
            "test_illegal_args_message (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_illegal_kwargs_message (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_include_2_tuple (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_2_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_3_tuple (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_3_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_4_tuple (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_app_name (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_app_name_namespace (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_namespace (urlpatterns_reverse.tests.IncludeTests)",
            "test_include_urls (urlpatterns_reverse.tests.IncludeTests)",
            "test_inserting_reverse_lazy_into_string (urlpatterns_reverse.tests.ReverseLazyTest)",
            "test_invalid_regex (urlpatterns_reverse.tests.ErroneousViewTests)",
            "test_invalid_resolve (urlpatterns_reverse.tests.LookaheadTests)",
            "test_invalid_reverse (urlpatterns_reverse.tests.LookaheadTests)",
            "test_lazy_in_settings (urlpatterns_reverse.tests.ReverseLazySettingsTest)",
            "test_mixing_args_and_kwargs (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_named_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)",
            "test_namespaced_view_detail (urlpatterns_reverse.tests.ResolverTests)",
            "test_no_args_message (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_no_handler_exception (urlpatterns_reverse.tests.NoRootUrlConfTests)",
            "test_no_illegal_imports (urlpatterns_reverse.tests.ReverseShortcutTests)",
            "test_non_string_value (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_non_urlsafe_prefix_with_args (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_noncallable_view (urlpatterns_reverse.tests.ErroneousViewTests)",
            "test_not_callable (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_parent_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_patterns_reported (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_prefix_braces (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_prefix_format_char (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_prefix_parenthesis (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_redirect_to_object (urlpatterns_reverse.tests.ReverseShortcutTests)",
            "test_redirect_to_url (urlpatterns_reverse.tests.ReverseShortcutTests)",
            "test_redirect_to_view_name (urlpatterns_reverse.tests.ReverseShortcutTests)",
            "test_redirect_view_object (urlpatterns_reverse.tests.ReverseShortcutTests)",
            "test_redirect_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)",
            "test_resolver_match_on_request_before_resolution (urlpatterns_reverse.tests.ResolverMatchTests)",
            "test_resolver_reverse (urlpatterns_reverse.tests.ResolverTests)",
            "test_reverse_by_path_nested (urlpatterns_reverse.tests.ReverseShortcutTests)",
            "test_reverse_none (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_script_name_escaping (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_special_chars_namespace (urlpatterns_reverse.tests.NamespaceTests)",
            "test_string_without_dot (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_urlconf (urlpatterns_reverse.tests.RequestURLconfTests)",
            "test_urlconf_overridden (urlpatterns_reverse.tests.RequestURLconfTests)",
            "test_urlpattern_resolve (urlpatterns_reverse.tests.ResolverMatchTests)",
            "test_urlpattern_reverse (urlpatterns_reverse.tests.URLPatternReverse)",
            "test_user_permission_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)",
            "test_valid_resolve (urlpatterns_reverse.tests.LookaheadTests)",
            "test_valid_reverse (urlpatterns_reverse.tests.LookaheadTests)",
            "test_view_detail_as_method (urlpatterns_reverse.tests.ResolverTests)",
            "test_view_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_view_loading (urlpatterns_reverse.tests.ViewLoadingTests)",
            "test_view_not_found_message (urlpatterns_reverse.tests.URLPatternReverse)"
        ],
        "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
        "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -59,9 +59,16 @@ def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n+        if isinstance(self.func, functools.partial):\n+            func = repr(self.func)\n+        else:\n+            func = self._func_path\n+        return (\n+            'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '\n+            'app_names=%r, namespaces=%r, route=%r)' % (\n+                func, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n         )\n \n \n",
        "pr_link": "https://github.com/django/django/pull/14155"
    }
}