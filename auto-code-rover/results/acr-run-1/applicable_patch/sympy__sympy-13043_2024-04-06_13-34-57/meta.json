{
    "task_id": "sympy__sympy-13043",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1",
        "env_name": "setup_sympy__sympy__1.1",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/integrals/tests/test_intpoly.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-13043",
        "base_commit": "a3389a25ec84d36f5cf04a4f2562d820f131db64",
        "hints_text": "",
        "created_at": "2017-07-26T00:29:45Z",
        "test_patch": "diff --git a/sympy/integrals/tests/test_intpoly.py b/sympy/integrals/tests/test_intpoly.py\n--- a/sympy/integrals/tests/test_intpoly.py\n+++ b/sympy/integrals/tests/test_intpoly.py\n@@ -26,15 +26,15 @@ def test_decompose():\n     assert decompose(9*x**2 + y + 4*x + x**3 + y**2*x + 3) ==\\\n         {0: 3, 1: 4*x + y, 2: 9*x**2, 3: x**3 + x*y**2}\n \n-    assert decompose(x, True) == [x]\n-    assert decompose(x ** 2, True) == [x ** 2]\n-    assert decompose(x * y, True) == [x * y]\n-    assert decompose(x + y, True) == [x, y]\n-    assert decompose(x ** 2 + y, True) == [y, x ** 2]\n-    assert decompose(8 * x ** 2 + 4 * y + 7, True) == [7, 4*y, 8*x**2]\n-    assert decompose(x ** 2 + 3 * y * x, True) == [x ** 2, 3 * x * y]\n+    assert decompose(x, True) == {x}\n+    assert decompose(x ** 2, True) == {x**2}\n+    assert decompose(x * y, True) == {x * y}\n+    assert decompose(x + y, True) == {x, y}\n+    assert decompose(x ** 2 + y, True) == {y, x ** 2}\n+    assert decompose(8 * x ** 2 + 4 * y + 7, True) == {7, 4*y, 8*x**2}\n+    assert decompose(x ** 2 + 3 * y * x, True) == {x ** 2, 3 * x * y}\n     assert decompose(9 * x ** 2 + y + 4 * x + x ** 3 + y ** 2 * x + 3, True) == \\\n-           [3, y, x**3, 4*x, 9*x**2, x*y**2]\n+           {3, y, 4*x, 9*x**2, x*y**2, x**3}\n \n \n def test_best_origin():\n",
        "repo": "sympy/sympy",
        "problem_statement": "decompose() function in intpoly returns a list of arbitrary order\nThe decompose() function, with separate=True, returns `list(poly_dict.values())`, which is ordered arbitrarily.  \r\n\r\nWhat is this used for? It should be sorted somehow, or returning a set (in which case, why not just use the returned dictionary and have the caller take the values). This is causing test failures for me after some changes to the core. \r\n\r\nCC @ArifAhmed1995 @certik \n",
        "version": "1.1",
        "FAIL_TO_PASS": [
            "test_decompose"
        ],
        "PASS_TO_PASS": [
            "test_best_origin"
        ],
        "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
        "patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -556,7 +556,7 @@ def decompose(expr, separate=False):\n     >>> decompose(x**2 + x*y + x + y + x**3*y**2 + y**5)\n     {1: x + y, 2: x**2 + x*y, 5: x**3*y**2 + y**5}\n     >>> decompose(x**2 + x*y + x + y + x**3*y**2 + y**5, True)\n-    [x, y, x**2, y**5, x*y, x**3*y**2]\n+    {x, x**2, y, y**5, x*y, x**3*y**2}\n     \"\"\"\n     expr = S(expr)\n     poly_dict = {}\n@@ -569,7 +569,7 @@ def decompose(expr, separate=False):\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                return {monom[1] for monom in degrees}\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n@@ -593,7 +593,7 @@ def decompose(expr, separate=False):\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        return set(poly_dict.values())\n     return poly_dict\n \n \n",
        "pr_link": "https://github.com/sympy/sympy/pull/13043"
    }
}