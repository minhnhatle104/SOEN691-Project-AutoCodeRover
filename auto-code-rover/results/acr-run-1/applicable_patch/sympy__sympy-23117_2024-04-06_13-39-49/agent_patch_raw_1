# modification 1
```python
<file>sympy/tensor/array/ndim_array.py</file>
<original>    def _scan_iterable_shape(cls, iterable):
        def f(pointer):
            if not isinstance(pointer, Iterable):
                return [pointer], ()

            result = []
            elems, shapes = zip(*[f(i) for i in pointer])
            if len(set(shapes)) != 1:
                raise ValueError("could not determine shape unambiguously")
            for i in elems:
                result.extend(i)
            return result, (len(shapes),)+shapes[0]

        return f(iterable)
</original>
<patched>    def _scan_iterable_shape(cls, iterable):
        def f(pointer):
            if not isinstance(pointer, Iterable):
                return [pointer], ()
            if not pointer:  # Check if the pointer is empty
                return [], ()

            result = []
            try:
                elems, shapes = zip(*[f(i) for i in pointer])
            except ValueError:  # Catch the ValueError if zip(*) fails due to empty input
                return [], ()
            if len(set(shapes)) != 1:
                raise ValueError("could not determine shape unambiguously")
            for i in elems:
                result.extend(i)
            return result, (len(shapes),)+shapes[0]

        return f(iterable)
</patched>
```

# modification 2
```python
<file>sympy/tensor/array/dense_ndim_array.py</file>
<original>    def _new(cls, iterable, shape, **kwargs):
        shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
        flat_list = flatten(flat_list)
        self = object.__new__(cls)
        self._shape = shape
        self._array = list(flat_list)
        self._rank = len(shape)
        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else len(flat_list)
        return self
</original>
<patched>    def _new(cls, iterable, shape, **kwargs):
        shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
        flat_list = flatten(flat_list)
        self = object.__new__(cls)
        self._shape = shape if shape != () else (0,)  # Ensure shape is not empty tuple for empty arrays
        self._array = list(flat_list)
        self._rank = len(self._shape)  # Use updated self._shape
        self._loop_size = functools.reduce(lambda x,y: x*y, self._shape, 1)  # Ensure correct calculation for empty arrays
        return self
</patched>
```

These modifications address the issue by ensuring that the `_scan_iterable_shape` method can handle empty iterables without raising a `ValueError` due to unpacking issues. Additionally, the `_new` method in `MutableDenseNDimArray` is adjusted to correctly handle the shape and loop size for empty arrays, aligning the behavior with the creation of empty matrices.