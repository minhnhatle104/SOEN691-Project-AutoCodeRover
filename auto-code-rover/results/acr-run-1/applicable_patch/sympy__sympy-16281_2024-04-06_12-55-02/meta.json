{
    "task_id": "sympy__sympy-16281",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.4",
        "env_name": "setup_sympy__sympy__1.4",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/printing/pretty/tests/test_pretty.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-16281",
        "base_commit": "41490b75f3621408e0468b0e7b6dc409601fc6ff",
        "hints_text": "",
        "created_at": "2019-03-16T19:37:33Z",
        "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -2054,51 +2054,48 @@ def test_pretty_product():\n     unicode_str = \\\n u(\"\"\"\\\n     l           \\n\\\n-\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c      \\n\\\n-\u2502        \u2502  \u239b 2\u239e\\n\\\n-\u2502        \u2502  \u239cn \u239f\\n\\\n-\u2502        \u2502 f\u239c\u2500\u2500\u239f\\n\\\n-\u2502        \u2502  \u239d9 \u23a0\\n\\\n-\u2502        \u2502      \\n\\\n+\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500      \\n\\\n+ \u2502      \u2502   \u239b 2\u239e\\n\\\n+ \u2502      \u2502   \u239cn \u239f\\n\\\n+ \u2502      \u2502  f\u239c\u2500\u2500\u239f\\n\\\n+ \u2502      \u2502   \u239d9 \u23a0\\n\\\n+ \u2502      \u2502       \\n\\\n        2        \\n\\\n   n = k         \"\"\")\n     ascii_str = \\\n \"\"\"\\\n     l           \\n\\\n __________      \\n\\\n-|        |  / 2\\\\\\n\\\n-|        |  |n |\\n\\\n-|        | f|--|\\n\\\n-|        |  \\\\9 /\\n\\\n-|        |      \\n\\\n+ |      |   / 2\\\\\\n\\\n+ |      |   |n |\\n\\\n+ |      |  f|--|\\n\\\n+ |      |   \\\\9 /\\n\\\n+ |      |       \\n\\\n        2        \\n\\\n   n = k         \"\"\"\n \n-    assert pretty(expr) == ascii_str\n-    assert upretty(expr) == unicode_str\n-\n     expr = Product(f((n/3)**2), (n, k**2, l), (l, 1, m))\n \n     unicode_str = \\\n u(\"\"\"\\\n     m          l           \\n\\\n-\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c \u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c      \\n\\\n-\u2502        \u2502 \u2502        \u2502  \u239b 2\u239e\\n\\\n-\u2502        \u2502 \u2502        \u2502  \u239cn \u239f\\n\\\n-\u2502        \u2502 \u2502        \u2502 f\u239c\u2500\u2500\u239f\\n\\\n-\u2502        \u2502 \u2502        \u2502  \u239d9 \u23a0\\n\\\n-\u2502        \u2502 \u2502        \u2502      \\n\\\n+\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500 \u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500      \\n\\\n+ \u2502      \u2502   \u2502      \u2502   \u239b 2\u239e\\n\\\n+ \u2502      \u2502   \u2502      \u2502   \u239cn \u239f\\n\\\n+ \u2502      \u2502   \u2502      \u2502  f\u239c\u2500\u2500\u239f\\n\\\n+ \u2502      \u2502   \u2502      \u2502   \u239d9 \u23a0\\n\\\n+ \u2502      \u2502   \u2502      \u2502       \\n\\\n   l = 1           2        \\n\\\n              n = k         \"\"\")\n     ascii_str = \\\n \"\"\"\\\n     m          l           \\n\\\n __________ __________      \\n\\\n-|        | |        |  / 2\\\\\\n\\\n-|        | |        |  |n |\\n\\\n-|        | |        | f|--|\\n\\\n-|        | |        |  \\\\9 /\\n\\\n-|        | |        |      \\n\\\n+ |      |   |      |   / 2\\\\\\n\\\n+ |      |   |      |   |n |\\n\\\n+ |      |   |      |  f|--|\\n\\\n+ |      |   |      |   \\\\9 /\\n\\\n+ |      |   |      |       \\n\\\n   l = 1           2        \\n\\\n              n = k         \"\"\"\n \n@@ -5514,19 +5511,19 @@ def test_issue_6359():\n            2\n /  2      \\\\ \\n\\\n |______   | \\n\\\n-||    |  2| \\n\\\n-||    | x | \\n\\\n-||    |   | \\n\\\n+| |  |   2| \\n\\\n+| |  |  x | \\n\\\n+| |  |    | \\n\\\n \\\\x = 1    / \\\n \"\"\"\n     assert upretty(Product(x**2, (x, 1, 2))**2) == \\\n u(\"\"\"\\\n            2\n \u239b  2      \u239e \\n\\\n-\u239c\u252c\u2500\u2500\u2500\u2500\u252c   \u239f \\n\\\n-\u239c\u2502    \u2502  2\u239f \\n\\\n-\u239c\u2502    \u2502 x \u239f \\n\\\n-\u239c\u2502    \u2502   \u239f \\n\\\n+\u239c\u2500\u252c\u2500\u2500\u252c\u2500   \u239f \\n\\\n+\u239c \u2502  \u2502   2\u239f \\n\\\n+\u239c \u2502  \u2502  x \u239f \\n\\\n+\u239c \u2502  \u2502    \u239f \\n\\\n \u239dx = 1    \u23a0 \\\n \"\"\")\n \n",
        "repo": "sympy/sympy",
        "problem_statement": "Product pretty print could be improved\nThis is what the pretty printing for `Product` looks like:\r\n\r\n```\r\n>>> pprint(Product(1, (n, 1, oo)))\r\n  \u221e\r\n\u252c\u2500\u2500\u2500\u252c\r\n\u2502   \u2502 1\r\n\u2502   \u2502\r\nn = 1\r\n>>> pprint(Product(1/n, (n, 1, oo)))\r\n   \u221e\r\n\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\r\n\u2502      \u2502 1\r\n\u2502      \u2502 \u2500\r\n\u2502      \u2502 n\r\n\u2502      \u2502\r\n n = 1\r\n>>> pprint(Product(1/n**2, (n, 1, oo)))\r\n    \u221e\r\n\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\r\n\u2502        \u2502 1\r\n\u2502        \u2502 \u2500\u2500\r\n\u2502        \u2502  2\r\n\u2502        \u2502 n\r\n\u2502        \u2502\r\n  n = 1\r\n>>> pprint(Product(1, (n, 1, oo)), use_unicode=False)\r\n  oo\r\n_____\r\n|   | 1\r\n|   |\r\nn = 1\r\n>>> pprint(Product(1/n, (n, 1, oo)), use_unicode=False)\r\n   oo\r\n________\r\n|      | 1\r\n|      | -\r\n|      | n\r\n|      |\r\n n = 1\r\n>>> pprint(Product(1/n**2, (n, 1, oo)), use_unicode=False)\r\n    oo\r\n__________\r\n|        | 1\r\n|        | --\r\n|        |  2\r\n|        | n\r\n|        |\r\n  n = 1\r\n```\r\n\r\n(if those don't look good in your browser copy paste them into the terminal)\r\n\r\nThis could be improved:\r\n\r\n- Why is there always an empty line at the bottom of the \u220f? Keeping everything below the horizontal line is good, but the bottom looks asymmetric, and it makes the \u220f bigger than it needs to be.\r\n\r\n- The \u220f is too fat IMO. \r\n\r\n- It might look better if we extended the top bar. I'm unsure about this. \r\n\r\nCompare this\r\n\r\n```\r\n    \u221e\r\n\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\r\n \u2502     \u2502  1\r\n \u2502     \u2502  \u2500\u2500\r\n \u2502     \u2502   2\r\n \u2502     \u2502  n\r\n  n = 1\r\n```\r\n\r\nThat's still almost twice as wide as the equivalent Sum, but if you make it much skinnier it starts to look bad.\r\n\r\n```\r\n  \u221e\r\n ____\r\n \u2572\r\n  \u2572   1\r\n   \u2572  \u2500\u2500\r\n   \u2571   2\r\n  \u2571   n\r\n \u2571\r\n \u203e\u203e\u203e\u203e\r\nn = 1\r\n```\n",
        "version": "1.4",
        "FAIL_TO_PASS": [
            "test_issue_6359",
            "test_pretty_product"
        ],
        "PASS_TO_PASS": [
            "test_Adjoint",
            "test_Assignment",
            "test_AugmentedAssignment",
            "test_EulerGamma",
            "test_GoldenRatio",
            "test_GroebnerBasis",
            "test_Homomorphism",
            "test_MatrixElement_printing",
            "test_MatrixExpressions",
            "test_MatrixSymbol_printing",
            "test_PrettyModules",
            "test_PrettyPoly",
            "test_ProductSet_paranthesis",
            "test_ProductSet_prod_char_issue_10413",
            "test_QuotientRing",
            "test_RandomDomain",
            "test_SingularityFunction",
            "test_Tr",
            "test_any_object_in_sequence",
            "test_beta",
            "test_categories",
            "test_center_accent",
            "test_complicated_symbol_unchanged",
            "test_degree_printing",
            "test_deltas",
            "test_diffgeom_print_WedgeProduct",
            "test_elliptic_functions",
            "test_expint",
            "test_function_subclass_different_name",
            "test_gammas",
            "test_hyper",
            "test_issue_10472",
            "test_issue_11801",
            "test_issue_12675",
            "test_issue_13651",
            "test_issue_15560",
            "test_issue_15583",
            "test_issue_4335",
            "test_issue_5524",
            "test_issue_6134",
            "test_issue_6285",
            "test_issue_6324",
            "test_issue_6739",
            "test_issue_7117",
            "test_issue_7179",
            "test_issue_7180",
            "test_issue_7927",
            "test_issue_9877",
            "test_matrixSymbolBold",
            "test_meijerg",
            "test_missing_in_2X_issue_9047",
            "test_negative_fractions",
            "test_noncommutative",
            "test_pprint",
            "test_pretty_Add",
            "test_pretty_Boolean",
            "test_pretty_Complement",
            "test_pretty_ComplexRegion",
            "test_pretty_ComplexRootOf",
            "test_pretty_ConditionSet",
            "test_pretty_Contains",
            "test_pretty_Cycle",
            "test_pretty_Domain",
            "test_pretty_FormalPowerSeries",
            "test_pretty_FourierSeries",
            "test_pretty_ITE",
            "test_pretty_ImageSet",
            "test_pretty_Intersection_issue_10414",
            "test_pretty_KroneckerDelta",
            "test_pretty_Mod",
            "test_pretty_RootSum",
            "test_pretty_SetExpr",
            "test_pretty_Subs",
            "test_pretty_SymmetricDifference",
            "test_pretty_Trace_issue_9044",
            "test_pretty_UnevaluatedExpr",
            "test_pretty_Union_issue_10414",
            "test_pretty_ascii_str",
            "test_pretty_basic",
            "test_pretty_class",
            "test_pretty_derivatives",
            "test_pretty_dotproduct",
            "test_pretty_functions",
            "test_pretty_geometry",
            "test_pretty_integrals",
            "test_pretty_lambda",
            "test_pretty_limits",
            "test_pretty_matrix",
            "test_pretty_ndim_arrays",
            "test_pretty_no_wrap_line",
            "test_pretty_order",
            "test_pretty_ordering",
            "test_pretty_piecewise",
            "test_pretty_prec",
            "test_pretty_primenu",
            "test_pretty_primeomega",
            "test_pretty_print_tensor_expr",
            "test_pretty_print_tensor_partial_deriv",
            "test_pretty_rational",
            "test_pretty_relational",
            "test_pretty_seq",
            "test_pretty_sequences",
            "test_pretty_sets",
            "test_pretty_special_functions",
            "test_pretty_sqrt",
            "test_pretty_sqrt_char_knob",
            "test_pretty_sqrt_longsymbol_no_sqrt_char",
            "test_pretty_sum",
            "test_pretty_unicode_str",
            "test_print_builtin_set",
            "test_print_lerchphi",
            "test_settings",
            "test_tensor_TensorProduct",
            "test_units",
            "test_upretty_greek",
            "test_upretty_modifiers",
            "test_upretty_multiindex",
            "test_upretty_sub_super",
            "test_upretty_subs_missing_in_24",
            "test_vector_expr_pretty_printing"
        ],
        "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
        "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -491,10 +491,9 @@ def _print_Product(self, expr):\n \n         for lim in expr.limits:\n             width = (func_height + 2) * 5 // 3 - 2\n-            sign_lines = []\n-            sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)\n-            for i in range(func_height + 1):\n-                sign_lines.append(vertical_chr + (' '*width) + vertical_chr)\n+            sign_lines = [horizontal_chr + corner_chr + (horizontal_chr * (width-2)) + corner_chr + horizontal_chr]\n+            for _ in range(func_height + 1):\n+                sign_lines.append(' ' + vertical_chr + (' ' * (width-2)) + vertical_chr + ' ')\n \n             pretty_sign = stringPict('')\n             pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))\n",
        "pr_link": "https://github.com/sympy/sympy/pull/16281"
    }
}