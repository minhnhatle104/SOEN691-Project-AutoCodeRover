# modification 1
```python
<file>sympy/matrices/common.py</file>
<original>    def hstack(cls, *args):
        """Return a matrix formed by joining args horizontally (i.e.
        by repeated application of row_join).

        Examples
        ========

        >>> from sympy.matrices import Matrix, eye
        >>> Matrix.hstack(eye(2), 2*eye(2))
        Matrix([
        [1, 0, 2, 0],
        [0, 1, 0, 2]])
        """
        if len(args) == 0:
            return cls._new()

        kls = type(args[0])
        return reduce(kls.row_join, args)
</original>
<patched>    def hstack(cls, *args):
        """Return a matrix formed by joining args horizontally (i.e.
        by repeated application of row_join).

        Examples
        ========

        >>> from sympy.matrices import Matrix, eye
        >>> Matrix.hstack(eye(2), 2*eye(2))
        Matrix([
        [1, 0, 2, 0],
        [0, 1, 0, 2]])
        """
        if len(args) == 0:
            return cls._new()

        # Ensure all matrices have compatible dimensions
        non_empty_matrices = [arg for arg in args if arg.rows > 0]
        if not non_empty_matrices:
            return cls._new(0, sum(arg.cols for arg in args))

        kls = type(non_empty_matrices[0])
        return reduce(kls.row_join, args)
</patched>
```

# modification 2
```python
<file>sympy/matrices/common.py</file>
<original>    def vstack(cls, *args):
        """Return a matrix formed by joining args vertically (i.e.
        by repeated application of col_join).

        Examples
        ========

        >>> from sympy.matrices import Matrix, eye
        >>> Matrix.vstack(eye(2), 2*eye(2))
        Matrix([
        [1, 0],
        [0, 1],
        [2, 0],
        [0, 2]])
        """
        if len(args) == 0:
            return cls._new()

        kls = type(args[0])
        return reduce(kls.col_join, args)
</original>
<patched>    def vstack(cls, *args):
        """Return a matrix formed by joining args vertically (i.e.
        by repeated application of col_join).

        Examples
        ========

        >>> from sympy.matrices import Matrix, eye
        >>> Matrix.vstack(eye(2), 2*eye(2))
        Matrix([
        [1, 0],
        [0, 1],
        [2, 0],
        [0, 2]])
        """
        if len(args) == 0:
            return cls._new()

        # Ensure all matrices have compatible dimensions
        non_empty_matrices = [arg for arg in args if arg.cols > 0]
        if not non_empty_matrices:
            return cls._new(sum(arg.rows for arg in args), 0)

        kls = type(non_empty_matrices[0])
        return reduce(kls.col_join, args)
</patched>
```

These modifications aim to address the issue by ensuring that when `hstack` or `vstack` is called with matrices that have zero rows or columns, the resulting matrix dimensions are correctly calculated based on the sum of the columns or rows of the matrices being stacked. This should restore the expected behavior observed in sympy 1.0 while maintaining compatibility with matrices that have non-zero dimensions.