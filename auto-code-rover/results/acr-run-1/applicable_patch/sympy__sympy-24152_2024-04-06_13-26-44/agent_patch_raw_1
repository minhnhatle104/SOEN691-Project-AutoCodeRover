# modification 1
```python
<file>sympy/physics/quantum/tensorproduct.py</file>
<original>    def _eval_expand_tensorproduct(self, **hints):
        """Distribute TensorProducts across addition."""
        args = self.args
        add_args = []
        for i in range(len(args)):
            if isinstance(args[i], Add):
                for aa in args[i].args:
                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
                    if isinstance(tp, TensorProduct):
                        tp = tp._eval_expand_tensorproduct()
                    add_args.append(tp)
                break

        if add_args:
            return Add(*add_args)
        else:
            return self
</original>
<patched>    def _eval_expand_tensorproduct(self, **hints):
        """Distribute TensorProducts across addition."""
        args = self.args
        add_args = []
        for i in range(len(args)):
            if isinstance(args[i], Add):
                for aa in args[i].args:
                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
                    c_part, nc_part = tp.args_cnc() # added
                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct): # modified
                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), ) # modified
                    add_args.append(Mul(*c_part) * Mul(*nc_part)) # modified
                break

        if add_args:
            return Add(*add_args)
        else:
            return self
</patched>
```