# modification 1
```python
<file>django/db/migrations/recorder.py</file>
<original>    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
</original>
<patched>    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # Check if migrations should be applied to this database
        from django.db import router
        if not router.allow_migrate(self.connection.alias, self.Migration):
            return
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)
</patched>
```

# modification 2
```python
<file>django/db/migrations/recorder.py</file>
<original>    def record_applied(self, app, name):
        """Record that a migration was applied."""
        self.ensure_schema()
        self.migration_qs.create(app=app, name=name)
</original>
<patched>    def record_applied(self, app, name):
        """Record that a migration was applied."""
        # Check if migrations should be applied to this database before ensuring schema
        from django.db import router
        if not router.allow_migrate(self.connection.alias, app_label=app):
            return
        self.ensure_schema()
        self.migration_qs.create(app=app, name=name)
</patched>
```

These modifications introduce checks in the `ensure_schema` and `record_applied` methods of the `MigrationRecorder` class to respect the `allow_migrate` rules defined in the database router. Before attempting to ensure the schema or record a migration as applied, these methods now consult the `allow_migrate` method to determine if the operation is permitted for the given database connection. This approach prevents the creation of migration tables in databases where they are not intended, adhering to the rules defined in the project's database router.