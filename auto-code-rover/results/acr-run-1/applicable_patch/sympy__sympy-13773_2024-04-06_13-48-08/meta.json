{
    "task_id": "sympy__sympy-13773",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1",
        "env_name": "setup_sympy__sympy__1.1",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/matrices/tests/test_commonmatrix.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-13773",
        "base_commit": "7121bdf1facdd90d05b6994b4c2e5b2865a4638a",
        "hints_text": "Note to anyone fixing this: `@`/`__matmul__` only works in Python 3.5+. \nI would like to work on this issue.",
        "created_at": "2017-12-19T10:44:38Z",
        "test_patch": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -674,6 +674,30 @@ def test_multiplication():\n         assert c[1, 0] == 3*5\n         assert c[1, 1] == 0\n \n+def test_matmul():\n+    a = Matrix([[1, 2], [3, 4]])\n+\n+    assert a.__matmul__(2) == NotImplemented\n+\n+    assert a.__rmatmul__(2) == NotImplemented\n+\n+    #This is done this way because @ is only supported in Python 3.5+\n+    #To check 2@a case\n+    try:\n+        eval('2 @ a')\n+    except SyntaxError:\n+        pass\n+    except TypeError:  #TypeError is raised in case of NotImplemented is returned\n+        pass\n+\n+    #Check a@2 case\n+    try:\n+        eval('a @ 2')\n+    except SyntaxError:\n+        pass\n+    except TypeError:  #TypeError is raised in case of NotImplemented is returned\n+        pass\n+\n def test_power():\n     raises(NonSquareMatrixError, lambda: Matrix((1, 2))**2)\n \n",
        "repo": "sympy/sympy",
        "problem_statement": "@ (__matmul__) should fail if one argument is not a matrix\n```\r\n>>> A = Matrix([[1, 2], [3, 4]])\r\n>>> B = Matrix([[2, 3], [1, 2]])\r\n>>> A@B\r\nMatrix([\r\n[ 4,  7],\r\n[10, 17]])\r\n>>> 2@B\r\nMatrix([\r\n[4, 6],\r\n[2, 4]])\r\n```\r\n\r\nRight now `@` (`__matmul__`) just copies `__mul__`, but it should actually only work if the multiplication is actually a matrix multiplication. \r\n\r\nThis is also how NumPy works\r\n\r\n```\r\n>>> import numpy as np\r\n>>> a = np.array([[1, 2], [3, 4]])\r\n>>> 2*a\r\narray([[2, 4],\r\n       [6, 8]])\r\n>>> 2@a\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: Scalar operands are not allowed, use '*' instead\r\n```\n",
        "version": "1.1",
        "FAIL_TO_PASS": [
            "test_matmul"
        ],
        "PASS_TO_PASS": [
            "test__MinimalMatrix",
            "test_abs",
            "test_add",
            "test_adjoint",
            "test_adjugate",
            "test_as_real_imag",
            "test_atoms",
            "test_charpoly",
            "test_cofactor_and_minors",
            "test_col_insert",
            "test_col_join",
            "test_col_op",
            "test_columnspace",
            "test_conjugate",
            "test_det",
            "test_diag",
            "test_diagonal_symmetrical",
            "test_doit",
            "test_echelon_form",
            "test_eigenvals",
            "test_evalf",
            "test_expand",
            "test_extract",
            "test_eye",
            "test_free_symbols",
            "test_get_diag_blocks1",
            "test_get_diag_blocks2",
            "test_has",
            "test_hstack",
            "test_integrate",
            "test_is_Identity",
            "test_is_anti_symmetric",
            "test_is_echelon",
            "test_is_hermitian",
            "test_is_hessenberg",
            "test_is_lower",
            "test_is_square",
            "test_is_symbolic",
            "test_is_symmetric",
            "test_is_upper",
            "test_is_zero",
            "test_jordan_block",
            "test_neg",
            "test_nullspace",
            "test_ones",
            "test_permute",
            "test_power",
            "test_replace",
            "test_replace_map",
            "test_reshape",
            "test_row_col",
            "test_row_col_del",
            "test_row_insert",
            "test_row_join",
            "test_row_op",
            "test_rowspace",
            "test_rref",
            "test_shape",
            "test_simplify",
            "test_singular_values",
            "test_sub",
            "test_subs",
            "test_tolist",
            "test_trace",
            "test_values",
            "test_vec",
            "test_vstack",
            "test_xreplace",
            "test_zeros"
        ],
        "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
        "patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1973,6 +1973,10 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n@@ -2066,6 +2070,10 @@ def __radd__(self, other):\n \n     @call_highest_priority('__matmul__')\n     def __rmatmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__rmul__(other)\n \n     @call_highest_priority('__mul__')\n",
        "pr_link": "https://github.com/sympy/sympy/pull/13773"
    }
}