# modification 1
```python
<file>sympy/matrices/common.py</file>
<original>    def __matmul__(self, other):
        return self.__mul__(other)</original>
<patched>    def __matmul__(self, other):
        if not hasattr(other, "shape"):
            raise ValueError("Scalar operands are not allowed, use '*' instead")
        return self.__mul__(other)</patched>
```

# modification 2
```python
<file>sympy/matrices/expressions/matexpr.py</file>
<original>    def __matmul__(self, other):
        return MatMul(self, other).doit()</original>
<patched>    def __matmul__(self, other):
        if not hasattr(other, "shape"):
            raise ValueError("Scalar operands are not allowed, use '*' instead")
        return MatMul(self, other).doit()</patched>
```

Explanation:
- The patch adds a check to the `__matmul__` method in both `MatrixArithmetic` and `MatrixExpr` classes to ensure that the `other` operand has a `shape` attribute, which is a common attribute of matrix-like objects. This is a simple way to check if the operand can be considered a matrix. If the `other` operand does not have a `shape` attribute, a `ValueError` is raised with a message guiding the user to use the `*` operator for scalar multiplication, aligning the behavior with that of NumPy as described in the issue.
- This solution assumes that all matrix-like objects that should be valid for matrix multiplication with instances of these classes will have a `shape` attribute. This is a common convention in numerical and scientific computing libraries but might need adjustment if the SymPy project uses or plans to support matrix-like objects without a `shape` attribute.