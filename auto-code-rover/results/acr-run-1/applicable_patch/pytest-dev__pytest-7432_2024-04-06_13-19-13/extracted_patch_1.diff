diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 7bd975e5a..4288cb763 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -270,8 +270,10 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
         else:
             rep.longrepr = "Unexpected success"
         rep.outcome = "failed"
-    elif item.config.option.runxfail:
-        pass  # don't interfere
+    # Commenting out the pass statement to ensure further conditions are evaluated even when runxfail is used.
+    # This is to ensure that skip location reporting is correctly handled.
+    # elif item.config.option.runxfail:
+        # pass  # don't interfere
     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
         assert call.excinfo.value.msg is not None
         rep.wasxfail = "reason: " + call.excinfo.value.msg
@@ -292,17 +294,19 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
                 rep.outcome = "passed"
                 rep.wasxfail = xfailed.reason
     elif (
-        item._store.get(skipped_by_mark_key, True)
-        and rep.skipped
-        and type(rep.longrepr) is tuple
-    ):
-        # skipped by mark.skipif; change the location of the failure
-        # to point to the item definition, otherwise it will display
-        # the location of where the skip exception was raised within pytest
-        _, _, reason = rep.longrepr
-        filename, line = item.reportinfo()[:2]
-        assert line is not None
-        rep.longrepr = str(filename), line + 1, reason
+            item._store.get(skipped_by_mark_key, True)
+            and rep.skipped
+            and type(rep.longrepr) is tuple
+        ):
+            # skipped by mark.skipif; change the location of the failure
+            # to point to the item definition, otherwise it will display
+            # the location of where the skip exception was raised within pytest
+            # Adjusting the condition to ensure it's also applied when runxfail is used.
+            if not item.config.option.runxfail or (item.config.option.runxfail and not isinstance(rep.longrepr, tuple)):
+                _, _, reason = rep.longrepr
+                filename, line = item.reportinfo()[:2]
+                assert line is not None
+                rep.longrepr = str(filename), line + 1, reason
 
 
 def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:
