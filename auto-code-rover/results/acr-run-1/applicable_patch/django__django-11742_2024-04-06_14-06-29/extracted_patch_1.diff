diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 9ce46e3f73..db9a13b6fa 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -601,20 +601,29 @@ class Field(RegisterLookupMixin):
             return
 
         if self.choices is not None and value not in self.empty_values:
-            for option_key, option_value in self.choices:
-                if isinstance(option_value, (list, tuple)):
-                    # This is an optgroup, so look inside the group for
-                    # options.
-                    for optgroup_key, optgroup_value in option_value:
-                        if value == optgroup_key:
-                            return
-                elif value == option_key:
-                    return
-            raise exceptions.ValidationError(
-                self.error_messages['invalid_choice'],
-                code='invalid_choice',
-                params={'value': value},
-            )
+                    max_length = 0
+                    for option_key, option_value in self.choices:
+                        if isinstance(option_value, (list, tuple)):
+                            # This is an optgroup, so look inside the group for
+                            # options and also check max_length.
+                            for optgroup_key, optgroup_value in option_value:
+                                max_length = max(max_length, len(str(optgroup_key)))
+                                if value == optgroup_key:
+                                    return
+                        else:
+                            max_length = max(max_length, len(str(option_key)))
+                            if value == option_key:
+                                return
+                    if hasattr(self, 'max_length') and self.max_length is not None and max_length > self.max_length:
+                        raise exceptions.ValidationError(
+                            f"Field's max_length={self.max_length} is less than the length of the longest choice.",
+                            code='max_length',
+                        )
+                    raise exceptions.ValidationError(
+                        self.error_messages['invalid_choice'],
+                        code='invalid_choice',
+                        params={'value': value},
+                    )
 
         if value is None and not self.null:
             raise exceptions.ValidationError(self.error_messages['null'], code='null')
