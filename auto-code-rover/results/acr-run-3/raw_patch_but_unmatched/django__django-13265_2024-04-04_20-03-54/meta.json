{
    "task_id": "django__django-13265",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/django__django/setup_django__django__3.2",
        "env_name": "setup_django__django__3.2",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "./tests/runtests.py --verbosity 2 migrations.test_autodetector"
    },
    "task_info": {
        "instance_id": "django__django-13265",
        "base_commit": "b2b0711b555fa292751763c2df4fe577c396f265",
        "hints_text": "Thanks for this report. IMO order_with_respect_to should be included in CreateModel()'s options, I'm not sure why it is in a separate operation when it refers to a ForeignKey.\nI reproduced the issue adding order_with_respect_to and indexes = [models.Index(fields='_order')] at the same time to an existent model. class Meta: order_with_respect_to = 'foo' indexes = [models.Index(fields='_order')] A small broken test: \u200bhttps://github.com/iurisilvio/django/commit/5c6504e67f1d2749efd13daca440dfa54708a4b2 I'll try to fix the issue, but I'm not sure the way to fix it. Can we reorder autodetected migrations?\n\u200bPR",
        "created_at": "2020-08-02T10:02:11Z",
        "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2151,6 +2151,115 @@ def test_add_model_order_with_respect_to(self):\n         )\n         self.assertNotIn(\"_order\", [name for name, field in changes['testapp'][0].operations[0].fields])\n \n+    def test_add_model_order_with_respect_to_index_foo_together(self):\n+        changes = self.get_changes([], [\n+            self.book,\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+                ('book', models.ForeignKey('otherapp.Book', models.CASCADE)),\n+            ], options={\n+                'order_with_respect_to': 'book',\n+                'index_together': {('name', '_order')},\n+                'unique_together': {('id', '_order')},\n+            }),\n+        ])\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(\n+            changes,\n+            'testapp',\n+            0,\n+            0,\n+            name='Author',\n+            options={\n+                'order_with_respect_to': 'book',\n+                'index_together': {('name', '_order')},\n+                'unique_together': {('id', '_order')},\n+            },\n+        )\n+\n+    def test_add_model_order_with_respect_to_index_constraint(self):\n+        tests = [\n+            (\n+                'AddIndex',\n+                {'indexes': [\n+                    models.Index(fields=['_order'], name='book_order_idx'),\n+                ]},\n+            ),\n+            (\n+                'AddConstraint',\n+                {'constraints': [\n+                    models.CheckConstraint(\n+                        check=models.Q(_order__gt=1),\n+                        name='book_order_gt_1',\n+                    ),\n+                ]},\n+            ),\n+        ]\n+        for operation, extra_option in tests:\n+            with self.subTest(operation=operation):\n+                after = ModelState('testapp', 'Author', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('name', models.CharField(max_length=200)),\n+                    ('book', models.ForeignKey('otherapp.Book', models.CASCADE)),\n+                ], options={\n+                    'order_with_respect_to': 'book',\n+                    **extra_option,\n+                })\n+                changes = self.get_changes([], [self.book, after])\n+                self.assertNumberMigrations(changes, 'testapp', 1)\n+                self.assertOperationTypes(changes, 'testapp', 0, [\n+                    'CreateModel', operation,\n+                ])\n+                self.assertOperationAttributes(\n+                    changes,\n+                    'testapp',\n+                    0,\n+                    0,\n+                    name='Author',\n+                    options={'order_with_respect_to': 'book'},\n+                )\n+\n+    def test_set_alter_order_with_respect_to_index_constraint_foo_together(self):\n+        tests = [\n+            (\n+                'AddIndex',\n+                {'indexes': [\n+                    models.Index(fields=['_order'], name='book_order_idx'),\n+                ]},\n+            ),\n+            (\n+                'AddConstraint',\n+                {'constraints': [\n+                    models.CheckConstraint(\n+                        check=models.Q(_order__gt=1),\n+                        name='book_order_gt_1',\n+                    ),\n+                ]},\n+            ),\n+            ('AlterIndexTogether', {'index_together': {('name', '_order')}}),\n+            ('AlterUniqueTogether', {'unique_together': {('id', '_order')}}),\n+        ]\n+        for operation, extra_option in tests:\n+            with self.subTest(operation=operation):\n+                after = ModelState('testapp', 'Author', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('name', models.CharField(max_length=200)),\n+                    ('book', models.ForeignKey('otherapp.Book', models.CASCADE)),\n+                ], options={\n+                    'order_with_respect_to': 'book',\n+                    **extra_option,\n+                })\n+                changes = self.get_changes(\n+                    [self.book, self.author_with_book],\n+                    [self.book, after],\n+                )\n+                self.assertNumberMigrations(changes, 'testapp', 1)\n+                self.assertOperationTypes(changes, 'testapp', 0, [\n+                    'AlterOrderWithRespectTo', operation,\n+                ])\n+\n     def test_alter_model_managers(self):\n         \"\"\"\n         Changing the model managers adds a new operation.\n",
        "repo": "django/django",
        "problem_statement": "AlterOrderWithRespectTo() with ForeignKey crash when _order is included in Index().\nDescription\n\t\n\tclass Meta:\n\t\tdb_table = 'look_image'\n\t\torder_with_respect_to = 'look'\n\t\tindexes = [\n\t\t\tmodels.Index(fields=['look', '_order']),\n\t\t\tmodels.Index(fields=['created_at']),\n\t\t\tmodels.Index(fields=['updated_at']),\n\t\t]\nmigrations.CreateModel(\n\t\t\tname='LookImage',\n\t\t\tfields=[\n\t\t\t\t('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t\t\t('look', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='posts.Look', verbose_name='LOOK')),\n\t\t\t\t('image_url', models.URLField(blank=True, max_length=10000, null=True)),\n\t\t\t\t('image', models.ImageField(max_length=2000, upload_to='')),\n\t\t\t\t('deleted', models.DateTimeField(editable=False, null=True)),\n\t\t\t\t('created_at', models.DateTimeField(auto_now_add=True)),\n\t\t\t\t('updated_at', models.DateTimeField(auto_now=True)),\n\t\t\t],\n\t\t),\n\t\tmigrations.AddIndex(\n\t\t\tmodel_name='lookimage',\n\t\t\tindex=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n\t\t),\n\t\tmigrations.AddIndex(\n\t\t\tmodel_name='lookimage',\n\t\t\tindex=models.Index(fields=['created_at'], name='look_image_created_f746cf_idx'),\n\t\t),\n\t\tmigrations.AddIndex(\n\t\t\tmodel_name='lookimage',\n\t\t\tindex=models.Index(fields=['updated_at'], name='look_image_updated_aceaf9_idx'),\n\t\t),\n\t\tmigrations.AlterOrderWithRespectTo(\n\t\t\tname='lookimage',\n\t\t\torder_with_respect_to='look',\n\t\t),\nI added orders_with_respect_to in new model class's Meta class and also made index for '_order' field by combining with other field. And a new migration file based on the model looks like the code above.\nThe problem is operation AlterOrderWithRespectTo after AddIndex of '_order' raising error because '_order' field had not been created yet.\nIt seems to be AlterOrderWithRespectTo has to proceed before AddIndex of '_order'.\n",
        "version": "3.2",
        "FAIL_TO_PASS": [
            "test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests)",
            "test_add_model_order_with_respect_to_index_foo_together (migrations.test_autodetector.AutodetectorTests)",
            "test_set_alter_order_with_respect_to_index_constraint_foo_together (migrations.test_autodetector.AutodetectorTests)",
            "test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)"
        ],
        "PASS_TO_PASS": [
            "#22030 - Adding a field with a default should work.",
            "#22435 - Adding a ManyToManyField should not prompt for a default.",
            "#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.",
            "Bases of other models come first.",
            "Bases of proxies come first.",
            "Changing a model's options should make a change.",
            "Changing a proxy model's options should also make a change.",
            "FK dependencies still work on proxy models.",
            "Field instances are handled correctly by nested deconstruction.",
            "Having a ForeignKey automatically adds a dependency.",
            "Nested deconstruction descends into dict values.",
            "Nested deconstruction descends into lists.",
            "Nested deconstruction descends into tuples.",
            "Setting order_with_respect_to adds a field.",
            "Swappable models get their CreateModel first.",
            "Test change detection of new constraints.",
            "Test change detection of new indexes.",
            "Test change detection of removed constraints.",
            "Test change detection of removed indexes.",
            "Test change detection of reordering of fields in indexes.",
            "Test creation of new model with constraints already defined.",
            "Test creation of new model with indexes already defined.",
            "Tests auto-naming of migrations for graph matching.",
            "Tests autodetection of new fields.",
            "Tests autodetection of new models.",
            "Tests autodetection of removed fields.",
            "Tests autodetection of renamed fields.",
            "Tests autodetection of renamed models.",
            "Tests custom naming of migrations for graph matching.",
            "Tests deletion of old models.",
            "Tests detection for adding db_table in model's options.",
            "Tests detection for changing db_table in model's options'.",
            "Tests detection for removing db_table in model's options.",
            "Tests index/unique_together detection.",
            "Tests unique_together and field removal detection & ordering",
            "The autodetector correctly deals with managed models.",
            "The autodetector correctly deals with proxy models.",
            "test_add_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)",
            "test_add_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)",
            "test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)",
            "test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)",
            "test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)",
            "test_add_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)",
            "test_add_model_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)",
            "test_add_model_with_field_removed_from_base_model (migrations.test_autodetector.AutodetectorTests)",
            "test_add_non_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_db_table_no_changes (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_field_to_not_null_oneoff_default (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_field_to_not_null_with_default (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_field_to_not_null_without_default (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_fk_before_model_deletion (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)",
            "test_alter_model_managers (migrations.test_autodetector.AutodetectorTests)",
            "test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests)",
            "test_auto (migrations.test_autodetector.MigrationSuggestNameTests)",
            "test_circular_dependency_mixed_addcreate (migrations.test_autodetector.AutodetectorTests)",
            "test_circular_dependency_swappable (migrations.test_autodetector.AutodetectorTests)",
            "test_circular_dependency_swappable2 (migrations.test_autodetector.AutodetectorTests)",
            "test_circular_dependency_swappable_self (migrations.test_autodetector.AutodetectorTests)",
            "test_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)",
            "test_concrete_field_changed_to_many_to_many (migrations.test_autodetector.AutodetectorTests)",
            "test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)",
            "test_create_with_through_model (migrations.test_autodetector.AutodetectorTests)",
            "test_custom_deconstructible (migrations.test_autodetector.AutodetectorTests)",
            "test_deconstruct_type (migrations.test_autodetector.AutodetectorTests)",
            "test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)",
            "test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)",
            "test_empty_foo_together (migrations.test_autodetector.AutodetectorTests)",
            "test_first_dependency (migrations.test_autodetector.AutodetectorTests)",
            "test_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)",
            "test_foo_together_no_changes (migrations.test_autodetector.AutodetectorTests)",
            "test_foo_together_ordering (migrations.test_autodetector.AutodetectorTests)",
            "test_foreign_key_removed_before_target_model (migrations.test_autodetector.AutodetectorTests)",
            "test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)",
            "test_keep_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)",
            "test_last_dependency (migrations.test_autodetector.AutodetectorTests)",
            "test_m2m_w_through_multistep_remove (migrations.test_autodetector.AutodetectorTests)",
            "test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)",
            "test_many_to_many_changed_to_concrete_field (migrations.test_autodetector.AutodetectorTests)",
            "test_many_to_many_removed_before_through_model (migrations.test_autodetector.AutodetectorTests)",
            "test_many_to_many_removed_before_through_model_2 (migrations.test_autodetector.AutodetectorTests)",
            "test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)",
            "test_nested_deconstructible_objects (migrations.test_autodetector.AutodetectorTests)",
            "test_non_circular_foreignkey_dependency_removal (migrations.test_autodetector.AutodetectorTests)",
            "test_none_name (migrations.test_autodetector.MigrationSuggestNameTests)",
            "test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)",
            "test_pk_fk_included (migrations.test_autodetector.AutodetectorTests)",
            "test_proxy_custom_pk (migrations.test_autodetector.AutodetectorTests)",
            "test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)",
            "test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)",
            "test_remove_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)",
            "test_remove_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_m2m_through_model (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_model_case (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_model_reverse_relation_dependencies (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_model_with_fks_in_different_position (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_model_with_renamed_rel_field (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)",
            "test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)",
            "test_replace_string_with_foreignkey (migrations.test_autodetector.AutodetectorTests)",
            "test_same_app_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)",
            "test_same_app_circular_fk_dependency_with_unique_together_and_indexes (migrations.test_autodetector.AutodetectorTests)",
            "test_same_app_no_fk_dependency (migrations.test_autodetector.AutodetectorTests)",
            "test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests)",
            "test_swappable (migrations.test_autodetector.AutodetectorTests)",
            "test_swappable_changed (migrations.test_autodetector.AutodetectorTests)",
            "test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)",
            "test_trim_apps (migrations.test_autodetector.AutodetectorTests)",
            "test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests)",
            "test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)",
            "test_unmanaged_custom_pk (migrations.test_autodetector.AutodetectorTests)",
            "test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)",
            "test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)"
        ],
        "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
        "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -182,12 +182,12 @@ def _detect_changes(self, convert_apps=None, graph=None):\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_altered_order_with_respect_to()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n         self.generate_added_constraints()\n         self.generate_altered_db_table()\n-        self.generate_altered_order_with_respect_to()\n \n         self._sort_migrations()\n         self._build_migration_list(graph)\n@@ -613,6 +613,18 @@ def generate_created_models(self):\n                     dependencies=list(set(dependencies)),\n                 )\n             # Generate other opns\n+            if order_with_respect_to:\n+                self.add_operation(\n+                    app_label,\n+                    operations.AlterOrderWithRespectTo(\n+                        name=model_name,\n+                        order_with_respect_to=order_with_respect_to,\n+                    ),\n+                    dependencies=[\n+                        (app_label, model_name, order_with_respect_to, True),\n+                        (app_label, model_name, None, True),\n+                    ]\n+                )\n             related_dependencies = [\n                 (app_label, model_name, name, True)\n                 for name in sorted(related_fields)\n@@ -654,19 +666,6 @@ def generate_created_models(self):\n                     ),\n                     dependencies=related_dependencies\n                 )\n-            if order_with_respect_to:\n-                self.add_operation(\n-                    app_label,\n-                    operations.AlterOrderWithRespectTo(\n-                        name=model_name,\n-                        order_with_respect_to=order_with_respect_to,\n-                    ),\n-                    dependencies=[\n-                        (app_label, model_name, order_with_respect_to, True),\n-                        (app_label, model_name, None, True),\n-                    ]\n-                )\n-\n             # Fix relationships if the model changed from a proxy model to a\n             # concrete model.\n             if (app_label, model_name) in self.old_proxy_keys:\n",
        "pr_link": "https://github.com/django/django/pull/13265"
    }
}