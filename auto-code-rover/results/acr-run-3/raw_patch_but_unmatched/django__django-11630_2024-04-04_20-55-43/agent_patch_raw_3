I'm here to provide guidance based on the information you've shared and my general knowledge. Since I can't perform live interactions with external systems or databases and considering the limitations mentioned, I'll offer a conceptual solution to the issue described within your Django project, focusing on the problem of having multiple models in different apps with the same table name after upgrading to Django 2.2.

Given the constraints and the nature of our interaction, here's a conceptual approach to address the issue described regarding Django models from different apps having the same table name:

1. **Review Django's Release Notes for Version 2.2**: Start by reviewing the [Django 2.2 release notes](https://docs.djangoproject.com/en/3.2/releases/2.2/), focusing on changes related to models, databases, and migrations. Look for any backward-incompatible changes or deprecations that might affect how table names are handled or how models are mapped to database tables.

2. **Examine Model Definitions in All Apps**: For each app within your project (`base`, `app2`, etc.), carefully review the model definitions. Pay special attention to the `Meta` class of each model, looking for the `db_table` attribute. The error message you encountered suggests that there are at least two models explicitly declaring the same table name via `db_table`.

    ```python
    class MyModel(models.Model):
        # model fields

        class Meta:
            db_table = 'custom_table_name'
    ```

3. **Ensure Unique Table Names or Use Abstract Models**: If different models are intentionally mapped to the same database table, consider if this is necessary for your application's architecture. If models are meant to share structure but not the database table, use abstract base models by setting `abstract = True` in the `Meta` class. If they are meant to map to different tables, ensure each `db_table` value is unique.

4. **Database Routing**: Since your project uses multiple databases, ensure that your database routing is correctly configured. This is crucial if models from different apps are intended to interact with different databases but have ended up with the same `db_table` names due to misconfiguration.

    - Double-check the `DATABASE_ROUTERS` configuration in your `settings.py`.
    - Review the implementation of your database router(s) to ensure they correctly guide model operations to the appropriate database.

5. **Consult Django Documentation and Community**: The [Django documentation](https://docs.djangoproject.com/en/stable/) is an invaluable resource for understanding model inheritance, abstract models, database routing, and dealing with multiple databases. If the issue persists, consider reaching out to the Django community through forums, mailing lists, or platforms like Stack Overflow.

6. **Plan for Data Migration**: If you need to rename `db_table` for one or more models to resolve conflicts, plan for the necessary data migrations to ensure data integrity and continuity.

### Final Thoughts

Resolving this issue will likely involve a combination of reviewing your project's model definitions, ensuring correct database routing, and possibly adjusting your database schema with migrations. The upgrade to Django 2.2 may have introduced stricter checks or changes in behavior that now require adjustments to your project's configuration or structure.