Given the constraints and the nature of the request, without direct access to the specific implementation details of the Sphinx project, it's challenging to provide an exact patch that matches the original program's structure and syntax. However, I can offer a conceptual approach to how one might begin to implement the requested feature in a generic Python project that uses Sphinx for documentation. This approach is speculative and intended to illustrate the kind of changes that might be made to support the feature described in the issue.

### Conceptual Patch for Extending `:inherited-members:` Option

This conceptual patch is based on a hypothetical structure of the Sphinx `autodoc` extension, aiming to provide a starting point for the actual implementation.

#### Modification 1: Extend Option Parsing in `autodoc`

```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>
# Hypothetical original code where options are parsed
self.inherited_members = 'inherited-members' in self.options
</original>
<patched>
# Extended to parse `inherited-members` as either a boolean or a list
option_value = self.options.get('inherited-members', False)
if isinstance(option_value, str):
    self.inherited_members = [cls.strip() for cls in option_value.split(',')]
else:
    self.inherited_members = option_value
</patched>
```

#### Modification 2: Adjust Member Inclusion Logic Based on Extended Option

```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>
# Hypothetical original code snippet for including inherited members
if self.inherited_members:
    # include inherited member
</original>
<patched>
# Adjusted to check against a list of base classes if provided
if isinstance(self.inherited_members, list):
    base_class_names = [base.__name__ for base in inspect.getmro(member.__class__)]
    if not any(cls_name in self.inherited_members for cls_name in base_class_names):
        # include inherited member based on filtered base classes
else:
    if self.inherited_members:
        # include inherited member as before
</patched>
```

### Note

These modifications are illustrative and based on assumptions about the Sphinx `autodoc` extension's code structure. The actual implementation may differ significantly, and developers should consult the Sphinx documentation and source code for guidance on extending or modifying its behavior. The key idea is to allow the `:inherited-members:` option to accept a list of class names (as strings) and then modify the logic that determines whether to include inherited members in the documentation based on this list.