Given the context and the limitations of the information provided, I'll outline a hypothetical patch based on the structure of the `xarray` library and common practices for handling such enhancements. This patch assumes that the units are stored in the `.attrs` dictionary of each `xarray.Variable` with a key of `'units'`. The actual implementation may vary based on the internal structure of the `xarray` library and how it handles units.

Since the direct implementation of `formatting.dataset_repr` is not provided, I will demonstrate how one might modify a generic `dataset_repr` function to include units in the dataset's string representation. This modification assumes access to the dataset's variables and their attributes.

# modification 1
```python
<file>xarray/core/formatting.py</file>
<original>def dataset_repr(dataset):
    summary = ...
    dims = ...
    coords = ...
    data_vars = ...
    return "\n".join([summary, dims, coords, data_vars])</original>
<patched>def dataset_repr(dataset):
    summary = ...
    dims = ...
    # Enhanced coords and data_vars representation to include units
    coords = []
    for name, coord in dataset.coords.items():
        units = coord.attrs.get('units', '')
        coord_repr = f"{name}, in {units}" if units else name
        coords.append(coord_repr)
    coords = "Coordinates:\n" + "\n".join(coords)
    
    data_vars = []
    for name, var in dataset.data_vars.items():
        units = var.attrs.get('units', '')
        var_repr = f"{name}, in {units}" if units else name
        data_vars.append(var_repr)
    data_vars = "Data variables:\n" + "\n".join(data_vars)
    
    return "\n".join([summary, dims, coords, data_vars])</patched>
```

This modification is a conceptual demonstration of how one might approach adding units to the string representation of a dataset in `xarray`. The actual implementation would require access to the specific details of how `formatting.dataset_repr` is implemented and how units are represented within the `xarray.Dataset` objects. The patch assumes that units are stored in the `.attrs` dictionary of each variable with a key of `'units'` and modifies the representation of coordinates and data variables to include these units if present.