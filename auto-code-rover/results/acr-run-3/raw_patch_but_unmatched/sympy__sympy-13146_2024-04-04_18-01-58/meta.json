{
    "task_id": "sympy__sympy-13146",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1",
        "env_name": "setup_sympy__sympy__1.1",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "bin/test -C --verbose sympy/core/tests/test_evalf.py"
    },
    "task_info": {
        "instance_id": "sympy__sympy-13146",
        "base_commit": "b678d8103e48fdb1af335dbf0080b3d5366f2d17",
        "hints_text": "A strange bug. The floating point numbers appear to be identical:\n\n```\nIn [30]: expr2.evalf(5).args[1].args[1]._mpf_\nOut[30]: (0, 5, -1, 3)\n\nIn [31]: expr1.evalf(5).args[1].args[1]._mpf_\nOut[31]: (0, 5, -1, 3)\n\nIn [32]: expr1.evalf(5).args[0]._mpf_\nOut[32]: (0, 1, -1, 1)\n\nIn [33]: expr2.evalf(5).args[0]._mpf_\nOut[33]: (0, 1, -1, 1)\n```\n\nIt also works if you use the default precision:\n\n```\nIn [27]: expr1.evalf() - expr2.evalf()\nOut[27]: 0\n\nIn [28]: (expr1 - expr2).evalf()\nOut[28]: 0\n```\n",
        "created_at": "2017-08-18T05:51:45Z",
        "test_patch": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -227,6 +227,9 @@ def test_evalf_bugs():\n     assert ((oo*I).n() == S.Infinity*I)\n     assert ((oo+oo*I).n() == S.Infinity + S.Infinity*I)\n \n+    #issue 11518\n+    assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n+\n \n def test_evalf_integer_parts():\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n",
        "repo": "sympy/sympy",
        "problem_statement": "Exponent doesn't fully simplify\nSay I have code like this:\n\n```\nimport sympy\nfrom sympy import *\nx=Symbol('x')\nexpr1 = S(1)/2*x**2.5\nexpr2 = S(1)*x**(S(5)/2)/2\nres = expr1-expr2\nres= simplify(res.evalf(5))\nprint res\n```\n\nThe output is\n`-0.5*x**2.5 + 0.5*x**2.5`\nHow do I simplify it to 0?\n\n",
        "version": "1.1",
        "FAIL_TO_PASS": [
            "test_evalf_bugs"
        ],
        "PASS_TO_PASS": [
            "test_bugs",
            "test_cancellation",
            "test_chop_value",
            "test_evalf_arguments",
            "test_evalf_basic",
            "test_evalf_complex",
            "test_evalf_complex_cancellation",
            "test_evalf_complex_powers",
            "test_evalf_divergent_series",
            "test_evalf_exponentiation",
            "test_evalf_helpers",
            "test_evalf_integral",
            "test_evalf_near_integers",
            "test_evalf_power_subs_bugs",
            "test_evalf_powers",
            "test_evalf_product",
            "test_evalf_py_methods",
            "test_evalf_relational",
            "test_evalf_rump",
            "test_evalf_sum",
            "test_evalf_trig_zero_detection",
            "test_evaluate_false",
            "test_implemented_function_evalf",
            "test_infinities",
            "test_issue_10323",
            "test_issue_4945",
            "test_issue_5486",
            "test_issue_5486_bug",
            "test_issue_6632_evalf",
            "test_issue_8821_highprec_from_str",
            "test_issue_8853",
            "test_issue_9326",
            "test_old_docstring",
            "test_scaled_zero",
            "test_subs",
            "test_to_mpmath"
        ],
        "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
        "patch": "diff --git a/sympy/core/operations.py b/sympy/core/operations.py\n--- a/sympy/core/operations.py\n+++ b/sympy/core/operations.py\n@@ -332,9 +332,7 @@ def _eval_evalf(self, prec):\n                         args.append(a)\n                     else:\n                         args.append(newa)\n-                if not _aresame(tuple(args), tail_args):\n-                    tail = self.func(*args)\n-                return self.func(x, tail)\n+                return self.func(x, *args)\n \n         # this is the same as above, but there were no pure-number args to\n         # deal with\n@@ -345,9 +343,7 @@ def _eval_evalf(self, prec):\n                 args.append(a)\n             else:\n                 args.append(newa)\n-        if not _aresame(tuple(args), self.args):\n-            return self.func(*args)\n-        return self\n+        return self.func(*args)\n \n     @classmethod\n     def make_args(cls, expr):\n",
        "pr_link": "https://github.com/sympy/sympy/pull/13146"
    }
}