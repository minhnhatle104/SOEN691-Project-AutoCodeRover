# modification 1
```python
<file>django/core/exceptions.py</file>
<original>    def __repr__(self):
        return 'ValidationError(%s)' % self
</original>
<patched>    def __repr__(self):
        return 'ValidationError(%s)' % self

    def __eq__(self, other):
        if not isinstance(other, ValidationError):
            return NotImplemented

        # Compare error messages regardless of their structure (list, dict) and order
        self_messages = self.messages
        other_messages = other.messages

        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
            return set(self_messages) == set(other_messages)
        elif hasattr(self, 'error_list') and hasattr(other, 'error_list'):
            return set(self_messages) == set(other_messages)
        else:
            return self_messages == other_messages
</patched>
```

This patch adds an `__eq__` method to the `ValidationError` class, enabling comparison of `ValidationError` instances based on their messages. The comparison is made order-independent for lists and dictionaries by converting them to sets, which inherently ignores order. However, this approach may not fully address duplicates within lists. If exact duplication and order are crucial beyond the set comparison, further refinement may be needed, potentially involving sorted lists or more complex comparison logic. This solution aims to address the primary issue of comparing `ValidationError` instances in a more intuitive manner, especially useful in testing scenarios.