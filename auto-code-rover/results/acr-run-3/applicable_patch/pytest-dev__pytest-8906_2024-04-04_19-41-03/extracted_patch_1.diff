diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..e2b718ccf 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -123,23 +123,36 @@ def exit(msg: str, returncode: Optional[int] = None) -> "NoReturn":
 @_with_exception(Skipped)
 def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
     """Skip an executing test with the given message.
-
-    This function should be called only during testing (setup, call or teardown) or
-    during collection by using the ``allow_module_level`` flag.  This function can
-    be called in doctests as well.
-
-    :param bool allow_module_level:
-        Allows this function to be called at module level, skipping the rest
-        of the module. Defaults to False.
-
-    .. note::
-        It is better to use the :ref:`pytest.mark.skipif ref` marker when
-        possible to declare a test to be skipped under certain conditions
-        like mismatching platforms or dependencies.
-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
-        to skip a doctest statically.
-    """
+    
+        This function should be called only during testing (setup, call or teardown) or
+        during collection by using the ``allow_module_level`` flag.  This function can
+        be called in doctests as well.
+    
+        :param bool allow_module_level:
+            Allows this function to be called at module level, skipping the rest
+            of the module. Defaults to False.
+    
+        .. note::
+            It is better to use the :ref:`pytest.mark.skipif ref` marker when
+            possible to declare a test to be skipped under certain conditions
+            like mismatching platforms or dependencies.
+            Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
+            <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
+            to skip a doctest statically.
+            
+        .. warning::
+            If you encounter an error suggesting the use of `pytest.mark.skip` or `pytest.mark.skipif` for module-level skipping and your module contains syntax or features not supported by the current Python version, consider using `skip` with `allow_module_level=True`. This allows you to skip the entire module execution before encountering syntax errors. Example:
+            
+            ```python
+            from _pytest.outcomes import skip
+            import sys
+            
+            if sys.version_info < (3, 8):
+                skip(msg="Requires Python >= 3.8", allow_module_level=True)
+            ```
+            
+            This approach is particularly useful for modules that use newer Python syntax or features not available in earlier Python versions.
+        """
     __tracebackhide__ = True
     raise Skipped(msg=msg, allow_module_level=allow_module_level)
 
