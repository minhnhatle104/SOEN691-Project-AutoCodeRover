diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py
index 503f7f56fd..46401db441 100644
--- a/django/db/backends/base/creation.py
+++ b/django/db/backends/base/creation.py
@@ -58,7 +58,7 @@ class BaseDatabaseCreation:
         settings.DATABASES[self.connection.alias]["NAME"] = test_database_name
         self.connection.settings_dict["NAME"] = test_database_name
 
-        if self.connection.settings_dict['TEST']['MIGRATE']:
+        if self.connection.settings_dict['TEST'].get('MIGRATE', True):
             # We report migrate messages at one level lower than that
             # requested. This ensures we don't get flooded with messages during
             # testing (unless you really ask to be flooded).
@@ -69,12 +69,25 @@ class BaseDatabaseCreation:
                 database=self.connection.alias,
                 run_syncdb=True,
             )
+        else:
+            # When MIGRATE is False, ensure basic initial setup is done for the database, 
+            # which is required for the test cases to run without actual migrations.
+            call_command(
+                'migrate',
+                verbosity=max(verbosity - 1, 0),
+                interactive=False,
+                database=self.connection.alias,
+                run_syncdb=True,
+                skip=['auth', 'contenttypes', 'sessions']
+            )
 
         # We then serialize the current state of the database into a string
         # and store it on the connection. This slightly horrific process is so people
         # who are testing on databases without transactions or who are using
         # a TransactionTestCase still get a clean database on every test run.
-        if serialize:
+        if serialize and self.connection.settings_dict['TEST'].get('MIGRATE', True):
+            # Only serialize database contents if migrations are not skipped.
+            # This avoids serialization errors when certain tables are missing due to skipped migrations.
             self.connection._test_serialized_contents = self.serialize_db_to_string()
 
         call_command('createcachetable', database=self.connection.alias)
