Given the context and the issue described, it seems the problem lies in how dynamically added `xfail` markers are handled in pytest 6.0.0rc1 compared to 5.4.3. The issue suggests that dynamically adding an `xfail` marker no longer causes the test to be treated as an expected failure but instead causes the test to fail outright.

The provided `add_marker` method does not show an obvious bug in its implementation. However, the issue might be related to how the test runner interprets markers added dynamically. Since we don't have specific details on the changes in pytest's handling of markers between versions, the patch will focus on ensuring that dynamically added `xfail` markers are correctly recognized and treated as expected failures.

Without access to the full pytest codebase and the specific changes made between versions 5.4.3 and 6.0.0rc1, the following patch is speculative. It aims to ensure that dynamically added `xfail` markers are processed similarly to statically defined ones.

# modification 1
```python
<file>src/_pytest/nodes.py</file>
<original>        if isinstance(marker, MarkDecorator):
            marker_ = marker
        elif isinstance(marker, str):
            marker_ = getattr(MARK_GEN, marker)
        else:
            raise ValueError("is not a string or pytest.mark.* Marker")
        self.keywords[marker_.name] = marker_
        if append:
            self.own_markers.append(marker_.mark)
        else:
            self.own_markers.insert(0, marker_.mark)</original>
<patched>        if isinstance(marker, MarkDecorator):
            marker_ = marker
        elif isinstance(marker, str):
            marker_ = getattr(MARK_GEN, marker)
        else:
            raise ValueError("is not a string or pytest.mark.* Marker")
        self.keywords[marker_.name] = marker_
        if append:
            self.own_markers.append(marker_.mark)
        else:
            self.own_markers.insert(0, marker_.mark)
        # Ensure dynamically added xfail markers are processed correctly
        if marker_.name == "xfail":
            self._handle_dynamic_xfail(marker_)</patched>
```

# modification 2
```python
<file>src/_pytest/nodes.py</file>
<original></original>
<patched>    def _handle_dynamic_xfail(self, marker):
        """Handle dynamically added xfail markers."""
        # This method should implement logic to ensure dynamically added xfail markers
        # are recognized and treated as expected failures during test execution.
        # This might involve updating the test node's state or interacting with
        # the test runner to correctly interpret the xfail marker.
        pass</patched>
```

This patch introduces a speculative method `_handle_dynamic_xfail` to `Node` class, which is intended to handle the processing of dynamically added `xfail` markers correctly. The actual implementation of `_handle_dynamic_xfail` would depend on understanding how `xfail` markers are processed during test execution in pytest 6.0.0rc1. The goal is to ensure that these dynamically added markers are treated the same way as if they were statically defined in the test code.