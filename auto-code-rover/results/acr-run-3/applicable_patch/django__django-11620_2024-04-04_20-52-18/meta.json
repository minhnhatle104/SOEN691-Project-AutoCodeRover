{
    "task_id": "django__django-11620",
    "setup_info": {
        "repo_path": "/media/media0/yuntong/SWE-bench/testbed/django__django/setup_django__django__3.0",
        "env_name": "setup_django__django__3.0",
        "pre_install": [],
        "install": "python -m pip install -e .",
        "test_cmd": "./tests/runtests.py --verbosity 2 view_tests.tests.test_debug"
    },
    "task_info": {
        "instance_id": "django__django-11620",
        "base_commit": "514efa3129792ec2abb2444f3e7aeb3f21a38386",
        "hints_text": "It seems that other exceptions correctly result in a technical 500 response.\nThe technical_404_response view performs a new URL resolving (cf \u200bhttps://github.com/django/django/blob/a8e492bc81fca829f5d270e2d57703c02e58701e/django/views/debug.py#L482) which will obviously raise a new Http404 which won't be caught as only Resolver404 is checked. That means the WSGI handler fails and the WSGI server returns the previously described default error message (indeed the error message is the default one from wsgiref.handlers.BaseHandler \u200bhttps://docs.python.org/3.6/library/wsgiref.html#wsgiref.handlers.BaseHandler.error_body). The solution seems to be to catch Http404 instead of Resolver404 in technical_404_response. This will result in a technical 404 page with the Http404's message displayed and will match the behaviour of when DEBUG is False.\nCreated \u200bPR , but I am not sure how to write the tests. I've looking about the response before and after catch Http404 instead of Resolver404, and there is no difference. Should I also change the technical_404.html for response?\nI've added test to the patch, but not sure if it is correct.\nI have made the requested changes; please review again",
        "created_at": "2019-08-02T13:56:08Z",
        "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -12,11 +12,13 @@\n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n+from django.http import Http404\n from django.shortcuts import render\n from django.template import TemplateDoesNotExist\n from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n+from django.urls.converters import IntConverter\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n@@ -237,6 +239,11 @@ def test_template_encoding(self):\n             technical_404_response(mock.MagicMock(), mock.Mock())\n             m.assert_called_once_with(encoding='utf-8')\n \n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n \n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n",
        "repo": "django/django",
        "problem_statement": "When DEBUG is True, raising Http404 in a path converter's to_python method does not result in a technical response\nDescription\n\t\nThis is the response I get (plain text): \nA server error occurred. Please contact the administrator.\nI understand a ValueError should be raised which tells the URL resolver \"this path does not match, try next one\" but Http404 is what came to my mind intuitively and the error message was not very helpful.\nOne could also make a point that raising a Http404 should be valid way to tell the resolver \"this is indeed the right path but the current parameter value does not match anything so stop what you are doing and let the handler return the 404 page (including a helpful error message when DEBUG is True instead of the default 'Django tried these URL patterns')\".\nThis would prove useful for example to implement a path converter that uses get_object_or_404.\n",
        "version": "3.0",
        "FAIL_TO_PASS": [
            "test_technical_404_converter_raise_404 (view_tests.tests.test_debug.DebugViewTests)"
        ],
        "PASS_TO_PASS": [
            "A message can be provided in addition to a request",
            "A simple exception report can be generated",
            "An exception report can be generated even for a disallowed host.",
            "An exception report can be generated for just a request",
            "An exception report can be generated without request",
            "Large values should not create a large HTML.",
            "Non-UTF-8 exceptions/values should not make the output generation choke.",
            "Safe strings in local variables are escaped.",
            "Tests for not existing file",
            "The ExceptionReporter supports Unix, Windows and Macintosh EOL markers",
            "Unprintable values should not make the output generation choke.",
            "test_400 (view_tests.tests.test_debug.DebugViewTests)",
            "test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)",
            "test_403 (view_tests.tests.test_debug.DebugViewTests)",
            "test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)",
            "test_403_template (view_tests.tests.test_debug.DebugViewTests)",
            "test_404 (view_tests.tests.test_debug.DebugViewTests)",
            "test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)",
            "test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)",
            "test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)",
            "test_ajax_response_encoding (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)",
            "test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)",
            "test_cleanse_setting_basic (view_tests.tests.test_debug.HelperFunctionTests)",
            "test_cleanse_setting_ignore_case (view_tests.tests.test_debug.HelperFunctionTests)",
            "test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.HelperFunctionTests)",
            "test_custom_exception_reporter_filter (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)",
            "test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)",
            "test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_files (view_tests.tests.test_debug.DebugViewTests)",
            "test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)",
            "test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_message_only (view_tests.tests.test_debug.PlainTextReportTests)",
            "test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)",
            "test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)",
            "test_non_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)",
            "test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_paranoid_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)",
            "test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)",
            "test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)",
            "test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)",
            "test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)",
            "test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)",
            "test_technical_404 (view_tests.tests.test_debug.DebugViewTests)",
            "test_template_encoding (view_tests.tests.test_debug.DebugViewTests)",
            "test_template_encoding (view_tests.tests.test_debug.ExceptionReporterTests)",
            "test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)",
            "test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)",
            "test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)",
            "test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)"
        ],
        "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
        "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -5,10 +5,10 @@\n from pathlib import Path\n \n from django.conf import settings\n-from django.http import HttpResponse, HttpResponseNotFound\n+from django.http import Http404, HttpResponse, HttpResponseNotFound\n from django.template import Context, Engine, TemplateDoesNotExist\n from django.template.defaultfilters import pprint\n-from django.urls import Resolver404, resolve\n+from django.urls import resolve\n from django.utils import timezone\n from django.utils.datastructures import MultiValueDict\n from django.utils.encoding import force_str\n@@ -483,7 +483,7 @@ def technical_404_response(request, exception):\n     caller = ''\n     try:\n         resolver_match = resolve(request.path)\n-    except Resolver404:\n+    except Http404:\n         pass\n     else:\n         obj = resolver_match.func\n",
        "pr_link": "https://github.com/django/django/pull/11620"
    }
}