# modification 1
```python
<file>src/flask/cli.py</file>
<original>headers = ("Endpoint", "Methods", "Rule")
widths = (
    max(len(rule.endpoint) for rule in rules),
    max(len(methods) for methods in rule_methods),
    max(len(rule.rule) for rule in rules),
)
widths = [max(len(h), w) for h, w in zip(headers, widths)]
row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}".format(*widths)

click.echo(row.format(*headers).strip())
click.echo(row.format(*("-" * width for width in widths)))

for rule, methods in zip(rules, rule_methods):
    click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())</original>
<patched>headers = ("Domain", "Endpoint", "Methods", "Rule")
widths = (
    max(len(rule.subdomain) if rule.subdomain else "test.local" for rule in rules),
    max(len(rule.endpoint) for rule in rules),
    max(len(methods) for methods in rule_methods),
    max(len(rule.rule) for rule in rules),
)
widths = [max(len(h), w) for h, w in zip(headers, widths)]
row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}".format(*widths)

click.echo(row.format(*headers).strip())
click.echo(row.format(*("-" * width for width in widths)))

for rule, methods in zip(rules, rule_methods):
    domain = rule.subdomain + ".test.local" if rule.subdomain else "test.local"
    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())</patched>
```

This modification adds a "Domain" column to the output of the `flask routes` command. It assumes "test.local" as the default domain, which should be replaced with the actual default domain of the application if different. The domain for each route is constructed by appending the subdomain (if present) to ".test.local". If no subdomain is present, the default domain is used. This change allows users to see at a glance which routes are assigned to which subdomain or the main domain.