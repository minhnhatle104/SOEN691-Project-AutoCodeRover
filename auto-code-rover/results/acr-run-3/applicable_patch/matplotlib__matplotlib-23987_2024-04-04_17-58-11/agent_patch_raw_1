```python
<file>lib/matplotlib/figure.py</file>
<original>        if (self.get_layout_engine() is not None and
                not self.get_layout_engine().adjust_compatible):
            _api.warn_external(
                "This figure was using a layout engine that is "
                "incompatible with subplots_adjust and/or tight_layout; "
                "not calling subplots_adjust.")
            return</original>
<patched>        if (self.get_layout_engine() is not None and
                not self.get_layout_engine().adjust_compatible and
                self.get_constrained_layout()):
            _api.warn_external(
                "This figure was using a layout engine that is "
                "incompatible with subplots_adjust and/or tight_layout; "
                "not calling subplots_adjust.")
            return</patched>
```

**Explanation of the Patch:**

The patch adds an additional condition to the warning logic in the `subplots_adjust` method of the `FigureBase` class. Previously, the warning was issued whenever a layout engine was present and marked as incompatible with `subplots_adjust` or `tight_layout`. The problem was that this warning was also triggered when `constrained_layout` was set to `False`, which should not be considered an incompatible state.

By adding the `self.get_constrained_layout()` check, the warning will now only be issued if the layout engine is incompatible **and** `constrained_layout` is actively enabled (`True`). This resolves the issue where the warning was incorrectly displayed even when `constrained_layout` was set to `False`, aligning the behavior with the expected outcome described in the issue.