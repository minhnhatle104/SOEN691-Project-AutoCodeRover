Given the context and the issue described, it seems the problem lies in how the `--msg-template` argument is processed and how custom braces are not recognized in the newer version of Pylint. The provided code snippets from `pylint/reporters/text.py` do not directly show where the `--msg-template` is parsed or how it's applied to the output format. However, the issue likely stems from a change in how message templates are handled between versions.

Without specific details on the mechanism that has changed or introduced the bug, a hypothetical patch would involve ensuring that the `--msg-template` argument can accept and correctly process custom braces. Since the exact mechanism is not shown in the provided snippets, I'll outline a general approach that could be taken to address the issue, based on common practices for handling template strings in Python.

### Hypothetical Patch Approach

1. **Enhance Template Processing**: Ensure that the template processing logic can handle custom braces. This might involve using a more flexible template engine or custom parsing logic that can recognize and substitute custom brace-enclosed fields correctly.

2. **Escape Handling**: If the issue is due to the template engine or parsing logic treating custom braces as part of its syntax, introducing an escape mechanism or pre-processing step to handle custom braces might be necessary.

Since the specific code handling the `--msg-template` argument is not provided, below is a conceptual patch that outlines how one might introduce a pre-processing step to handle custom braces in a generic template processing function. This is purely illustrative and may not directly apply to the Pylint codebase without further context.

### Conceptual Patch

```python
<file>pylint/reporters/text.py</file>
<original>
self._template = self.line_format
</original>
<patched>
# Conceptual patch: Pre-process the line_format to handle custom braces
def preprocess_template(template):
    # Example pre-processing logic to handle custom braces
    # This would need to be adapted to the actual template logic used by Pylint
    return template.replace('{{', '{').replace('}}', '}')

self._template = preprocess_template(self.line_format)
</patched>
```

This patch assumes that the issue is with handling custom braces (`{{` and `}}`) and that replacing them with standard braces (`{` and `}`) before applying the template would resolve the issue. The actual solution would depend on a detailed understanding of how templates are processed in Pylint and might involve more sophisticated parsing or substitution logic.