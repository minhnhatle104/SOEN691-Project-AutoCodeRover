Given the context and the issue described, the patch should ensure that overloaded functions respect the `autodoc_typehints = 'none'` setting. Since the search did not reveal direct handling of `@overload` in relation to `autodoc_typehints`, and considering the places where `autodoc_typehints` is checked, the patch will focus on enhancing the `format_args` method in `FunctionDocumenter` and `MethodDocumenter` classes to better handle overloaded functions. This approach is speculative, as the exact mechanism to detect and handle overloaded functions is not directly evident from the provided code snippets. However, it aligns with the general direction suggested by the issue description.

# modification 1
```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>def format_args(self, **kwargs: Any) -> str:
    if self.env.config.autodoc_typehints in ('none', 'description'):
        kwargs.setdefault('show_annotation', False)</original>
<patched>def format_args(self, **kwargs: Any) -> str:
    if self.env.config.autodoc_typehints == 'none':
        return ''
    if self.env.config.autodoc_typehints == 'description':
        kwargs.setdefault('show_annotation', False)</patched>
```

Explanation: This modification explicitly returns an empty string for the function/method signature when `autodoc_typehints` is set to `'none'`, ensuring that no type hints are displayed. This change is applied to the `format_args` method in both `FunctionDocumenter` and `MethodDocumenter` classes, as they are responsible for formatting function and method signatures, respectively. The original code only disabled showing annotations without directly handling the case where no type hints should be shown at all.

Note: This patch assumes that the handling of overloaded functions does not significantly differ from regular functions in terms of how their signatures are formatted. If overloaded functions are processed differently in a way not covered by the `format_args` method, additional modifications might be necessary, specifically targeting the handling of overloaded functions. Further investigation into the Sphinx codebase would be required to identify such mechanisms if this patch does not resolve the issue.