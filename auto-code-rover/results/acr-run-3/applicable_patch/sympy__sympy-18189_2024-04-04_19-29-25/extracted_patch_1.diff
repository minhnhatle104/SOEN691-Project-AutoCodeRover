diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..98a5e07530 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -179,10 +179,16 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
                 raise TypeError(
                     'syms should be given as a sequence, e.g. a list')
             syms = [i for i in syms if i in var]
-            if syms != var:
-                dict_sym_index = dict(zip(syms, range(len(syms))))
-                return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+            # Correctly handle the permutation of solutions when custom symbols order is provided
+            if syms and set(syms) != set(var):
+                dict_sym_index = dict(zip(var, range(len(var))))
+                original_solutions = diophantine(eq, param, permute=permute)
+                permuted_solutions = set()
+                for sol in original_solutions:
+                    # Reorder each solution tuple according to the custom symbols order
+                    permuted_solution = tuple(sol[dict_sym_index[sym]] for sym in syms)
+                    permuted_solutions.add(permuted_solution)
+                return permuted_solutions
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
