# modification 1
```python
<file>sympy/printing/latex.py</file>
<original>    def _print_Poly(self, poly):
        cls = poly.__class__.__name__
        expr = self._print(poly.as_expr())
        gens = list(map(self._print, poly.gens))
        domain = "domain=%s" % self._print(poly.get_domain())

        args = ", ".join([expr] + gens + [domain])
        if cls in accepted_latex_functions:
            tex = r"\%s {\left (%s \right )}" % (cls, args)
        else:
            tex = r"\operatorname{%s}{\left( %s \right)}" % (cls, args)

        return tex</original>
<patched>    def _print_Poly(self, poly):
        cls = poly.__class__.__name__
        # Ensure the expression is printed in the same order as specified by the 'order' setting
        if self._settings.get('order', None) is not None:
            expr = self._print(poly.as_expr(), order=self._settings['order'])
        else:
            expr = self._print(poly.as_expr())
        gens = list(map(self._print, poly.gens))
        domain = "domain=%s" % self._print(poly.get_domain())

        args = ", ".join([expr] + gens + [domain])
        if cls in accepted_latex_functions:
            tex = r"\%s {\left (%s \right )}" % (cls, args)
        else:
            tex = r"\operatorname{%s}{\left( %s \right)}" % (cls, args)

        return tex</patched>
```

This modification ensures that when printing a `Poly` object to LaTeX, the order of monomials respects the 'order' setting if it is explicitly provided. This change aims to align the behavior of the LaTeX printer with that of the `str` and `pretty` printers regarding monomial ordering.