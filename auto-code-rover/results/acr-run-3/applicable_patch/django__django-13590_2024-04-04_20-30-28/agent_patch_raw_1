# modification 1
```python
<file>django/db/models/sql/query.py</file>
<original>    def resolve_lookup_value(self, value, can_reuse, allow_joins):
        if hasattr(value, 'resolve_expression'):
            value = value.resolve_expression(
                self, reuse=can_reuse, allow_joins=allow_joins,
            )
        elif isinstance(value, (list, tuple)):
            # The items of the iterable may be expressions and therefore need
            # to be resolved independently.
            return type(value)(
                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                for sub_value in value
            )
        return value
</original>
<patched>    def resolve_lookup_value(self, value, can_reuse, allow_joins):
        if hasattr(value, 'resolve_expression'):
            value = value.resolve_expression(
                self, reuse=can_reuse, allow_joins=allow_joins,
            )
        elif isinstance(value, (list, tuple)):
            # Check if 'value' is a named tuple by looking for '_fields' attribute
            if hasattr(value, '_fields'):
                # Named tuples have the '_fields' attribute
                # Unpack the generator expression using '*'
                return type(value)(
                    *(self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                      for sub_value in value)
                )
            else:
                # The items of the iterable may be expressions and therefore need
                # to be resolved independently.
                return type(value)(
                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                    for sub_value in value
                )
        return value
</patched>
```