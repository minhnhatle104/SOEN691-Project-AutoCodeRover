diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..eba34999eb 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -50,16 +50,17 @@ def _multi_decorate(decorators, method):
     return _wrapper
 
 
+from functools import partial, update_wrapper
+
 def method_decorator(decorator, name=''):
     """
     Convert a function decorator into a method decorator
     """
-    # 'obj' can be a class or a function. If 'obj' is a function at the time it
-    # is passed to _dec,  it will eventually be a method of the class it is
-    # defined on. If 'obj' is a class, the 'name' is required to be the name
-    # of the method that will be decorated.
     def _dec(obj):
         if not isinstance(obj, type):
+            if isinstance(obj, partial):
+                obj.func.__name__ = getattr(obj.func, '__name__', obj.func.__class__.__name__)
+                obj.func.__module__ = getattr(obj.func, '__module__', None)
             return _multi_decorate(decorator, obj)
         if not (name and hasattr(obj, name)):
             raise ValueError(
@@ -76,11 +77,8 @@ def method_decorator(decorator, name=''):
         setattr(obj, name, _wrapper)
         return obj
 
-    # Don't worry about making _dec look similar to a list/tuple as it's rather
-    # meaningless.
     if not hasattr(decorator, '__iter__'):
-        update_wrapper(_dec, decorator)
-    # Change the name to aid debugging.
+        update_wrapper(_dec, decorator, assigned=('__name__', '__module__'))
     obj = decorator if hasattr(decorator, '__name__') else decorator.__class__
     _dec.__name__ = 'method_decorator(%s)' % obj.__name__
     return _dec
