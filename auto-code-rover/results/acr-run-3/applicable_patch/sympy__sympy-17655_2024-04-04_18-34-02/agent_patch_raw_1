# modification 1
```python
<file>sympy/geometry/point.py</file>
<original>        try:
            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
        except TypeError:
            raise GeometryError("Don't know how to add {} and a Point object".format(other))

        coords = [simplify(a + b) for a, b in zip(s, o)]
        return Point(coords, evaluate=False)</original>
<patched>        from sympy.core.mul import Mul
        if isinstance(other, Mul) and any(isinstance(arg, Point) for arg in other.args):
            # Handle case where 'other' is a result of multiplication involving a Point and a sympy number
            point_arg = [arg for arg in other.args if isinstance(arg, Point)][0]
            non_point_args = [arg for arg in other.args if not isinstance(arg, Point)]
            # Perform multiplication of non-point arguments separately
            non_point_result = Mul(*non_point_args, evaluate=True)
            try:
                s, o = Point._normalize_dimension(self, point_arg)
                coords = [simplify(a + non_point_result*b) for a, b in zip(s, o)]
                return Point(coords, evaluate=False)
            except TypeError:
                raise GeometryError("Don't know how to add {} and a Point object".format(other))
        else:
            try:
                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
            except TypeError:
                raise GeometryError("Don't know how to add {} and a Point object".format(other))

            coords = [simplify(a + b) for a, b in zip(s, o)]
            return Point(coords, evaluate=False)</patched>
```

This patch addresses the issue by adding a condition to check if the `other` operand in the `__add__` method is a result of a multiplication involving a `Point` object and a `sympy` number (processed by `sympify`). If so, it separates the `Point` argument from the multiplication, performs the multiplication of the non-`Point` arguments to get a scalar result, and then proceeds with the addition as before, but multiplying the scalar result with each coordinate of the `Point` argument. This approach ensures that the addition operation works as expected, regardless of the order of operations.