# modification 1
```python
<file>django/contrib/auth/tokens.py</file>
<original>    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
        invalidates the token.

        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)</original>
<patched>    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        3. Including the user's email ensures the token is invalidated if the
           email is changed.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
        invalidates the token.

        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
        # Use get_email_field_name to support custom user models that may not have an email field.
        email_field_name = user.get_email_field_name()
        email = getattr(user, email_field_name, '')
        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email</patched>
```

This patch modifies the `_make_hash_value` method in the `PasswordResetTokenGenerator` class to include the user's email address in the hash value calculation. This change ensures that if a user's email address changes, any previously generated password reset tokens will be invalidated, as the hash value will no longer match. The use of `get_email_field_name` and `getattr` ensures compatibility with custom user models that may not have an email field, addressing the concern that not all users might have an email address.