# modification 1
```python
<file>src/_pytest/python.py</file>
<original>def _showfixtures_main(config, session):
    ...
    for baseid, module, bestrel, argname, fixturedef in available:
        ...
        if verbose > 0:
            funcargspec = "%s -- %s" % (argname, bestrel)
        else:
            funcargspec = argname
        tw.line(funcargspec, green=True)
        ...
</original>
<patched>def _showfixtures_main(config, session):
    ...
    for baseid, module, bestrel, argname, fixturedef in available:
        ...
        # Include fixture scope in the output
        fixture_scope = fixturedef.scope
        if verbose > 0:
            funcargspec = "%s -- %s -- scope: %s" % (argname, bestrel, fixture_scope)
        else:
            funcargspec = "%s -- scope: %s" % (argname, fixture_scope)
        tw.line(funcargspec, green=True)
        ...
</patched>
```

# modification 2
```python
<file>src/_pytest/python.py</file>
<original>group.addoption(
        "--fixtures",
        "--funcargs",
        action="store_true",
        dest="showfixtures",
        default=False,
        help="show available fixtures, sorted by plugin appearance "
        "(fixtures with leading '_' are only shown with '-v')",
    )</original>
<patched>group.addoption(
        "--fixtures",
        "--funcargs",
        action="store_true",
        dest="showfixtures",
        default=False,
        help="show available fixtures, sorted by plugin appearance "
        "(fixtures with leading '_' are only shown with '-v'). "
        "Includes fixture scope when verbose (-v) is used.",
    )</patched>
```

These modifications aim to enhance the `--fixtures` option in `pytest` to display the scope of each fixture when the verbose flag is used. The first modification updates the `_showfixtures_main` function to include the scope of each fixture in its output. The second modification updates the help text for the `--fixtures` option to indicate that fixture scope information will be included when verbose output is enabled.