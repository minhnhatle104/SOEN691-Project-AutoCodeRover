diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 397146a354..f7d7053685 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -982,17 +982,21 @@ class ForeignKey(ForeignObject):
             self.remote_field.field_name = cls._meta.pk.name
 
     def formfield(self, *, using=None, **kwargs):
-        if isinstance(self.remote_field.model, str):
-            raise ValueError("Cannot create form field for %r yet, because "
-                             "its related model %r has not been loaded yet" %
-                             (self.name, self.remote_field.model))
-        return super().formfield(**{
-            'form_class': forms.ModelChoiceField,
-            'queryset': self.remote_field.model._default_manager.using(using),
-            'to_field_name': self.remote_field.field_name,
-            **kwargs,
-            'blank': self.blank,
-        })
+            if isinstance(self.remote_field.model, str):
+                raise ValueError("Cannot create form field for %r yet, because "
+                                 "its related model %r has not been loaded yet" %
+                                 (self.name, self.remote_field.model))
+            formfield = super().formfield(**{
+                'form_class': forms.ModelChoiceField,
+                'queryset': self.remote_field.model._default_manager.using(using),
+                'to_field_name': self.remote_field.field_name,
+                **kwargs,
+                'blank': self.blank,
+            })
+            # Ensure the queryset is distinct to avoid duplicate options
+            if 'queryset' in kwargs:
+                formfield.queryset = formfield.queryset.distinct()
+            return formfield
 
     def db_check(self, connection):
         return []
diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..e9c2c3b7c9 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -96,11 +96,11 @@ def model_to_dict(instance, fields=None, exclude=None):
 
 
 def apply_limit_choices_to_to_formfield(formfield):
-    """Apply limit_choices_to to the formfield's queryset if needed."""
+    """Apply limit_choices_to to the formfield's queryset if needed and ensure it's distinct."""
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
