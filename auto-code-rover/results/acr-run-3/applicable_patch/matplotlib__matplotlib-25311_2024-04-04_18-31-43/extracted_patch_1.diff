diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index ff6abdb958..b4baa2a349 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -1171,38 +1171,46 @@ class Legend(Artist):
         return self.legendPatch.contains(event)
 
     def set_draggable(self, state, use_blit=False, update='loc'):
-        """
-        Enable or disable mouse dragging support of the legend.
-
-        Parameters
-        ----------
-        state : bool
-            Whether mouse dragging is enabled.
-        use_blit : bool, optional
-            Use blitting for faster image composition. For details see
-            :ref:`func-animation`.
-        update : {'loc', 'bbox'}, optional
-            The legend parameter to be changed when dragged:
-
-            - 'loc': update the *loc* parameter of the legend
-            - 'bbox': update the *bbox_to_anchor* parameter of the legend
-
-        Returns
-        -------
-        `.DraggableLegend` or *None*
-            If *state* is ``True`` this returns the `.DraggableLegend` helper
-            instance. Otherwise this returns *None*.
-        """
-        if state:
-            if self._draggable is None:
-                self._draggable = DraggableLegend(self,
-                                                  use_blit,
-                                                  update=update)
-        else:
-            if self._draggable is not None:
-                self._draggable.disconnect()
-            self._draggable = None
-        return self._draggable
+            """
+            Enable or disable mouse dragging support of the legend.
+    
+            Parameters
+            ----------
+            state : bool
+                Whether mouse dragging is enabled.
+            use_blit : bool, optional
+                Use blitting for faster image composition. For details see
+                :ref:`func-animation`.
+            update : {'loc', 'bbox'}, optional
+                The legend parameter to be changed when dragged:
+    
+                - 'loc': update the *loc* parameter of the legend
+                - 'bbox': update the *bbox_to_anchor* parameter of the legend
+    
+            Returns
+            -------
+            `.DraggableLegend` or *None*
+                If *state* is ``True`` this returns the `.DraggableLegend` helper
+                instance. Otherwise this returns *None*.
+    
+            Note
+            ----
+            The draggable state is not preserved during pickling due to backend limitations.
+            """
+            if state:
+                if self._draggable is None:
+                    self._draggable = DraggableLegend(self,
+                                                      use_blit,
+                                                      update=update)
+            else:
+                if self._draggable is not None:
+                    self._draggable.disconnect()
+                self._draggable = None
+            # Ensure the draggable state does not interfere with pickling
+            self._draggable_state = state
+            self._draggable_use_blit = use_blit
+            self._draggable_update = update
+            return self._draggable
 
     def get_draggable(self):
         """Return ``True`` if the legend is draggable, ``False`` otherwise."""
