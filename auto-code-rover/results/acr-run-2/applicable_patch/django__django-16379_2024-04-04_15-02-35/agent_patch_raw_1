# modification 1
```python
<file>django/core/cache/backends/filebased.py</file>
<original>    def has_key(self, key, version=None):
        fname = self._key_to_file(key, version)
        if os.path.exists(fname):
            with open(fname, "rb") as f:
                return not self._is_expired(f)
        return False</original>
<patched>    def has_key(self, key, version=None):
        fname = self._key_to_file(key, version)
        try:
            with open(fname, "rb") as f:
                return not self._is_expired(f)
        except FileNotFoundError:
            return False</patched>
```

# modification 2
```python
<file>django/core/cache/backends/filebased.py</file>
<original>    def _is_expired(self, f):
        """
        Take an open cache file `f` and delete it if it's expired.
        """
        try:
            exp = pickle.load(f)
        except EOFError:
            exp = 0  # An empty file is considered expired.
        if exp is not None and exp < time.time():
            f.close()  # On Windows a file has to be closed before deleting
            self._delete(f.name)
            return True
        return False</original>
<patched>    def _is_expired(self, f):
        """
        Take an open cache file `f` and delete it if it's expired.
        """
        try:
            exp = pickle.load(f)
        except EOFError:
            exp = 0  # An empty file is considered expired.
        if exp is not None and exp < time.time():
            # Ensure file is closed before attempting to delete to avoid resource warning
            f.close()  # On Windows a file has to be closed before deleting
            try:
                self._delete(f.name)
            except FileNotFoundError:
                pass  # File was already deleted, ignore
            return True
        return False</patched>
```

These modifications address the race condition by handling the `FileNotFoundError` exception gracefully. In the `has_key` method, the exception is caught and treated as if the key does not exist, which is a safe assumption since the file's absence means the key is effectively not present in the cache. In the `_is_expired` method, the addition of a try-except block around the file deletion operation ensures that if the file has already been deleted (possibly by another thread or process), the operation does not raise an unhandled exception, maintaining the integrity of the cache's operation.