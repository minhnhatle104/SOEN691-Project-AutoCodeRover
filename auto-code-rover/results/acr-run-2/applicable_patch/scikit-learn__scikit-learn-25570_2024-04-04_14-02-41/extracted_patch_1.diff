diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index a26145117..3c525c7d9 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -392,7 +392,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
                 elif trans == "drop":
                     continue
                 elif _is_empty_column_selection(columns):
-                    continue
+                                    # Handle transformers with no features when output is set to pandas
+                                    if self.output_format == "pandas":
+                                        yield (name, trans, columns, get_weight(name))
+                                    else:
+                                        continue
 
             if column_as_strings:
                 # Convert all columns to using their string labels
@@ -543,15 +547,16 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         feature_names_out : ndarray of shape (n_features,), dtype=str
             Transformed feature names.
         """
-        if self.verbose_feature_names_out:
-            # Prefix the feature names out with the transformers name
-            names = list(
-                chain.from_iterable(
-                    (f"{name}__{i}" for i in feature_names_out)
-                    for name, feature_names_out in transformer_with_feature_names_out
-                )
-            )
-            return np.asarray(names, dtype=object)
+        if self.verbose_feature_names_out or self.output_format == "pandas":
+                    # Prefix the feature names out with the transformers name, also ensure this for pandas output
+                    names = []
+                    for name, feature_names_out in transformer_with_feature_names_out:
+                        if feature_names_out:
+                            names.extend(f"{name}__{i}" for i in feature_names_out)
+                        else:
+                            # Handle case where transformer has no features
+                            names.append(f"{name}__empty_feature")
+                    return np.asarray(names, dtype=object)
 
         # verbose_feature_names_out is False
         # Check that names are all unique without a prefix
