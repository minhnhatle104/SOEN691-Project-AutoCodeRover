diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..5e075f7ffa 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -175,14 +175,16 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
         var = list(eq.expand(force=True).free_symbols)
         var.sort(key=default_sort_key)
         if syms:
-            if not is_sequence(syms):
-                raise TypeError(
-                    'syms should be given as a sequence, e.g. a list')
-            syms = [i for i in syms if i in var]
-            if syms != var:
-                dict_sym_index = dict(zip(syms, range(len(syms))))
-                return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+                    if not is_sequence(syms):
+                        raise TypeError(
+                            'syms should be given as a sequence, e.g. a list')
+                    syms = [i for i in syms if i in var]
+                    if set(syms) != set(var):
+                        dict_sym_index = dict(zip(var, range(len(var))))
+                        # Correctly handle permutations when syms order is different
+                        solutions = diophantine(eq, param, permute=permute)
+                        return {tuple([t[dict_sym_index[i]] for i in syms])
+                                    for t in solutions}
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
