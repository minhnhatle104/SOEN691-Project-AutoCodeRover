diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..0e59cd9b4 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -123,24 +123,42 @@ def exit(msg: str, returncode: Optional[int] = None) -> "NoReturn":
 @_with_exception(Skipped)
 def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
     """Skip an executing test with the given message.
-
-    This function should be called only during testing (setup, call or teardown) or
-    during collection by using the ``allow_module_level`` flag.  This function can
-    be called in doctests as well.
-
-    :param bool allow_module_level:
-        Allows this function to be called at module level, skipping the rest
-        of the module. Defaults to False.
-
-    .. note::
-        It is better to use the :ref:`pytest.mark.skipif ref` marker when
-        possible to declare a test to be skipped under certain conditions
-        like mismatching platforms or dependencies.
-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
-        to skip a doctest statically.
-    """
+    
+        This function should be called only during testing (setup, call or teardown) or
+        during collection by using the ``allow_module_level`` flag.  This function can
+        be called in doctests as well.
+    
+        :param bool allow_module_level:
+            Allows this function to be called at module level, skipping the rest
+            of the module. Defaults to False. This is particularly useful for skipping
+            modules that are not compatible with the current Python version or other
+            environment constraints.
+    
+        .. note::
+            It is better to use the :ref:`pytest.mark.skipif ref` marker when
+            possible to declare a test to be skipped under certain conditions
+            like mismatching platforms or dependencies. However, for skipping entire
+            modules, especially when dealing with syntax or features not supported in
+            certain Python versions, using `skip` with `allow_module_level=True` is
+            the recommended approach. Ensure to place the skip call at the top of the
+            module before any potentially incompatible syntax is encountered.
+    
+            Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
+            <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
+            to skip a doctest statically.
+            
+            For example, to skip a module under Python versions older than 3.8:
+            ```
+            import sys
+            from pytest import skip
+    
+            if sys.version_info < (3, 8):
+                skip(msg="Requires Python >= 3.8", allow_module_level=True)
+            ```
+        """
     __tracebackhide__ = True
+    if not allow_module_level:
+        raise ValueError("Using pytest.skip with allow_module_level=False outside of a test is not allowed. To skip a module, set allow_module_level=True.")
     raise Skipped(msg=msg, allow_module_level=allow_module_level)
 
 
