diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index f0c81c123b..199d610d7f 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -278,16 +278,18 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         body_copy['__module__'] = model.__module__
         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
 
-        # Create a new table with the updated schema.
-        self.create_model(new_model)
-
-        # Copy data from the old table into the new table
-        self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
-            self.quote_name(new_model._meta.db_table),
-            ', '.join(self.quote_name(x) for x in mapping),
-            ', '.join(mapping.values()),
-            self.quote_name(model._meta.db_table),
-        ))
+        # Check if db_table is explicitly set and if it matches the new model's db_table, skip the operation
+        if model._meta.db_table != 'new__%s' % strip_quotes(model._meta.db_table):
+            # Create a new table with the updated schema.
+            self.create_model(new_model)
+
+            # Copy data from the old table into the new table
+            self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
+                self.quote_name(new_model._meta.db_table),
+                ', '.join(self.quote_name(x) for x in mapping),
+                ', '.join(mapping.values()),
+                self.quote_name(model._meta.db_table),
+            ))
 
         # Delete the old table to make way for the new
         self.delete_model(model, handle_autom2m=False)
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..58b083b09b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -321,11 +321,13 @@ class RenameModel(ModelOperation):
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
             # Move the main table
-            schema_editor.alter_db_table(
-                new_model,
-                old_model._meta.db_table,
-                new_model._meta.db_table,
-            )
+            # Check if db_table is explicitly set and if it matches the new model's db_table, skip the operation
+            if not (old_model._meta.db_table == new_model._meta.db_table and old_model._meta.db_table):
+                schema_editor.alter_db_table(
+                    new_model,
+                    old_model._meta.db_table,
+                    new_model._meta.db_table,
+                )
             # Alter the fields pointing to us
             for related_object in old_model._meta.related_objects:
                 if related_object.related_model == old_model:
