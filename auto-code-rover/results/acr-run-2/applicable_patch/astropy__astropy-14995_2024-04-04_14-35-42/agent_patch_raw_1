# modification 1
```python
<file>astropy/nddata/mixins/ndarithmetic.py</file>
<original>        if (
            self.mask is None and operand is not None and operand.mask is None
        ) or handle_mask is None:
            return None
</original>
<patched>        if handle_mask is None:
            return None
        if self.mask is None and operand is not None and operand.mask is None:
            # When both operands do not have a mask, return None as the result mask
            return None
        elif self.mask is None:
            # When self does not have a mask but operand does, use the operand's mask directly
            return deepcopy(operand.mask)
        elif operand is None or operand.mask is None:
            # When operand does not have a mask but self does, use self's mask directly
            return deepcopy(self.mask)</patched>
```

This modification ensures that when one of the operands does not have a mask, the existing mask from the other operand is used directly, addressing the issue where a `TypeError` was raised due to attempting to perform a bitwise operation between an integer and `None`. This change aligns with the expected behavior described in the issue, where the mask of the existing operand should be propagated to the result when only one operand has a mask.