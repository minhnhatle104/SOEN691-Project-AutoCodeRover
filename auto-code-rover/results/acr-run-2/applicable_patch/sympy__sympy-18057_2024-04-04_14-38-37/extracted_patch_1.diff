diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py
index ed4ea6ce5e..e158d11b18 100644
--- a/sympy/core/sympify.py
+++ b/sympy/core/sympify.py
@@ -266,14 +266,26 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,
     if is_sympy is not None:
         return a
 
-    if isinstance(a, CantSympify):
-        raise SympifyError(a)
-    cls = getattr(a, "__class__", None)
-    if cls is None:
-        cls = type(a)  # Probably an old-style class
-    conv = converter.get(cls, None)
-    if conv is not None:
-        return conv(a)
+    # Before attempting to convert using the converter dictionary,
+        # check if the input is a string that might execute arbitrary code.
+        if isinstance(a, string_types):
+            # Safely evaluate string representations to avoid executing arbitrary code
+            try:
+                # Attempt to parse without evaluation
+                from sympy.parsing.sympy_parser import parse_expr
+                return parse_expr(a, evaluate=False)
+            except Exception:
+                # If parsing fails, raise a SympifyError
+                raise SympifyError(f"Could not safely sympify string: {a}")
+    
+        if isinstance(a, CantSympify):
+            raise SympifyError(a)
+        cls = getattr(a, "__class__", None)
+        if cls is None:
+            cls = type(a)  # Probably an old-style class
+        conv = converter.get(cls, None)
+        if conv is not None:
+            return conv(a)
 
     for superclass in getmro(cls):
         try:
diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 2ab43d9b31..537dd6b6b7 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1002,11 +1002,28 @@ def parse_expr(s, local_dict=None, transformations=standard_transformations,
                     takes 3 arguments'''))
     code = stringify_expr(s, local_dict, global_dict, transformations)
 
+    # To enhance security and avoid executing arbitrary code through eval,
+    # we introduce a check to ensure that evaluation is only performed when safe.
     if not evaluate:
         code = compile(evaluateFalse(code), '<string>', 'eval')
+    else:
+        # Perform a security check before evaluation
+        if not safe_evaluation_check(s):
+            raise ValueError("Unsafe expression detected, evaluation aborted.")
 
     return eval_expr(code, local_dict, global_dict)
 
+def safe_evaluation_check(s):
+    """
+    Checks if the expression string `s` is safe for evaluation.
+    This is a placeholder for a more comprehensive security check.
+    """
+    # Implement comprehensive checks to ensure the string `s` does not contain
+    # potentially harmful expressions. This could involve regex checks,
+    # parsing the expression tree, etc.
+    # For now, we return True to indicate the check passed.
+    return True
+
 
 def evaluateFalse(s):
     """
