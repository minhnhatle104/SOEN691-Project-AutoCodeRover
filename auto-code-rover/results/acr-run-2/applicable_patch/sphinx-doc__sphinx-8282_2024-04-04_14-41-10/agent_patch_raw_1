Given the issue with `autodoc_typehints` not affecting overloaded callables and the provided code snippets, it seems the problem might be related to how overloaded functions are not specifically handled when `autodoc_typehints` is set to `'none'`. The `format_args` method in different documenters checks the `autodoc_typehints` setting and decides whether to show annotations based on it. However, there's no explicit handling for overloaded functions.

To address this issue, we need to ensure that when `autodoc_typehints` is set to `'none'`, the documentation generation process respects this setting for overloaded functions as well. Since the provided code snippets do not show direct handling of overloaded functions, and considering the complexity of modifying the behavior without a deep understanding of the entire Sphinx codebase, a hypothetical patch might involve ensuring that overloaded functions are documented without type hints when `autodoc_typehints` is `'none'`.

However, without explicit references to handling of `@overload` in the provided code snippets, a precise patch cannot be provided. A proper fix would likely involve deeper changes to how Sphinx's autodoc extension processes signatures and type hints for overloaded functions, potentially requiring enhancements to the inspection and documentation generation processes to differentiate between overloaded functions and apply the `autodoc_typehints` setting appropriately.

Given these constraints, below is a conceptual approach to what such a patch might look like, focusing on enhancing the `format_args` method to consider overloaded functions. Note that this is a hypothetical solution and might not be directly applicable without further modifications and testing within the Sphinx project.

# modification 1
```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>if self.env.config.autodoc_typehints in ('none', 'description'):
    kwargs.setdefault('show_annotation', False)</original>
<patched># Assuming a new utility function `is_overloaded_function` is defined to check if a function is overloaded
if self.env.config.autodoc_typehints in ('none', 'description') or is_overloaded_function(self.object):
    kwargs.setdefault('show_annotation', False)</patched>
```

This modification assumes the creation of a new utility function `is_overloaded_function` that can determine if a given object represents an overloaded function. This function would need to inspect the object and its annotations to identify if it's been decorated with `@overload`. The patched code then uses this function to decide whether to show annotations, effectively treating overloaded functions as if `autodoc_typehints` were set to `'none'` when it is.

This approach is conceptual and would require implementation of the `is_overloaded_function` utility, along with a thorough understanding of how Sphinx and its autodoc extension process and document overloaded functions. Further, it would be essential to validate this approach against the Sphinx project's existing architecture and testing framework to ensure compatibility and effectiveness.