# modification 1
```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>if self.analyzer:
    attr_docs = self.analyzer.find_attr_docs()
else:
    attr_docs = {}
</original>
<patched>if self.analyzer:
    attr_docs = self.analyzer.find_attr_docs()
else:
    attr_docs = {}

# Check if __all__ is defined and empty, and set a flag accordingly
module_all_defined_and_empty = False
if hasattr(self.object, '__all__') and not self.object.__all__:
    module_all_defined_and_empty = True</patched>
```

# modification 2
```python
<file>sphinx/ext/autodoc/__init__.py</file>
<original>if keep:
    ret.append((membername, member, isattr))</original>
<patched># If __all__ is defined and empty, skip adding members unless explicitly allowed
if not module_all_defined_and_empty or (module_all_defined_and_empty and membername in self.object.__all__):
    if keep:
        ret.append((membername, member, isattr))</patched>
```

These modifications introduce a check to determine if the `__all__` attribute is defined and empty for a module. If it is, a flag `module_all_defined_and_empty` is set to `True`. This flag is then used to conditionally add members to the documentation, effectively skipping all members unless they are explicitly mentioned in `__all__`, which in the case of an empty `__all__` would mean skipping all members. This approach respects the expected behavior when `__all__` is defined and empty, ensuring no members are documented by default.