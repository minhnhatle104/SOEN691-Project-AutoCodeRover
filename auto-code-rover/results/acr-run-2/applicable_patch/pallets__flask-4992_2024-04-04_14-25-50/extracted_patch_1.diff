diff --git a/src/flask/config.py b/src/flask/config.py
index d4fc310f..2abaf294 100644
--- a/src/flask/config.py
+++ b/src/flask/config.py
@@ -230,47 +230,49 @@ class Config(dict):
                 self[key] = getattr(obj, key)
 
     def from_file(
-        self,
-        filename: str,
-        load: t.Callable[[t.IO[t.Any]], t.Mapping],
-        silent: bool = False,
-    ) -> bool:
-        """Update the values in the config from a file that is loaded
-        using the ``load`` parameter. The loaded data is passed to the
-        :meth:`from_mapping` method.
-
-        .. code-block:: python
-
-            import json
-            app.config.from_file("config.json", load=json.load)
-
-            import toml
-            app.config.from_file("config.toml", load=toml.load)
-
-        :param filename: The path to the data file. This can be an
-            absolute path or relative to the config root path.
-        :param load: A callable that takes a file handle and returns a
-            mapping of loaded data from the file.
-        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
-            implements a ``read`` method.
-        :param silent: Ignore the file if it doesn't exist.
-        :return: ``True`` if the file was loaded successfully.
-
-        .. versionadded:: 2.0
-        """
-        filename = os.path.join(self.root_path, filename)
-
-        try:
-            with open(filename) as f:
-                obj = load(f)
-        except OSError as e:
-            if silent and e.errno in (errno.ENOENT, errno.EISDIR):
-                return False
-
-            e.strerror = f"Unable to load configuration file ({e.strerror})"
-            raise
-
-        return self.from_mapping(obj)
+            self,
+            filename: str,
+            load: t.Callable[[t.IO[t.Any]], t.Mapping],
+            silent: bool = False,
+            mode: str = 'r',
+        ) -> bool:
+            """Update the values in the config from a file that is loaded
+            using the ``load`` parameter. The loaded data is passed to the
+            :meth:`from_mapping` method.
+    
+            .. code-block:: python
+    
+                import json
+                app.config.from_file("config.json", load=json.load)
+    
+                import toml
+                app.config.from_file("config.toml", load=toml.load, mode='rb')
+    
+            :param filename: The path to the data file. This can be an
+                absolute path or relative to the config root path.
+            :param load: A callable that takes a file handle and returns a
+                mapping of loaded data from the file.
+            :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
+                implements a ``read`` method.
+            :param silent: Ignore the file if it doesn't exist.
+            :param mode: The mode in which to open the file. Defaults to 'r' for text mode.
+            :return: ``True`` if the file was loaded successfully.
+    
+            .. versionadded:: 2.0
+            """
+            filename = os.path.join(self.root_path, filename)
+    
+            try:
+                with open(filename, mode) as f:
+                    obj = load(f)
+            except OSError as e:
+                if silent and e.errno in (errno.ENOENT, errno.EISDIR):
+                    return False
+    
+                e.strerror = f"Unable to load configuration file ({e.strerror})"
+                raise
+    
+            return self.from_mapping(obj)
 
     def from_mapping(
         self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any
