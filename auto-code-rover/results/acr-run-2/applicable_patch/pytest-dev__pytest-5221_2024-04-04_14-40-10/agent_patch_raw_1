Given the context and the goal to display fixture scopes with `pytest --fixtures`, I'll draft a hypothetical patch. This patch is based on the understanding that we need to modify the way pytest lists fixtures to include the scope of each fixture. Note that the actual implementation may vary depending on the current state and architecture of the pytest codebase, which I cannot directly access or modify.

# modification 1
```python
<file>src/_pytest/helpconfig.py</file>
<original>
tw.line("to see available fixtures type: pytest --fixtures")
</original>
<patched>
tw.line("to see available fixtures with their scopes type: pytest --fixtures")
</patched>
```

# modification 2
```python
<file>src/_pytest/fixtures.py</file>
<original>
# This is a hypothetical original code snippet, assuming there's a function that formats the fixture list for the --fixtures option.
def format_fixture_list(fixtures):
    return "\n".join(fixtures)
</original>
<patched>
# Updated to include fixture scope in the listing.
def format_fixture_list(fixtures, scopes):
    return "\n".join(f"{fixture} (scope: {scopes[fixture]})" for fixture in fixtures)
</patched>
```

# modification 3
```python
<file>src/_pytest/python.py</file>
<original>
# Hypothetical snippet where fixtures are collected and prepared for listing.
fixtures = collect_fixtures()
print(format_fixture_list(fixtures))
</original>
<patched>
# Assuming collect_fixtures now also returns a dictionary of fixture scopes.
fixtures, scopes = collect_fixtures_with_scopes()
print(format_fixture_list(fixtures, scopes))
</patched>
```

These modifications are based on assumptions about the pytest codebase structure and are meant to illustrate the kind of changes that might be made to implement the requested feature. Actual implementation would require access to the pytest codebase, a thorough understanding of its architecture, and possibly adjustments based on how fixtures and their metadata are managed internally.