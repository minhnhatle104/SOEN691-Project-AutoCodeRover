diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..f5ec4b10f 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -248,18 +248,22 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
     n_samples, n_features = X.shape
 
     if discrete_features == 'auto':
-        discrete_features = issparse(X)
-
-    if isinstance(discrete_features, bool):
-        discrete_mask = np.empty(n_features, dtype=bool)
-        discrete_mask.fill(discrete_features)
-    else:
-        discrete_features = np.asarray(discrete_features)
-        if discrete_features.dtype != 'bool':
-            discrete_mask = np.zeros(n_features, dtype=bool)
+        discrete_features = 'auto'
+    elif isinstance(discrete_features, (list, np.ndarray)):
+        if len(discrete_features) == X.shape[1] and np.issubdtype(np.array(discrete_features).dtype, np.bool_):
+            # If discrete_features is a boolean mask
+            discrete_features = discrete_features
+        elif np.issubdtype(np.array(discrete_features).dtype, np.integer):
+            # If discrete_features is an array of indices
+            discrete_mask = np.zeros(X.shape[1], dtype=bool)
             discrete_mask[discrete_features] = True
+            discrete_features = discrete_mask
         else:
-            discrete_mask = discrete_features
+            raise ValueError("discrete_features should be 'auto', a boolean mask, or an array of indices.")
+    else:
+        discrete_features = issparse(X)
+
+    # This section is removed because the handling of discrete_features has been moved and updated in the previous modification.
 
     continuous_mask = ~discrete_mask
     if np.any(continuous_mask) and issparse(X):
