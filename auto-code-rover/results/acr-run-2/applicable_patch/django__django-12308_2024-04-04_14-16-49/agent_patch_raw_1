# modification 1
```python
<file>django/contrib/admin/utils.py</file>
<original>else:
        return display_for_value(value, empty_value_display)</original>
<patched>elif hasattr(field, 'get_prep_value') or hasattr(field, 'prepare_value'):
        # Check if the field has a prepare_value method (e.g., JSONField)
        # and use it to format the value correctly for display.
        if hasattr(field, 'prepare_value'):
            prepared_value = field.prepare_value(value)
        else:
            prepared_value = field.get_prep_value(value)
        return json.dumps(prepared_value, ensure_ascii=False)
    else:
        return display_for_value(value, empty_value_display)</patched>
```
This patch adds handling for fields that have either a `prepare_value` or `get_prep_value` method, which includes `JSONField`. It uses these methods to prepare the value, then formats it as JSON using `json.dumps`, ensuring it's displayed as valid JSON in the admin interface. This approach respects the specific handling that might be implemented in `prepare_value` (e.g., handling `InvalidJSONInput` as seen in `django/forms/fields.py`) and falls back to `get_prep_value` if `prepare_value` is not available. This ensures that `JSONField` values are displayed correctly when readonly.