# modification 1
```python
<file>lib/matplotlib/figure.py</file>
<original>if (self.get_layout_engine() is not None and
                not self.get_layout_engine().adjust_compatible):
            _api.warn_external(
                "This figure was using a layout engine that is "
                "incompatible with subplots_adjust and/or tight_layout; "
                "not calling subplots_adjust.")
            return</original>
<patched>if (self.get_layout_engine() is not None and
                not self.get_layout_engine().adjust_compatible and
                self.get_constrained_layout()):
            _api.warn_external(
                "This figure was using a layout engine that is "
                "incompatible with subplots_adjust and/or tight_layout; "
                "not calling subplots_adjust.")
            return</patched>
```

**Explanation of the Patch:**

The patch adds an additional condition to the if statement that checks whether the `constrained_layout` is actually enabled (`self.get_constrained_layout()` returns `True`) before deciding to issue a warning and return early from the `subplots_adjust` method. This ensures that the warning is only generated when `constrained_layout` is enabled and the layout engine is marked as incompatible. If `constrained_layout` is explicitly set to `False`, the warning will not be issued, aligning with the expected behavior described in the issue.

Note: This patch assumes the existence of a method `get_constrained_layout()` in the `FigureBase` class that returns the current state of the `constrained_layout` setting. If such a method does not exist, it would need to be implemented or an alternative approach to access the `constrained_layout` setting would be required.