diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..d2a33c1d3f 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -443,10 +443,14 @@ def _print_Function(self, e):
             x.appendChild(self._print(arg))
         return x
 
-    def _print_Basic(self, e):
-        x = self.dom.createElement(self.mathml_tag(e))
-        for arg in e.args:
-            x.appendChild(self._print(arg))
+    def _print_Indexed(self, e):
+        x = self.dom.createElement(self.mathml_tag(e.base))
+        # Handle indices
+        for idx in e.indices:
+            msub = self.dom.createElement('msub')
+            msub.appendChild(self._print(e.base))
+            msub.appendChild(self._print(idx))
+            x.appendChild(msub)
         return x
 
     def _print_AssocOp(self, e):
@@ -1006,15 +1010,17 @@ def _print_polylog(self, expr, exp=None):
         mrow.appendChild(brac)
         return mrow
 
-    def _print_Basic(self, e):
+    def _print_Indexed(self, e):
         mrow = self.dom.createElement('mrow')
         mi = self.dom.createElement('mi')
-        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))
+        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e.base)))
         mrow.appendChild(mi)
-        brac = self.dom.createElement('mfenced')
-        for arg in e.args:
-            brac.appendChild(self._print(arg))
-        mrow.appendChild(brac)
+        # Handle indices
+        for idx in e.indices:
+            msub = self.dom.createElement('msub')
+            msub.appendChild(self._print(e.base))
+            msub.appendChild(self._print(idx))
+            mrow.appendChild(msub)
         return mrow
 
     def _print_Tuple(self, e):
