# modification 1
```python
<file>sympy/printing/mathml.py</file>
<original>    def _print_Basic(self, e):
        mrow = self.dom.createElement('mrow')
        mi = self.dom.createElement('mi')
        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))
        mrow.appendChild(mi)
        brac = self.dom.createElement('mfenced')
        for arg in e.args:
            brac.appendChild(self._print(arg))
        mrow.appendChild(brac)
        return mrow
</original>
<patched>    def _print_Indexed(self, e):
        mrow = self.dom.createElement('mrow')
        mi = self.dom.createElement('mi')
        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e.base)))
        mrow.appendChild(mi)
        # Handle indices
        for idx in e.indices:
            msub = self.dom.createElement('msub')
            msub.appendChild(self._print(e.base))
            msub.appendChild(self._print(idx))
            mrow.appendChild(msub)
        return mrow
</patched>
```

# modification 2
```python
<file>sympy/printing/mathml.py</file>
<original>    def _print_Basic(self, e):
        x = self.dom.createElement(self.mathml_tag(e))
        for arg in e.args:
            x.appendChild(self._print(arg))
        return x
</original>
<patched>    def _print_Indexed(self, e):
        x = self.dom.createElement(self.mathml_tag(e.base))
        # Handle indices
        for idx in e.indices:
            msub = self.dom.createElement('msub')
            msub.appendChild(self._print(e.base))
            msub.appendChild(self._print(idx))
            x.appendChild(msub)
        return x
</patched>
```

These modifications introduce a specific handling method for `Indexed` objects in both the `MathMLPresentationPrinter` and `MathMLContentPrinter` classes. The new `_print_Indexed` methods create MathML representations that correctly reflect the structure of `Indexed` objects, including their base and indices, thus avoiding the iteration error encountered with the original `_print_Basic` methods.