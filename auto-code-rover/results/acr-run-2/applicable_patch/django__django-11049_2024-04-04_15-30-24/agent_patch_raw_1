# modification 1
```python
<file>django/db/models/fields/__init__.py</file>
<original>'invalid': _("'%(value)s' value has an invalid format. It must be in "
                     "[DD] [HH:[MM:]]ss[.uuuuuu] format.")</original>
<patched>'invalid': _("'%(value)s' value has an invalid format. It must be in "
                     "[DD] [[HH:]MM:]ss[.uuuuuu] format.")</patched>
```

# modification 2
```python
<file>django/db/models/fields/__init__.py</file>
<original>class DurationField(Field):
    """
    Store timedelta objects.

    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint
    of microseconds on other databases.
    """
    empty_strings_allowed = False
    default_error_messages = {
        'invalid': _("'%(value)s' value has an invalid format. It must be in "
                     "[DD] [HH:[MM:]]ss[.uuuuuu] format.")
    }
    description = _("Duration")</original>
<patched>class DurationField(Field):
    """
    Store timedelta objects.

    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint
    of microseconds on other databases.
    """
    empty_strings_allowed = False
    default_error_messages = {
        'invalid': _("'%(value)s' value has an invalid format. It must be in "
                     "[DD] [[HH:]MM:]ss[.uuuuuu] format.")
    }
    description = _("Duration")
    help_text = _("Enter duration in [DD] [[HH:]MM:]ss[.uuuuuu] format.")</patched>
```

# modification 3
```python
<file>django/forms/fields.py</file>
<original>class DurationField(Field):
    default_error_messages = {
        'invalid': _('Enter a valid duration.'),
        'overflow': _('The number of days must be between {min_days} and {max_days}.')
    }</original>
<patched>class DurationField(Field):
    default_error_messages = {
        'invalid': _('Enter a valid duration.'),
        'overflow': _('The number of days must be between {min_days} and {max_days}.')
    }
    help_text = _("Enter duration in [DD] [[HH:]MM:]ss[.uuuuuu] format.")</patched>
```