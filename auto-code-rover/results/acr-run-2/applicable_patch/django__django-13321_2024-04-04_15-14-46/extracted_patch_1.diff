diff --git a/django/contrib/sessions/backends/db.py b/django/contrib/sessions/backends/db.py
index 7c905a2c99..db724b55d5 100644
--- a/django/contrib/sessions/backends/db.py
+++ b/django/contrib/sessions/backends/db.py
@@ -41,7 +41,14 @@ class SessionStore(SessionBase):
 
     def load(self):
         s = self._get_session_from_db()
-        return self.decode(s.session_data) if s else {}
+        try:
+            return self.decode(s.session_data) if s else {}
+        except Exception as e:
+            # Log the exception for debugging purposes
+            logging.getLogger("django.sessions").warning(f"Session decoding failed: {e}")
+            # Create a new session if there's a decoding error
+            self.create()
+        return {}
 
     def exists(self, session_key):
         return self.model.objects.filter(session_key=session_key).exists()
diff --git a/django/contrib/sessions/backends/signed_cookies.py b/django/contrib/sessions/backends/signed_cookies.py
index 8942df1ea4..19bdd58ca7 100644
--- a/django/contrib/sessions/backends/signed_cookies.py
+++ b/django/contrib/sessions/backends/signed_cookies.py
@@ -18,9 +18,10 @@ class SessionStore(SessionBase):
                 max_age=self.get_session_cookie_age(),
                 salt='django.contrib.sessions.backends.signed_cookies',
             )
-        except Exception:
-            # BadSignature, ValueError, or unpickling exceptions. If any of
-            # these happen, reset the session.
+        except Exception as e:
+            # Log the exception for debugging purposes
+            logging.getLogger("django.sessions").warning(f"Session decoding failed: {e}")
+            # Reset the session if there's a decoding error
             self.create()
         return {}
 
