# modification 1
```python
<file>seaborn/_core/scales.py</file>
<original>            a = forward(vmin)
            b = forward(vmax) - forward(vmin)

            def normalize(x):
                return (x - a) / b</original>
<patched>            # Check if data is boolean and handle it differently
            if data.dtype == bool:
                # Convert boolean data to integers for normalization
                a = forward(int(vmin))
                b = forward(int(vmax)) - forward(int(vmin))
            else:
                a = forward(vmin)
                b = forward(vmax) - forward(vmin)

            def normalize(x):
                # Ensure x is converted to int if data is boolean
                if data.dtype == bool:
                    x = x.astype(int)
                return (x - a) / b</patched>
```

This patch addresses the issue by checking if the data is of boolean type before proceeding with the normalization process. If the data is boolean, it converts the boolean values to integers (`True` to `1` and `False` to `0`) before applying the normalization. This approach avoids the TypeError caused by attempting to perform subtraction on boolean values, which is not supported in numpy. Additionally, it ensures that the normalization function also converts its input to integers if the original data was boolean, maintaining consistency in the handling of boolean data throughout the method.