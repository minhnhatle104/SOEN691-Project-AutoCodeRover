diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 9ce46e3f73..4b12591166 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -600,21 +600,30 @@ class Field(RegisterLookupMixin):
             # Skip validation for non-editable fields.
             return
 
-        if self.choices is not None and value not in self.empty_values:
-            for option_key, option_value in self.choices:
-                if isinstance(option_value, (list, tuple)):
-                    # This is an optgroup, so look inside the group for
-                    # options.
-                    for optgroup_key, optgroup_value in option_value:
-                        if value == optgroup_key:
-                            return
-                elif value == option_key:
-                    return
-            raise exceptions.ValidationError(
-                self.error_messages['invalid_choice'],
-                code='invalid_choice',
-                params={'value': value},
-            )
+        if self.choices is not None:
+            # Check if max_length is defined and if so, validate it against the longest choice
+            if hasattr(self, 'max_length') and self.max_length is not None:
+                longest_choice = max([len(option_key) for option_key, _ in self.choices] + [0])
+                if longest_choice > self.max_length:
+                    raise exceptions.ValidationError(
+                        "Field's max_length is %d but needs to be at least %d to fit all choices." % (self.max_length, longest_choice),
+                        code='invalid_max_length_for_choices',
+                    )
+            if value not in self.empty_values:
+                for option_key, option_value in self.choices:
+                    if isinstance(option_value, (list, tuple)):
+                        # This is an optgroup, so look inside the group for
+                        # options.
+                        for optgroup_key, optgroup_value in option_value:
+                            if value == optgroup_key:
+                                return
+                    elif value == option_key:
+                        return
+                raise exceptions.ValidationError(
+                    self.error_messages['invalid_choice'],
+                    code='invalid_choice',
+                    params={'value': value},
+                )
 
         if value is None and not self.null:
             raise exceptions.ValidationError(self.error_messages['null'], code='null')
