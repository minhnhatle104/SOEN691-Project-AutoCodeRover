# modification 1
```python
<file>sympy/matrices/common.py</file>
<original>    def __matmul__(self, other):
        return self.__mul__(other)</original>
<patched>    def __matmul__(self, other):
        if not hasattr(other, "shape"):
            raise ValueError("Scalar operands are not allowed, use '*' instead")
        return self.__mul__(other)</patched>
```

# modification 2
```python
<file>sympy/matrices/expressions/matexpr.py</file>
<original>    def __matmul__(self, other):
        return MatMul(self, other).doit()</original>
<patched>    def __matmul__(self, other):
        if not hasattr(other, "shape"):
            raise ValueError("Scalar operands are not allowed, use '*' instead")
        return MatMul(self, other).doit()</patched>
```

Explanation:
- The patches add a condition to check if the `other` operand has a `shape` attribute, which is a common attribute for matrix-like objects in many libraries, including SymPy and NumPy. This check is used to determine if the `other` operand is a matrix. If it is not (i.e., it does not have a `shape` attribute), a `ValueError` is raised with a message guiding the user to use the `*` operator for scalar multiplication. This approach aligns the behavior with that of NumPy, as described in the issue.