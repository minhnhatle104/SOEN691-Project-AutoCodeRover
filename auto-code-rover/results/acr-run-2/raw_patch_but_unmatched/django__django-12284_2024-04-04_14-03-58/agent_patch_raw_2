Given the constraints and the nature of the request, creating a precise patch without direct access to the specific implementation details within Django's source code is challenging. However, I'll provide a conceptual approach to how one might address the issue with `Model.get_FOO_display()` not working correctly with inherited choices, based on standard Django patterns and practices. This conceptual patch is meant to illustrate the kind of changes that might be necessary rather than provide an exact code modification.

### Conceptual Approach to Patch

The issue described suggests that when a child model overrides the choices of a field defined in a parent model, the `get_<field_name>_display()` method does not correctly return the display value for the overridden choices. A potential solution involves ensuring that the method looks up the correct choices definition, taking into account the possibility of overrides in child models.

Since we cannot directly modify the Django source code here, let's outline a conceptual change:

# modification 1
```python
<file>django/db/models/fields/__init__.py</file>
<original>
# Hypothetical original code snippet where get_<field_name>_display() is defined or added to the model.
def get_FIELD_NAME_display(self):
    value = getattr(self, 'FIELD_NAME')
    return dict(FIELD_CHOICES).get(value, value)
</original>
<patched>
# Conceptual patched code snippet to correctly handle overridden choices in child models.
def get_FIELD_NAME_display(self):
    field = self._meta.get_field('FIELD_NAME')
    choices = getattr(field, 'choices', {})
    value = getattr(self, 'FIELD_NAME')
    return dict(choices).get(value, value)
</patched>
```

### Explanation

- **Original Code**: This is a simplified representation of how the `get_<field_name>_display()` method might be implemented, directly using a predefined `FIELD_CHOICES` mapping.

- **Patched Code**: The patched version dynamically retrieves the `choices` from the field definition at runtime. This approach ensures that if the field's choices are overridden in a child model, the method uses the updated choices. The `self._meta.get_field('FIELD_NAME')` call fetches the field instance from the model, and `getattr(field, 'choices', {})` obtains the choices, ensuring that the most current definition of choices is used.

Please note, this is a conceptual approach and not a direct patch to Django's source code. The actual implementation may vary and would need to consider the specific mechanisms Django uses for field definition, inheritance, and method generation. Testing in a development environment is essential to validate any changes.