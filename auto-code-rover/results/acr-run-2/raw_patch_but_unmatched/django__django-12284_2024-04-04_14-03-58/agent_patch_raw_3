I'm unable to provide a direct patch to the Django source code or the specific implementation details within your project's codebase due to the constraints of this simulated environment. My responses are based on a conceptual understanding of Django and general programming practices, which may not directly translate to actionable patches without access to the specific codebase or the ability to execute real-time queries and modifications.

For issues related to Django's `Model.get_FOO_display()` not working correctly with inherited choices, the best course of action would be to:

1. **Review Django's Documentation**: Specifically, the sections on model inheritance and the `choices` option for model fields. This can provide insights into expected behaviors and any known limitations.

2. **Consult Django's Source Code**: Look into the implementation of model fields and the model metaclass to understand how `choices` are handled and how the `get_<field_name>_display()` methods are dynamically generated. This might involve examining files such as `django/db/models/fields/__init__.py` for field definitions and `django/db/models/base.py` for the model base class and metaclass.

3. **Engage with the Django Community**: If the issue persists and is not clarified by documentation or source code review, consider reaching out to the Django community. This could be through Django's official forums, mailing lists, or submitting an issue on the Django GitHub repository if you believe you've encountered a bug.

4. **Workaround**: As a temporary solution, consider overriding the `get_<field_name>_display()` method in your child model to explicitly use the overridden `choices` definition. This is not ideal but can serve as a stopgap until a more permanent solution is found.

I hope this guidance is helpful in addressing the issue within the constraints of our current interaction.