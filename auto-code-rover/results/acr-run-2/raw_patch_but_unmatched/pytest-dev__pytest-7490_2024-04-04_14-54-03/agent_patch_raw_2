Given the limitations and the context provided, it's clear that a direct and specific patch cannot be accurately formulated without deeper access to the pytest codebase, particularly the parts that handle marker processing during test execution in versions 5.x and 6.0.0rc0. The issue described suggests a change in behavior in how dynamically added `xfail` markers are handled, which likely involves more complex interactions within the pytest framework than can be addressed by modifying the `add_marker` method alone.

Without specific insights into the changes made between pytest versions 5.x and 6.0.0rc0 regarding marker processing, any attempt to provide a patch would be speculative and might not address the root cause of the issue. The resolution would require a detailed examination of the pytest framework's internal changes related to marker evaluation and test execution logic.

Therefore, the best course of action to address the issue would involve:

1. Reviewing the pytest changelog and commit history between versions 5.x and 6.0.0rc0 for changes related to marker processing and test execution.
2. Engaging with the pytest development community for insights into the observed change in behavior and guidance on how to properly address it.
3. Once the root cause is identified, implementing a targeted fix in the appropriate part of the pytest codebase, potentially involving modifications to how markers are evaluated during test execution.

This approach ensures that any patch applied is based on a thorough understanding of the issue and is aligned with the overall design and future direction of the pytest framework.