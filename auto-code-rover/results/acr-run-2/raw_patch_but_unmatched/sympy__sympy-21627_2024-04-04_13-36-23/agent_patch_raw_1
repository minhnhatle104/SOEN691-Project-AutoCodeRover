Given the context and the nature of the issue, it seems that the problem might not be directly related to the implementation of `is_zero` in `sympy/core/exprtools.py` as it appears to correctly identify zero factors. The issue with the `RecursionError` when checking if a `cosh` expression is zero likely stems from how the expression involving `cosh`, `acos`, and `acosh` is evaluated and simplified before reaching a point where `is_zero` could be meaningfully applied.

Without specific details on the failure point in the evaluation or simplification process that leads to the recursion error, a direct patch cannot be accurately provided. However, I can suggest a general approach to handling such issues:

1. **Enhancing Expression Evaluation and Simplification**: Ensure that expressions involving complex functions like `cosh`, `acos`, and `acosh` are simplified in a manner that prevents infinite recursion. This might involve detecting patterns that could lead to recursion and handling them explicitly.

2. **Safeguards in `is_zero` Implementations**: Implement safeguards in methods that check for zero values in expressions to detect and prevent potential recursion loops.

Since I cannot pinpoint the exact location of the bug without more detailed error tracing or without knowing where the recursion loop starts, I'll provide a hypothetical patch that introduces a safeguard for recursion in a generic `is_zero` method. This is purely illustrative and might not directly apply to the actual structure of the SymPy project.

# modification 1
```python
<file>sympy/core/expressions.py</file>
<original>def is_zero(self):
    # Recursive check for zero in expressions
    ...
</original>
<patched>def is_zero(self, _recursion_depth=0):
    # Add a recursion depth check to prevent infinite loops
    if _recursion_depth > 100:  # or some other reasonable limit
        raise RecursionError("Maximum recursion depth exceeded in is_zero check")
    ...
    # Pass along the incremented recursion depth
    self.some_sub_expression.is_zero(_recursion_depth=_recursion_depth+1)
</patched>
```

Please note, the above modification is hypothetical and serves to illustrate how one might begin to approach resolving recursion issues in methods like `is_zero`. The actual solution would require a detailed analysis of the recursion call stack to identify where the loop begins and how best to intervene.