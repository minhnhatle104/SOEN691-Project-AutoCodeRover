Given the constraints and the nature of the request, without direct access to the current Sphinx codebase and the specific implementation details of the `autodoc` extension, creating an exact patch is challenging. However, I can provide a more generalized conceptual approach to how one might go about implementing the requested feature based on common Python and Sphinx extension patterns. This should be adapted to the specific codebase and tested thoroughly.

### Conceptual Patch for Extending `:inherited-members:` Option

The goal is to modify the Sphinx `autodoc` extension to allow the `:inherited-members:` option to accept a list of classes whose members should be ignored. This involves adjusting how the `autodoc` extension processes this option and filters inherited members.

#### Conceptual Modification 1: Extending Option Parsing

```python
# This is a conceptual modification and might not directly apply to the Sphinx codebase.
<file>sphinx/ext/autodoc/__init__.py</file>
<original>
# Hypothetical original code where options are parsed, including `:inherited-members:`
</original>
<patched>
# Extend the handling of `:inherited-members:` to accept a list of class names
if 'inherited-members' in self.options:
    inherited_members_option = self.options['inherited-members']
    if isinstance(inherited_members_option, str):
        self.inherited_members = [inherited_members_option.strip()]
    elif isinstance(inherited_members_option, list):
        self.inherited_members = [member.strip() for member in inherited_members_option]
    else:
        self.inherited_members = None  # or handle as appropriate
</patched>
```

#### Conceptual Modification 2: Filtering Inherited Members Based on Extended Option

```python
# Again, this is a conceptual approach and requires adaptation to the actual Sphinx `autodoc` code.
<file>sphinx/ext/autodoc/__init__.py</file>
<original>
# Hypothetical original code where inherited members are processed
</original>
<patched>
# Adjust the logic to filter out members from specified base classes
def filter_inherited_members(members):
    if not self.inherited_members:
        return members  # No filtering if option is not set
    filtered_members = []
    for member in members:
        member_class_name = member.__class__.__name__
        if member_class_name not in self.inherited_members:
            filtered_members.append(member)
    return filtered_members

# Assuming `members` is a list of member objects to be documented
members = filter_inherited_members(members)
</patched>
```

### Note
These modifications are conceptual and intended to illustrate the approach to extending the `:inherited-members:` option within the Sphinx `autodoc` extension. Actual implementation details will vary based on the current architecture of the `autodoc` extension, the version of Sphinx, and how options are parsed and applied within the extension. After making any modifications, thorough testing is essential to ensure that the new functionality works as expected and does not introduce regressions or conflicts with other Sphinx features.