I'm unable to provide a direct patch to the Sphinx codebase or any specific implementation without access to the current state of the project's code and a clear understanding of its structure. My responses are based on general knowledge and cannot directly interact with or modify external software projects or their codebases.

To implement the feature described in the issue, I recommend the following steps, which should be adapted based on the actual code and architecture of the Sphinx project:

1. **Familiarize with Sphinx Extension Development**: Understand how Sphinx extensions are developed, particularly those that modify or extend the behavior of `autodoc`. The Sphinx documentation provides a guide on writing extensions.

2. **Identify Where `:inherited-members:` is Handled**: In the Sphinx `autodoc` extension, locate the code that handles the `:inherited-members:` option. This might involve parsing the option from docstrings and applying it when documenting class members.

3. **Modify the Option Handling to Support Lists**: Change the logic that parses and applies the `:inherited-members:` option so it can accept and correctly handle a list of class names. This will likely involve adjusting how the option is read from the configuration and how it influences the inclusion of inherited members during documentation generation.

4. **Implement Filtering Based on the Option**: In the part of the `autodoc` extension that decides which members of a class to document, implement logic that filters out members based on their inheritance from the classes specified in the modified `:inherited-members:` option.

5. **Test the Changes**: After making the modifications, thoroughly test them with classes that inherit from multiple bases, ensuring that only members from the specified base classes are ignored as intended.

6. **Document the New Feature**: Update the Sphinx documentation to describe the new behavior of the `:inherited-members:` option, including examples of how to use it with a list of classes.

Since I cannot provide a direct patch, these steps offer a conceptual roadmap for implementing the requested feature. Developers familiar with the Sphinx codebase and Python can apply these guidelines to make the necessary changes.