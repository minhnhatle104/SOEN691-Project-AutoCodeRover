{
    "task_id": "apache__dubbo-9187",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/apache__dubbo/setup_apache__dubbo__0.1",
        "env_name": "setup_apache__dubbo__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test dubbo-common/src/test/java/org/apache/dubbo/common/extension/injection/impl/InjectExtImpl.java"
    },
    "task_info": {
        "repo": "apache/dubbo",
        "pull_number": 9187,
        "instance_id": "apache__dubbo-9187",
        "issue_numbers": [
            "9150"
        ],
        "base_commit": "d52dd47682a19b7d644c5be1a9b17e0a16f621e5",
        "patch": "diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java b/dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java\nindex 18c6eef715a..f7734f4b5a3 100644\n--- a/dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java\n@@ -19,7 +19,7 @@\n import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;\n import org.apache.dubbo.common.context.FrameworkExt;\n import org.apache.dubbo.common.context.LifecycleAdapter;\n-import org.apache.dubbo.common.extension.DisableInject;\n+import org.apache.dubbo.common.extension.Inject;\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.config.AbstractConfig;\n@@ -77,14 +77,14 @@ public void initialize() throws IllegalStateException {\n         this.appExternalConfiguration.setProperties(appExternalConfigurationMap);\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setExternalConfigMap(Map<String, String> externalConfiguration) {\n         if (externalConfiguration != null) {\n             this.externalConfigurationMap = externalConfiguration;\n         }\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setAppExternalConfigMap(Map<String, String> appExternalConfiguration) {\n         if (appExternalConfiguration != null) {\n             this.appExternalConfigurationMap = appExternalConfiguration;\n@@ -179,7 +179,7 @@ public boolean isConfigCenterFirst() {\n         return configCenterFirst;\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setConfigCenterFirst(boolean configCenterFirst) {\n         this.configCenterFirst = configCenterFirst;\n     }\n@@ -188,7 +188,7 @@ public Optional<DynamicConfiguration> getDynamicConfiguration() {\n         return Optional.ofNullable(dynamicConfiguration);\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setDynamicConfiguration(DynamicConfiguration dynamicConfiguration) {\n         this.dynamicConfiguration = dynamicConfiguration;\n     }\ndiff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/DisableInject.java b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/DisableInject.java\nindex 577a28df6b4..6c59f3c7c75 100644\n--- a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/DisableInject.java\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/DisableInject.java\n@@ -25,5 +25,6 @@\n @Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.TYPE, ElementType.METHOD})\n+@Deprecated\n public @interface DisableInject {\n-}\n+}\n\\ No newline at end of file\ndiff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java\nindex 359f2e502bb..1b9d93f67f1 100644\n--- a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java\n@@ -452,6 +452,7 @@ public T getExtension(String name, boolean wrap) {\n \n     /**\n      * get the original type.\n+     *\n      * @param name\n      * @return\n      */\n@@ -707,28 +708,39 @@ private T injectExtension(T instance) {\n                 if (!isSetter(method)) {\n                     continue;\n                 }\n-                /**\n-                 * Check {@link DisableInject} to see if we need auto injection for this property\n+\n+                /*\n+                 * Check {@link DisableInject} to see if we need autowire injection for this property\n                  */\n                 if (method.getAnnotation(DisableInject.class) != null) {\n                     continue;\n                 }\n+\n                 Class<?> pt = method.getParameterTypes()[0];\n                 if (ReflectUtils.isPrimitives(pt)) {\n                     continue;\n                 }\n \n-                try {\n-                    String property = getSetterProperty(method);\n-                    Object object = objectFactory.getExtension(pt, property);\n-                    if (object != null) {\n-                        method.invoke(instance, object);\n+                /*\n+                 * Check {@link Inject} to see if we need auto-injection for this property\n+                 * {@link Inject#enable} == false will skip inject property phase\n+                 * {@link Inject#InjectType#ByName} default inject by name\n+                 */\n+                String property = getSetterProperty(method);\n+                Inject inject = method.getAnnotation(Inject.class);\n+                if (inject == null) {\n+                    injectValue(instance, method, pt, property);\n+                } else {\n+                    if (!inject.enable()) {\n+                        continue;\n                     }\n-                } catch (Exception e) {\n-                    logger.error(\"Failed to inject via method \" + method.getName()\n-                            + \" of interface \" + type.getName() + \": \" + e.getMessage(), e);\n-                }\n \n+                    if (inject.type() == Inject.InjectType.ByType) {\n+                        injectValue(instance, method, pt, null);\n+                    } else {\n+                        injectValue(instance, method, pt, property);\n+                    }\n+                }\n             }\n         } catch (Exception e) {\n             logger.error(e.getMessage(), e);\n@@ -736,6 +748,18 @@ private T injectExtension(T instance) {\n         return instance;\n     }\n \n+    private void injectValue(T instance, Method method, Class<?> pt, String property) {\n+        try {\n+            Object object = objectFactory.getExtension(pt, property);\n+            if (object != null) {\n+                method.invoke(instance, object);\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Failed to inject via method \" + method.getName()\n+                    + \" of interface \" + type.getName() + \": \" + e.getMessage(), e);\n+        }\n+    }\n+\n     private void initExtension(T instance) {\n         if (instance instanceof Lifecycle) {\n             Lifecycle lifecycle = (Lifecycle) instance;\ndiff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/Inject.java b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/Inject.java\nnew file mode 100644\nindex 00000000000..6ec89d87267\n--- /dev/null\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/Inject.java\n@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.extension;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static org.apache.dubbo.common.extension.Inject.InjectType.ByName;\n+\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+public @interface Inject {\n+    // whether enable injection or not\n+    boolean enable() default true;\n+\n+    // inject type default by name injection\n+    InjectType type() default ByName;\n+\n+    enum InjectType{\n+        ByName,\n+        ByType\n+    }\n+}\ndiff --git a/dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java b/dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java\nindex bfddf97bb4c..1e298baa0bf 100644\n--- a/dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java\n@@ -18,7 +18,7 @@\n \n import org.apache.dubbo.common.context.FrameworkExt;\n import org.apache.dubbo.common.context.LifecycleAdapter;\n-import org.apache.dubbo.common.extension.DisableInject;\n+import org.apache.dubbo.common.extension.Inject;\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.common.utils.CollectionUtils;\n@@ -77,7 +77,7 @@ public ConfigManager() {\n     }\n \n     // ApplicationConfig correlative methods\n-    @DisableInject\n+    @Inject(enable = false)\n     public void setApplication(ApplicationConfig application) {\n         addConfig(application, true);\n     }\n@@ -92,7 +92,7 @@ public ApplicationConfig getApplicationOrElseThrow() {\n \n     // MonitorConfig correlative methods\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setMonitor(MonitorConfig monitor) {\n         addConfig(monitor, true);\n     }\n@@ -102,7 +102,7 @@ public Optional<MonitorConfig> getMonitor() {\n     }\n \n     // ModuleConfig correlative methods\n-    @DisableInject\n+    @Inject(enable = false)\n     public void setModule(ModuleConfig module) {\n         addConfig(module, true);\n     }\n@@ -111,7 +111,7 @@ public Optional<ModuleConfig> getModule() {\n         return ofNullable(getConfig(getTagName(ModuleConfig.class)));\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setMetrics(MetricsConfig metrics) {\n         addConfig(metrics, true);\n     }\n@@ -120,7 +120,7 @@ public Optional<MetricsConfig> getMetrics() {\n         return ofNullable(getConfig(getTagName(MetricsConfig.class)));\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setSsl(SslConfig sslConfig) {\n         addConfig(sslConfig, true);\n     }\ndiff --git a/dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationFactory.java b/dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationFactory.java\nindex 6dcedd98ebf..d3567a0cb51 100644\n--- a/dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationFactory.java\n+++ b/dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationFactory.java\n@@ -19,7 +19,7 @@\n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;\n import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;\n-import org.apache.dubbo.common.extension.DisableInject;\n+import org.apache.dubbo.common.extension.Inject;\n import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;\n \n /**\n@@ -33,7 +33,7 @@ public ZookeeperDynamicConfigurationFactory() {\n         this.zookeeperTransporter = ZookeeperTransporter.getExtension();\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {\n         this.zookeeperTransporter = zookeeperTransporter;\n     }\ndiff --git a/dubbo-metadata/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java b/dubbo-metadata/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java\nindex ee3e2d97a56..c564bfdb1d0 100644\n--- a/dubbo-metadata/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java\n+++ b/dubbo-metadata/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java\n@@ -17,7 +17,7 @@\n package org.apache.dubbo.metadata.store.zookeeper;\n \n import org.apache.dubbo.common.URL;\n-import org.apache.dubbo.common.extension.DisableInject;\n+import org.apache.dubbo.common.extension.Inject;\n import org.apache.dubbo.metadata.report.MetadataReport;\n import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;\n import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;\n@@ -33,7 +33,7 @@ public ZookeeperMetadataReportFactory() {\n         this.zookeeperTransporter = ZookeeperTransporter.getExtension();\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {\n         this.zookeeperTransporter = zookeeperTransporter;\n     }\ndiff --git a/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryFactory.java b/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryFactory.java\nindex 0308d73ab8c..72301ed9c6c 100644\n--- a/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryFactory.java\n+++ b/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryFactory.java\n@@ -17,7 +17,7 @@\n package org.apache.dubbo.registry.zookeeper;\r\n \r\n import org.apache.dubbo.common.URL;\r\n-import org.apache.dubbo.common.extension.DisableInject;\r\n+import org.apache.dubbo.common.extension.Inject;\r\n import org.apache.dubbo.registry.Registry;\r\n import org.apache.dubbo.registry.support.AbstractRegistryFactory;\r\n import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;\r\n@@ -38,7 +38,7 @@ public ZookeeperRegistryFactory() {\n      *\r\n      * @param zookeeperTransporter\r\n      */\r\n-    @DisableInject\r\n+    @Inject(enable = false)\r\n     public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {\r\n         this.zookeeperTransporter = zookeeperTransporter;\r\n     }\r\n",
        "test_patch": "diff --git a/dubbo-common/src/test/java/org/apache/dubbo/common/extension/injection/impl/InjectExtImpl.java b/dubbo-common/src/test/java/org/apache/dubbo/common/extension/injection/impl/InjectExtImpl.java\nindex ccff9547f53..4c8fcf0fef6 100644\n--- a/dubbo-common/src/test/java/org/apache/dubbo/common/extension/injection/impl/InjectExtImpl.java\n+++ b/dubbo-common/src/test/java/org/apache/dubbo/common/extension/injection/impl/InjectExtImpl.java\n@@ -16,7 +16,7 @@\n  */\n package org.apache.dubbo.common.extension.injection.impl;\n \n-import org.apache.dubbo.common.extension.DisableInject;\n+import org.apache.dubbo.common.extension.Inject;\n import org.apache.dubbo.common.extension.ext1.SimpleExt;\n import org.apache.dubbo.common.extension.injection.InjectExt;\n \n@@ -32,7 +32,7 @@ public void setSimpleExt(SimpleExt simpleExt) {\n         this.simpleExt = simpleExt;\n     }\n \n-    @DisableInject\n+    @Inject(enable = false)\n     public void setSimpleExt1(SimpleExt simpleExt1) {\n         this.simpleExt1 = simpleExt1;\n     }\n",
        "problem_statement": "Filter SPI Auto Load\nExtensionLoader can not inject spring bean by type.\r\nex: when I customize Filter\uff0c I wanna inject spring boot Environment bean, then will delegate SpringExtensionFactory lookup with getOptionalBean,  but getOptionalBean only can inject by type when parameter beanName is null.\r\n\r\n### Environment\r\n\r\n* Dubbo version: 2.7.8\r\n* Operating System version: MacOS 11.6\r\n* Java version: 1.8\r\n\r\n### Expected Behavior\r\nExtensionLoader can inject spring bean by type. \r\n\r\nPossible Solutions:\r\nA: To annotate the setter method inject by type.\r\nB: DubboBeanUtils#getOptionalBean by name, attempt to set null to beanName  if not found !\r\n\r\n### Actual Behavior\r\n\r\nExtensionLoader can not inject spring bean by type.\n",
        "hints_text": "Pls try Dubbo 3.x\n> Pls try Dubbo 3.x\r\n\r\nRight Now, we can not upgrade to codebase v3.x..\r\n2.8.x remains the majority users.\n> Pls try Dubbo 3.x\r\nDubbo 3.x doesn't solve this bug!\r\n\r\n\r\n```\r\nprivate <T> T getOptionalBean(ListableBeanFactory beanFactory, String name, Class<T> type) {\r\n        if (StringUtils.isEmpty(name)) {\r\n            String[] beanNamesForType = beanFactory.getBeanNamesForType(type, true, false);\r\n            if (beanNamesForType != null) {\r\n                if (beanNamesForType.length == 1) {\r\n                    return beanFactory.getBean(beanNamesForType[0], type);\r\n                } else if (beanNamesForType.length > 1) {\r\n                    throw new IllegalStateException(\"Expect single but found \" + beanNamesForType.length + \" beans in spring context: \" +\r\n                        Arrays.toString(beanNamesForType));\r\n                }\r\n            }\r\n        } else {\r\n            if (beanFactory.containsBean(name)) {\r\n                return beanFactory.getBean(name, type);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n```",
        "created_at": 1635848281000,
        "FAIL_TO_PASS": [
            "dubbo-common:org.apache.dubbo.common.extension.injection.impl.InjectExtImpl"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/apache/dubbo/pull/9187"
    }
}