{
    "task_id": "fasterxml__jackson-core-380",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-core/setup_fasterxml__jackson-core__0.1",
        "env_name": "setup_fasterxml__jackson-core__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-core",
        "pull_number": 380,
        "instance_id": "fasterxml__jackson-core-380",
        "issue_numbers": [
            "208"
        ],
        "base_commit": "74564bfb7ca768067b5554dc7c4373f43b8be94b",
        "patch": "diff --git a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\nindex c355446758..4459e7faa4 100644\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n@@ -414,7 +414,7 @@ public JsonToken nextToken() throws IOException\n                 }\n                 _itemFilter = f;\n                 if (f == TokenFilter.INCLUDE_ALL) {\n-                    if (_includePath) {\n+                    if (_verifyAllowedMatches() && _includePath) {\n                         return (_currToken = t);\n                     }\n                 }\n@@ -437,7 +437,9 @@ public JsonToken nextToken() throws IOException\n                 f = _headContext.checkValue(f);\n                 if ((f == TokenFilter.INCLUDE_ALL)\n                         || ((f != null) && f.includeValue(delegate))) {\n-                    return (_currToken = t);\n+                    if (_verifyAllowedMatches()) {\n+                        return (_currToken = t);\n+                    }\n                 }\n             }\n             // Otherwise not included (leaves must be explicitly included)\n@@ -572,7 +574,7 @@ protected final JsonToken _nextToken2() throws IOException\n                     }\n                     _itemFilter = f;\n                     if (f == TokenFilter.INCLUDE_ALL) {\n-                        if (_includePath) {\n+                        if (_verifyAllowedMatches() && _includePath) {\n                             return (_currToken = t);\n                         }\n //                        if (_includeImmediateParent) { ...\n@@ -597,7 +599,9 @@ protected final JsonToken _nextToken2() throws IOException\n                     f = _headContext.checkValue(f);\n                     if ((f == TokenFilter.INCLUDE_ALL)\n                             || ((f != null) && f.includeValue(delegate))) {\n-                        return (_currToken = t);\n+                        if (_verifyAllowedMatches()) {\n+                            return (_currToken = t);\n+                        }\n                     }\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n@@ -714,7 +718,7 @@ protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffR\n                         continue main_loop;\n                     }\n                     _itemFilter = f;\n-                    if (f == TokenFilter.INCLUDE_ALL) {\n+                    if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n                         return _nextBuffered(buffRoot);\n                     }\n                 }\n@@ -729,7 +733,9 @@ protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffR\n                     f = _headContext.checkValue(f);\n                     if ((f == TokenFilter.INCLUDE_ALL)\n                             || ((f != null) && f.includeValue(delegate))) {\n-                        return _nextBuffered(buffRoot);\n+                        if (_verifyAllowedMatches()) {\n+                            return _nextBuffered(buffRoot);\n+                        }\n                     }\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n@@ -767,7 +773,15 @@ private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n             }\n         }\n     }\n-    \n+\n+    private final boolean _verifyAllowedMatches() throws IOException {\n+        if (_matchCount == 0 || _allowMultipleMatches) {\n+            ++_matchCount;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     public JsonToken nextValue() throws IOException {\n         // Re-implemented same as ParserMinimalBase:\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\nindex 759167ec99..a99e814f2d 100644\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n@@ -190,6 +190,7 @@ public void testSingleMatchFilteringWithPathAlternate1() throws Exception\n         gen.close();\n \n         assertEquals(aposToQuotes(\"{'ob':{'value':['x']}}\"), w.toString());\n+        assertEquals(1, gen.getMatchCount());\n     }\n \n     public void testSingleMatchFilteringWithPathRawBinary() throws Exception\n@@ -240,47 +241,51 @@ public void testSingleMatchFilteringWithPathRawBinary() throws Exception\n         gen.close();\n \n         assertEquals(aposToQuotes(\"{'array':['AQ==',1,2,3,4 ,5.0 /*x*/,6.25,7.5]}\"), w.toString());\n+        assertEquals(1, gen.getMatchCount());\n     }\n     \n     public void testMultipleMatchFilteringWithPath1() throws Exception\n     {\n         StringWriter w = new StringWriter();\n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"value0\", \"value2\"),\n                 true, /* includePath */ true /* multipleMatches */ );\n         final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n         writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), w.toString());\n+        assertEquals(2, gen.getMatchCount());\n     }\n \n     public void testMultipleMatchFilteringWithPath2() throws Exception\n     {\n         StringWriter w = new StringWriter();\n-        \n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+\n+        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"array\", \"b\", \"value\"),\n                 true, true);\n         final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n         writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), w.toString());\n+        assertEquals(3, gen.getMatchCount());\n     }\n \n     public void testMultipleMatchFilteringWithPath3() throws Exception\n     {\n         StringWriter w = new StringWriter();\n-        \n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+\n+        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"value\"),\n                 true, true);\n         final String JSON = \"{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}\";\n         writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':4}}}\"), w.toString());\n+        assertEquals(2, gen.getMatchCount());\n     }\n \n     public void testIndexMatchWithPath1() throws Exception\n     {\n         StringWriter w = new StringWriter();\n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new IndexMatchFilter(1),\n                 true, true);\n         final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n@@ -293,24 +298,26 @@ public void testIndexMatchWithPath1() throws Exception\n                 true, true);\n         writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[1]}\"), w.toString());\n+        assertEquals(1, gen.getMatchCount());\n     }\n \n     public void testIndexMatchWithPath2() throws Exception\n     {\n         StringWriter w = new StringWriter();\n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new IndexMatchFilter(0,1),\n                 true, true);\n         final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n         writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[1,2]}\"), w.toString());\n+        assertEquals(2, gen.getMatchCount());\n     }\n \n     public void testWriteStartObjectWithObject() throws Exception\n     {\n         StringWriter w = new StringWriter();\n \n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 TokenFilter.INCLUDE_ALL,\n                 true, true);\n \ndiff --git a/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java b/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java\nindex 987d89c816..290fb04e77 100644\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java\n@@ -81,52 +81,118 @@ public void testNonFiltering() throws Exception\n     public void testSingleMatchFilteringWithoutPath() throws Exception\n     {\n         JsonParser p0 = JSON_F.createParser(SIMPLE);\n-        JsonParser p = new FilteringParserDelegate(p0,\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"value\"),\n                    false, // includePath\n                    false // multipleMatches\n                 );\n         String result = readAndWrite(JSON_F, p);\n         assertEquals(aposToQuotes(\"3\"), result);\n+        assertEquals(1, p.getMatchCount());\n+    }\n+\n+    public void testSingleMatchFilteringWithPath() throws Exception\n+    {\n+        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n+        JsonParser p0 = JSON_F.createParser(jsonString);\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n+                new NameMatchFilter(\"a\"),\n+                true, // includePath\n+                false // multipleMatches\n+        );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'a':123}\"), result);\n+        assertEquals(1, p.getMatchCount());\n     }\n \n     @SuppressWarnings(\"resource\")\n-    public void testNotAllowMultipleMatches() throws Exception\n+    public void testNotAllowMultipleMatchesWithoutPath1() throws Exception\n     {\n-    \tString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\n+        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'b':true}\");\n         JsonParser p0 = JSON_F.createParser(jsonString);\n-        JsonParser p = new FilteringParserDelegate(p0,\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"value\"),\n                    false, // includePath\n                    false // multipleMatches -false\n                 );\n         String result = readAndWrite(JSON_F, p);\n         assertEquals(aposToQuotes(\"3\"), result);\n+        assertEquals(1, p.getMatchCount());\n     }\n-    \n+\n     @SuppressWarnings(\"resource\")\n-    public void testAllowMultipleMatches() throws Exception\n+    public void testNotAllowMultipleMatchesWithoutPath2() throws Exception\n     {\n-    \tString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\n+        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n         JsonParser p0 = JSON_F.createParser(jsonString);\n-        JsonParser p = new FilteringParserDelegate(p0,\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n+                new IndexMatchFilter(1),\n+                false, // includePath\n+                false // multipleMatches -false\n+        );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"2\"), result);\n+        assertEquals(1, p.getMatchCount());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testAllowMultipleMatchesWithoutPath() throws Exception\n+    {\n+        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n+        JsonParser p0 = JSON_F.createParser(jsonString);\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"value\"),\n                    false, // includePath\n                    true // multipleMatches - true\n                 );\n         String result = readAndWrite(JSON_F, p);\n-        assertEquals(aposToQuotes(\"3 4\"), result);\n+        assertEquals(aposToQuotes(\"3 {\\\"value0\\\":2} \\\"val\\\"\"), result);\n+        assertEquals(3, p.getMatchCount());\n+    }\n+\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testAllowMultipleMatchesWithPath1() throws Exception\n+    {\n+        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n+        JsonParser p0 = JSON_F.createParser(jsonString);\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n+                new NameMatchFilter(\"value\"),\n+                true, // includePath\n+                true // multipleMatches - true\n+        );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{\\\"ob\\\":{\\\"value\\\":3,\\\"value\\\":{\\\"value0\\\":2}},\\\"value\\\":\\\"val\\\"}\"), result);\n+        assertEquals(3, p.getMatchCount());\n+    }\n+\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testAllowMultipleMatchesWithPath2() throws Exception\n+    {\n+        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'array':[3,4],'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n+        JsonParser p0 = JSON_F.createParser(jsonString);\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n+                new IndexMatchFilter(1),\n+                true, // includePath\n+                true // multipleMatches - true\n+        );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{\\\"array\\\":[2],\\\"ob\\\":{\\\"array\\\":[4]}}\"), result);\n+        assertEquals(2, p.getMatchCount());\n     }\n \n     @SuppressWarnings(\"resource\")\n     public void testMultipleMatchFilteringWithPath1() throws Exception\n     {\n         JsonParser p0 = JSON_F.createParser(SIMPLE);\n-        JsonParser p = new FilteringParserDelegate(p0,\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                 new NameMatchFilter(\"value0\", \"value2\"),\n                 true, /* includePath */ true /* multipleMatches */ );\n         String result = readAndWrite(JSON_F, p);\n         assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), result);\n+        assertEquals(2, p.getMatchCount());\n+\n     }\n \n     @SuppressWarnings(\"resource\")\n@@ -134,51 +200,57 @@ public void testMultipleMatchFilteringWithPath2() throws Exception\n     {\n         String INPUT = aposToQuotes(\"{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n         JsonParser p0 = JSON_F.createParser(INPUT);\n-        JsonParser p = new FilteringParserDelegate(p0,\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                 new NameMatchFilter(\"b\", \"value\"),\n                 true, true);\n \n         String result = readAndWrite(JSON_F, p);\n         assertEquals(aposToQuotes(\"{'ob':{'value':3},'b':true}\"), result);\n+        assertEquals(2, p.getMatchCount());\n     }\n \n     @SuppressWarnings(\"resource\")\n     public void testMultipleMatchFilteringWithPath3() throws Exception\n     {\n-        final String JSON = aposToQuotes(\"{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}\");\n+        final String JSON = aposToQuotes(\"{'root':{'a0':true,'a':{'value':3},'b':{'value':\\\"foo\\\"}},'b0':false}\");\n         JsonParser p0 = JSON_F.createParser(JSON);\n-        JsonParser p = new FilteringParserDelegate(p0,\n+        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                 new NameMatchFilter(\"value\"),\n                 true, true);\n         String result = readAndWrite(JSON_F, p);\n-        assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':4}}}\"), result);\n+        assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':\\\"foo\\\"}}}\"), result);\n+        assertEquals(2, p.getMatchCount());\n     }\n \n     @SuppressWarnings(\"resource\")\n     public void testIndexMatchWithPath1() throws Exception\n     {\n-        JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n+        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                 new IndexMatchFilter(1), true, true);\n         String result = readAndWrite(JSON_F, p);\n         assertEquals(aposToQuotes(\"{'array':[2]}\"), result);\n+        assertEquals(1, p.getMatchCount());\n \n         p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                 new IndexMatchFilter(0), true, true);\n         result = readAndWrite(JSON_F, p);\n         assertEquals(aposToQuotes(\"{'array':[1]}\"), result);\n+        assertEquals(1, p.getMatchCount());\n     }\n \n     @SuppressWarnings(\"resource\")\n     public void testIndexMatchWithPath2() throws Exception\n     {\n-        JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n+        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                 new IndexMatchFilter(0, 1), true, true);\n         assertEquals(aposToQuotes(\"{'array':[1,2]}\"), readAndWrite(JSON_F, p));\n+        assertEquals(2, p.getMatchCount());\n     \n         String JSON = aposToQuotes(\"{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}\");\n         p = new FilteringParserDelegate(JSON_F.createParser(JSON),\n                 new IndexMatchFilter(1, 3), true, true);\n         assertEquals(aposToQuotes(\"{'array':[2,4],'b':[2]}\"), readAndWrite(JSON_F, p));\n+        assertEquals(3, p.getMatchCount());\n     }\n \n     @SuppressWarnings(\"resource\")\n",
        "problem_statement": "Make use of `_matchCount` in `FilteringParserDelegate`\nCurrently, it looks like that the _matchCount attribute in FilteringGeneratorDelegate is not utilised (i.e. no value is assigned to this variable). Re. the documentation this attribute offers some useful functionality. So it would be nice, if it could be implemented properly. See https://groups.google.com/d/msg/jackson-user/VzZ94G9hvrs/JGFozl6lCQAJ\n\n",
        "hints_text": "Had a quick look to try to see how easy it would be to add this, and my head is hurting now. Code gets complicated pretty quickly, and although some aspects (zero vs some matches) would be doable, it gets tricky to properly update it with sub-tree matches. So I'll need to spend more time at some point to do it right.\n\n@cowtowncoder I gave it a try. Please have a look.\n@rfoltyns Could you create a Pull Request for this?\nSure. Done. I had to remove a couple of tests after 330 revert, but it still does the job.",
        "created_at": 1496171009000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.core.filter.BasicParserFilteringTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-core/pull/380"
    }
}