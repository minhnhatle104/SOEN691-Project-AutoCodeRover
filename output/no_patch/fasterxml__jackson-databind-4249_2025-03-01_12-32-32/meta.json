{
    "task_id": "fasterxml__jackson-databind-4249",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-databind/setup_fasterxml__jackson-databind__0.1",
        "env_name": "setup_fasterxml__jackson-databind__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-databind",
        "pull_number": 4249,
        "instance_id": "fasterxml__jackson-databind-4249",
        "issue_numbers": [
            "4248"
        ],
        "base_commit": "26f232ad4b13dba7f1e57e447a8e75b1c6ec7c6a",
        "patch": "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex 8f1fabbf30..6f7a2b17b0 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -19,6 +19,7 @@ Project: jackson-databind\n #4214: `EnumSet` deserialization does not work when we activate\n   default typing in `ObjectMapper`\n  (reported by @dvhvsekhar)\n+#4248: `ThrowableDeserializer` does not handle `null` well for `cause`\n \n 2.16.1 (not yet released)\n \ndiff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\nindex eafb470f35..dabb6d4e6f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n@@ -1,6 +1,7 @@\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.IOException;\n+import java.util.Arrays;\n \n import com.fasterxml.jackson.core.*;\n \n@@ -97,18 +98,22 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t\n             return ctxt.handleMissingInstantiator(handledType(), getValueInstantiator(), p,\n                     \"Throwable needs a default constructor, a single-String-arg constructor; or explicit @JsonCreator\");\n         }\n-\n         Throwable throwable = null;\n         Object[] pending = null;\n         Throwable[] suppressed = null;\n         int pendingIx = 0;\n-\n         for (; !p.hasToken(JsonToken.END_OBJECT); p.nextToken()) {\n             String propName = p.currentName();\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             p.nextToken(); // to point to field value\n \n             if (prop != null) { // normal case\n+                // 07-Dec-2023, tatu: [databind#4248] Interesting that \"cause\"\n+                //    with `null` blows up. So, avoid.\n+                if (\"cause\".equals(prop.getName())\n+                        && p.hasToken(JsonToken.VALUE_NULL)) {\n+                    continue;\n+                }\n                 if (throwable != null) {\n                     prop.deserializeAndSet(p, ctxt, throwable);\n                     continue;\n@@ -117,6 +122,13 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t\n                 if (pending == null) {\n                     int len = _beanProperties.size();\n                     pending = new Object[len + len];\n+                } else if (pendingIx == pending.length) {\n+                    // NOTE: only occurs with duplicate properties, possible\n+                    // with some formats (most notably XML; but possibly with\n+                    // JSON if duplicate detection not enabled). Most likely\n+                    // only occurs with malicious content so use linear buffer\n+                    // resize (no need to optimize performance)\n+                    pending = Arrays.copyOf(pending, pendingIx + 16);\n                 }\n                 pending[pendingIx++] = prop;\n                 pending[pendingIx++] = prop.deserialize(p, ctxt);\n@@ -142,7 +154,13 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t\n                 continue;\n             }\n             if (PROP_NAME_SUPPRESSED.equalsIgnoreCase(propName)) { // or \"suppressed\"?\n-                suppressed = ctxt.readValue(p, Throwable[].class);\n+                // 07-Dec-2023, tatu: Not sure how/why, but JSON Null is otherwise\n+                //    not handled with such call so...\n+                if (p.hasToken(JsonToken.VALUE_NULL)) {\n+                    suppressed = null;\n+                } else {\n+                    suppressed = ctxt.readValue(p, Throwable[].class);\n+                }\n                 continue;\n             }\n             if (PROP_NAME_LOCALIZED_MESSAGE.equalsIgnoreCase(propName)) {\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java b/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\nindex 40549c9f66..319882261e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n@@ -693,8 +693,19 @@ public static String getTypeDescription(JavaType fullType)\n         if (fullType == null) {\n             return \"[null]\";\n         }\n+        // 07-Dec-2023, tatu: Instead of cryptic notation for array types\n+        //    (JLS-specified for JDK deserialization), let's use trailing \"[]\"s\n+        //    to indicate dimensions instead\n+        int arrays = 0;\n+        while (fullType.isArrayType()) {\n+            ++arrays;\n+            fullType = fullType.getContentType();\n+        }\n         StringBuilder sb = new StringBuilder(80).append('`');\n         sb.append(fullType.toCanonical());\n+        while (arrays-- > 0) {\n+            sb.append(\"[]\");\n+        }\n         return sb.append('`').toString();\n     }\n \n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java b/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java\nindex b575b49024..6f1161662d 100644\n--- a/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java\n@@ -56,7 +56,7 @@ static class MyNoArgException extends Exception\n \n     private final ObjectMapper MAPPER = new ObjectMapper();\n \n-    public void testIOException() throws IOException\n+    public void testIOException() throws Exception\n     {\n         IOException ioe = new IOException(\"TEST\");\n         String json = MAPPER.writerWithDefaultPrettyPrinter()\n@@ -65,7 +65,7 @@ public void testIOException() throws IOException\n         assertEquals(ioe.getMessage(), result.getMessage());\n     }\n \n-    public void testWithCreator() throws IOException\n+    public void testWithCreator() throws Exception\n     {\n         final String MSG = \"the message\";\n         String json = MAPPER.writeValueAsString(new MyException(MSG, 3));\n@@ -82,7 +82,7 @@ public void testWithCreator() throws IOException\n         assertTrue(result.stuff.containsKey(\"suppressed\"));\n     }\n \n-    public void testWithNullMessage() throws IOException\n+    public void testWithNullMessage() throws Exception\n     {\n         final ObjectMapper mapper = new ObjectMapper();\n         mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n@@ -92,14 +92,14 @@ public void testWithNullMessage() throws IOException\n         assertNull(result.getMessage());\n     }\n \n-    public void testNoArgsException() throws IOException\n+    public void testNoArgsException() throws Exception\n     {\n         MyNoArgException exc = MAPPER.readValue(\"{}\", MyNoArgException.class);\n         assertNotNull(exc);\n     }\n \n     // try simulating JDK 7 behavior\n-    public void testJDK7SuppressionProperty() throws IOException\n+    public void testJDK7SuppressionProperty() throws Exception\n     {\n         Exception exc = MAPPER.readValue(\"{\\\"suppressed\\\":[]}\", IOException.class);\n         assertNotNull(exc);\n@@ -124,7 +124,7 @@ public void testSingleValueArrayDeserialization() throws Exception\n         _assertEquality(exp.getStackTrace(), cloned.getStackTrace());\n     }\n \n-    public void testExceptionCauseDeserialization() throws IOException\n+    public void testExceptionCauseDeserialization() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n \n@@ -139,7 +139,7 @@ public void testExceptionCauseDeserialization() throws IOException\n     }\n \n \n-    public void testSuppressedGenericThrowableDeserialization() throws IOException\n+    public void testSuppressedGenericThrowableDeserialization() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n \n@@ -155,7 +155,7 @@ public void testSuppressedGenericThrowableDeserialization() throws IOException\n         _assertEquality(exp.getSuppressed()[0].getStackTrace(), act.getSuppressed()[0].getStackTrace());\n     }\n \n-    public void testSuppressedTypedExceptionDeserialization() throws IOException\n+    public void testSuppressedTypedExceptionDeserialization() throws Exception\n     {\n         PolymorphicTypeValidator typeValidator = BasicPolymorphicTypeValidator.builder()\n                 .allowIfSubTypeIsArray()\n@@ -231,7 +231,7 @@ public void testSingleValueArrayDeserializationException() throws Exception {\n     }\n \n     // mostly to help with XML module (and perhaps CSV)\n-    public void testLineNumberAsString() throws IOException\n+    public void testLineNumberAsString() throws Exception\n     {\n         Exception exc = MAPPER.readValue(a2q(\n                 \"{'message':'Test',\\n'stackTrace': \"\n@@ -241,7 +241,7 @@ public void testLineNumberAsString() throws IOException\n     }\n \n     // [databind#1842]\n-    public void testNullAsMessage() throws IOException\n+    public void testNullAsMessage() throws Exception\n     {\n         Exception exc = MAPPER.readValue(a2q(\n                 \"{'message':null, 'localizedMessage':null }\"\n@@ -278,4 +278,24 @@ private void _testRoundtripWith(ObjectMapper mapper) throws Exception\n         assertNotNull(result.getCause());\n         assertEquals(root.getMessage(), result.getCause().getMessage());\n     }\n+\n+    // [databind#4248]\n+    public void testWithDups() throws Exception\n+    {\n+        // NOTE: by default JSON parser does NOT fail on duplicate properties;\n+        // we only use them to mimic formats like XML where duplicates can occur\n+        // (or, malicious JSON...)\n+        final StringBuilder sb = new StringBuilder(100);\n+        sb.append(\"{\");\n+        sb.append(\"'suppressed': [],\\n\");\n+        sb.append(\"'cause': null,\\n\");\n+        for (int i = 0; i < 10; ++i) { // just needs to be more than max distinct props\n+            sb.append(\"'stackTrace': [],\\n\");\n+        }\n+        sb.append(\"'message': 'foo',\\n\");\n+        sb.append(\"'localizedMessage': 'bar'\\n}\");\n+        IOException exc = MAPPER.readValue(a2q(sb.toString()), IOException.class);\n+        assertNotNull(exc);\n+        assertEquals(\"foo\", exc.getLocalizedMessage());\n+    }\n }\n",
        "problem_statement": "`ThrowableDeserializer` does not handle `null` well for `cause`\n### Describe your Issue\n\nCurrently JSON for deserializing any `Throwable` with `null` for `\"cause\"` property:\r\n\r\n```\r\n{ \"message\": \"...\",\r\n   \"cause\": null\r\n}\r\n```\r\n\r\nwill lead to cryptic exception, due to `Throwable.initCause()` being called with `null`.\r\nTo avoid this, `ThrowableDeserializer` should handle this edge case gracefully.\r\n\r\n\n",
        "hints_text": "",
        "created_at": 1702004023000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.databind.exc.ExceptionDeserializationTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-databind/pull/4249"
    }
}