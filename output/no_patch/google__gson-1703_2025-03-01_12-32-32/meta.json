{
    "task_id": "google__gson-1703",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/google__gson/setup_google__gson__0.1",
        "env_name": "setup_google__gson__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java"
    },
    "task_info": {
        "repo": "google/gson",
        "pull_number": 1703,
        "instance_id": "google__gson-1703",
        "issue_numbers": [
            "1702"
        ],
        "base_commit": "ceae88bd6667f4263bbe02e6b3710b8a683906a2",
        "patch": "diff --git a/gson/src/main/java/com/google/gson/internal/Streams.java b/gson/src/main/java/com/google/gson/internal/Streams.java\nindex 0bb73aa18e..c1ce2a452a 100644\n--- a/gson/src/main/java/com/google/gson/internal/Streams.java\n+++ b/gson/src/main/java/com/google/gson/internal/Streams.java\n@@ -89,7 +89,7 @@ private static final class AppendableWriter extends Writer {\n     }\n \n     @Override public void write(char[] chars, int offset, int length) throws IOException {\n-      currentWrite.chars = chars;\n+      currentWrite.setChars(chars);\n       appendable.append(currentWrite, offset, offset + length);\n     }\n \n@@ -103,8 +103,15 @@ private static final class AppendableWriter extends Writer {\n     /**\n      * A mutable char sequence pointing at a single char[].\n      */\n-    static class CurrentWrite implements CharSequence {\n-      char[] chars;\n+    private static class CurrentWrite implements CharSequence {\n+      private char[] chars;\n+      private String cachedString;\n+\n+      void setChars(char[] chars) {\n+        this.chars = chars;\n+        this.cachedString = null;\n+      }\n+\n       @Override public int length() {\n         return chars.length;\n       }\n@@ -114,7 +121,14 @@ static class CurrentWrite implements CharSequence {\n       @Override public CharSequence subSequence(int start, int end) {\n         return new String(chars, start, end - start);\n       }\n+\n+      // Must return string representation to satisfy toString() contract\n+      @Override public String toString() {\n+        if (cachedString == null) {\n+          cachedString = new String(chars);\n+        }\n+        return cachedString;\n+      }\n     }\n   }\n-\n }\n",
        "test_patch": "diff --git a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\nindex e21fb903e4..a04723b576 100644\n--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n@@ -20,11 +20,7 @@\n import com.google.gson.JsonStreamParser;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n-\n import com.google.gson.reflect.TypeToken;\n-import java.util.Map;\n-import junit.framework.TestCase;\n-\n import java.io.CharArrayReader;\n import java.io.CharArrayWriter;\n import java.io.IOException;\n@@ -32,6 +28,9 @@\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for the support of {@link Reader}s and {@link Writer}s.\n@@ -89,8 +88,8 @@ public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() {\n   }\n \n   public void testReadWriteTwoStrings() throws IOException {\n-    Gson gson= new Gson();\n-    CharArrayWriter writer= new CharArrayWriter();\n+    Gson gson = new Gson();\n+    CharArrayWriter writer = new CharArrayWriter();\n     writer.write(gson.toJson(\"one\").toCharArray());\n     writer.write(gson.toJson(\"two\").toCharArray());\n     CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n@@ -102,8 +101,8 @@ public void testReadWriteTwoStrings() throws IOException {\n   }\n \n   public void testReadWriteTwoObjects() throws IOException {\n-    Gson gson= new Gson();\n-    CharArrayWriter writer= new CharArrayWriter();\n+    Gson gson = new Gson();\n+    CharArrayWriter writer = new CharArrayWriter();\n     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\n     writer.write(gson.toJson(expectedOne).toCharArray());\n     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\n@@ -132,4 +131,50 @@ public void testTypeMismatchThrowsJsonSyntaxExceptionForReaders() {\n     } catch (JsonSyntaxException expected) {\n     }\n   }\n+\n+  /**\n+   * Verifies that passing an {@link Appendable} which is not an instance of {@link Writer}\n+   * to {@code Gson.toJson} works correctly.\n+   */\n+  public void testToJsonAppendable() {\n+    class CustomAppendable implements Appendable {\n+      final StringBuilder stringBuilder = new StringBuilder();\n+      int toStringCallCount = 0;\n+\n+      @Override\n+      public Appendable append(char c) throws IOException {\n+        stringBuilder.append(c);\n+        return this;\n+      }\n+\n+      @Override\n+      public Appendable append(CharSequence csq) throws IOException {\n+        if (csq == null) {\n+          csq = \"null\"; // Requirement by Writer.append\n+        }\n+        append(csq, 0, csq.length());\n+        return this;\n+      }\n+\n+      @Override\n+      public Appendable append(CharSequence csq, int start, int end) throws IOException {\n+        if (csq == null) {\n+          csq = \"null\"; // Requirement by Writer.append\n+        }\n+\n+        // According to doc, toString() must return string representation\n+        String s = csq.toString();\n+        toStringCallCount++;\n+        stringBuilder.append(s, start, end);\n+        return this;\n+      }\n+    }\n+\n+    CustomAppendable appendable = new CustomAppendable();\n+    gson.toJson(Arrays.asList(\"test\", 123, true), appendable);\n+    // Make sure CharSequence.toString() was called at least two times to verify that\n+    // CurrentWrite.cachedString is properly overwritten when char array changes\n+    assertTrue(appendable.toStringCallCount >= 2);\n+    assertEquals(\"[\\\"test\\\",123,true]\", appendable.stringBuilder.toString());\n+  }\n }\n",
        "problem_statement": "Gson.toJson: CharSequence passed to Appendable does not implement toString()\nWhen calling `Gson.toJson(..., Appendable)` and `Appendable` is not an instance of `Writer`, then `Gson` creates a `CharSequence` which does not fulfill the `toString()` requirements:\r\n> Returns a string containing the characters in this sequence in the same order as this sequence.  The length of the string will be the length of this sequence.\r\n\r\nContrived example:\r\n```\r\nstatic class MyAppendable implements Appendable {\r\n    private final StringBuilder stringBuilder = new StringBuilder();\r\n    \r\n    @Override\r\n    public Appendable append(char c) throws IOException {\r\n        stringBuilder.append(c);\r\n        return this;\r\n    }\r\n    \r\n    @Override\r\n    public Appendable append(CharSequence csq) throws IOException {\r\n        if (csq == null) {\r\n            append(\"null\");\r\n        } else {\r\n            append(csq, 0, csq.length());\r\n        }\r\n        return this;\r\n    }\r\n    \r\n    public Appendable append(CharSequence csq, int start, int end) throws IOException {\r\n        if (csq == null) {\r\n            csq == \"null\";\r\n        }\r\n        \r\n        // According to doc, toString() must return string representation\r\n        String s = csq.toString();\r\n        stringBuilder.append(s, start, end);\r\n        return this;\r\n    }\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    MyAppendable myAppendable = new MyAppendable();\r\n    new Gson().toJson(\"test\", myAppendable);\r\n    // Prints `com.` (first 4 chars of `com.google.gson.internal.Streams.AppendableWriter.CurrentWrite`)\r\n    System.out.println(myAppendable.stringBuilder);\r\n}\r\n```\n",
        "hints_text": "",
        "created_at": 1590095981000,
        "FAIL_TO_PASS": [
            "gson:com.google.gson.functional.ReadersWritersTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/google/gson/pull/1703"
    }
}