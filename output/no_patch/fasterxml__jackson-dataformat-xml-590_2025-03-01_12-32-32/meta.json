{
    "task_id": "fasterxml__jackson-dataformat-xml-590",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-dataformat-xml/setup_fasterxml__jackson-dataformat-xml__0.1",
        "env_name": "setup_fasterxml__jackson-dataformat-xml__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-dataformat-xml",
        "pull_number": 590,
        "instance_id": "fasterxml__jackson-dataformat-xml-590",
        "issue_numbers": [
            "578"
        ],
        "base_commit": "a18b8cd98e94660dcac19bd2cd11f376705d7745",
        "patch": "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex 96bd89247..a43128fee 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -4,6 +4,11 @@ Project: jackson-dataformat-xml\n === Releases ===\n ------------------------------------------------------------------------\n \n+Not yet released\n+\n+#578: `XmlMapper` serializes `@JsonAppend` property twice\n+ (reported by @stepince)\n+\n 2.15.0-rc2 (28-Mar-2023)\n \n #286: Conflict between `@JsonIdentityInfo` and Unwrapped Lists\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\nindex f2b375550..8080d540f 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n@@ -1,12 +1,14 @@\n package com.fasterxml.jackson.dataformat.xml;\n \n import java.lang.annotation.Annotation;\n+import java.util.List;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.dataformat.xml.annotation.*;\n \n /**\n@@ -124,6 +126,19 @@ public String findNamespace(MapperConfig<?> config, Annotated ann)\n         return null;\n     }\n \n+    /**\n+     * Due to issue [dataformat-xml#578] need to suppress calls to this method\n+     * to avoid duplicate virtual properties from being added. Not elegant\n+     * but .. works.\n+     *\n+     * @since 2.15\n+     */\n+    @Override\n+    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n+            List<BeanPropertyWriter> properties) {\n+        return;\n+    }\n+\n     /*\n     /**********************************************************************\n     /* XmlAnnotationIntrospector, isXxx methods\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend578Test.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java\nsimilarity index 93%\nrename from src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend578Test.java\nrename to src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java\nindex f543901b6..7543faaea 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend578Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java\n@@ -1,4 +1,4 @@\n-package com.fasterxml.jackson.dataformat.xml.failing;\n+package com.fasterxml.jackson.dataformat.xml.ser;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n@@ -53,6 +53,6 @@ public VirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedCla\n     // [dataformat-xml#578]: Duplication of virtual properties\n     public void testJsonAppend() throws Exception {\n         String xml = MAPPER.writeValueAsString(new Pojo578(\"foo\"));\n-        assertEquals(\"<Pojo><name>foo</name><virtual>bar</virtual></Pojo>\",xml);\n+        assertEquals(\"<Pojo578><name>foo</name><virtual>bar</virtual></Pojo578>\",xml);\n     }\n }\n",
        "problem_statement": "`XmlMapper` serializes `@JsonAppend` property twice\n### Discussed in https://github.com/FasterXML/jackson-databind/discussions/3806\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **stepince** March  5, 2023</sup>\r\nXmlMapper is serializing jsonAppend virtual property twice.  ObjectMapper for json works correctly.\r\n\r\njackson version: 2.14.1\r\n\r\n```\r\npublic class VirtualBeanPropertyWriterTest {\r\n    @Test\r\n    public void testJsonAppend() throws Exception {\r\n        ObjectMapper mapper = new XmlMapper();\r\n        String xml = mapper.writeValueAsString(new Pojo(\"foo\"));\r\n        assertEquals(\"<Pojo><name>foo</name><virtual>bar</virtual></Pojo>\",xml);\r\n    }\r\n\r\n    @JsonAppend(props = @JsonAppend.Prop(name = \"virtual\", value = MyVirtualPropertyWriter.class))\r\n    public static class Pojo {\r\n        private final String name;\r\n\r\n        public Pojo(String name) {\r\n            this.name = name;\r\n        }\r\n        public String getName() {\r\n            return name;\r\n        }\r\n    }\r\n\r\n    public static class MyVirtualPropertyWriter extends VirtualBeanPropertyWriter {\r\n        public MyVirtualPropertyWriter() {}\r\n\r\n        protected MyVirtualPropertyWriter(BeanPropertyDefinition propDef, Annotations contextAnnotations,\r\n                                          JavaType declaredType) {\r\n            super(propDef, contextAnnotations, declaredType);\r\n        }\r\n\r\n        @Override\r\n        protected Object value(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\r\n            return \"bar\";\r\n        }\r\n\r\n        @Override\r\n        public VirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedClass declaringClass,\r\n                                                    BeanPropertyDefinition propDef, JavaType type) {\r\n\r\n            return new MyVirtualPropertyWriter(propDef, declaringClass.getAnnotations(), type);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\noutput\r\n\r\n```\r\norg.opentest4j.AssertionFailedError: \r\nExpected :`<Pojo><name>foo</name><virtual>bar</virtual></Pojo>`\r\nActual   :`<Pojo><name>foo</name><virtual>bar</virtual><virtual>bar</virtual></Pojo>`\r\n</div>\r\n```\n",
        "hints_text": "Sounds like a flaw. Thank you for reporting @stepince \nAny workaround for this issue? I am actually using a mixin class for the serialization. Maybe in VirtualBeanPropertyWriter Impl check if the property has been written. Not sure if this is possible?\n@stepince Without knowing why it's failing it is hard to suggest any workaround. But no, writer should not really have to check for anything, backend should not write duplicates.\r\n\r\nI hope I'll have time to look into this in near future -- existence of unit test should be great help.\r\n\nHi @cowtowncoder,\r\n\r\nNot sure if this helps, but I was able to track down where the property is getting set twice. It is in [this file (AnnotationIntrospectorPair.java)](https://github.com/FasterXML/jackson-databind/blob/de62c677b12c02967c9620a11c1c5208f701cfef/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java#L594,L595) lines 594 and 595. The first **virtual** prop is getting set when `_primary` calls `findAndAddVirtualProperties` and also the second time when `_secondary` calls `findAndAddVirtualProperties`. Thanks.\n@mukham12 that is indeed helpful! Question then being why do we have 2 `JacksonAnnotationIntrospector` instances registered (-Pair is used to combine 2 AIs).\nAh. That is because `JacksonXmlModule` inserts our special `JacksonXmlAnnotationIntrospector`; it won't (and basically can't) replace plain `JacksonAnnotationIntrospector`. But what that means, then, is that it doubles up this call.\r\n\r\nHmmh. In a way fix is easy, although I need to think it through -- basically have a switch to prevent some of the calls to super class. The reason for a switch (as opposed to just blocking) is that this implementation may be used directly as well, as a replacement of `JacksonAnnotationIntrospector` (instead of augmenting) -- if so, calls should be handled by base implementation.\r\n\r\nBut at least I now know how to implement this.\r\n\r\n\nHappy to help.\r\n\r\nI may be able to help with the implementation if you can just nudge me in the right direction and lay out the overall plan. Thanks. ",
        "created_at": 1680235067000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-dataformat-xml/pull/590"
    }
}