{
    "task_id": "fasterxml__jackson-databind-4609",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-databind/setup_fasterxml__jackson-databind__0.1",
        "env_name": "setup_fasterxml__jackson-databind__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/databind/deser/creators/TwoCreators4602Test.java src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-databind",
        "pull_number": 4609,
        "instance_id": "fasterxml__jackson-databind-4609",
        "issue_numbers": [
            "4602"
        ],
        "base_commit": "8a42895d43fca71dde3ab58f699bb0face339f06",
        "patch": "diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x\nindex e16184d472..0f27ef08c2 100644\n--- a/release-notes/CREDITS-2.x\n+++ b/release-notes/CREDITS-2.x\n@@ -1812,3 +1812,8 @@ Alexandre Jacob (ajacob@github)\n  * Reported #4545: Unexpected deserialization behavior with `@JsonCreator`,\n    `@JsonProperty` and javac `-parameters`\n   (2.18.0)\n+\n+Eduard Gomoliako (Gems@github)\n+ * Reported #4602: Possible wrong use of _arrayDelegateDeserializer in\n+   BeanDeserializerBase::deserializeFromObjectUsingNonDefault()\n+  (2.18.0)\ndiff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex 439e43c6a2..0771475f49 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -50,6 +50,9 @@ Project: jackson-databind\n #4570: Deprecate `ObjectMapper.canDeserialize()`/`ObjectMapper.canSerialize()`\n #4580: Add `MapperFeature.SORT_CREATOR_PROPERTIES_BY_DECLARATION_ORDER` to use\n   Creator properties' declaration order for sorting\n+#4602: Possible wrong use of _arrayDelegateDeserializer in\n+  BeanDeserializerBase::deserializeFromObjectUsingNonDefault()\n+ (reported by Eduard G)\n \n 2.17.2 (not yet released)\n \ndiff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\nindex 806d12b43f..3e63a4a6b7 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n@@ -1482,7 +1482,9 @@ protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ct\n     protected Object deserializeFromObjectUsingNonDefault(JsonParser p,\n             DeserializationContext ctxt) throws IOException\n     {\n-        final JsonDeserializer<Object> delegateDeser = _delegateDeserializer();\n+        // 02-Jul-2024, tatu: [databind#4602] Need to tweak regular and \"array\" delegating\n+        //   Creator handling\n+        final JsonDeserializer<Object> delegateDeser = _delegateDeserializer(p);\n         if (delegateDeser != null) {\n             final Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                     delegateDeser.deserialize(p, ctxt));\n@@ -1505,7 +1507,7 @@ protected Object deserializeFromObjectUsingNonDefault(JsonParser p,\n         // 01-May-2022, tatu: [databind#3417] special handling for (Graal) native images\n         if (NativeImageUtil.needsReflectionConfiguration(raw)) {\n             return ctxt.handleMissingInstantiator(raw, null, p,\n-                    \"cannot deserialize from Object value (no delegate- or property-based Creator): this appears to be a native image, in which case you may need to configure reflection for the class that is to be deserialized\");\n+\"cannot deserialize from Object value (no delegate- or property-based Creator): this appears to be a native image, in which case you may need to configure reflection for the class that is to be deserialized\");\n         }\n         return ctxt.handleMissingInstantiator(raw, getValueInstantiator(), p,\n \"cannot deserialize from Object value (no delegate- or property-based Creator)\");\n@@ -1710,6 +1712,30 @@ protected final JsonDeserializer<Object> _delegateDeserializer() {\n         return deser;\n     }\n \n+    /**\n+     * Alternate to {@link #_delegateDeserializer()} which will only consider\n+     * {@code _arrayDelegateDeserializer} if given {@link JsonParser} points to\n+     * {@link JsonToken#START_ARRAY} token.\n+     *\n+     * @since 2.18\n+     */\n+    protected final JsonDeserializer<Object> _delegateDeserializer(JsonParser p) {\n+        if (_delegateDeserializer == null) {\n+            // Note! Will not call `JsonParser.isExpectedArrayToken()` as that could\n+            // \"transform\" `JsonToken.START_OBJECT` into `JsonToken.START_ARRAY` and\n+            // here there is no strong expectation of Array value\n+            if (_arrayDelegateDeserializer != null) {\n+                // Alas, need bit elaborate logic: either JSON Array, OR no\n+                // Properties-based Creator\n+                if (p.hasToken(JsonToken.START_ARRAY)\n+                        || (_propertyBasedCreator == null)) {\n+                    return _arrayDelegateDeserializer;\n+                }\n+            }\n+        }\n+        return _delegateDeserializer;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Overridable helper methods\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/failing/TwoCreators4602Test.java b/src/test/java/com/fasterxml/jackson/databind/deser/creators/TwoCreators4602Test.java\nsimilarity index 98%\nrename from src/test/java/com/fasterxml/jackson/failing/TwoCreators4602Test.java\nrename to src/test/java/com/fasterxml/jackson/databind/deser/creators/TwoCreators4602Test.java\nindex 25e31f848b..2fce2711f6 100644\n--- a/src/test/java/com/fasterxml/jackson/failing/TwoCreators4602Test.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/creators/TwoCreators4602Test.java\n@@ -1,4 +1,4 @@\n-package com.fasterxml.jackson.failing;\n+package com.fasterxml.jackson.databind.deser.creators;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\ndiff --git a/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java b/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java\nindex 9ec7031cba..c41bfbc0e1 100644\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java\n@@ -19,8 +19,6 @@\n \n public class SingleValueAsArrayTest extends DatabindTestUtil\n {\n-    private static final String JSON = \"[{\\\"message\\\":\\\"messageHere\\\"}]\";\n-\n     static class Bean1421A\n     {\n         List<Messages> bs = Collections.emptyList();\n@@ -77,8 +75,10 @@ public Bean1421B(T value) {\n     @Test\n     public void testSuccessfulDeserializationOfObjectWithChainedArrayCreators() throws IOException\n     {\n-        Bean1421A result = MAPPER.readValue(JSON, Bean1421A.class);\n+        Bean1421A result = MAPPER.readValue(\"[{\\\"message\\\":\\\"messageHere\\\"}]\", Bean1421A.class);\n         assertNotNull(result);\n+        assertNotNull(result.bs);\n+        assertEquals(1, result.bs.size());\n     }\n \n     @Test\n",
        "problem_statement": "Possible wrong use of _arrayDelegateDeserializer in BeanDeserializerBase::deserializeFromObjectUsingNonDefault\n### Search before asking\n\n- [X] I searched in the [issues](https://github.com/FasterXML/jackson-databind/issues) and found nothing similar.\n\n### Describe the bug\n\nDeserialisation doesn't work as expected in case of several Json Creators are defined on a class ( PROPERTIES and DELEGATED), and the delegating one is accepting a `List` as an argument and represents the single mandatory property of the class. \r\n\r\nIt's expected that the PROPERTIES deserializer will be used, but the deserialisation process opts for the delegating deserialiser despite JSON definition being provided as Object.\n\n### Version Information\n\n2.16.1\n\n### Reproduction\n\nI have the following class definition for a JSON object:\r\n```\r\nclass MyDefinition {\r\n  List<StepDefinition> steps;\r\n  ExtraProperties extra;\r\n\r\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\r\n  public MyDefinition(@JsonProperty(\"steps\") List<StepDefinition> steps, @JsonProperty(\"extra\") ExtraProperties extra) {\r\n     this.steps = steps;\r\n     this.extra = extra;\r\n  }\r\n\r\n  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\r\n  public static MyDefinition of(List<StepDefinition> steps) {\r\n    return new MyDefinition(steps, null);\r\n  }\r\n}\r\n```\r\n\r\nClasses `StepDefinition` and `ExtraProperties` are simple class with straight-forward mapping.\r\n\r\nI annotated the `MyDefinition` class in such a way, so it could handle mapping for the following two cases of JSON:\r\n\r\nCase 1:\r\n```\r\n{\r\n  \"myDefinition\": {\r\n    \"steps\": [ { \"step\": \"some\" } ], \r\n    \"extra\": { \"prop\": \"value\" }\r\n  }\r\n}\r\n```\r\n\r\nCase 2:\r\n```\r\n{ \r\n  \"myDefinition\": [\r\n    { \"step\": \"some\" }\r\n  ]\r\n}\r\n```\r\n\r\nThe deserialisation for the \"PROPERTIES\" case (Case 1)  fails on trying to deserialise \"extra\" property value as `StepDefinition` type.\n\n### Expected behavior\n\nI'd expect that the PROPERTIES deserialiser is used in case the object is provided with a bunch of properties.\n\n### Additional context\n\nA similar mapping scenario works in case the delegating factory method accepts `String` as a value (not a list).\r\n\r\nMy mapper is created using `YAMLFactory` and the failure occurs on parsing YAML.\r\nThe mapper has `DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY` feature enabled, and is configured with `ParameterNamesModule`\r\n\r\nI guess it could be important to mention that I also use Lombok.\n",
        "hints_text": "I checked the `BeanDeserializerBase::deserializeFromObjectUsingNonDefault` method and noticed that if `_delegateDeserializer()` method which returns available `_arrayDelegateDeserializer` (II guess because of the delegating Json Creator)  would return `null` and the deserialisation process would fallback to use `_propertyBasedCreator`, then everything would work  as expected.\r\n\r\nThe `JsonParser` current token is `FIELD_NAME`, hence nothing suggests that current parsing context is an array and that it's a good idea to use `_arrayDelegateDeserializer`.\r\n\r\nHTH\nQuick note: would be good to verify with latest release (2.17.1). But more importantly, 2.18.0-SNAPSHOT has fully rewritten Bean Property Introspection, which includes Creator detection.\r\nSo would be good to see how this works with latest code from `2.18` branch.\r\n\nOther than that, what would be useful is an actual unit test: all the pieces seem to be included. But reproduction would be most useful.\r\n\r\nReproduction would ideally be for using JSON (not yaml), without parameter-names module (just use annotations). If it turns out things work in JSON, then would move issue to yaml module repo etc.\r\n\r\n\n@cowtowncoder thanks for your input\r\n\r\nI checked it with 2.17.1 and 2.18.0-SNAPSHOT, no dice. The `BeanDeserializerBase::deserializeFromObjectUsingNonDefault` method implementation is the same for the mentioned versions, hence no change in the behaviour.\nI added the test, you can find it in the linked PR #4605 \nThank you @gems!\nOk, so, just because current JSON value is Object does not automatically rule out use of delegating deserializer -- Delegation to, say, `Map`, would expect JSON Object. So logic is not (and cannot) use JSON value shape for that distinction.\r\n\r\nBut I wonder if `_arrayDelegateDeserializer` should indeed check for JSON Array (there are some features it might not work well with, like \"accept single value as Array of 1\" but we'll ignore that for now) before being used.\r\n",
        "created_at": 1719972353000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.databind.deser.creators.TwoCreators4602Test"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-databind/pull/4609"
    }
}