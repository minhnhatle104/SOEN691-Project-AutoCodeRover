diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x
index e16184d472..0f27ef08c2 100644
--- a/release-notes/CREDITS-2.x
+++ b/release-notes/CREDITS-2.x
@@ -1812,3 +1812,8 @@ Alexandre Jacob (ajacob@github)
  * Reported #4545: Unexpected deserialization behavior with `@JsonCreator`,
    `@JsonProperty` and javac `-parameters`
   (2.18.0)
+
+Eduard Gomoliako (Gems@github)
+ * Reported #4602: Possible wrong use of _arrayDelegateDeserializer in
+   BeanDeserializerBase::deserializeFromObjectUsingNonDefault()
+  (2.18.0)
diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x
index 439e43c6a2..0771475f49 100644
--- a/release-notes/VERSION-2.x
+++ b/release-notes/VERSION-2.x
@@ -50,6 +50,9 @@ Project: jackson-databind
 #4570: Deprecate `ObjectMapper.canDeserialize()`/`ObjectMapper.canSerialize()`
 #4580: Add `MapperFeature.SORT_CREATOR_PROPERTIES_BY_DECLARATION_ORDER` to use
   Creator properties' declaration order for sorting
+#4602: Possible wrong use of _arrayDelegateDeserializer in
+  BeanDeserializerBase::deserializeFromObjectUsingNonDefault()
+ (reported by Eduard G)
 
 2.17.2 (not yet released)
 
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
index 806d12b43f..3e63a4a6b7 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
@@ -1482,7 +1482,9 @@ protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ct
     protected Object deserializeFromObjectUsingNonDefault(JsonParser p,
             DeserializationContext ctxt) throws IOException
     {
-        final JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
+        // 02-Jul-2024, tatu: [databind#4602] Need to tweak regular and "array" delegating
+        //   Creator handling
+        final JsonDeserializer<Object> delegateDeser = _delegateDeserializer(p);
         if (delegateDeser != null) {
             final Object bean = _valueInstantiator.createUsingDelegate(ctxt,
                     delegateDeser.deserialize(p, ctxt));
@@ -1505,7 +1507,7 @@ protected Object deserializeFromObjectUsingNonDefault(JsonParser p,
         // 01-May-2022, tatu: [databind#3417] special handling for (Graal) native images
         if (NativeImageUtil.needsReflectionConfiguration(raw)) {
             return ctxt.handleMissingInstantiator(raw, null, p,
-                    "cannot deserialize from Object value (no delegate- or property-based Creator): this appears to be a native image, in which case you may need to configure reflection for the class that is to be deserialized");
+"cannot deserialize from Object value (no delegate- or property-based Creator): this appears to be a native image, in which case you may need to configure reflection for the class that is to be deserialized");
         }
         return ctxt.handleMissingInstantiator(raw, getValueInstantiator(), p,
 "cannot deserialize from Object value (no delegate- or property-based Creator)");
@@ -1710,6 +1712,30 @@ protected final JsonDeserializer<Object> _delegateDeserializer() {
         return deser;
     }
 
+    /**
+     * Alternate to {@link #_delegateDeserializer()} which will only consider
+     * {@code _arrayDelegateDeserializer} if given {@link JsonParser} points to
+     * {@link JsonToken#START_ARRAY} token.
+     *
+     * @since 2.18
+     */
+    protected final JsonDeserializer<Object> _delegateDeserializer(JsonParser p) {
+        if (_delegateDeserializer == null) {
+            // Note! Will not call `JsonParser.isExpectedArrayToken()` as that could
+            // "transform" `JsonToken.START_OBJECT` into `JsonToken.START_ARRAY` and
+            // here there is no strong expectation of Array value
+            if (_arrayDelegateDeserializer != null) {
+                // Alas, need bit elaborate logic: either JSON Array, OR no
+                // Properties-based Creator
+                if (p.hasToken(JsonToken.START_ARRAY)
+                        || (_propertyBasedCreator == null)) {
+                    return _arrayDelegateDeserializer;
+                }
+            }
+        }
+        return _delegateDeserializer;
+    }
+
     /*
     /**********************************************************
     /* Overridable helper methods
