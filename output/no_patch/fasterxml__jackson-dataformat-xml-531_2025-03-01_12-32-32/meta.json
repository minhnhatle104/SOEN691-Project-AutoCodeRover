{
    "task_id": "fasterxml__jackson-dataformat-xml-531",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-dataformat-xml/setup_fasterxml__jackson-dataformat-xml__0.1",
        "env_name": "setup_fasterxml__jackson-dataformat-xml__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-dataformat-xml",
        "pull_number": 531,
        "instance_id": "fasterxml__jackson-dataformat-xml-531",
        "issue_numbers": [
            "524"
        ],
        "base_commit": "f406e23f5e15efb3d930e826204c06e00a23f8e3",
        "patch": "diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\nindex e41f11b1e..bd0e6bba9 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n@@ -65,6 +65,8 @@ public class XmlFactory extends JsonFactory\n     protected transient XMLOutputFactory _xmlOutputFactory;\n \n     protected String _cfgNameForTextElement;\n+\n+    protected XmlTagProcessor _tagProcessor;\n     \n     /*\n     /**********************************************************\n@@ -102,11 +104,18 @@ public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut\n                 xmlIn, xmlOut, null);\n     }\n \n+    public XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n+                         XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n+                         String nameForTextElem) {\n+        this(oc, xpFeatures, xgFeatures, xmlIn, xmlOut, nameForTextElem, XmlTagProcessors.newPassthroughProcessor());\n+    }\n+\n     protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n             XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n-            String nameForTextElem)\n+            String nameForTextElem, XmlTagProcessor tagProcessor)\n     {\n         super(oc);\n+        _tagProcessor = tagProcessor;\n         _xmlParserFeatures = xpFeatures;\n         _xmlGeneratorFeatures = xgFeatures;\n         _cfgNameForTextElement = nameForTextElem;\n@@ -140,6 +149,7 @@ protected XmlFactory(XmlFactory src, ObjectCodec oc)\n         _cfgNameForTextElement = src._cfgNameForTextElement;\n         _xmlInputFactory = src._xmlInputFactory;\n         _xmlOutputFactory = src._xmlOutputFactory;\n+        _tagProcessor = src._tagProcessor;\n     }\n \n     /**\n@@ -155,6 +165,7 @@ protected XmlFactory(XmlFactoryBuilder b)\n         _cfgNameForTextElement = b.nameForTextElement();\n         _xmlInputFactory = b.xmlInputFactory();\n         _xmlOutputFactory = b.xmlOutputFactory();\n+        _tagProcessor = b.xmlTagProcessor();\n         _initFactories(_xmlInputFactory, _xmlOutputFactory);\n     }\n \n@@ -325,6 +336,14 @@ public int getFormatGeneratorFeatures() {\n         return _xmlGeneratorFeatures;\n     }\n \n+    public XmlTagProcessor getXmlTagProcessor() {\n+        return _tagProcessor;\n+    }\n+\n+    public void setXmlTagProcessor(XmlTagProcessor _tagProcessor) {\n+        this._tagProcessor = _tagProcessor;\n+    }\n+\n     /*\n     /******************************************************\n     /* Configuration, XML, generator settings\n@@ -498,7 +517,7 @@ public ToXmlGenerator createGenerator(OutputStream out, JsonEncoding enc) throws\n         ctxt.setEncoding(enc);\n         return new ToXmlGenerator(ctxt,\n                 _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(ctxt, out));\n+                _objectCodec, _createXmlWriter(ctxt, out), _tagProcessor);\n     }\n     \n     @Override\n@@ -507,7 +526,7 @@ public ToXmlGenerator createGenerator(Writer out) throws IOException\n         final IOContext ctxt = _createContext(_createContentReference(out), false);\n         return new ToXmlGenerator(ctxt,\n                 _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(ctxt, out));\n+                _objectCodec, _createXmlWriter(ctxt, out), _tagProcessor);\n     }\n \n     @SuppressWarnings(\"resource\")\n@@ -519,7 +538,7 @@ public ToXmlGenerator createGenerator(File f, JsonEncoding enc) throws IOExcepti\n         final IOContext ctxt = _createContext(_createContentReference(out), true);\n         ctxt.setEncoding(enc);\n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(ctxt, out));\n+                _objectCodec, _createXmlWriter(ctxt, out), _tagProcessor);\n     }\n \n     /*\n@@ -543,7 +562,7 @@ public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n \n         // false -> not managed\n         FromXmlParser xp = new FromXmlParser(_createContext(_createContentReference(sr), false),\n-                _parserFeatures, _xmlParserFeatures, _objectCodec, sr);\n+                _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -562,7 +581,7 @@ public ToXmlGenerator createGenerator(XMLStreamWriter sw) throws IOException\n         sw = _initializeXmlWriter(sw);\n         IOContext ctxt = _createContext(_createContentReference(sw), false);\n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, sw);\n+                _objectCodec, sw, _tagProcessor);\n     }\n \n     /*\n@@ -582,7 +601,7 @@ protected FromXmlParser _createParser(InputStream in, IOContext ctxt) throws IOE\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -600,7 +619,7 @@ protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOExcepti\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -627,7 +646,7 @@ protected FromXmlParser _createParser(char[] data, int offset, int len, IOContex\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -651,7 +670,7 @@ protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContex\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java\nindex 2c83ddd96..7771fa6ff 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java\n@@ -63,6 +63,13 @@ public class XmlFactoryBuilder extends TSFBuilder<XmlFactory, XmlFactoryBuilder>\n      */\n     protected ClassLoader _classLoaderForStax;\n \n+    /**\n+     * See {@link XmlTagProcessor} and {@link XmlTagProcessors}\n+     *\n+     * @since 2.14\n+     */\n+    protected XmlTagProcessor _tagProcessor;\n+\n     /*\n     /**********************************************************\n     /* Life cycle\n@@ -73,6 +80,7 @@ protected XmlFactoryBuilder() {\n         _formatParserFeatures = XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS;\n         _formatGeneratorFeatures = XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS;\n         _classLoaderForStax = null;\n+        _tagProcessor = XmlTagProcessors.newPassthroughProcessor();\n     }\n \n     public XmlFactoryBuilder(XmlFactory base) {\n@@ -82,6 +90,7 @@ public XmlFactoryBuilder(XmlFactory base) {\n         _xmlInputFactory = base._xmlInputFactory;\n         _xmlOutputFactory = base._xmlOutputFactory;\n         _nameForTextElement = base._cfgNameForTextElement;\n+        _tagProcessor = base._tagProcessor;\n         _classLoaderForStax = null;\n     }\n \n@@ -133,6 +142,10 @@ protected ClassLoader staxClassLoader() {\n                 getClass().getClassLoader() : _classLoaderForStax;\n     }\n \n+    public XmlTagProcessor xmlTagProcessor() {\n+        return _tagProcessor;\n+    }\n+\n     // // // Parser features\n \n     public XmlFactoryBuilder enable(FromXmlParser.Feature f) {\n@@ -253,6 +266,14 @@ public XmlFactoryBuilder staxClassLoader(ClassLoader cl) {\n         _classLoaderForStax = cl;\n         return _this();\n     }\n+\n+    /**\n+     * @since 2.14\n+     */\n+    public XmlFactoryBuilder xmlTagProcessor(XmlTagProcessor tagProcessor) {\n+        _tagProcessor = tagProcessor;\n+        return _this();\n+    }\n     \n     // // // Actual construction\n \ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\nindex c8650f308..44b5a2301 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n@@ -108,6 +108,14 @@ public Builder defaultUseWrapper(boolean state) {\n             _mapper.setDefaultUseWrapper(state);\n             return this;\n         }\n+\n+        /**\n+         * @since 2.14\n+         */\n+        public Builder xmlTagProcessor(XmlTagProcessor tagProcessor) {\n+            _mapper.setXmlTagProcessor(tagProcessor);\n+            return this;\n+        }\n     }\n \n     protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\n@@ -280,6 +288,20 @@ public XmlMapper setDefaultUseWrapper(boolean state) {\n         return this;\n     }\n \n+    /**\n+     * @since 2.14\n+     */\n+    public void setXmlTagProcessor(XmlTagProcessor tagProcessor) {\n+        ((XmlFactory)_jsonFactory).setXmlTagProcessor(tagProcessor);\n+    }\n+\n+    /**\n+     * @since 2.14\n+     */\n+    public XmlTagProcessor getXmlTagProcessor() {\n+        return ((XmlFactory)_jsonFactory).getXmlTagProcessor();\n+    }\n+\n     /*\n     /**********************************************************\n     /* Access to configuration settings\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessor.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessor.java\nnew file mode 100644\nindex 000000000..a27d9311a\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessor.java\n@@ -0,0 +1,60 @@\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * XML tag name processor primarily used for dealing with tag names\n+ * containing invalid characters. Invalid characters in tags can,\n+ * for instance, easily appear in map keys.\n+ * <p>\n+ * Processors should be set in the {@link XmlMapper#setXmlTagProcessor(XmlTagProcessor)}\n+ * and/or the {@link XmlMapper.Builder#xmlTagProcessor(XmlTagProcessor)} methods.\n+ * <p>\n+ * See {@link XmlTagProcessors} for default processors.\n+ *\n+ * @since 2.14\n+ */\n+public interface XmlTagProcessor extends Serializable {\n+\n+    /**\n+     * Representation of an XML tag name\n+     */\n+    class XmlTagName {\n+        public final String namespace;\n+        public final String localPart;\n+\n+        public XmlTagName(String namespace, String localPart) {\n+            this.namespace = namespace;\n+            this.localPart = localPart;\n+        }\n+    }\n+\n+\n+    /**\n+     * Used during XML serialization.\n+     * <p>\n+     * This method should process the provided {@link XmlTagName} and\n+     * escape / encode invalid XML characters.\n+     *\n+     * @param tag The tag to encode\n+     * @return The encoded tag name\n+     */\n+    XmlTagName encodeTag(XmlTagName tag);\n+\n+\n+    /**\n+     * Used during XML deserialization.\n+     * <p>\n+     * This method should process the provided {@link XmlTagName} and\n+     * revert the encoding done in the {@link #encodeTag(XmlTagName)}\n+     * method.\n+     * <p>\n+     * Note: Depending on the use case, it is not always required (or\n+     * even possible) to reverse an encoding with 100% accuracy.\n+     *\n+     * @param tag The tag to encode\n+     * @return The encoded tag name\n+     */\n+    XmlTagName decodeTag(XmlTagName tag);\n+\n+}\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessors.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessors.java\nnew file mode 100644\nindex 000000000..715636524\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessors.java\n@@ -0,0 +1,212 @@\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.Base64;\n+import java.util.regex.Pattern;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Contains default XML tag name processors.\n+ * <p>\n+ * Processors should be set in the {@link XmlMapper#setXmlTagProcessor(XmlTagProcessor)}\n+ * and/or the {@link XmlMapper.Builder#xmlTagProcessor(XmlTagProcessor)} methods.\n+ *\n+ * @since 2.14\n+ */\n+public final class XmlTagProcessors {\n+\n+    /**\n+     * Generates a new tag processor that does nothing and just passes through the\n+     * tag names. Using this processor may generate invalid XML.\n+     * <p>\n+     * With this processor set, a map with the keys {@code \"123\"} and\n+     * {@code \"$ I am <fancy>! &;\"} will be written as:\n+     *\n+     * <pre>{@code\n+     * <DTO>\n+     *     <badMap>\n+     *         <$ I am <fancy>! &;>xyz</$ I am <fancy>! &;>\n+     *         <123>bar</123>\n+     *     </badMap>\n+     * </DTO>\n+     * }</pre>\n+     * <p>\n+     * This is the default behavior for backwards compatibility.\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newPassthroughProcessor() {\n+        return new PassthroughTagProcessor();\n+    }\n+\n+    /**\n+     * Generates a new tag processor that replaces all invalid characters in an\n+     * XML tag name with a replacement string. This is a one-way processor, since\n+     * there is no way to reverse this replacement step.\n+     * <p>\n+     * With this processor set (and {@code \"_\"} as the replacement string), a map\n+     * with the keys {@code \"123\"} and {@code \"$ I am <fancy>! &;\"} will be written as:\n+     *\n+     * <pre>{@code\n+     * <DTO>\n+     *     <badMap>\n+     *         <__I_am__fancy_____>xyz</__I_am__fancy_____>\n+     *         <_23>bar</_23>\n+     *     </badMap>\n+     * </DTO>\n+     * }</pre>\n+     *\n+     * @param replacement The replacement string to replace invalid characters with\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newReplacementProcessor(String replacement) {\n+        return new ReplaceTagProcessor(replacement);\n+    }\n+\n+    /**\n+     * Equivalent to calling {@link #newReplacementProcessor(String)} with {@code \"_\"}\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newReplacementProcessor() {\n+        return newReplacementProcessor(\"_\");\n+    }\n+\n+    /**\n+     * Generates a new tag processor that escapes all tag names containing invalid\n+     * characters with base64. Here the\n+     * <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\">base64url</a>\n+     * encoder and decoders are used. The {@code =} padding characters are\n+     * always omitted.\n+     * <p>\n+     * With this processor set, a map with the keys {@code \"123\"} and\n+     * {@code \"$ I am <fancy>! &;\"} will be written as:\n+     *\n+     * <pre>{@code\n+     * <DTO>\n+     *     <badMap>\n+     *         <base64_tag_JCBJIGFtIDxmYW5jeT4hICY7>xyz</base64_tag_JCBJIGFtIDxmYW5jeT4hICY7>\n+     *         <base64_tag_MTIz>bar</base64_tag_MTIz>\n+     *     </badMap>\n+     * </DTO>\n+     * }</pre>\n+     *\n+     * @param prefix The prefix to use for tags that are escaped\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newBase64Processor(String prefix) {\n+        return new Base64TagProcessor(prefix);\n+    }\n+\n+    /**\n+     * Equivalent to calling {@link #newBase64Processor(String)} with {@code \"base64_tag_\"}\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newBase64Processor() {\n+        return newBase64Processor(\"base64_tag_\");\n+    }\n+\n+    /**\n+     * Similar to {@link #newBase64Processor(String)}, however, tag names will\n+     * <b>always</b> be escaped with base64. No magic prefix is required\n+     * for this case, since adding one would be redundant because all tags will\n+     * be base64 encoded.\n+     */\n+    public static XmlTagProcessor newAlwaysOnBase64Processor() {\n+        return new AlwaysOnBase64TagProcessor();\n+    }\n+\n+\n+\n+    private static class PassthroughTagProcessor implements XmlTagProcessor {\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            return tag;\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            return tag;\n+        }\n+    }\n+\n+    private static class ReplaceTagProcessor implements XmlTagProcessor {\n+        private static final Pattern BEGIN_MATCHER = Pattern.compile(\"^[^a-zA-Z_:]\");\n+        private static final Pattern MAIN_MATCHER = Pattern.compile(\"[^a-zA-Z0-9_:-]\");\n+\n+        private final String _replacement;\n+\n+        private ReplaceTagProcessor(String replacement) {\n+            _replacement = replacement;\n+        }\n+\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            String newLocalPart = tag.localPart;\n+            newLocalPart = BEGIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);\n+            newLocalPart = MAIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);\n+\n+            return new XmlTagName(tag.namespace, newLocalPart);\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            return tag;\n+        }\n+    }\n+\n+    private static class Base64TagProcessor implements XmlTagProcessor {\n+        private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();\n+        private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n+        private static final Pattern VALID_XML_TAG = Pattern.compile(\"[a-zA-Z_:]([a-zA-Z0-9_:.-])*\");\n+\n+        private final String _prefix;\n+\n+        private Base64TagProcessor(String prefix) {\n+            _prefix = prefix;\n+        }\n+\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            if (VALID_XML_TAG.matcher(tag.localPart).matches()) {\n+                return tag;\n+            }\n+            final String encoded = new String(BASE64_ENCODER.encode(tag.localPart.getBytes(UTF_8)), UTF_8);\n+            return new XmlTagName(tag.namespace, _prefix + encoded);\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            if (!tag.localPart.startsWith(_prefix)) {\n+                return tag;\n+            }\n+            String localName = tag.localPart;\n+            localName = localName.substring(_prefix.length());\n+            localName = new String(BASE64_DECODER.decode(localName), UTF_8);\n+            return new XmlTagName(tag.namespace, localName);\n+        }\n+    }\n+\n+    private static class AlwaysOnBase64TagProcessor implements XmlTagProcessor {\n+        private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();\n+        private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n+\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            return new XmlTagName(tag.namespace, new String(BASE64_ENCODER.encode(tag.localPart.getBytes(UTF_8)), UTF_8));\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            return new XmlTagName(tag.namespace, new String(BASE64_DECODER.decode(tag.localPart), UTF_8));\n+        }\n+    }\n+\n+\n+    private XmlTagProcessors() {\n+        // Nothing to do here\n+    }\n+}\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\nindex 41156fde2..ab4d744b1 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n@@ -19,6 +19,8 @@\n \n import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessor;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessors;\n import com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet;\n import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n \n@@ -252,7 +254,7 @@ private Feature(boolean defaultState) {\n      */\n \n     public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n-            ObjectCodec codec, XMLStreamReader xmlReader)\n+             ObjectCodec codec, XMLStreamReader xmlReader, XmlTagProcessor tagProcessor)\n         throws IOException\n     {\n         super(genericParserFeatures);\n@@ -261,7 +263,7 @@ public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n         _objectCodec = codec;\n         _parsingContext = XmlReadContext.createRootContext(-1, -1);\n         _xmlTokens = new XmlTokenStream(xmlReader, ctxt.contentReference(),\n-                    _formatFeatures);\n+                    _formatFeatures, tagProcessor);\n \n         final int firstToken;\n         try {\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\nindex d72051736..11ac6204d 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n@@ -5,6 +5,7 @@\n import javax.xml.XMLConstants;\n import javax.xml.stream.*;\n \n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessor;\n import org.codehaus.stax2.XMLStreamLocation2;\n import org.codehaus.stax2.XMLStreamReader2;\n import org.codehaus.stax2.ri.Stax2ReaderAdapter;\n@@ -73,6 +74,8 @@ public class XmlTokenStream\n \n     protected boolean _cfgProcessXsiNil;\n \n+    protected XmlTagProcessor _tagProcessor;\n+\n     /*\n     /**********************************************************************\n     /* Parsing state\n@@ -153,12 +156,13 @@ public class XmlTokenStream\n      */\n \n     public XmlTokenStream(XMLStreamReader xmlReader, ContentReference sourceRef,\n-            int formatFeatures)\n+            int formatFeatures, XmlTagProcessor tagProcessor)\n     {\n         _sourceReference = sourceRef;\n         _formatFeatures = formatFeatures;\n         _cfgProcessXsiNil = FromXmlParser.Feature.PROCESS_XSI_NIL.enabledIn(_formatFeatures);\n         _xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n+        _tagProcessor = tagProcessor;\n     }\n \n     /**\n@@ -177,6 +181,7 @@ public int initialize() throws XMLStreamException\n         _namespaceURI = _xmlReader.getNamespaceURI();\n \n         _checkXsiAttributes(); // sets _attributeCount, _nextAttributeIndex\n+        _decodeXmlTagName();\n \n         // 02-Jul-2020, tatu: Two choices: if child elements OR attributes, expose\n         //    as Object value; otherwise expose as Text\n@@ -646,6 +651,7 @@ private final int _initStartElement() throws XMLStreamException\n         }\n         _localName = localName;\n         _namespaceURI = ns;\n+        _decodeXmlTagName();\n         return (_currentState = XML_START_ELEMENT);\n     }\n \n@@ -675,6 +681,15 @@ private final void _checkXsiAttributes() {\n         _xsiNilFound = false;\n     }\n \n+    /**\n+     * @since 2.14\n+     */\n+    protected void _decodeXmlTagName() {\n+        XmlTagProcessor.XmlTagName tagName = _tagProcessor.decodeTag(new XmlTagProcessor.XmlTagName(_namespaceURI, _localName));\n+        _namespaceURI = tagName.namespace;\n+        _localName = tagName.localPart;\n+    }\n+\n     /**\n      * Method called to handle details of repeating \"virtual\"\n      * start/end elements, needed for handling 'unwrapped' lists.\n@@ -695,6 +710,7 @@ protected int _handleRepeatElement() throws XMLStreamException\n //System.out.println(\" XMLTokenStream._handleRepeatElement() for END_ELEMENT: \"+_localName+\" (\"+_xmlReader.getLocalName()+\")\");\n             _localName = _xmlReader.getLocalName();\n             _namespaceURI = _xmlReader.getNamespaceURI();\n+            _decodeXmlTagName();\n             if (_currentWrapper != null) {\n                 _currentWrapper = _currentWrapper.getParent();\n             }\n@@ -708,6 +724,7 @@ protected int _handleRepeatElement() throws XMLStreamException\n             _namespaceURI = _nextNamespaceURI;\n             _nextLocalName = null;\n             _nextNamespaceURI = null;\n+            _decodeXmlTagName();\n \n //System.out.println(\" XMLTokenStream._handleRepeatElement() for START_DELAYED: \"+_localName+\" (\"+_xmlReader.getLocalName()+\")\");\n \ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\nindex 00f051d68..90b898ba4 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n@@ -10,6 +10,7 @@\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n \n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessor;\n import org.codehaus.stax2.XMLStreamWriter2;\n import org.codehaus.stax2.ri.Stax2WriterAdapter;\n \n@@ -152,6 +153,13 @@ private Feature(boolean defaultState) {\n      */\n     protected XmlPrettyPrinter _xmlPrettyPrinter;\n \n+    /**\n+     * Escapes tag names with invalid XML characters\n+     *\n+     * @since 2.14\n+     */\n+    protected XmlTagProcessor _tagProcessor;\n+\n     /*\n     /**********************************************************\n     /* XML Output state\n@@ -205,7 +213,7 @@ private Feature(boolean defaultState) {\n      */\n \n     public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\n-            ObjectCodec codec, XMLStreamWriter sw)\n+            ObjectCodec codec, XMLStreamWriter sw, XmlTagProcessor tagProcessor)\n     {\n         super(stdFeatures, codec);\n         _formatFeatures = xmlFeatures;\n@@ -213,6 +221,7 @@ public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\n         _originalXmlWriter = sw;\n         _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n         _stax2Emulation = (_xmlWriter != sw);\n+        _tagProcessor = tagProcessor;\n         _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ?\n         \t\t(XmlPrettyPrinter) _cfgPrettyPrinter : null;\n     }\n@@ -476,7 +485,8 @@ public final void writeFieldName(String name) throws IOException\n         }\n         // Should this ever get called?\n         String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI();\n-        setNextName(new QName(ns, name));\n+        XmlTagProcessor.XmlTagName tagName = _tagProcessor.encodeTag(new XmlTagProcessor.XmlTagName(ns, name));\n+        setNextName(new QName(tagName.namespace, tagName.localPart));\n     }\n     \n     @Override\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java\nnew file mode 100644\nindex 000000000..d9a301d9c\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java\n@@ -0,0 +1,118 @@\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessors;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class TagEscapeTest extends XmlTestBase {\n+\n+    public static class DTO {\n+        public Map<String, String> badMap = new HashMap<>();\n+\n+        @Override\n+        public String toString() {\n+            return \"DTO{\" +\n+                    \"badMap=\" + badMap.entrySet().stream().map(x -> x.getKey() + \"=\" + x.getValue()).collect(Collectors.joining(\", \", \"[\", \"]\")) +\n+                    '}';\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DTO dto = (DTO) o;\n+            return Objects.equals(badMap, dto.badMap);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(badMap);\n+        }\n+    }\n+\n+    public void testGoodMapKeys() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"foo\", \"bar\");\n+        dto.badMap.put(\"abc\", \"xyz\");\n+\n+        XmlMapper mapper = new XmlMapper();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertEquals(dto, reversed);\n+    }\n+\n+    public void testBase64() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"123\", \"bar\");\n+        dto.badMap.put(\"$ I am <fancy>! &;\", \"xyz\");\n+        dto.badMap.put(\"<!-- No comment=\\\"but' fancy tag!\\\"$ />\", \"xyz\");\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newBase64Processor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertEquals(dto, reversed);\n+    }\n+\n+    public void testAlwaysOnBase64() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"123\", \"bar\");\n+        dto.badMap.put(\"$ I am <fancy>! &;\", \"xyz\");\n+        dto.badMap.put(\"<!-- No comment=\\\"but' fancy tag!\\\"$ />\", \"xyz\");\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newAlwaysOnBase64Processor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertEquals(dto, reversed);\n+    }\n+\n+    public void testReplace() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"123\", \"bar\");\n+        dto.badMap.put(\"$ I am <fancy>! &;\", \"xyz\");\n+        dto.badMap.put(\"<!-- No comment=\\\"but' fancy tag!\\\"$ />\", \"xyz\");\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newReplacementProcessor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertNotNull(reversed);\n+    }\n+\n+    public static class BadVarNameDTO {\n+        public int $someVar$ = 5;\n+    }\n+\n+    public void testBadVarName() throws JsonProcessingException {\n+        BadVarNameDTO dto = new BadVarNameDTO();\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newBase64Processor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        BadVarNameDTO reversed = mapper.readValue(res, BadVarNameDTO.class);\n+\n+        assertEquals(dto.$someVar$, reversed.$someVar$);\n+    }\n+\n+}\ndiff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java\nindex ac089a412..2336b1254 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java\n@@ -7,6 +7,7 @@\n import com.fasterxml.jackson.core.io.ContentReference;\n \n import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessors;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;\n@@ -178,7 +179,7 @@ private XmlTokenStream _tokensFor(String doc, int flags) throws Exception\n         XMLStreamReader sr = XML_FACTORY.getXMLInputFactory().createXMLStreamReader(new StringReader(doc));\n         // must point to START_ELEMENT, so:\n         sr.nextTag();\n-        XmlTokenStream stream = new XmlTokenStream(sr, ContentReference.rawReference(doc), flags);\n+        XmlTokenStream stream = new XmlTokenStream(sr, ContentReference.rawReference(doc), flags, XmlTagProcessors.newPassthroughProcessor());\n         stream.initialize();\n         return stream;\n     }\n",
        "problem_statement": "Dollars in POJO property names are not escaped on serialization\nExample:\r\n\r\n```java\r\npackage it;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\r\n\r\npublic class Dollar {\r\n\r\n    public static class DTO {\r\n        public String thisStringIs$Fancy$ = \"Hello World!\";\r\n    }\r\n\r\n    public static void main(String ... args) throws JsonProcessingException {\r\n        DTO dto = new DTO();\r\n\r\n        XmlMapper mapper = new XmlMapper();\r\n\r\n        final String res = mapper.writeValueAsString(dto);\r\n\r\n        // <DTO><thisStringIs$Fancy$>Hello World!</thisStringIs$Fancy$></DTO>\r\n        System.out.println(res);\r\n\r\n        // ERROR!\r\n        // com.fasterxml.jackson.core.JsonParseException: Unexpected character '$' (code 36) excepted space, or '>' or \"/>\"\r\n        mapper.readValue(res, DTO.class);\r\n    }\r\n\r\n}\r\n```\r\n\r\njackson version: 2.13.2\n",
        "hints_text": "Workaround: Use `ObjectMapper.setPropertyNamingStrategy()` with something like this:\r\n\r\n```java\r\npublic class XmlNamingStrategy extends PropertyNamingStrategies.NamingBase {\r\n    @Override\r\n    public String translate(String propertyName) {\r\n        return propertyName.replace(\"$\", \"_-_DOLLAR_-_\");\r\n    }\r\n}\r\n```\r\n\r\nStill, this should work out of the box, or the XML generation should fail and not produce a broken XML string.\nI think that providing a default `PropertyNamingStrategy` that is configured for `XmlMapper` (but may be replaced) is probably a good way to improve things. I thought we already had name mangling for POJO properties but turns out name mangling is currently only used for Type Ids of polymorphic type handling.\r\n\r\nSo this is something worth adding to 2.14 -- I hope to get it, or, if you or anyone else has time, could help with getting a PR merged.\r\n",
        "created_at": 1654154274000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest",
            "src:com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-dataformat-xml/pull/531"
    }
}