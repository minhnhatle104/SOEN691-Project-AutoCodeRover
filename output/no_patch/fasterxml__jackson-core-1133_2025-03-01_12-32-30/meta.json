{
    "task_id": "fasterxml__jackson-core-1133",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-core/setup_fasterxml__jackson-core__0.1",
        "env_name": "setup_fasterxml__jackson-core__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/tools/jackson/core/fuzz/Fuzz32208UTF32ParseTest.java src/test/java/tools/jackson/core/json/TestDecorators.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-core",
        "pull_number": 1133,
        "instance_id": "fasterxml__jackson-core-1133",
        "issue_numbers": [
            "1132"
        ],
        "base_commit": "33c2c73e6c8cc9cc2c164a3ceb474f9dcfe513f9",
        "patch": "diff --git a/src/main/java/tools/jackson/core/JsonGenerator.java b/src/main/java/tools/jackson/core/JsonGenerator.java\nindex c107a954f8..05f456ea49 100644\n--- a/src/main/java/tools/jackson/core/JsonGenerator.java\n+++ b/src/main/java/tools/jackson/core/JsonGenerator.java\n@@ -14,7 +14,7 @@\n import tools.jackson.core.JsonParser.NumberType;\n import tools.jackson.core.exc.StreamReadException;\n import tools.jackson.core.exc.StreamWriteException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.CharacterEscapes;\n import tools.jackson.core.type.WritableTypeId;\n import tools.jackson.core.type.WritableTypeId.Inclusion;\n@@ -330,7 +330,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      * are allowed: meaning everywhere except for when\n      * a property name is expected.\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeStartArray() throws JacksonException;\n@@ -345,7 +345,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      * @param currentValue Java Object that Array being written represents, if any\n      *    (or {@code null} if not known or not applicable)\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeStartArray(Object currentValue) throws JacksonException;\n@@ -364,7 +364,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      *   {@link #writeEndArray()} MUST match; generator MAY verify\n      *   this is the case (and SHOULD if format itself encodes length)\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeStartArray(Object currentValue, int size) throws JacksonException;\n@@ -376,7 +376,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      *<p>\n      * Marker can be written if the innermost structured type is Array.\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeEndArray() throws JacksonException;\n@@ -390,7 +390,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      * are allowed: meaning everywhere except for when\n      * a property name is expected.\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeStartObject() throws JacksonException;\n@@ -409,7 +409,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      * @param currentValue Java Object that Object being written represents, if any\n      *    (or {@code null} if not known or not applicable)\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeStartObject(Object currentValue) throws JacksonException;\n@@ -435,7 +435,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      *   {@link #writeEndObject()} MUST match; generator MAY verify\n      *   this is the case (and SHOULD if format itself encodes length)\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeStartObject(Object forValue, int size) throws JacksonException;\n@@ -450,7 +450,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      * complete value, or START-OBJECT marker (see JSON specification\n      * for more details).\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeEndObject() throws JacksonException;\n@@ -466,7 +466,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      *\n      * @param name Name of the Object Property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeName(String name) throws JacksonException;\n@@ -484,7 +484,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      *\n      * @param name Pre-encoded name of the Object Property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeName(SerializableString name) throws JacksonException;\n@@ -499,7 +499,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      *\n      * @param id Property key id to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writePropertyId(long id) throws JacksonException;\n@@ -519,7 +519,7 @@ public StreamWriteConstraints streamWriteConstraints() {\n      * @param offset Offset of the first element to write, within array\n      * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeArray(int[] array, int offset, int length) throws JacksonException\n@@ -543,7 +543,7 @@ public JsonGenerator writeArray(int[] array, int offset, int length) throws Jack\n      * @param offset Offset of the first element to write, within array\n      * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeArray(long[] array, int offset, int length) throws JacksonException\n@@ -567,7 +567,7 @@ public JsonGenerator writeArray(long[] array, int offset, int length) throws Jac\n      * @param offset Offset of the first element to write, within array\n      * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeArray(double[] array, int offset, int length) throws JacksonException\n@@ -591,7 +591,7 @@ public JsonGenerator writeArray(double[] array, int offset, int length) throws J\n      * @param offset Offset of the first element to write, within array\n      * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeArray(String[] array, int offset, int length) throws JacksonException\n@@ -621,7 +621,7 @@ public JsonGenerator writeArray(String[] array, int offset, int length) throws J\n      *\n      * @param value String value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeString(String value) throws JacksonException;\n@@ -643,7 +643,7 @@ public JsonGenerator writeArray(String[] array, int offset, int length) throws J\n      * @param len Maximum Length of Text value to read (in {@code char}s, non-negative)\n      *    if known; {@code -1} to indicate \"read and write it all\"\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      *    (including the case where {@code reader} does not provide enough content)\n      */\n@@ -660,7 +660,7 @@ public JsonGenerator writeArray(String[] array, int offset, int length) throws J\n      * @param offset Offset in {@code buffer} of the first character of String value to write\n      * @param len Length of the String value (in characters) to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeString(char[] buffer, int offset, int len) throws JacksonException;\n@@ -677,7 +677,7 @@ public JsonGenerator writeArray(String[] array, int offset, int length) throws J\n      *\n      * @param value Pre-encoded String value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeString(SerializableString value) throws JacksonException;\n@@ -700,7 +700,7 @@ public JsonGenerator writeArray(String[] array, int offset, int length) throws J\n      * @param offset Offset in {@code buffer} of the first byte of String value to write\n      * @param len Length of the String value (in characters) to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeRawUTF8String(byte[] buffer, int offset, int len)\n@@ -728,7 +728,7 @@ public abstract JsonGenerator writeRawUTF8String(byte[] buffer, int offset, int\n      * @param offset Offset in {@code buffer} of the first byte of String value to write\n      * @param len Length of the String value (in characters) to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeUTF8String(byte[] buffer, int offset, int len)\n@@ -754,7 +754,7 @@ public abstract JsonGenerator writeUTF8String(byte[] buffer, int offset, int len\n      *\n      * @param text Textual contents to include as-is in output.\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeRaw(String text) throws JacksonException;\n@@ -775,7 +775,7 @@ public abstract JsonGenerator writeUTF8String(byte[] buffer, int offset, int len\n      * @param offset Offset within {@code text} of the first character to output\n      * @param len Length of content (from {@code text}, starting at offset {@code offset}) to output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeRaw(String text, int offset, int len) throws JacksonException;\n@@ -796,7 +796,7 @@ public abstract JsonGenerator writeUTF8String(byte[] buffer, int offset, int len\n      * @param offset Offset within {@code text} of the first character to output\n      * @param len Length of content (from {@code text}, starting at offset {@code offset}) to output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeRaw(char[] buffer, int offset, int len) throws JacksonException;\n@@ -815,7 +815,7 @@ public abstract JsonGenerator writeUTF8String(byte[] buffer, int offset, int len\n      *\n      * @param c Character to included in output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeRaw(char c) throws JacksonException;\n@@ -839,7 +839,7 @@ public abstract JsonGenerator writeUTF8String(byte[] buffer, int offset, int len\n      *\n      * @param raw Pre-encoded textual contents to included in output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeRaw(SerializableString raw) throws JacksonException {\n@@ -856,7 +856,7 @@ public JsonGenerator writeRaw(SerializableString raw) throws JacksonException {\n      *\n      * @param text Textual contents to included in output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeRawValue(String text) throws JacksonException;\n@@ -872,7 +872,7 @@ public JsonGenerator writeRaw(SerializableString raw) throws JacksonException {\n      *\n      * @param raw Pre-encoded textual contents to included in output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeRawValue(SerializableString raw) throws JacksonException {\n@@ -909,7 +909,7 @@ public JsonGenerator writeRawValue(SerializableString raw) throws JacksonExcepti\n      * @param offset Offset in {@code data} of the first byte of data to write\n      * @param len Length of data to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeBinary(Base64Variant bv,\n@@ -924,7 +924,7 @@ public abstract JsonGenerator writeBinary(Base64Variant bv,\n      * @param offset Offset in {@code data} of the first byte of data to write\n      * @param len Length of data to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeBinary(byte[] data, int offset, int len) throws JacksonException {\n@@ -939,7 +939,7 @@ public JsonGenerator writeBinary(byte[] data, int offset, int len) throws Jackso\n      *\n      * @param data Buffer that contains binary data to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeBinary(byte[] data) throws JacksonException {\n@@ -961,7 +961,7 @@ public JsonGenerator writeBinary(byte[] data) throws JacksonException {\n      *\n      * @return Number of bytes actually written\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public int writeBinary(InputStream data, int dataLength) throws JacksonException {\n@@ -987,7 +987,7 @@ public int writeBinary(InputStream data, int dataLength) throws JacksonException\n      *\n      * @return Number of bytes read from <code>data</code> and written as binary payload\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract int writeBinary(Base64Variant bv,\n@@ -1008,7 +1008,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(short v) throws JacksonException;\n@@ -1022,7 +1022,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(int v) throws JacksonException;\n@@ -1036,7 +1036,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(long v) throws JacksonException;\n@@ -1050,7 +1050,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(BigInteger v) throws JacksonException;\n@@ -1064,7 +1064,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(double v) throws JacksonException;\n@@ -1078,7 +1078,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(float v) throws JacksonException;\n@@ -1092,7 +1092,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *\n      * @param v Number value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(BigDecimal v) throws JacksonException;\n@@ -1119,7 +1119,7 @@ public abstract int writeBinary(Base64Variant bv,\n      *   support numbers serialized textually AND if generator is not allowed\n      *   to just output a String instead (Schema-based formats may require actual\n      *   number, for example)\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNumber(String encodedValue) throws JacksonException;\n@@ -1132,7 +1132,7 @@ public abstract int writeBinary(Base64Variant bv,\n      * @param offset Offset of the first character of value to write\n      * @param len Length of the value (in characters) to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeNumber(char[] encodedValueBuffer, int offset, int len) throws JacksonException {\n@@ -1155,7 +1155,7 @@ public JsonGenerator writeNumber(char[] encodedValueBuffer, int offset, int len)\n      *\n      * @param state Boolean value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeBoolean(boolean state) throws JacksonException;\n@@ -1167,7 +1167,7 @@ public JsonGenerator writeNumber(char[] encodedValueBuffer, int offset, int len)\n      * Additional white space may be added around the value\n      * if pretty-printing is enabled.\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeNull() throws JacksonException;\n@@ -1182,7 +1182,7 @@ public JsonGenerator writeNumber(char[] encodedValueBuffer, int offset, int len)\n      *\n      * @param object Native format-specific value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeEmbeddedObject(Object object) throws JacksonException {\n@@ -1214,7 +1214,7 @@ public JsonGenerator writeEmbeddedObject(Object object) throws JacksonException\n      *\n      * @param id Native Object Id to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream;\n      *   typically if Object ID output is not allowed\n      *   (either at all, or specifically in this position in output)\n@@ -1234,7 +1234,7 @@ public JsonGenerator writeObjectId(Object id) throws JacksonException {\n      *\n      * @param referenced Referenced value, for which Object Id is expected to be written\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream;\n      *   typically if Object ID output is not allowed\n      *   (either at all, or specifically in this position in output)\n@@ -1254,7 +1254,7 @@ public JsonGenerator writeObjectRef(Object referenced) throws JacksonException {\n      *\n      * @param id Native Type Id to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeTypeId(Object id) throws JacksonException {\n@@ -1278,7 +1278,7 @@ public JsonGenerator writeTypeId(Object id) throws JacksonException {\n      * @return {@link WritableTypeId} for caller to retain and pass to matching\n      *   {@link #writeTypeSuffix} call\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef)\n@@ -1392,7 +1392,7 @@ public WritableTypeId writeTypeSuffix(WritableTypeId typeIdDef) throws JacksonEx\n      *\n      * @param pojo Java Object (POJO) value to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writePOJO(Object pojo) throws JacksonException;\n@@ -1405,7 +1405,7 @@ public WritableTypeId writeTypeSuffix(WritableTypeId typeIdDef) throws JacksonEx\n      *\n      * @param rootNode {@link TreeNode} to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public abstract JsonGenerator writeTree(TreeNode rootNode) throws JacksonException;\n@@ -1432,7 +1432,7 @@ public WritableTypeId writeTypeSuffix(WritableTypeId typeIdDef) throws JacksonEx\n      * @param propertyName Name of Object Property to write\n      * @param data Binary value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeBinaryProperty(String propertyName, byte[] data) throws JacksonException {\n@@ -1451,7 +1451,7 @@ public final JsonGenerator writeBinaryProperty(String propertyName, byte[] data)\n      * @param propertyName Name of Object Property to write\n      * @param value Boolean value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeBooleanProperty(String propertyName, boolean value) throws JacksonException {\n@@ -1469,7 +1469,7 @@ public final JsonGenerator writeBooleanProperty(String propertyName, boolean val\n      *\n      * @param propertyName Name of the null-valued property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNullProperty(String propertyName) throws JacksonException {\n@@ -1488,7 +1488,7 @@ public final JsonGenerator writeNullProperty(String propertyName) throws Jackson\n      * @param propertyName Name of the property to write\n      * @param value String value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeStringProperty(String propertyName, String value) throws JacksonException {\n@@ -1507,7 +1507,7 @@ public final JsonGenerator writeStringProperty(String propertyName, String value\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, short value) throws JacksonException {\n@@ -1526,7 +1526,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, short value)\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, int value) throws JacksonException {\n@@ -1545,7 +1545,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, int value) t\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, long value) throws JacksonException {\n@@ -1564,7 +1564,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, long value)\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, BigInteger value) throws JacksonException {\n@@ -1583,7 +1583,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, BigInteger v\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, float value) throws JacksonException {\n@@ -1602,7 +1602,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, float value)\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, double value) throws JacksonException {\n@@ -1622,7 +1622,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, double value\n      * @param propertyName Name of the property to write\n      * @param value Numeric value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeNumberProperty(String propertyName, BigDecimal value) throws JacksonException {\n@@ -1645,7 +1645,7 @@ public final JsonGenerator writeNumberProperty(String propertyName, BigDecimal v\n      *\n      * @param propertyName Name of the Array property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeArrayPropertyStart(String propertyName) throws JacksonException {\n@@ -1668,7 +1668,7 @@ public final JsonGenerator writeArrayPropertyStart(String propertyName) throws J\n      *\n      * @param propertyName Name of the Object property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writeObjectPropertyStart(String propertyName) throws JacksonException {\n@@ -1691,7 +1691,7 @@ public final JsonGenerator writeObjectPropertyStart(String propertyName) throws\n      * @param propertyName Name of the property to write\n      * @param pojo POJO value of the property to write\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public final JsonGenerator writePOJOProperty(String propertyName, Object pojo) throws JacksonException {\n@@ -1711,7 +1711,7 @@ public final JsonGenerator writePOJOProperty(String propertyName, Object pojo) t\n      *\n      * @param propertyName Name of the property that is being omitted\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     public JsonGenerator writeOmittedProperty(String propertyName) throws JacksonException {\n@@ -1739,7 +1739,7 @@ public JsonGenerator writeOmittedProperty(String propertyName) throws JacksonExc\n      *\n      * @param p Parser that points to the event to copy\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem (reading or writing)\n+     * @throws JacksonIOException if there is an underlying I/O problem (reading or writing)\n      * @throws StreamReadException for problems with decoding of token stream\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n@@ -1802,7 +1802,7 @@ public void copyCurrentEvent(JsonParser p) throws JacksonException\n      *\n      * @param p Parser that points to the event to copy\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem (reading or writing)\n+     * @throws JacksonIOException if there is an underlying I/O problem (reading or writing)\n      * @throws StreamReadException for problems with decoding of token stream\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n@@ -1888,7 +1888,7 @@ public void copyCurrentEventExact(JsonParser p) throws JacksonException\n      *\n      * @param p Parser that points to the value to copy\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem (reading or writing)\n+     * @throws JacksonIOException if there is an underlying I/O problem (reading or writing)\n      * @throws StreamReadException for problems with decoding of token stream\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n@@ -1987,7 +1987,7 @@ protected void _copyCurrentContents(JsonParser p) throws JacksonException\n      * {@link JsonParser#getNumberType()} for declared type and uses matching\n      * accessors: this may cause inexact conversion for some textual formats\n      * (depending on settings). If this is problematic, use\n-     * {@lnik #_copyCurrentFloatValueExact} instead (note that doing so may add\n+     * {@link #_copyCurrentFloatValueExact} instead (note that doing so may add\n      * overhead).\n      *\n      * @param p Parser that points to the value to copy\n@@ -2177,7 +2177,7 @@ protected StreamWriteException _constructWriteException(String msg, Throwable t)\n \n     // @since 3.0\n     protected JacksonException _wrapIOFailure(IOException e) {\n-        return WrappedIOException.construct(e, this);\n+        return JacksonIOException.construct(e, this);\n     }\n \n     protected final void _verifyOffsets(int arrayLength, int offset, int length)\ndiff --git a/src/main/java/tools/jackson/core/JsonParser.java b/src/main/java/tools/jackson/core/JsonParser.java\nindex 6aa7233f52..0ab1a904a5 100644\n--- a/src/main/java/tools/jackson/core/JsonParser.java\n+++ b/src/main/java/tools/jackson/core/JsonParser.java\n@@ -12,7 +12,7 @@\n import tools.jackson.core.async.NonBlockingInputFeeder;\n import tools.jackson.core.exc.InputCoercionException;\n import tools.jackson.core.exc.StreamReadException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.json.JsonFactory;\n import tools.jackson.core.sym.PropertyNameMatcher;\n import tools.jackson.core.type.ResolvedType;\n@@ -487,7 +487,7 @@ public int releaseBuffered(OutputStream out) throws JacksonException {\n      * @return Index of the matched property name, if non-negative, or a negative error\n      *   code otherwise (see {@link PropertyNameMatcher} for details)\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      *\n      * @since 3.0\n@@ -530,7 +530,7 @@ public int releaseBuffered(OutputStream out) throws JacksonException {\n      * @return Text value of the {@code JsonToken.VALUE_STRING} token parser advanced\n      *   to; or {@code null} if next token is of some other type\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public String nextTextValue() throws JacksonException {\n@@ -581,7 +581,7 @@ public int nextIntValue(int defaultValue) throws JacksonException {\n      * @return {@code long} value of the {@code JsonToken.VALUE_NUMBER_INT} token parser advanced\n      *   to; or {@code defaultValue} if next token is of some other type\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      * @throws tools.jackson.core.exc.InputCoercionException if integer number does not fit in Java {@code long}\n      */\n@@ -606,7 +606,7 @@ public long nextLongValue(long defaultValue) throws JacksonException {\n      * @return {@code Boolean} value of the {@code JsonToken.VALUE_TRUE} or {@code JsonToken.VALUE_FALSE}\n      *   token parser advanced to; or {@code null} if next token is of some other type\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public Boolean nextBooleanValue() throws JacksonException {\n@@ -810,7 +810,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      * @return Textual value associated with the current token (one returned\n      *   by {@link #nextToken()} or other iteration methods)\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public abstract String getText() throws JacksonException;\n@@ -830,7 +830,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      *\n      * @return The number of characters written to the Writer\n      *\n-     * @throws WrappedIOException for low-level read issues, or failed write using {@link Writer}\n+     * @throws JacksonIOException for low-level read issues, or failed write using {@link Writer}\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public abstract int getText(Writer writer) throws JacksonException;\n@@ -863,7 +863,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      * @return Buffer that contains the current textual value (but not necessarily\n      *    at offset 0, and not necessarily until the end of buffer)\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public abstract char[] getTextCharacters() throws JacksonException;\n@@ -876,7 +876,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      *   by {@link #getTextCharacters} that are part of\n      *   textual content of the current token.\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public abstract int getTextLength() throws JacksonException;\n@@ -889,7 +889,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      *   by {@link #getTextCharacters} that is part of\n      *   textual content of the current token.\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public abstract int getTextOffset() throws JacksonException;\n@@ -1210,7 +1210,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      *\n      * @return Decoded binary data\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public abstract byte[] getBinaryValue(Base64Variant bv) throws JacksonException;\n@@ -1222,7 +1222,7 @@ public Boolean nextBooleanValue() throws JacksonException {\n      *\n      * @return Decoded binary data\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public byte[] getBinaryValue() throws JacksonException {\n@@ -1241,7 +1241,7 @@ public byte[] getBinaryValue() throws JacksonException {\n      *\n      * @return Number of bytes that were decoded and written via {@link OutputStream}\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public int readBinaryValue(OutputStream out) throws JacksonException {\n@@ -1257,7 +1257,7 @@ public int readBinaryValue(OutputStream out) throws JacksonException {\n      *\n      * @return Number of bytes that were decoded and written via {@link OutputStream}\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws tools.jackson.core.exc.StreamReadException for decoding problems\n      */\n     public int readBinaryValue(Base64Variant bv, OutputStream out) throws JacksonException {\ndiff --git a/src/main/java/tools/jackson/core/ObjectWriteContext.java b/src/main/java/tools/jackson/core/ObjectWriteContext.java\nindex 17fb1e15ae..181c3a8b09 100644\n--- a/src/main/java/tools/jackson/core/ObjectWriteContext.java\n+++ b/src/main/java/tools/jackson/core/ObjectWriteContext.java\n@@ -4,7 +4,7 @@\n import java.io.Writer;\n \n import tools.jackson.core.exc.StreamWriteException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.CharacterEscapes;\n import tools.jackson.core.tree.ArrayTreeNode;\n import tools.jackson.core.tree.ObjectTreeNode;\n@@ -99,7 +99,7 @@ default JsonGenerator createGenerator(Writer w) throws JacksonException {\n      * @param g Generator to use for serialization\n      * @param value Java value to be serialized\n      *\n-     * @throws WrappedIOException for low-level write problems,\n+     * @throws JacksonIOException for low-level write problems,\n      * @throws StreamWriteException for encoding problems\n      * @throws JacksonException (various subtypes) for databinding problems\n      */\ndiff --git a/src/main/java/tools/jackson/core/PrettyPrinter.java b/src/main/java/tools/jackson/core/PrettyPrinter.java\nindex cd89228531..0da35382b5 100644\n--- a/src/main/java/tools/jackson/core/PrettyPrinter.java\n+++ b/src/main/java/tools/jackson/core/PrettyPrinter.java\n@@ -6,7 +6,7 @@\n package tools.jackson.core;\n \n import tools.jackson.core.exc.StreamWriteException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.SerializedString;\n import tools.jackson.core.util.Separators;\n \n@@ -53,7 +53,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeRootValueSeparator(JsonGenerator g) throws JacksonException;\n@@ -72,7 +72,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeStartObject(JsonGenerator g) throws JacksonException;\n@@ -91,7 +91,7 @@ public interface PrettyPrinter\n      * @param nrOfEntries Number of direct members of the Object that\n      *   have been output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeEndObject(JsonGenerator g, int nrOfEntries) throws JacksonException;\n@@ -107,7 +107,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeObjectEntrySeparator(JsonGenerator g) throws JacksonException;\n@@ -123,7 +123,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeObjectNameValueSeparator(JsonGenerator g) throws JacksonException;\n@@ -142,7 +142,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeStartArray(JsonGenerator g) throws JacksonException;\n@@ -161,7 +161,7 @@ public interface PrettyPrinter\n      * @param nrOfValues Number of direct members of the array that\n      *   have been output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeEndArray(JsonGenerator g, int nrOfValues) throws JacksonException;\n@@ -177,7 +177,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void writeArrayValueSeparator(JsonGenerator g) throws JacksonException;\n@@ -199,7 +199,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void beforeArrayValues(JsonGenerator g) throws JacksonException;\n@@ -215,7 +215,7 @@ public interface PrettyPrinter\n      *\n      * @param g Generator used for output\n      *\n-     * @throws WrappedIOException if there is an underlying I/O problem\n+     * @throws JacksonIOException if there is an underlying I/O problem\n      * @throws StreamWriteException for problems in encoding token stream\n      */\n     void beforeObjectEntries(JsonGenerator g) throws JacksonException;\ndiff --git a/src/main/java/tools/jackson/core/TokenStreamFactory.java b/src/main/java/tools/jackson/core/TokenStreamFactory.java\nindex 8ab8793472..33e1cae402 100644\n--- a/src/main/java/tools/jackson/core/TokenStreamFactory.java\n+++ b/src/main/java/tools/jackson/core/TokenStreamFactory.java\n@@ -14,7 +14,7 @@\n \n import tools.jackson.core.async.ByteArrayFeeder;\n import tools.jackson.core.exc.StreamReadException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.*;\n import tools.jackson.core.json.JsonFactory;\n import tools.jackson.core.sym.PropertyNameMatcher;\n@@ -1440,7 +1440,7 @@ protected <T> T _reportRangeError(String msg) throws JacksonException\n      */\n \n     protected JacksonException _wrapIOFailure(IOException e) {\n-        return WrappedIOException.construct(e, this);\n+        return JacksonIOException.construct(e, this);\n     }\n \n     protected <T> T _unsupported() {\ndiff --git a/src/main/java/tools/jackson/core/base/ParserBase.java b/src/main/java/tools/jackson/core/base/ParserBase.java\nindex 0b77b6d8ff..5056ffea8d 100644\n--- a/src/main/java/tools/jackson/core/base/ParserBase.java\n+++ b/src/main/java/tools/jackson/core/base/ParserBase.java\n@@ -8,7 +8,7 @@\n import tools.jackson.core.exc.InputCoercionException;\n import tools.jackson.core.exc.StreamConstraintsException;\n import tools.jackson.core.exc.StreamReadException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.ContentReference;\n import tools.jackson.core.io.IOContext;\n import tools.jackson.core.io.NumberInput;\n@@ -683,7 +683,7 @@ public BigDecimal getDecimalValue() throws JacksonException\n      * @param expType Numeric type that we will immediately need, if any;\n      *   mostly necessary to optimize handling of floating point numbers\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws InputCoercionException if the current token not of numeric type\n      * @throws tools.jackson.core.exc.StreamReadException for number decoding problems\n      */\ndiff --git a/src/main/java/tools/jackson/core/base/ParserMinimalBase.java b/src/main/java/tools/jackson/core/base/ParserMinimalBase.java\nindex 16fd9ebe49..edc39d4bfd 100644\n--- a/src/main/java/tools/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/tools/jackson/core/base/ParserMinimalBase.java\n@@ -11,7 +11,7 @@\n import tools.jackson.core.exc.InputCoercionException;\n import tools.jackson.core.exc.StreamReadException;\n import tools.jackson.core.exc.UnexpectedEndOfInputException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.IOContext;\n import tools.jackson.core.io.NumberInput;\n import tools.jackson.core.sym.PropertyNameMatcher;\n@@ -810,7 +810,7 @@ public <T extends TreeNode> T readValueAsTree() throws JacksonException {\n      * @param builder Builder used to buffer binary content decoded\n      * @param b64variant Base64 variant expected in content\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant)\n@@ -1099,7 +1099,7 @@ protected <T> T _reportError(String msg, Object arg1, Object arg2, Object arg3)\n \n     // @since 3.0\n     protected JacksonException _wrapIOFailure(IOException e) {\n-        return WrappedIOException.construct(e, this);\n+        return JacksonIOException.construct(e, this);\n     }\n \n     protected <T> T _throwInternal() {\ndiff --git a/src/main/java/tools/jackson/core/exc/WrappedIOException.java b/src/main/java/tools/jackson/core/exc/JacksonIOException.java\nsimilarity index 58%\nrename from src/main/java/tools/jackson/core/exc/WrappedIOException.java\nrename to src/main/java/tools/jackson/core/exc/JacksonIOException.java\nindex 6db81c0fe0..40c92aaa50 100644\n--- a/src/main/java/tools/jackson/core/exc/WrappedIOException.java\n+++ b/src/main/java/tools/jackson/core/exc/JacksonIOException.java\n@@ -6,17 +6,22 @@\n \n /**\n  * Exception type used to wrap low-level I/O issues that are reported\n- * on reading and writing content using JDK streams and other sources\n- * and targets.\n+ * (as {@link IOException}) on reading and writing content using JDK streams\n+ * and other sources and targets.\n+ * This exception is only used for wrapping {@link java.io.IOException}s\n+ * for re-throwing: for actual problem reporting there are alternate\n+ * {@link JacksonException} subtypes available.\n  *<p>\n  * NOTE: use of {@link java.io.UncheckedIOException} would seem like\n  * an alternative, but cannot be used as it is a checked exception\n  * unlike {@link JacksonException} used for other read/write problems.\n  * Because of this, an alternative is used.\n+ * Additionally extending {@link JacksonException} allows bit more convenient\n+ * catching of everything Jackson throws or re-throws.\n  *\n  * @since 3.0\n  */\n-public class WrappedIOException extends JacksonException\n+public class JacksonIOException extends JacksonException\n {\n     private final static long serialVersionUID = 1L;\n \n@@ -26,20 +31,20 @@ public class WrappedIOException extends JacksonException\n      */\n     protected transient Object _processor;\n \n-    protected WrappedIOException(Object processor, IOException source) {\n+    protected JacksonIOException(Object processor, IOException source) {\n         super(source.getMessage(), source);\n         _processor = processor;\n     }\n \n-    public static WrappedIOException construct(IOException e) {\n+    public static JacksonIOException construct(IOException e) {\n         return construct(e, null);\n     }\n \n-    public static WrappedIOException construct(IOException e, Object processor) {\n-        return new WrappedIOException(processor, e);\n+    public static JacksonIOException construct(IOException e, Object processor) {\n+        return new JacksonIOException(processor, e);\n     }\n \n-    public WrappedIOException withProcessor(Object processor) {\n+    public JacksonIOException withProcessor(Object processor) {\n         _processor = processor;\n         return this;\n     }\ndiff --git a/src/main/java/tools/jackson/core/json/ByteSourceJsonBootstrapper.java b/src/main/java/tools/jackson/core/json/ByteSourceJsonBootstrapper.java\nindex d2f7543d44..c6032df41a 100644\n--- a/src/main/java/tools/jackson/core/json/ByteSourceJsonBootstrapper.java\n+++ b/src/main/java/tools/jackson/core/json/ByteSourceJsonBootstrapper.java\n@@ -9,7 +9,7 @@\n import java.io.StringReader;\n \n import tools.jackson.core.*;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.*;\n import tools.jackson.core.sym.ByteQuadsCanonicalizer;\n import tools.jackson.core.sym.CharsToNameCanonicalizer;\n@@ -457,6 +457,6 @@ private JacksonException _createIOFailure(String msg) throws JacksonException {\n     }\n \n     private static JacksonException _wrapIOFailure(IOException e) throws JacksonException {\n-        return WrappedIOException.construct(e, null);\n+        return JacksonIOException.construct(e, null);\n     }\n }\ndiff --git a/src/main/java/tools/jackson/core/json/ReaderBasedJsonParser.java b/src/main/java/tools/jackson/core/json/ReaderBasedJsonParser.java\nindex 5e4a3b9678..e8df53e9e9 100644\n--- a/src/main/java/tools/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/tools/jackson/core/json/ReaderBasedJsonParser.java\n@@ -6,7 +6,7 @@\n \n import tools.jackson.core.*;\n import tools.jackson.core.exc.StreamReadException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.CharTypes;\n import tools.jackson.core.io.IOContext;\n import tools.jackson.core.sym.CharsToNameCanonicalizer;\n@@ -1351,7 +1351,7 @@ protected final JsonToken _parseFloatThatStartsWithPeriod(final boolean neg)\n      * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}\n      *    or {@link JsonToken#VALUE_NUMBER_FLOAT}\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected final JsonToken _parseUnsignedNumber(int ch) throws JacksonException\n@@ -1539,7 +1539,7 @@ private final JsonToken _parseSignedNumber(final boolean negative) throws Jackso\n      * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}\n      *    or {@link JsonToken#VALUE_NUMBER_FLOAT}\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     private final JsonToken _parseNumber2(boolean neg, int startPtr) throws JacksonException\n@@ -1782,7 +1782,7 @@ protected JsonToken _handleInvalidNumberStart(int ch, final boolean negative, fi\n      *\n      * @param ch First character of likely white space to skip\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     private final void _verifyRootSpace(int ch) throws JacksonException\n@@ -1905,7 +1905,7 @@ private String _parseName2(int startPtr, int hash, int endChar) throws JacksonEx\n      *\n      * @return Name decoded, if allowed and successful\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected String _handleOddName(int i) throws JacksonException\n@@ -1999,7 +1999,7 @@ protected String _parseAposName() throws JacksonException\n      *\n      * @return Type of value decoded, if allowed and successful\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected JsonToken _handleOddValue(int i) throws JacksonException\n@@ -2226,7 +2226,7 @@ protected void _finishString2() throws JacksonException\n      * if it is not needed. This can be done bit faster if contents\n      * need not be stored for future access.\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected final void _skipString() throws JacksonException\n@@ -2818,7 +2818,7 @@ private final void _checkMatchEnd(String matchStr, int i, int c) throws JacksonE\n      *\n      * @return Fully decoded value of base64 content\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     @SuppressWarnings(\"resource\")\ndiff --git a/src/main/java/tools/jackson/core/json/UTF8DataInputJsonParser.java b/src/main/java/tools/jackson/core/json/UTF8DataInputJsonParser.java\nindex d0615ce586..5213f8aa09 100644\n--- a/src/main/java/tools/jackson/core/json/UTF8DataInputJsonParser.java\n+++ b/src/main/java/tools/jackson/core/json/UTF8DataInputJsonParser.java\n@@ -4,7 +4,7 @@\n \n import tools.jackson.core.*;\n import tools.jackson.core.exc.StreamReadException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.CharTypes;\n import tools.jackson.core.io.IOContext;\n import tools.jackson.core.sym.ByteQuadsCanonicalizer;\n@@ -1135,7 +1135,7 @@ private final JsonToken _parseSignedNumber(boolean negative) throws IOException\n      *\n      * @return Character immediately following zeroes\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     private final int _handleLeadingZeroes() throws IOException\ndiff --git a/src/main/java/tools/jackson/core/json/UTF8StreamJsonParser.java b/src/main/java/tools/jackson/core/json/UTF8StreamJsonParser.java\nindex b03eecad1b..5855ddd75f 100644\n--- a/src/main/java/tools/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/tools/jackson/core/json/UTF8StreamJsonParser.java\n@@ -6,7 +6,7 @@\n \n import tools.jackson.core.*;\n import tools.jackson.core.exc.StreamReadException;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.CharTypes;\n import tools.jackson.core.io.IOContext;\n import tools.jackson.core.sym.ByteQuadsCanonicalizer;\n@@ -1779,7 +1779,7 @@ protected final JsonToken _parseFloatThatStartsWithPeriod(final boolean neg,\n      * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}\n      *    or {@link JsonToken#VALUE_NUMBER_FLOAT}\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected JsonToken _parseUnsignedNumber(int c) throws JacksonException\n@@ -2063,7 +2063,7 @@ private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n      *\n      * @param ch First character of likely white space to skip\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems (invalid white space)\n      */\n     private final void _verifyRootSpace(int ch) throws JacksonException\n@@ -2435,7 +2435,7 @@ protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int\n      *\n      * @return Name decoded, if allowed and successful\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems (invalid name)\n      */\n     protected String _handleOddName(int ch) throws JacksonException\n@@ -2951,7 +2951,7 @@ private final void _finishString2(char[] outBuf, int outPtr)\n      * if it is not needed. This can be done bit faster if contents\n      * need not be stored for future access.\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems (invalid String value)\n      */\n     protected void _skipString() throws JacksonException\n@@ -3021,7 +3021,7 @@ protected void _skipString() throws JacksonException\n      *\n      * @return Type of value decoded, if allowed and successful\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems\n      */\n     protected JsonToken _handleUnexpectedValue(int c) throws JacksonException\n@@ -4036,7 +4036,7 @@ protected <T> T _reportInvalidOther(int mask, int ptr) throws StreamReadExceptio\n      *\n      * @return Fully decoded value of base64 content\n      *\n-     * @throws WrappedIOException for low-level read issues\n+     * @throws JacksonIOException for low-level read issues\n      * @throws StreamReadException for decoding problems (invalid content)\n      */\n     @SuppressWarnings(\"resource\")\n",
        "test_patch": "diff --git a/src/test/java/tools/jackson/core/fuzz/Fuzz32208UTF32ParseTest.java b/src/test/java/tools/jackson/core/fuzz/Fuzz32208UTF32ParseTest.java\nindex 607cf653d2..82f3c0883d 100644\n--- a/src/test/java/tools/jackson/core/fuzz/Fuzz32208UTF32ParseTest.java\n+++ b/src/test/java/tools/jackson/core/fuzz/Fuzz32208UTF32ParseTest.java\n@@ -5,7 +5,7 @@\n import java.io.InputStream;\n \n import tools.jackson.core.*;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.UTF32Reader;\n import tools.jackson.core.json.JsonFactory;\n import tools.jackson.core.testsupport.ThrottledInputStream;\n@@ -25,7 +25,7 @@ public void testFuzz32208ViaParser() throws Exception\n             assertToken(JsonToken.VALUE_STRING, p.nextToken());\n             String text = p.getText();\n             fail(\"Should not have passed; got text with length of: \"+text.length());\n-        } catch (WrappedIOException e) {\n+        } catch (JacksonIOException e) {\n             verifyException(e, \"Invalid UTF-32 character \");\n         }\n         p.close();\ndiff --git a/src/test/java/tools/jackson/core/json/TestDecorators.java b/src/test/java/tools/jackson/core/json/TestDecorators.java\nindex 3f92618471..6d38b66cb7 100644\n--- a/src/test/java/tools/jackson/core/json/TestDecorators.java\n+++ b/src/test/java/tools/jackson/core/json/TestDecorators.java\n@@ -3,7 +3,7 @@\n import java.io.*;\n \n import tools.jackson.core.*;\n-import tools.jackson.core.exc.WrappedIOException;\n+import tools.jackson.core.exc.JacksonIOException;\n import tools.jackson.core.io.IOContext;\n import tools.jackson.core.io.InputDecorator;\n import tools.jackson.core.io.OutputDecorator;\n@@ -32,7 +32,7 @@ public InputStream decorate(IOContext ctxt, InputStream in)\n             try {\n                 return new ByteArrayInputStream(\"123\".getBytes(\"UTF-8\"));\n             } catch (IOException e) {\n-                throw WrappedIOException.construct(e, null);\n+                throw JacksonIOException.construct(e, null);\n             }\n         }\n \n@@ -43,7 +43,7 @@ public InputStream decorate(IOContext ctxt, byte[] src, int offset, int length)\n             try {\n                 return new ByteArrayInputStream(\"456\".getBytes(\"UTF-8\"));\n             } catch (IOException e) {\n-                throw WrappedIOException.construct(e, null);\n+                throw JacksonIOException.construct(e, null);\n             }\n         }\n \n@@ -62,7 +62,7 @@ public OutputStream decorate(IOContext ctxt, OutputStream out) throws JacksonExc\n                 out.write(\"123\".getBytes(\"UTF-8\"));\n                 out.flush();\n             } catch (IOException e) {\n-                throw WrappedIOException.construct(e, null);\n+                throw JacksonIOException.construct(e, null);\n             }\n             return new ByteArrayOutputStream();\n         }\n@@ -74,7 +74,7 @@ public Writer decorate(IOContext ctxt, Writer w) throws JacksonException\n                 w.write(\"567\");\n                 w.flush();\n             } catch (IOException e) {\n-                throw WrappedIOException.construct(e, null);\n+                throw JacksonIOException.construct(e, null);\n             }\n             return new StringWriter();\n         }\n",
        "problem_statement": "(3.0) Rename `tools.jackson.core.exc.WrappedIOException` as `...JacksonIOException`\n(suggestion by @garretwilson )\r\n\r\nCurrent type of `WrappedIOException` in Jackson 3.0 (`master`) is too generic; let's rename it as `JacksonIOException` instead.\r\n\n",
        "hints_text": "For traceability, FasterXML/jackson-databind#4180 is the discussion in which the suggestion was made.",
        "created_at": 1698528424000,
        "FAIL_TO_PASS": [
            "src:tools.jackson.core.fuzz.Fuzz32208UTF32ParseTest",
            "src:tools.jackson.core.json.TestDecorators"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-core/pull/1133"
    }
}