{
    "task_id": "google__gson-1093",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/google__gson/setup_google__gson__0.1",
        "env_name": "setup_google__gson__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"
    },
    "task_info": {
        "repo": "google/gson",
        "pull_number": 1093,
        "instance_id": "google__gson-1093",
        "issue_numbers": [
            "1090",
            "1090"
        ],
        "base_commit": "0aaef0fd1bb1b9729543dc40168adfb829eb75a4",
        "patch": "diff --git a/gson/src/main/java/com/google/gson/stream/JsonWriter.java b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\nindex e2fc19611d..8148816c2f 100644\n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n@@ -491,10 +491,10 @@ public JsonWriter value(Boolean value) throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter value(double value) throws IOException {\n-    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+    writeDeferredName();\n+    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    writeDeferredName();\n     beforeValue();\n     out.append(Double.toString(value));\n     return this;\n",
        "test_patch": "diff --git a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\nindex 34dc914022..2bcec173ca 100644\n--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n@@ -16,11 +16,12 @@\n \n package com.google.gson.stream;\n \n+import junit.framework.TestCase;\n+\n import java.io.IOException;\n import java.io.StringWriter;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n-import junit.framework.TestCase;\n \n @SuppressWarnings(\"resource\")\n public final class JsonWriterTest extends TestCase {\n@@ -213,6 +214,30 @@ public void testNonFiniteBoxedDoubles() throws IOException {\n     }\n   }\n \n+  public void testNonFiniteDoublesWhenLenient() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.setLenient(true);\n+    jsonWriter.beginArray();\n+    jsonWriter.value(Double.NaN);\n+    jsonWriter.value(Double.NEGATIVE_INFINITY);\n+    jsonWriter.value(Double.POSITIVE_INFINITY);\n+    jsonWriter.endArray();\n+    assertEquals(\"[NaN,-Infinity,Infinity]\", stringWriter.toString());\n+  }\n+\n+  public void testNonFiniteBoxedDoublesWhenLenient() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.setLenient(true);\n+    jsonWriter.beginArray();\n+    jsonWriter.value(Double.valueOf(Double.NaN));\n+    jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY));\n+    jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY));\n+    jsonWriter.endArray();\n+    assertEquals(\"[NaN,-Infinity,Infinity]\", stringWriter.toString());\n+  }\n+\n   public void testDoubles() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);\n",
        "problem_statement": "JsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,\nIn lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like `NaN`, `Infinity`, `-Infinity`:\r\n```java\r\n    if (!lenient\r\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nBut JsonWriter#value(double) behaves in different way: \r\n```java\r\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nSo, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. `out.value((Number) Double.valueOf(Double.NaN))`).\r\n\r\nI think, this should be possible, because boxing gives worse performance.\nJsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,\nIn lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like `NaN`, `Infinity`, `-Infinity`:\r\n```java\r\n    if (!lenient\r\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nBut JsonWriter#value(double) behaves in different way: \r\n```java\r\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nSo, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. `out.value((Number) Double.valueOf(Double.NaN))`).\r\n\r\nI think, this should be possible, because boxing gives worse performance.\n",
        "hints_text": "Can you create a Pull Request with a JUnit test that fails? Even better would be a fix that makes the test pass. Thanks.\nCan you create a Pull Request with a JUnit test that fails? Even better would be a fix that makes the test pass. Thanks.",
        "created_at": 1496218966000,
        "FAIL_TO_PASS": [
            "gson:com.google.gson.stream.JsonWriterTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/google/gson/pull/1093"
    }
}