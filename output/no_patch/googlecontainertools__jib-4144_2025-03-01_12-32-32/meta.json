{
    "task_id": "googlecontainertools__jib-4144",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/googlecontainertools__jib/setup_googlecontainertools__jib__0.1",
        "env_name": "setup_googlecontainertools__jib__0.1",
        "pre_install": [],
        "install": "./gradlew clean build",
        "test_cmd": "./gradlew test jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java"
    },
    "task_info": {
        "repo": "googlecontainertools/jib",
        "pull_number": 4144,
        "instance_id": "googlecontainertools__jib-4144",
        "issue_numbers": [
            "4137"
        ],
        "base_commit": "440bd4897c6c427cc9a491128aa76c72378d605b",
        "patch": "diff --git a/docs/google-cloud-build.md b/docs/google-cloud-build.md\nindex b2679ff5e2..71d779bdaa 100644\n--- a/docs/google-cloud-build.md\n+++ b/docs/google-cloud-build.md\n@@ -13,7 +13,7 @@ Any Java container can be used for building, not only the `gcr.io/cloud-builders\n \n ```yaml\n steps:\n-  - name: 'docker.io/library/eclipse-temurin:17'\n+  - name: 'docker.io/library/eclipse-temurin:21'\n     entrypoint: './gradlew'\n     args: ['--console=plain', '--no-daemon', ':server:jib', '-Djib.to.image=gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA']\n ```\ndiff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java\nindex 7c59cf86da..ca06fdc273 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java\n@@ -89,6 +89,9 @@ private static String getDefaultBaseImage(ArtifactProcessor processor) {\n     if (processor.getJavaVersion() <= 11) {\n       return \"eclipse-temurin:11-jre\";\n     }\n-    return \"eclipse-temurin:17-jre\";\n+    if (processor.getJavaVersion() <= 17) {\n+      return \"eclipse-temurin:17-jre\";\n+    }\n+    return \"eclipse-temurin:21-jre\";\n   }\n }\ndiff --git a/jib-gradle-plugin/README.md b/jib-gradle-plugin/README.md\nindex 99fd6af328..72f92b3d9e 100644\n--- a/jib-gradle-plugin/README.md\n+++ b/jib-gradle-plugin/README.md\n@@ -212,7 +212,7 @@ Field | Type | Default | Description\n \n Property | Type | Default | Description\n --- | --- | --- | ---\n-`image` | `String` | `eclipse-temurin:{8,11,17}-jre` (or `jetty` for WAR) | The image reference for the base image. The source type can be specified using a [special type prefix](#setting-the-base-image).\n+`image` | `String` | `eclipse-temurin:{8,11,17,21}-jre` (or `jetty` for WAR) | The image reference for the base image. The source type can be specified using a [special type prefix](#setting-the-base-image).\n `auth` | [`auth`](#auth-closure) | *None* | Specifies credentials directly (alternative to `credHelper`).\n `credHelper` | `String` | *None* | Specifies a credential helper that can authenticate pulling the base image. This parameter can either be configured as an absolute path to the credential helper executable or as a credential helper suffix (following `docker-credential-`).\n `platforms` | [`platforms`](#platforms-closure) | See [`platforms`](#platforms-closure) | Configures platforms of base images to select from a manifest list.\ndiff --git a/jib-maven-plugin/README.md b/jib-maven-plugin/README.md\nindex a9f88516b8..37d347355a 100644\n--- a/jib-maven-plugin/README.md\n+++ b/jib-maven-plugin/README.md\n@@ -261,7 +261,7 @@ Field | Type | Default | Description\n \n Property | Type | Default | Description\n --- | --- | --- | ---\n-`image` | string | `eclipse-temurin:{8,11,17}-jre` (or `jetty` for WAR) | The image reference for the base image. The source type can be specified using a [special type prefix](#setting-the-base-image).\n+`image` | string | `eclipse-temurin:{8,11,17,21}-jre` (or `jetty` for WAR) | The image reference for the base image. The source type can be specified using a [special type prefix](#setting-the-base-image).\n `auth` | [`auth`](#auth-object) | *None* | Specifies credentials directly (alternative to `credHelper`).\n `credHelper` | string | *None* | Specifies a credential helper that can authenticate pulling the base image. This parameter can either be configured as an absolute path to the credential helper executable or as a credential helper suffix (following `docker-credential-`).\n `platforms` | list | See [`platform`](#platform-object) | Configures platforms of base images to select from a manifest list.\ndiff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 21b314dc29..f5b8f1f7d1 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n@@ -530,6 +530,9 @@ static JavaContainerBuilder getJavaContainerBuilderWithBaseImage(\n     if (isKnownJava17Image(prefixRemoved) && javaVersion > 17) {\n       throw new IncompatibleBaseImageJavaVersionException(17, javaVersion);\n     }\n+    if (isKnownJava21Image(prefixRemoved) && javaVersion > 21) {\n+      throw new IncompatibleBaseImageJavaVersionException(21, javaVersion);\n+    }\n \n     ImageReference baseImageReference = ImageReference.parse(prefixRemoved);\n     if (baseImageConfig.startsWith(Jib.DOCKER_DAEMON_IMAGE_PREFIX)) {\n@@ -772,8 +775,10 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n       return \"eclipse-temurin:11-jre\";\n     } else if (javaVersion <= 17) {\n       return \"eclipse-temurin:17-jre\";\n+    } else if (javaVersion <= 21) {\n+      return \"eclipse-temurin:21-jre\";\n     }\n-    throw new IncompatibleBaseImageJavaVersionException(17, javaVersion);\n+    throw new IncompatibleBaseImageJavaVersionException(21, javaVersion);\n   }\n \n   /**\n@@ -1097,4 +1102,14 @@ private static boolean isKnownJava11Image(String imageReference) {\n   private static boolean isKnownJava17Image(String imageReference) {\n     return imageReference.startsWith(\"eclipse-temurin:17\");\n   }\n+\n+  /**\n+   * Checks if the given image is a known Java 21 image. May return false negative.\n+   *\n+   * @param imageReference the image reference\n+   * @return {@code true} if the image is a known Java 21 image\n+   */\n+  private static boolean isKnownJava21Image(String imageReference) {\n+    return imageReference.startsWith(\"eclipse-temurin:21\");\n+  }\n }\n",
        "test_patch": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\nindex 3775aeb13b..225d242ca0 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n@@ -72,6 +72,7 @@ public class JarFilesTest {\n         \"11, eclipse-temurin:11-jre\",\n         \"13, eclipse-temurin:17-jre\",\n         \"17, eclipse-temurin:17-jre\",\n+        \"21, eclipse-temurin:21-jre\",\n       })\n   public void testToJibContainer_defaultBaseImage(int javaVersion, String expectedBaseImage)\n       throws IOException, InvalidImageReferenceException {\ndiff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7fd608667c..cfb181a85c 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n@@ -903,7 +903,8 @@ public void testGetDefaultBaseImage_warProject()\n         \"9, eclipse-temurin:11-jre\",\n         \"11, eclipse-temurin:11-jre\",\n         \"13, eclipse-temurin:17-jre\",\n-        \"17, eclipse-temurin:17-jre\"\n+        \"17, eclipse-temurin:17-jre\",\n+        \"21, eclipse-temurin:21-jre\"\n       })\n   public void testGetDefaultBaseImage_defaultJavaBaseImage(\n       int javaVersion, String expectedBaseImage) throws IncompatibleBaseImageJavaVersionException {\n@@ -913,16 +914,16 @@ public void testGetDefaultBaseImage_defaultJavaBaseImage(\n   }\n \n   @Test\n-  public void testGetDefaultBaseImage_projectHigherThanJava17() {\n-    when(projectProperties.getMajorJavaVersion()).thenReturn(20);\n+  public void testGetDefaultBaseImage_projectHigherThanJava21() {\n+    when(projectProperties.getMajorJavaVersion()).thenReturn(22);\n \n     IncompatibleBaseImageJavaVersionException exception =\n         assertThrows(\n             IncompatibleBaseImageJavaVersionException.class,\n             () -> PluginConfigurationProcessor.getDefaultBaseImage(projectProperties));\n \n-    assertThat(exception.getBaseImageMajorJavaVersion()).isEqualTo(17);\n-    assertThat(exception.getProjectMajorJavaVersion()).isEqualTo(20);\n+    assertThat(exception.getBaseImageMajorJavaVersion()).isEqualTo(21);\n+    assertThat(exception.getProjectMajorJavaVersion()).isEqualTo(22);\n   }\n \n   @Test\n@@ -980,7 +981,9 @@ public void testGetJavaContainerBuilderWithBaseImage_registryWithPrefix()\n         \"eclipse-temurin:11, 11, 15\",\n         \"eclipse-temurin:11-jre, 11, 15\",\n         \"eclipse-temurin:17, 17, 19\",\n-        \"eclipse-temurin:17-jre, 17, 19\"\n+        \"eclipse-temurin:17-jre, 17, 19\",\n+        \"eclipse-temurin:21, 21, 22\",\n+        \"eclipse-temurin:21-jre, 21, 22\"\n       })\n   public void testGetJavaContainerBuilderWithBaseImage_incompatibleJavaBaseImage(\n       String baseImage, int baseImageJavaVersion, int appJavaVersion) {\n@@ -1010,8 +1013,8 @@ public void testGetJavaContainerBuilderWithBaseImage_java12BaseImage()\n   }\n \n   @Test\n-  public void testGetJavaContainerBuilderWithBaseImage_java19NoBaseImage() {\n-    when(projectProperties.getMajorJavaVersion()).thenReturn(19);\n+  public void testGetJavaContainerBuilderWithBaseImage_java22NoBaseImage() {\n+    when(projectProperties.getMajorJavaVersion()).thenReturn(22);\n     when(rawConfiguration.getFromImage()).thenReturn(Optional.empty());\n     IncompatibleBaseImageJavaVersionException exception =\n         assertThrows(\n@@ -1019,8 +1022,8 @@ public void testGetJavaContainerBuilderWithBaseImage_java19NoBaseImage() {\n             () ->\n                 PluginConfigurationProcessor.getJavaContainerBuilderWithBaseImage(\n                     rawConfiguration, projectProperties, inferredAuthProvider));\n-    assertThat(exception.getBaseImageMajorJavaVersion()).isEqualTo(17);\n-    assertThat(exception.getProjectMajorJavaVersion()).isEqualTo(19);\n+    assertThat(exception.getBaseImageMajorJavaVersion()).isEqualTo(21);\n+    assertThat(exception.getProjectMajorJavaVersion()).isEqualTo(22);\n   }\n \n   @Test\n",
        "problem_statement": "Automatically select correct base image for Java 21\n**Environment**:\r\n\r\n- *Jib version:* 3.4.0\r\n- *Build tool:* Maven\r\n- *OS:* Fedora Linux\r\n\r\n**Description of the issue**:\r\n\r\nJib automatically selects the correct base image for Java 8,11 and 17 but not 21.\r\n\r\n**Expected behavior**:\r\n\r\nJib should automatically select `eclipse-temurin:21-jre` when Java 21 is detected.\r\n\r\n**Steps to reproduce**:\r\n  1. Switch maven-compiler-plugin to use Java 21\r\n  2. Run a build with Jib\r\n  3. See error message \"Your project is using Java 21 but the base image is for Java 17, perhaps you should configure a Java 21-compatible base image using the '<from><image>' parameter, or set maven-compiler-plugin's '<target>' or '<release>' version to 17 or below in your build configuration: IncompatibleBaseImageJavaVersionException\"\r\n\r\n**Log output**: https://github.com/opentripplanner/OpenTripPlanner/actions/runs/6809930157/job/18517607512\n",
        "hints_text": "",
        "created_at": 1700394889000,
        "FAIL_TO_PASS": [
            "jib-cli:com.google.cloud.tools.jib.cli.jar.JarFilesTest",
            "jib-plugins-common:com.google.cloud.tools.jib.plugins.common.PluginConfigurationProcessorTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/googlecontainertools/jib/pull/4144"
    }
}