{
    "task_id": "fasterxml__jackson-core-150",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-core/setup_fasterxml__jackson-core__0.1",
        "env_name": "setup_fasterxml__jackson-core__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-core",
        "pull_number": 150,
        "instance_id": "fasterxml__jackson-core-150",
        "issue_numbers": [
            "152",
            "157"
        ],
        "base_commit": "fdcb48c530a91a1cd4a18c3b452048c52de9965c",
        "patch": "diff --git a/pom.xml b/pom.xml\nindex fdcad1af99..b8be7cb38e 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -9,7 +9,7 @@\n   <groupId>com.fasterxml.jackson.core</groupId>\n   <artifactId>jackson-core</artifactId>\n   <name>Jackson-core</name>\n-  <version>2.4.2-SNAPSHOT</version>\n+  <version>2.4.4-SNAPSHOT</version>\n   <packaging>bundle</packaging>\n   <description>Core Jackson abstractions, basic JSON streaming API implementation\n   </description>\ndiff --git a/release-notes/VERSION b/release-notes/VERSION\nindex 6d1f9a64e7..ee2047fbb3 100644\n--- a/release-notes/VERSION\n+++ b/release-notes/VERSION\n@@ -1,20 +1,21 @@\n Project: jackson-core\n-Version: 2.4.2 (xx-Aug-2014)\n+Version: 2.4.3 (02-Oct-2014)\n \n-#146: Error while parsing negative floats at the end of the input buffer\n- (reported by rjmac@github)\n+#152: Exception for property names longer than 256k\n+ (reported by CrendKing@github)\n+#157: ArrayIndexOutOfBoundsException: 200 on numbers with more than 200 digits.\n+ (reported by Lars P, larsp@github)\n \n ------------------------------------------------------------------------\n === History: ===\n ------------------------------------------------------------------------\n \n-2.4.1.1 (09-Jul-2014)\n-\n-NOTE: this is a \"micro-release\", which does NOT contain all versions of\n-components but only individual components with critical fix(es).\n+2.4.2 (13-Aug-2014)\n \n #145: NPE at BytesToNameCanonicalizer\n  (reported by Shay B)\n+#146: Error while parsing negative floats at the end of the input buffer\n+ (reported by rjmac@github)\n \n 2.4.1 (16-Jun-2014)\n \ndiff --git a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\nindex 4d8067d45c..7a57233509 100644\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n@@ -1189,17 +1189,17 @@ public Boolean nextBooleanValue() throws IOException\n     protected JsonToken _parsePosNumber(int c) throws IOException\n     {\n         char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n-        int outPtr = 0;\n         // One special case: if first char is 0, must not be followed by a digit\n         if (c == INT_0) {\n             c = _verifyNoLeadingZeroes();\n         }\n         // Ok: we can first just add digit we saw first:\n-        outBuf[outPtr++] = (char) c;\n+        outBuf[0] = (char) c;\n         int intLen = 1;\n+        int outPtr = 1;\n         // And then figure out how far we can read without further checks\n         // for either input or output\n-        int end = _inputPtr + outBuf.length;\n+        int end = _inputPtr + outBuf.length - 1; // 1 == outPtr\n         if (end > _inputEnd) {\n             end = _inputEnd;\n         }\ndiff --git a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\nindex 187754cd5d..a67737606b 100644\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n@@ -580,10 +580,13 @@ public char[] finishCurrentSegment() {\n     public char[] expandCurrentSegment()\n     {\n         final char[] curr = _currentSegment;\n-        // Let's grow by 50%\n+        // Let's grow by 50% by default\n         final int len = curr.length;\n-        // Must grow by at least 1 char, no matter what\n-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\n+        int newLen = len + (len >> 1);\n+        // but above intended maximum, slow to increase by 25%\n+        if (newLen > MAX_SEGMENT_LEN) {\n+            newLen = len + (len >> 2);\n+        }\n         return (_currentSegment = Arrays.copyOf(curr, newLen));\n     }\n \n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\nindex 5fb32adff9..f92b2c9e12 100644\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n@@ -422,14 +422,38 @@ public void testParsingOfLongerSequences()\n         }\n     }\n \n+    // [jackson-core#157]\n+    public void testLongNumbers() throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder(9000);\n+        for (int i = 0; i < 9000; ++i) {\n+            sb.append('9');\n+        }\n+        String NUM = sb.toString();\n+        JsonFactory f = new JsonFactory();\n+        _testLongNumbers(f, NUM, false);\n+        _testLongNumbers(f, NUM, true);\n+    }\n+    \n+    private void _testLongNumbers(JsonFactory f, String num, boolean useStream) throws Exception\n+    {\n+        final String doc = \"[ \"+num+\" ]\";\n+        JsonParser jp = useStream\n+                ? FACTORY.createParser(doc.getBytes(\"UTF-8\"))\n+                        : FACTORY.createParser(doc);\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(num, jp.getText());\n+        assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests for invalid access\n     /**********************************************************\n      */\n     \n-    public void testInvalidBooleanAccess()\n-        throws Exception\n+    public void testInvalidBooleanAccess() throws Exception\n     {\n         JsonParser jp = FACTORY.createParser(\"[ \\\"abc\\\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\ndiff --git a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\nindex c4be4cd09f..543a38675d 100644\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n@@ -62,4 +62,19 @@ public void testLongAppend()\n          assertEquals(len+2, tb.size());\n          assertEquals(EXP, tb.contentsAsString());\n       }\n+\n+      // [Core#152]\n+      public void testExpand()\n+      {\n+          TextBuffer tb = new TextBuffer(new BufferRecycler());\n+          char[] buf = tb.getCurrentSegment();\n+\n+          while (buf.length < 500 * 1000) {\n+              char[] old = buf;\n+              buf = tb.expandCurrentSegment();\n+              if (old.length >= buf.length) {\n+                  fail(\"Expected buffer of \"+old.length+\" to expand, did not, length now \"+buf.length);\n+              }\n+          }\n+      }\n }\n",
        "problem_statement": "What is the maximum key length allowed?\nI noticed that even in Jackson 2.4, if a JSON key is longer than 262144 bytes, ArrayIndexOutOfBoundsException is thrown from TextBuffer. Below is the stack trace:\n\n```\njava.lang.ArrayIndexOutOfBoundsException\n    at java.lang.System.arraycopy(Native Method)\n    at com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(TextBuffer.java:604)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2034)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:1928)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongFieldName(UTF8StreamJsonParser.java:1534)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumFieldName(UTF8StreamJsonParser.java:1502)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFieldName(UTF8StreamJsonParser.java:1437)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:668)\n    ... <below are our code> ...\n```\n\nLooking at TextBuffer.expandCurrentSegment(TextBuffer.java:604), once the length of _currentSegment is increased to MAX_SEGMENT_LEN + 1 (262145) bytes, the newLen will stay at MAX_SEGMENT_LEN, which is smaller than len. Therefore System.arraycopy() will fail.\n\nI understand it is rare to have key larger than 262144 bytes, but it would be nice if\n- Jackson explicitly throw exception stating that key is too long.\n- Document that the maximum key length is 262144 bytes.\n\nOR\n- Update TextBuffer to support super long key.\n\nThanks!\n\nArrayIndexOutOfBoundsException: 200 on numbers with more than 200 digits.\nOn a simple data structure such as\n\n```\n{  \n   \"values\":{  \n      \"datatypes\":{  \n         \"test\":999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n      }\n   }\n}\n```\n\nWhere the field `values` is a `Map<String, ?>`\n\nI'll get a `ArrayIndexOutOfBoundsException: 200` when the number has more than 200 digits.\n\nStacktrace:\n\n```\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 200\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber(UTF8StreamJsonParser.java:1216) ~[com.fasterxml.jackson.core.jackson-core_2.4.3.jar:2.4.3]\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:726) ~[com.fasterxml.jackson.core.jackson-core_2.4.3.jar:2.4.3]\n    at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:429) ~[com.fasterxml.jackson.core.jackson-databind_2.4.3.jar:2.4.3]\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:451) ~[com.fasterxml.jackson.core.jackson-databind_2.4.3.jar:2.4.3]\n```\n\n",
        "hints_text": "\n",
        "created_at": 1408472289000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.core.json.TestNumericValues",
            "src:com.fasterxml.jackson.core.util.TestTextBuffer"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-core/pull/150"
    }
}