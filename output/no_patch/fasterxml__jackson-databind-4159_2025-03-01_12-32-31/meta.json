{
    "task_id": "fasterxml__jackson-databind-4159",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-databind/setup_fasterxml__jackson-databind__0.1",
        "env_name": "setup_fasterxml__jackson-databind__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-databind",
        "pull_number": 4159,
        "instance_id": "fasterxml__jackson-databind-4159",
        "issue_numbers": [
            "3569"
        ],
        "base_commit": "a1b7557b61cde06fa46a63e3e3cc864afeff8d0e",
        "patch": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\nindex 835e269ce0..f3467b8e38 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n@@ -189,6 +189,16 @@ public enum DefaultTyping {\n          */\n         NON_FINAL,\n \n+        /**\n+         * Enables default typing for non-final types as {@link #NON_FINAL},\n+         * but also includes Enums.\n+         * Designed to allow default typing of Enums without resorting to\n+         * {@link #EVERYTHING}, which has security implications.\n+         *<p>\n+         * @since 2.16\n+         */\n+        NON_FINAL_AND_ENUMS,\n+\n         /**\n          * Value that means that default typing will be used for\n          * all types, with exception of small number of\n@@ -355,6 +365,20 @@ public boolean useForType(JavaType t)\n                 }\n                 // [databind#88] Should not apply to JSON tree models:\n                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n+\n+            case NON_FINAL_AND_ENUMS: // since 2.16\n+                while (t.isArrayType()) {\n+                    t = t.getContentType();\n+                }\n+                // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:\n+                while (t.isReferenceType()) {\n+                    t = t.getReferencedType();\n+                }\n+                // [databind#88] Should not apply to JSON tree models:\n+                return (!t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()))\n+                        // [databind#3569] Allow use of default typing for Enums\n+                        || t.isEnumType();\n+\n             case EVERYTHING:\n                 // So, excluding primitives (handled earlier) and \"Natural types\" (handled\n                 // before this method is called), applied to everything\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java\nindex dd63a891dd..4cd884d7c7 100644\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java\n@@ -1,5 +1,11 @@\n package com.fasterxml.jackson.databind.jsontype.deftyping;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;\n import java.util.concurrent.TimeUnit;\n \n import com.fasterxml.jackson.databind.BaseMapTest;\n@@ -26,6 +32,25 @@ protected static class TimeUnitBean {\n         public TimeUnit timeUnit;\n     }\n \n+    static class Foo3569<T> {\n+        public T item;\n+    }\n+\n+    enum Bar3569 {\n+        ENABLED, DISABLED, HIDDEN;\n+\n+        @JsonCreator\n+        public static Bar3569 fromValue(String value) {\n+            String upperVal = value.toUpperCase();\n+            for (Bar3569 enumValue : Bar3569.values()) {\n+                if (enumValue.name().equals(upperVal)) {\n+                    return enumValue;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Bad input [\" + value + \"]\");\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n@@ -78,4 +103,32 @@ public void testSimpleEnumsAsField() throws Exception\n         EnumHolder holder = m.readValue(json, EnumHolder.class);\n         assertSame(TestEnum.B, holder.value);\n     }\n+\n+    /**\n+     * [databind#3569]: Unable to deserialize enum object with default-typed\n+     * {@link com.fasterxml.jackson.annotation.JsonTypeInfo.As#WRAPPER_ARRAY} and {@link JsonCreator} together,\n+     *\n+     * @since 2.16\n+     */\n+    public void testEnumAsWrapperArrayWithCreator() throws JsonProcessingException\n+    {\n+        ObjectMapper objectMapper = jsonMapperBuilder()\n+                .activateDefaultTyping(\n+                        new DefaultBaseTypeLimitingValidator(),\n+                        ObjectMapper.DefaultTyping.NON_FINAL_AND_ENUMS,\n+                        JsonTypeInfo.As.WRAPPER_ARRAY)\n+                .build();\n+\n+        Foo3569<Bar3569> expected = new Foo3569<>();\n+        expected.item = Bar3569.ENABLED;\n+\n+        // First, serialize\n+        String serialized = objectMapper.writeValueAsString(expected);\n+\n+        // Then, deserialize with TypeReference\n+        assertNotNull(objectMapper.readValue(serialized, new TypeReference<Foo3569<Bar3569>>() {}));\n+        // And, also try as described in [databind#3569]\n+        JavaType javaType = objectMapper.getTypeFactory().constructParametricType(Foo3569.class, new Class[]{Bar3569.class});\n+        assertNotNull(objectMapper.readValue(serialized, javaType));\n+    }\n }\n",
        "problem_statement": "`FactoryBasedEnumDeserializer` unable to deserialize enum object with Polymorphic Type Id (\"As.WRAPPER_ARRAY\") - fails on START_ARRAY token\n**Describe the bug**\r\nFactoryBasedEnumDeserializer is unable to deserialize enum value which is wrapped in Array.\r\n\r\n\r\n**Version information**\r\nThis is for Jackson 2.13.1 - It worked fine for release 2.10.1\r\n\r\n**To Reproduce**\r\nIf you have a way to reproduce this with:\r\n\r\n```\r\npublic class EnumDeserializeTest {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        GenericJackson2JsonRedisSerializer serializer = new GenericJackson2JsonRedisSerializer();\r\n        Frequency frequency = Frequency.DAILY;\r\n        byte[] frequencyAsBytes = serializer.serialize(frequency);\r\n        Frequency frequencyDeserialized = mapper.readValue(frequencyAsBytes, Frequency.class);\r\n    }\r\n}\r\n```\r\n\r\nValue is serialized as : [\"Frequency\",\"DAILY\"]\r\n\r\nThis results in exception:\r\n\r\n`Exception in thread \"main\" com.fasterxml.jackson.databind.exc.ValueInstantiationException: Cannot construct instance of `Frequency`, problem: Unexpected value ''\r\n at [Source: (byte[])\"[\"Frequency\",\"DAILY\"]\"; line: 1, column: 21]\r\n\tat com.fasterxml.jackson.databind.exc.ValueInstantiationException.from(ValueInstantiationException.java:47)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:2047)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(DeserializationContext.java:1400)\r\n\tat com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer.deserialize(FactoryBasedEnumDeserializer.java:182)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3690)\r\n\tat EnumDeserializeTest.main(EnumDeserializeTest.java:26)`\r\n\r\n\r\n**Expected behavior**\r\nDeserialization should work fine with FactoryBasedEnumDeserializer but fails when it encounters START_ARRAY token. EnumDeserializer works just fine and it is able to parse the array tokens and retrieves the enum value. Similarly, FactoryBasedEnumDeserializer should also work.\r\n\r\n**Additional context**\r\nThis issue is faced when using GenericJackson2JsonRedisSerializer. A change was made to this serialiser in Spring-data-redis 2.7.2 which uses JsonTypeInfo.Id.CLASS annotation as default for all types. Prior to this release, enum types were serialised as simple/plain values but with this change they are wrapped in an array where 1st element is denoted for class and 2nd element holds the enum value.\r\n\n",
        "hints_text": "Thank you for reporting the issue, as well as including a reproduction.\r\nUnfortunately I would need bit more information (ideally a stand-alone test case):\r\n\r\n* Definition of `Frequency` (I assume it's a simple Enum but still)\r\n* Configuration of `ObjectMapper` (wrt Default Typing, I think)\r\n* Whatever write code `GenericJackson2JsonRedisSerializer` uses.\r\n\r\nWrapping in an array is likely for `AS_ARRAY` inclusion type of Default Typing.\r\nIt really wouldn't be needed for Enums but I assume this is just generic interface for any and all types.\r\n\n@cowtowncoder Thanks for your prompt response.\r\n\r\nHere's the Frequency Class:\r\n\r\n```\r\nimport com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\n\r\npublic enum Frequency {\r\n    DAILY(\"DAILY\"),\r\n    WEEKLY(\"WEEKLy\");\r\n    private String value;\r\n\r\n    Frequency(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    @JsonValue\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.valueOf(value);\r\n    }\r\n\r\n    @JsonCreator\r\n    public static Frequency fromValue(String value) {\r\n        for (Frequency frequency : Frequency.values()) {\r\n            if (frequency.value.equals(value)) {\r\n                return frequency;\r\n            }\r\n        }\r\n        throw new IllegalArgumentException(\"Unexpected value '\" + value + \"'\");\r\n    }\r\n}\r\n```\r\n\r\nHere's how ObjectMapper is used inside GenericJackson2JsonRedisSerializer [FYI - the below snippet is from Spring-data-redis 2.7.2 version]\r\n\r\n```\r\npublic GenericJackson2JsonRedisSerializer(@Nullable String classPropertyTypeName) {\r\n\r\n\t\tthis(new ObjectMapper());\r\n\r\n\t\t// simply setting {@code mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)} does not help here since we need\r\n\t\t// the type hint embedded for deserialization using the default typing feature.\r\n\t\tregisterNullValueSerializer(mapper, classPropertyTypeName);\r\n\r\n\t\tStdTypeResolverBuilder typer = new TypeResolverBuilder(DefaultTyping.EVERYTHING,\r\n\t\t\t\tmapper.getPolymorphicTypeValidator());\r\n\t\ttyper = typer.init(JsonTypeInfo.Id.CLASS, null);\r\n\t\ttyper = typer.inclusion(JsonTypeInfo.As.PROPERTY);\r\n\r\n\t\tif (StringUtils.hasText(classPropertyTypeName)) {\r\n\t\t\ttyper = typer.typeProperty(classPropertyTypeName);\r\n\t\t}\r\n\t\tmapper.setDefaultTyping(typer);\r\n\t}\r\n```\r\n\r\nPlease do let me know if you need more info.\r\n\r\nIn my perspective, wrapping enum values during serialisation is fine - having 1st element as class and 2nd element as value. This can be deserialised properly by EnumDeserializer but not by FactoryBasedEnumDeserializer. There is an exception if such kind of enum value is deserialised by FactoryBasedEnumDeserializer.\r\n\nOk, this is quite close, but I think the last part is just to tie it all together in full reproduction.\r\n\r\nOne problem I do see is use of `DefaultTyping.EVERYTHING` -- this should almost NEVER be used for anything, anywhere, by anyone. I think my adding of that setting due to user request was a mistake; and I have yet to see a case where it makes sense and works well.\r\n\r\nBut having said that, I also think code also should rather use `JsonTypeInfo.As.WRAPPER_ARRAY` since `PROPERTY` cannot really work for `Enum`s (since they are not serialized as JSON Objects -- and only Objects have properties).\r\nAs a result Jackson will actually simply use `WRAPPER_ARRAY` anyway.\r\nSo that setting may not make much difference for the issue. But if this was my code I'd definitely change that.\r\n\r\nSo the wrapping into 2-element array is done by Polymorphic type handler, not as part of Enum (value) serializer or deserializer -- type handlers are `TypeDeserializer` and `TypeSerializer`.\r\nActual value deserializer like `FactoryBasedEnumDeserializer` does delegate calls to `TypeDeserializer`.\r\n\r\nWhat the test should be able to show, I think, is where does the wrapping/unwrapping fail.\r\n\r\nBut I am also bit suspicious of custom `StdTypeResolverBuilder` in code above: that is advanced functionality and easy to get wrong. And in fact I am not sure why it is used here, actually; `ObjectMapper` has `activateDefaultTyping` methods that should work fine (even include `EVERYTHING` option that I dislike).\r\nI guess the only reason it is being used is the insistence of using `As.PROPERTY` with specific `classPropertyTypeName` -- if `As.WRAPPER_ARRAY` was used instead (which makes much more sense) -- this wouldn't be needed.\r\n\r\n\nOne last thing: by \"full\" reproduction all I mean is that from the original examples write + read things would go through without references to any external code outside of `jackson-databind`.\r\n\r\n\r\n\n@cowtowncoder As you quoted: Actual value deserializer like FactoryBasedEnumDeserializer does delegate calls to TypeDeserializer. \r\nHere, inside FactoryBasedEnumDeserializer, it doesn't anticipate START_ARRAY token. When it encounters it, it simply sets value as an empty string and skips the children. It doesn't delegate calls to Deserialiser.\r\n\r\nI agree with your thought process. Having WRAPPER_ARRAY makes more sense. However, I am bit surprised at the behaviour where EnumDeserializer works fine to deserialize enum values but FactoryBasedEnumDeserializer fails.\n@cowtowncoder Do you need any details from my side?\nI think this makes sense. I do need a unit test however, ideally stripped to minimal size.\r\nI can make one eventually, but will likely not have time in near future to work on this issue (huge backlog of things). But eventually I'll get here, and information here should be enough for me or whoever else has time to dig into it.\r\n\r\nThe main open question for me is whether this would be an issue with `FactoryBasedEnumDeserializer` with standard default typing configuration (bigger problem); or if this is due to custom set up with `StdTypeResolverBuilder` (less likely to affect users, so lesser problem).\r\n\n@cowtowncoder In response to your latest comment: In my perspective, this would be an issue with FactoryBasedEnumDeserializer with standard default typing configuration (bigger problem).\r\n\r\nI have shared the unit test above. Would you require a trimmed/minimal version of the same? I think the one I mention above is the most basic one and doesn't have any extra details. If you think I can get rid of anything, let me know. I am happy to provide any details/code which you may require to get things going. Happy to contribute !\n@nitinsatapara yes, reproduction needs to have no external dependencies (no Spring), that's the main thing.\r\n\r\nI am bit concerned by use of custom setup of default typing, including `EVERYTHING` inclusion criteria but I guess first things first; isolated reproduction would be the right next step\r\n(ideally only `activateDefaultTyping()` on `ObjectMapper` was used, if that is enough to trigger the issue, but that's more a follow-up).\r\n\n@cowtowncoder I have an example for you. This is impacting me as well, even with DefaultType.NON_FINAL and JsonTypeInfo.As.WRAPPER_ARRAY\r\n\r\n```\r\n    @Test\r\n    public void iBlowUpForFun()\r\n            throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        // enables Default Typing\r\n        objectMapper.enableDefaultTyping(DefaultTyping.NON_FINAL\r\n                , As.WRAPPER_ARRAY);\r\n        Foo<Bar> expected = new Foo<>();\r\n        expected.setItem(Bar.ENABLED);\r\n\r\n        String serialized = objectMapper.writeValueAsString(expected);\r\n        JavaType javaType =\r\n                objectMapper.getTypeFactory().constructParametricType(Foo.class\r\n                        , new Class[]{Bar.class});\r\n        Set<Bar> deserialized =\r\n                objectMapper.readValue(serialized, javaType);\r\n        assertEquals(deserialized,\r\n                expected, \"Bar does not match\");\r\n    }\r\n```\r\n\r\nwith Foo and Bar defined as \r\n```\r\n    public class Foo<T> {\r\n        private T item;\r\n        public T getItem() {\r\n            return item;\r\n        }\r\n        public void setItem(T item) {\r\n            this.item = item;\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object compare) {\r\n            if(this.item == null) {\r\n                return compare == null;\r\n            }\r\n            return this.item.equals(compare);\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            if(this.item == null) {\r\n                return 0;\r\n            }\r\n            return this.item.hashCode();\r\n        }\r\n    }\r\n```\r\n\r\n```\r\n    public enum Bar {\r\n        ENABLED,\r\n        DISABLED,\r\n        HIDDEN;\r\n        @JsonCreator\r\n        public static Bar fromValue(String value) {\r\n            String upperVal = value.toUpperCase();\r\n\r\n            for (Bar enumValue : Bar.values()) {\r\n                if (enumValue.name().equals(upperVal)) {\r\n                    return enumValue;\r\n                }\r\n            }\r\n            throw new IllegalArgumentException(\"Bad input [\" + value + \"]\");\r\n        }\r\n    }\r\n```\r\n\r\nI get an error deserializing the string back. Note that the input shows as an empty string.\r\n\r\ncom.fasterxml.jackson.databind.exc.ValueInstantiationException: Cannot construct instance of `...Bar`, problem: Bad input []\r\n at [Source: (String)\"[\"com.kareo.services.auxiliary.featuretoggle.implementation.auditing.AuditTest$Foo\",{\"item\":[\"com.kareo.services.auxiliary.featuretoggle.implementation.auditing.AuditTest$Bar\",\"ENABLED\"]}]\"; line: 1, column: 186] (through reference chain: com.kareo.services.auxiliary.featuretoggle.implementation.auditing.AuditTest$Foo[\"item\"])\r\n\r\nAs far a I can tell, the issue is with FactoryBasedEnumDeserializer#deserialize:\r\n```\r\nJsonToken t = p.currentToken();\r\n        if (t != null && !t.isScalarValue()) {\r\n            value = \"\";\r\n            p.skipChildren();\r\n        } \r\n```\r\nIs the wrong deserializer being used somehow?\nFirst of, thank you @rmekhail-tebra for the reproduction! This is super helpful.\r\n\r\nAs to the issue, it is difficult to say without digging deeper: this is pretty complex case that combines 2 things that do not play nicely together -- polymorphic deserialization and generic Java types.\r\n\nthanks @rmekhail-tebra for sharing the test case. I faced exactly the same error. \r\n@cowtowncoder From the debugging that I have done, it seems the issue lies in FactoryBasedEnumDeserializer - at the point where it encounters 'Array token'. It simply abrupts from there - It's like it doesn't want to process any sort of array token at all. \nI think this issue was resolved in later versions, judging by the implementation changes in 2.15 per GitHub. For now I get around this issue by converting the enum to a string since upgrading Jackson isn't an option ATM\n@rmekhail-tebra If there is any chance you could see if your test case did pass on 2.15.2 (or, 2.15.3 released yesterday), that'd be very useful information to add.\r\n",
        "created_at": 1697372253000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.databind.jsontype.deftyping.TestDefaultForEnums"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-databind/pull/4159"
    }
}