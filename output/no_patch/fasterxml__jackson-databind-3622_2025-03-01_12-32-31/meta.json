{
    "task_id": "fasterxml__jackson-databind-3622",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-databind/setup_fasterxml__jackson-databind__0.1",
        "env_name": "setup_fasterxml__jackson-databind__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-databind",
        "pull_number": 3622,
        "instance_id": "fasterxml__jackson-databind-3622",
        "issue_numbers": [
            "3582"
        ],
        "base_commit": "6497f1b35ee917b4095d580082ecc4c3f03088ec",
        "patch": "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex 072530e3cb..083a4ca89b 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -4,6 +4,14 @@ Project: jackson-databind\n === Releases === \n ------------------------------------------------------------------------\n \n+2.12.7.1 (not yest released)\n+\n+#3582: Add check in `BeanDeserializer._deserializeFromArray()` to prevent\n+  use of deeply nested arrays [CVE-2022-42004]\n+\n+#3590: Add check in primitive value deserializers to avoid deep wrapper array\n+  nesting wrt `UNWRAP_SINGLE_VALUE_ARRAYS` [CVE-2022-42003]\n+\n 2.12.7 (26-May-2022)\n \n #2816: Optimize UntypedObjectDeserializer wrt recursion [CVE-2020-36518]\n@@ -16,7 +24,7 @@ Project: jackson-databind\n #3305: ObjectMapper serializes `CharSequence` subtypes as POJO instead of\n   as String (JDK 15+)\n  (reported by stevenupton@github; fix suggested by Sergey C)\n-#3328: Possible DoS issue\n+#3328: Possible DoS if using JDK serialization to serialize JsonNode\n \n 2.12.5 (27-Aug-2021)\n \ndiff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\nindex ff9e232485..a924948e65 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n@@ -318,8 +318,10 @@ public enum DeserializationFeature implements ConfigFeature\n      * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}\n      * feature.  If more than one value is found in the array, a JsonMappingException is thrown.\n      * <p>\n+     * NOTE: only <b>single</b> wrapper Array is allowed: if multiple attempted, exception\n+     * will be thrown.\n      * \n-     * Feature is disabled by default\n+     * Feature is disabled by default.\n      * @since 2.4\n      */\n     UNWRAP_SINGLE_VALUE_ARRAYS(false),\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\nindex 3716d93989..5a18c07d46 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n@@ -8,6 +8,7 @@\n import com.fasterxml.jackson.databind.cfg.CoercionAction;\n import com.fasterxml.jackson.databind.deser.impl.*;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.IgnorePropertiesUtil;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n@@ -630,6 +631,15 @@ protected Object _deserializeFromArray(JsonParser p, DeserializationContext ctxt\n                 return ctxt.handleUnexpectedToken(getValueType(ctxt), JsonToken.START_ARRAY, p, null);\n             }\n             if (unwrap) {\n+                // 23-Aug-2022, tatu: To prevent unbounded nested arrays, we better\n+                //   check there is NOT another START_ARRAY lurking there..\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    JavaType targetType = getValueType(ctxt);\n+                    return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,\n+\"Cannot deserialize value of type %s from deeply-nested JSON Array: only single wrapper allowed with `%s`\",\n+                            ClassUtil.getTypeDescription(targetType),\n+                                    \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");\n+                }\n                 final Object value = deserialize(p, ctxt);\n                 if (p.nextToken() != JsonToken.END_ARRAY) {\n                     handleMissingEndArrayForSingle(p, ctxt);\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\nindex 4be658e4e4..da3167cebd 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n@@ -357,12 +357,8 @@ protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt)\n         // 23-Mar-2017, tatu: Let's specifically block recursive resolution to avoid\n         //   either supporting nested arrays, or to cause infinite looping.\n         if (p.hasToken(JsonToken.START_ARRAY)) {\n-            String msg = String.format(\n-\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",\n-                    ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,\n-                    \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");\n             @SuppressWarnings(\"unchecked\")\n-            T result = (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, msg);\n+            T result = (T) handleNestedArrayForSingle(p, ctxt);\n             return result;\n         }\n         return (T) deserialize(p, ctxt);\n@@ -413,7 +409,9 @@ protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationCont\n         case JsonTokenId.ID_START_ARRAY:\n             // 12-Jun-2020, tatu: For some reason calling `_deserializeFromArray()` won't work so:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (boolean) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final boolean parsed = _parseBooleanPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -582,7 +580,9 @@ protected final byte _parseBytePrimitive(JsonParser p, DeserializationContext ct\n         case JsonTokenId.ID_START_ARRAY: // unwrapping / from-empty-array coercion?\n             // 12-Jun-2020, tatu: For some reason calling `_deserializeFromArray()` won't work so:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (byte) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final byte parsed = _parseBytePrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -650,7 +650,9 @@ protected final short _parseShortPrimitive(JsonParser p, DeserializationContext\n         case JsonTokenId.ID_START_ARRAY:\n             // 12-Jun-2020, tatu: For some reason calling `_deserializeFromArray()` won't work so:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (short) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final short parsed = _parseShortPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -715,7 +717,9 @@ protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (int) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final int parsed = _parseIntPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -842,7 +846,9 @@ protected final long _parseLongPrimitive(JsonParser p, DeserializationContext ct\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (long) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final long parsed = _parseLongPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -953,7 +959,9 @@ protected final float _parseFloatPrimitive(JsonParser p, DeserializationContext\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (float) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final float parsed = _parseFloatPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -1058,7 +1066,9 @@ protected final double _parseDoublePrimitive(JsonParser p, DeserializationContex\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (double) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final double parsed = _parseDoublePrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -1214,6 +1224,9 @@ protected java.util.Date _parseDateFromArray(JsonParser p, DeserializationContex\n                 default:\n                 }\n             } else if (unwrap) {\n+                if (t == JsonToken.START_ARRAY) {\n+                    return (java.util.Date) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final Date parsed = _parseDate(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -1990,6 +2003,21 @@ protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationConte\n         //     but for now just fall through\n     }\n \n+    /**\n+     * Helper method called when detecting a deep(er) nesting of Arrays when trying\n+     * to unwrap value for {@code DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS}.\n+     *\n+     * @since 2.14\n+     */\n+    protected Object handleNestedArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException\n+    {\n+        String msg = String.format(\n+\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",\n+                ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,\n+                \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");\n+        return ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, msg);\n+    }\n+\n     protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException\n     {\n         JsonToken t = p.nextToken();\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java\nnew file mode 100644\nindex 0000000000..3cfe1b3b77\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java\n@@ -0,0 +1,46 @@\n+package com.fasterxml.jackson.databind.deser.dos;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+public class DeepArrayWrappingForDeser3582Test extends BaseMapTest\n+{\n+    // 23-Aug-2022, tatu: Before fix, failed with 5000\n+    private final static int TOO_DEEP_NESTING = 9999;\n+\n+    private final ObjectMapper MAPPER = jsonMapperBuilder()\n+            .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\n+            .build();\n+\n+    public void testArrayWrapping() throws Exception\n+    {\n+        final String doc = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"{}\");\n+        try {\n+            MAPPER.readValue(doc, Point.class);\n+            fail(\"Should not pass\");\n+        } catch (MismatchedInputException e) {\n+            verifyException(e, \"Cannot deserialize\");\n+            verifyException(e, \"nested JSON Array\");\n+            verifyException(e, \"only single\");\n+        }\n+    }\n+\n+    private String _nestedDoc(int nesting, String open, String close, String content) {\n+        StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));\n+        for (int i = 0; i < nesting; ++i) {\n+            sb.append(open);\n+            if ((i & 31) == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        sb.append(\"\\n\").append(content).append(\"\\n\");\n+        for (int i = 0; i < nesting; ++i) {\n+            sb.append(close);\n+            if ((i & 31) == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+}\ndiff --git a/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java\nnew file mode 100644\nindex 0000000000..e5b0f1eaf3\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java\n@@ -0,0 +1,95 @@\n+package com.fasterxml.jackson.databind.deser.dos;\n+\n+import java.util.Date;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+public class DeepArrayWrappingForDeser3590Test extends BaseMapTest\n+{\n+    // 05-Sep-2022, tatu: Before fix, failed with 5000\n+    private final static int TOO_DEEP_NESTING = 9999;\n+\n+    private final ObjectMapper MAPPER = jsonMapperBuilder()\n+            .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\n+            .build();\n+\n+    private final static String TOO_DEEP_DOC = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"123\");\n+\n+    public void testArrayWrappingForBoolean() throws Exception\n+    {\n+        _testArrayWrappingFor(Boolean.class);\n+        _testArrayWrappingFor(Boolean.TYPE);\n+    }\n+\n+    public void testArrayWrappingForByte() throws Exception\n+    {\n+        _testArrayWrappingFor(Byte.class);\n+        _testArrayWrappingFor(Byte.TYPE);\n+    }\n+\n+    public void testArrayWrappingForShort() throws Exception\n+    {\n+        _testArrayWrappingFor(Short.class);\n+        _testArrayWrappingFor(Short.TYPE);\n+    }\n+\n+    public void testArrayWrappingForInt() throws Exception\n+    {\n+        _testArrayWrappingFor(Integer.class);\n+        _testArrayWrappingFor(Integer.TYPE);\n+    }\n+\n+    public void testArrayWrappingForLong() throws Exception\n+    {\n+        _testArrayWrappingFor(Long.class);\n+        _testArrayWrappingFor(Long.TYPE);\n+    }\n+\n+    public void testArrayWrappingForFloat() throws Exception\n+    {\n+        _testArrayWrappingFor(Float.class);\n+        _testArrayWrappingFor(Float.TYPE);\n+    }\n+\n+    public void testArrayWrappingForDouble() throws Exception\n+    {\n+        _testArrayWrappingFor(Double.class);\n+        _testArrayWrappingFor(Double.TYPE);\n+    }\n+\n+    public void testArrayWrappingForDate() throws Exception\n+    {\n+        _testArrayWrappingFor(Date.class);\n+    }\n+\n+    private void _testArrayWrappingFor(Class<?> cls) throws Exception\n+    {\n+        try {\n+            MAPPER.readValue(TOO_DEEP_DOC, cls);\n+            fail(\"Should not pass\");\n+        } catch (MismatchedInputException e) {\n+            verifyException(e, \"Cannot deserialize\");\n+            verifyException(e, \"nested Arrays not allowed\");\n+        }\n+    }\n+\n+    private static String _nestedDoc(int nesting, String open, String close, String content) {\n+        StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));\n+        for (int i = 0; i < nesting; ++i) {\n+            sb.append(open);\n+            if ((i & 31) == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        sb.append(\"\\n\").append(content).append(\"\\n\");\n+        for (int i = 0; i < nesting; ++i) {\n+            sb.append(close);\n+            if ((i & 31) == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+}\n",
        "problem_statement": "Add check in `BeanDeserializer._deserializeFromArray()` to prevent use of deeply nested arrays [CVE-2022-42004]\nFix included in\r\n\r\n* 2.13.4\r\n* 2.12.7.1 micro-patch (jackson-bom 2.12.7.20221012)\r\n\r\n----\r\n\r\n(note: found by oss-fuzz, see: https://bugs.chromium.org/p/oss-fuzz/issues)\r\n\r\nCurrently feature `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS` is supported by most types, and deserializers tend to implement support using recursion, effectively allowing multiple nested layers of JSON Arrays to be unwrapped.\r\nThis is not a feature to support but just an implementation detail; ideally we should only allow a single JSON Array to wrap a value.\r\n\r\nI think I have removed ability for deeper nesting from some other types so there may be some prior art.\r\n\r\n\n",
        "hints_text": "",
        "created_at": 1665537649000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.databind.deser.dos.DeepArrayWrappingForDeser3582Test",
            "src:com.fasterxml.jackson.databind.deser.dos.DeepArrayWrappingForDeser3590Test"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-databind/pull/3622"
    }
}