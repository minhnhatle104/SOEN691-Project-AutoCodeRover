{
    "task_id": "fasterxml__jackson-databind-4265",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/fasterxml__jackson-databind/setup_fasterxml__jackson-databind__0.1",
        "env_name": "setup_fasterxml__jackson-databind__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test src/test/java/com/fasterxml/jackson/databind/deser/jdk/EmptyArrayBlockingQueueDeserTest.java src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java"
    },
    "task_info": {
        "repo": "fasterxml/jackson-databind",
        "pull_number": 4265,
        "instance_id": "fasterxml__jackson-databind-4265",
        "issue_numbers": [
            "4262"
        ],
        "base_commit": "51a11bdbafecbb7a7f6784eb13f89123a323e8bb",
        "patch": "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex 57daf80973..1681bed659 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -25,6 +25,7 @@ Project: jackson-databind\n #4248: `ThrowableDeserializer` does not handle `null` well for `cause`\n #4250: Add input validation for `NumberDeserializers` deserializers\n  for \"stringified\" FP numbers\n+#4262: Improve handling of `null` insertion failure for `TreeSet`\n #4263: Change `ObjectArrayDeserializer` to use \"generic\" type parameter\n   (`java.lang.Object`) to remove co-variant return type\n \ndiff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\nindex bc4efd10f9..2e8487f28f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n@@ -5,7 +5,9 @@\n import java.util.Objects;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n+\n import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.cfg.CoercionAction;\n@@ -355,6 +357,10 @@ protected Collection<Object> _deserializeFromArray(JsonParser p, Deserialization\n                         continue;\n                     }\n                     value = _nullProvider.getNullValue(ctxt);\n+                    if (value == null) {\n+                        _tryToAddNull(p, ctxt, result);\n+                        continue;\n+                    }\n                 } else if (typeDeser == null) {\n                     value = valueDes.deserialize(p, ctxt);\n                 } else {\n@@ -407,6 +413,10 @@ protected final Collection<Object> handleNonArray(JsonParser p, DeserializationC\n                     return result;\n                 }\n                 value = _nullProvider.getNullValue(ctxt);\n+                if (value == null) {\n+                    _tryToAddNull(p, ctxt, result);\n+                    return result;\n+                }\n             } else if (typeDeser == null) {\n                 value = valueDes.deserialize(p, ctxt);\n             } else {\n@@ -469,6 +479,25 @@ protected Collection<Object> _deserializeWithObjectId(JsonParser p, Deserializat\n         return result;\n     }\n \n+    /**\n+     * {@code java.util.TreeSet} does not allow addition of {@code null} values,\n+     * so isolate handling here.\n+     *\n+     * @since 2.17\n+     */\n+    protected void _tryToAddNull(JsonParser p, DeserializationContext ctxt, Collection<?> set)\n+        throws IOException\n+    {\n+        // Ideally we'd have better idea of where nulls are accepted, but first\n+        // let's just produce something better than NPE:\n+        try {\n+            set.add(null);\n+        } catch (NullPointerException e) {\n+            ctxt.handleUnexpectedToken(_valueType, JsonToken.VALUE_NULL, p,\n+                    \"`java.util.Collection` of type %s does not accept `null` values\",\n+                    ClassUtil.getTypeDescription(getValueType(ctxt)));\n+        }\n+    }    \n     /**\n      * Helper class for dealing with Object Id references for values contained in\n      * collections being deserialized.\n",
        "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestEmptyArrayBlockingQueueDeser.java b/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EmptyArrayBlockingQueueDeserTest.java\nsimilarity index 92%\nrename from src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestEmptyArrayBlockingQueueDeser.java\nrename to src/test/java/com/fasterxml/jackson/databind/deser/jdk/EmptyArrayBlockingQueueDeserTest.java\nindex 877fac44dc..f549d3765b 100644\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestEmptyArrayBlockingQueueDeser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EmptyArrayBlockingQueueDeserTest.java\n@@ -5,7 +5,7 @@\n \n import com.fasterxml.jackson.databind.*;\n \n-public class TestEmptyArrayBlockingQueueDeser extends BaseMapTest\n+public class EmptyArrayBlockingQueueDeserTest extends BaseMapTest\n {\n     static class RemoteEntity{\n         private Collection<Double> values = new ArrayBlockingQueue<>(20);\ndiff --git a/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java b/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java\nindex 6c65b17760..a348815295 100644\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java\n@@ -7,6 +7,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;\n \n /**\n@@ -64,4 +65,16 @@ public void testUnmodifiableSet() throws Exception\n         assertNotNull(result);\n         assertEquals(1, result.size());\n     }\n+\n+    // [databind#4262]: Handle problem of `null`s for `TreeSet`\n+    public void testNullsWithTreeSet() throws Exception\n+    {\n+        try {\n+            MAPPER.readValue(\"[ \\\"acb\\\", null, 123 ]\", TreeSet.class);\n+            fail(\"Should not pass\");\n+        } catch (MismatchedInputException e) {\n+            verifyException(e, \"`java.util.Collection` of type \");\n+            verifyException(e, \" does not accept `null` values\");\n+        }\n+    }\n }\n",
        "problem_statement": "Improve handling of `null` insertion failure for `TreeSet`\n### Describe your Issue\r\n\r\n(note: tackling issue surfaced by OSS-Fuzz via https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64509)\r\n\r\nCurrently attempts to deserialize `null` values for `TreeSet` will fail with underlying NPE which usually gets wrapped as `JsonMappingException` (unless `DeserializationFeature.WRAP_EXCEPTIONS` is disabled). While acceptable this is not optimal failure indication: let's instead catch NPE and throw more meaningful exception; similar to Guava change:\r\n\r\nhttps://github.com/FasterXML/jackson-datatypes-collections/pull/132\r\n\r\n\r\n\r\n\n",
        "hints_text": "Note: change needed for `CollectionDeserializer` (and should only catch and handle NPE for `TreeSet`); we don't want to assume all NPEs are due to same root cause.\r\n\r\nNOTE: earlier comment referred to `TreeMap` too -- but that might not have same issue (as there's no way to get `null` for JSON Object keys).\r\n",
        "created_at": 1702606180000,
        "FAIL_TO_PASS": [
            "src:com.fasterxml.jackson.databind.deser.jdk.JDKCollectionsDeserTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/fasterxml/jackson-databind/pull/4265"
    }
}