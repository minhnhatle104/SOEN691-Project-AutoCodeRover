diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x
index 57daf80973..1681bed659 100644
--- a/release-notes/VERSION-2.x
+++ b/release-notes/VERSION-2.x
@@ -25,6 +25,7 @@ Project: jackson-databind
 #4248: `ThrowableDeserializer` does not handle `null` well for `cause`
 #4250: Add input validation for `NumberDeserializers` deserializers
  for "stringified" FP numbers
+#4262: Improve handling of `null` insertion failure for `TreeSet`
 #4263: Change `ObjectArrayDeserializer` to use "generic" type parameter
   (`java.lang.Object`) to remove co-variant return type
 
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
index bc4efd10f9..2e8487f28f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
@@ -5,7 +5,9 @@
 import java.util.Objects;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
+
 import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.cfg.CoercionAction;
@@ -355,6 +357,10 @@ protected Collection<Object> _deserializeFromArray(JsonParser p, Deserialization
                         continue;
                     }
                     value = _nullProvider.getNullValue(ctxt);
+                    if (value == null) {
+                        _tryToAddNull(p, ctxt, result);
+                        continue;
+                    }
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(p, ctxt);
                 } else {
@@ -407,6 +413,10 @@ protected final Collection<Object> handleNonArray(JsonParser p, DeserializationC
                     return result;
                 }
                 value = _nullProvider.getNullValue(ctxt);
+                if (value == null) {
+                    _tryToAddNull(p, ctxt, result);
+                    return result;
+                }
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(p, ctxt);
             } else {
@@ -469,6 +479,25 @@ protected Collection<Object> _deserializeWithObjectId(JsonParser p, Deserializat
         return result;
     }
 
+    /**
+     * {@code java.util.TreeSet} does not allow addition of {@code null} values,
+     * so isolate handling here.
+     *
+     * @since 2.17
+     */
+    protected void _tryToAddNull(JsonParser p, DeserializationContext ctxt, Collection<?> set)
+        throws IOException
+    {
+        // Ideally we'd have better idea of where nulls are accepted, but first
+        // let's just produce something better than NPE:
+        try {
+            set.add(null);
+        } catch (NullPointerException e) {
+            ctxt.handleUnexpectedToken(_valueType, JsonToken.VALUE_NULL, p,
+                    "`java.util.Collection` of type %s does not accept `null` values",
+                    ClassUtil.getTypeDescription(getValueType(ctxt)));
+        }
+    }    
     /**
      * Helper class for dealing with Object Id references for values contained in
      * collections being deserialized.
