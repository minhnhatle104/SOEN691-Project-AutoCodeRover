{
    "task_id": "google__gson-1391",
    "setup_info": {
        "repo_path": "/Users/rabeyakhatunmuna/Documents/research/SOEN691-Project-AutoCodeRover/SWE-bench/testbed/google__gson/setup_google__gson__0.1",
        "env_name": "setup_google__gson__0.1",
        "pre_install": [],
        "install": "mvn clean install -Dmaven.test.skip=true",
        "test_cmd": "mvn clean test gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java"
    },
    "task_info": {
        "repo": "google/gson",
        "pull_number": 1391,
        "instance_id": "google__gson-1391",
        "issue_numbers": [
            "1390",
            "1390"
        ],
        "base_commit": "3f4ac29f9112799a7374a99b18acabd0232ff075",
        "patch": "diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\nindex adea605f59..53985bc30a 100644\n--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n@@ -25,7 +25,12 @@\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n import java.lang.reflect.WildcardType;\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n \n import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n@@ -334,52 +339,61 @@ public static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawTyp\n   }\n \n   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n-    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable>());\n+    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable, Type>());\n   }\n \n   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n-                              Collection<TypeVariable> visitedTypeVariables) {\n+                              Map<TypeVariable, Type> visitedTypeVariables) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n+    TypeVariable resolving = null;\n     while (true) {\n       if (toResolve instanceof TypeVariable) {\n         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;\n-        if (visitedTypeVariables.contains(typeVariable)) {\n+        Type previouslyResolved = visitedTypeVariables.get(typeVariable);\n+        if (previouslyResolved != null) {\n           // cannot reduce due to infinite recursion\n-          return toResolve;\n-        } else {\n-          visitedTypeVariables.add(typeVariable);\n+          return (previouslyResolved == Void.TYPE) ? toResolve : previouslyResolved;\n         }\n+\n+        // Insert a placeholder to mark the fact that we are in the process of resolving this type\n+        visitedTypeVariables.put(typeVariable, Void.TYPE);\n+        if (resolving == null) {\n+          resolving = typeVariable;\n+        }\n+\n         toResolve = resolveTypeVariable(context, contextRawType, typeVariable);\n         if (toResolve == typeVariable) {\n-          return toResolve;\n+          break;\n         }\n \n       } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {\n         Class<?> original = (Class<?>) toResolve;\n         Type componentType = original.getComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        return componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n+        break;\n \n       } else if (toResolve instanceof GenericArrayType) {\n         GenericArrayType original = (GenericArrayType) toResolve;\n         Type componentType = original.getGenericComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        return componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n+        break;\n \n       } else if (toResolve instanceof ParameterizedType) {\n         ParameterizedType original = (ParameterizedType) toResolve;\n         Type ownerType = original.getOwnerType();\n         Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n-        boolean changed = newOwnerType != ownerType;\n+        boolean changed = !equal(newOwnerType, ownerType);\n \n         Type[] args = original.getActualTypeArguments();\n         for (int t = 0, length = args.length; t < length; t++) {\n           Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);\n-          if (resolvedTypeArgument != args[t]) {\n+          if (!equal(resolvedTypeArgument, args[t])) {\n             if (!changed) {\n               args = args.clone();\n               changed = true;\n@@ -388,9 +402,10 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n           }\n         }\n \n-        return changed\n+        toResolve = changed\n             ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)\n             : original;\n+        break;\n \n       } else if (toResolve instanceof WildcardType) {\n         WildcardType original = (WildcardType) toResolve;\n@@ -400,20 +415,28 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         if (originalLowerBound.length == 1) {\n           Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);\n           if (lowerBound != originalLowerBound[0]) {\n-            return supertypeOf(lowerBound);\n+            toResolve = supertypeOf(lowerBound);\n+            break;\n           }\n         } else if (originalUpperBound.length == 1) {\n           Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);\n           if (upperBound != originalUpperBound[0]) {\n-            return subtypeOf(upperBound);\n+            toResolve = subtypeOf(upperBound);\n+            break;\n           }\n         }\n-        return original;\n+        toResolve = original;\n+        break;\n \n       } else {\n-        return toResolve;\n+        break;\n       }\n     }\n+    // ensure that any in-process resolution gets updated with the final result\n+    if (resolving != null) {\n+      visitedTypeVariables.put(resolving, toResolve);\n+    }\n+    return toResolve;\n   }\n \n   static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {\n",
        "test_patch": "diff --git a/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java b/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java\nnew file mode 100644\nindex 0000000000..e3ddd840e9\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java\n@@ -0,0 +1,54 @@\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * This test covers the scenario described in #1390 where a type variable needs to be used\n+ * by a type definition multiple times.  Both type variable references should resolve to the\n+ * same underlying concrete type.\n+ */\n+public class ReusedTypeVariablesFullyResolveTest {\n+\n+    private Gson gson;\n+\n+    @Before\n+    public void setUp() {\n+        gson = new GsonBuilder().create();\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n+    @Test\n+    public void testGenericsPreservation() {\n+        TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n+        Iterator<TestEnum> iterator = withSet.collection.iterator();\n+        assertNotNull(withSet);\n+        assertNotNull(withSet.collection);\n+        assertEquals(2, withSet.collection.size());\n+        TestEnum first = iterator.next();\n+        TestEnum second = iterator.next();\n+\n+        assertTrue(first instanceof TestEnum);\n+        assertTrue(second instanceof TestEnum);\n+    }\n+\n+    enum TestEnum { ONE, TWO, THREE }\n+\n+    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n+\n+    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n+\n+    private static class BaseCollection<U, C extends Collection<U>>\n+    {\n+        public C collection;\n+    }\n+\n+}\n",
        "problem_statement": "Recursive TypeVariable resolution results in ClassCastException when type var is referenced multiple times\nThe recursive type variable resolution protections put into place in Gson 2.8.2 to fix #1128 does not work if a TypeVariable is referenced multiple times.\r\n\r\nExample failing code:\r\n```\r\n    enum TestEnum { ONE, TWO, THREE }\r\n\r\n    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\r\n\r\n    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\r\n\r\n    private static class BaseCollection<U, C extends Collection<U>>\r\n    {\r\n        public C collection;\r\n    }\r\n```\r\n\r\nWhen used with the following code to unmarshal\r\n```\r\nTestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\r\n```\r\nThe enum values are unmarshaled as `String` instances instead of as `TestEnum` instances, causing `ClassCastException` to be raised at runtime.  This is due to the fact that the `visitedTypeVariables` map receives an entry for `T`, resolves it properly, and then upon subsequent attempt to resolve `T` fails, since the `visitedTypeVariables` set indicates that `T` has already been resolved.\nRecursive TypeVariable resolution results in ClassCastException when type var is referenced multiple times\nThe recursive type variable resolution protections put into place in Gson 2.8.2 to fix #1128 does not work if a TypeVariable is referenced multiple times.\r\n\r\nExample failing code:\r\n```\r\n    enum TestEnum { ONE, TWO, THREE }\r\n\r\n    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\r\n\r\n    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\r\n\r\n    private static class BaseCollection<U, C extends Collection<U>>\r\n    {\r\n        public C collection;\r\n    }\r\n```\r\n\r\nWhen used with the following code to unmarshal\r\n```\r\nTestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\r\n```\r\nThe enum values are unmarshaled as `String` instances instead of as `TestEnum` instances, causing `ClassCastException` to be raised at runtime.  This is due to the fact that the `visitedTypeVariables` map receives an entry for `T`, resolves it properly, and then upon subsequent attempt to resolve `T` fails, since the `visitedTypeVariables` set indicates that `T` has already been resolved.\n",
        "hints_text": "\n",
        "created_at": 1537917181000,
        "FAIL_TO_PASS": [
            "gson:com.google.gson.functional.ReusedTypeVariablesFullyResolveTest"
        ],
        "PASS_TO_PASS": [],
        "version": "0.1",
        "pr_link": "https://github.com/google/gson/pull/1391"
    }
}